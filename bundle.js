/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={213:function(e,t,r){var n,o;void 0===(o="function"==typeof(n=function(){"use strict";function t(e,t,r){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){a(n.response,t,r)},n.onerror=function(){console.error("could not download file")},n.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function o(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(r){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var i="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof r.g&&r.g.global===r.g?r.g:void 0,s=i.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=i.saveAs||("object"!=typeof window||window!==i?function(){}:"download"in HTMLAnchorElement.prototype&&!s?function(e,r,s){var a=i.URL||i.webkitURL,c=document.createElement("a");r=r||e.name||"download",c.download=r,c.rel="noopener","string"==typeof e?(c.href=e,c.origin===location.origin?o(c):n(c.href)?t(e,r,s):o(c,c.target="_blank")):(c.href=a.createObjectURL(e),setTimeout((function(){a.revokeObjectURL(c.href)}),4e4),setTimeout((function(){o(c)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,i){if(r=r||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,i),r);else if(n(e))t(e,r,i);else{var s=document.createElement("a");s.href=e,s.target="_blank",setTimeout((function(){o(s)}))}}:function(e,r,n,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof e)return t(e,r,n);var a="application/octet-stream"===e.type,c=/constructor/i.test(i.HTMLElement)||i.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||a&&c||s)&&"undefined"!=typeof FileReader){var l=new FileReader;l.onloadend=function(){var e=l.result;e=u?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location=e,o=null},l.readAsDataURL(e)}else{var h=i.URL||i.webkitURL,f=h.createObjectURL(e);o?o.location=f:location.href=f,o=null,setTimeout((function(){h.revokeObjectURL(f)}),4e4)}});i.saveAs=a.saveAs=a,e.exports=a})?n.apply(t,[]):n)||(e.exports=o)}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";var e=Object.defineProperty,t=Object.defineProperties,n=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,a=(t,r,n)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[r]=n,c=(e,t)=>{for(var r in t||(t={}))i.call(t,r)&&a(e,r,t[r]);if(o)for(var r of o(t))s.call(t,r)&&a(e,r,t[r]);return e},u=(e,r)=>t(e,n(r)),l=(e,t,r)=>(a(e,"symbol"!=typeof t?t+"":t,r),r),h=(e,t,r)=>new Promise(((n,o)=>{var i=e=>{try{a(r.next(e))}catch(e){o(e)}},s=e=>{try{a(r.throw(e))}catch(e){o(e)}},a=e=>e.done?n(e.value):Promise.resolve(e.value).then(i,s);a((r=r.apply(e,t)).next())}));class f{constructor(e){l(this,"rootKey"),this.rootKey=e}}const p=Object.seal({});class d extends f{constructor(e){super(e),l(this,"root"),this.root=new Array}prepForXml(e){var t;e.stack.push(this);const r=this.root.map((t=>t instanceof f?t.prepForXml(e):t)).filter((e=>void 0!==e));return e.stack.pop(),{[this.rootKey]:r.length?1===r.length&&(null==(t=r[0])?void 0:t._attr)?r[0]:r:p}}addChildElement(e){return this.root.push(e),this}}class m extends d{prepForXml(e){const t=super.prepForXml(e);if(t&&("object"!=typeof t[this.rootKey]||Object.keys(t[this.rootKey]).length))return t}}class w extends f{constructor(e){super("_attr"),l(this,"xmlKeys"),this.root=e}prepForXml(e){const t={};return Object.keys(this.root).forEach((e=>{const r=this.root[e];if(void 0!==r){const n=this.xmlKeys&&this.xmlKeys[e]||e;t[n]=r}})),{_attr:t}}}class g extends f{constructor(e){super("_attr"),this.root=e}prepForXml(e){return{_attr:Object.values(this.root).filter((({value:e})=>void 0!==e)).reduce(((e,{key:t,value:r})=>u(c({},e),{[t]:r})),{})}}}class y extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val",color:"w:color",fill:"w:fill",space:"w:space",sz:"w:sz",type:"w:type",rsidR:"w:rsidR",rsidRPr:"w:rsidRPr",rsidSect:"w:rsidSect",w:"w:w",h:"w:h",top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",linePitch:"w:linePitch",pos:"w:pos"})}}var b="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var x,_={},E={exports:{}},S="object"==typeof Reflect?Reflect:null,k=S&&"function"==typeof S.apply?S.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};x=S&&"function"==typeof S.ownKeys?S.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var T=Number.isNaN||function(e){return e!=e};function A(){A.init.call(this)}E.exports=A,E.exports.once=function(e,t){return new Promise((function(r,n){function o(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),r([].slice.call(arguments))}L(e,t,i,{once:!0}),"error"!==t&&function(e,t){"function"==typeof e.on&&L(e,"error",t,{once:!0})}(e,o)}))},A.EventEmitter=A,A.prototype._events=void 0,A.prototype._eventsCount=0,A.prototype._maxListeners=void 0;var R=10;function C(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function I(e){return void 0===e._maxListeners?A.defaultMaxListeners:e._maxListeners}function O(e,t,r,n){var o,i,s,a;if(C(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),s=i[t]),void 0===s)s=i[t]=r,++e._eventsCount;else if("function"==typeof s?s=i[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(o=I(e))>0&&s.length>o&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function N(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function F(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=N.bind(n);return o.listener=r,n.wrapFn=o,o}function P(e,t,r){var n=e._events;if(void 0===n)return[];var o=n[t];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(o):D(o,o.length)}function B(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function D(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function L(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){n.once&&e.removeEventListener(t,o),r(i)}))}}Object.defineProperty(A,"defaultMaxListeners",{enumerable:!0,get:function(){return R},set:function(e){if("number"!=typeof e||e<0||T(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");R=e}}),A.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},A.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||T(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},A.prototype.getMaxListeners=function(){return I(this)},A.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,o=this._events;if(void 0!==o)n=n&&void 0===o.error;else if(!n)return!1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var a=o[e];if(void 0===a)return!1;if("function"==typeof a)k(a,this,t);else{var c=a.length,u=D(a,c);for(r=0;r<c;++r)k(u[r],this,t)}return!0},A.prototype.addListener=function(e,t){return O(this,e,t,!1)},A.prototype.on=A.prototype.addListener,A.prototype.prependListener=function(e,t){return O(this,e,t,!0)},A.prototype.once=function(e,t){return C(t),this.on(e,F(this,e,t)),this},A.prototype.prependOnceListener=function(e,t){return C(t),this.prependListener(e,F(this,e,t)),this},A.prototype.removeListener=function(e,t){var r,n,o,i,s;if(C(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){s=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,o),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},A.prototype.off=A.prototype.removeListener,A.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},A.prototype.listeners=function(e){return P(this,e,!0)},A.prototype.rawListeners=function(e){return P(this,e,!1)},A.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):B.call(e,t)},A.prototype.listenerCount=B,A.prototype.eventNames=function(){return this._eventsCount>0?x(this._events):[]};var U=E.exports,j={exports:{}};"function"==typeof Object.create?j.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:j.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}};var M=j.exports;function z(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var W,H,K={exports:{}},G=K.exports={};function V(){throw new Error("setTimeout has not been defined")}function q(){throw new Error("clearTimeout has not been defined")}function Z(e){if(W===setTimeout)return setTimeout(e,0);if((W===V||!W)&&setTimeout)return W=setTimeout,setTimeout(e,0);try{return W(e,0)}catch(t){try{return W.call(null,e,0)}catch(t){return W.call(this,e,0)}}}!function(){try{W="function"==typeof setTimeout?setTimeout:V}catch(e){W=V}try{H="function"==typeof clearTimeout?clearTimeout:q}catch(e){H=q}}();var X,Y=[],$=!1,J=-1;function Q(){$&&X&&($=!1,X.length?Y=X.concat(Y):J=-1,Y.length&&ee())}function ee(){if(!$){var e=Z(Q);$=!0;for(var t=Y.length;t;){for(X=Y,Y=[];++J<t;)X&&X[J].run();J=-1,t=Y.length}X=null,$=!1,function(e){if(H===clearTimeout)return clearTimeout(e);if((H===q||!H)&&clearTimeout)return H=clearTimeout,clearTimeout(e);try{return H(e)}catch(t){try{return H.call(null,e)}catch(t){return H.call(this,e)}}}(e)}}function te(e,t){this.fun=e,this.array=t}function re(){}G.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];Y.push(new te(e,t)),1!==Y.length||$||Z(ee)},te.prototype.run=function(){this.fun.apply(null,this.array)},G.title="browser",G.browser=!0,G.env={},G.argv=[],G.version="",G.versions={},G.on=re,G.addListener=re,G.once=re,G.off=re,G.removeListener=re,G.removeAllListeners=re,G.emit=re,G.prependListener=re,G.prependOnceListener=re,G.listeners=function(e){return[]},G.binding=function(e){throw new Error("process.binding is not supported")},G.cwd=function(){return"/"},G.chdir=function(e){throw new Error("process.chdir is not supported")},G.umask=function(){return 0};const ne=z(K.exports);var oe,ie;function se(){return ie?oe:(ie=1,oe=U.EventEmitter)}var ae,ce,ue,le={},he={},fe={};function pe(){return ue||(ue=1,function(e){var t=function(){if(ae)return he;ae=1,he.byteLength=function(e){var t=i(e),r=t[0],n=t[1];return 3*(r+n)/4-n},he.toByteArray=function(e){var n,o,s=i(e),a=s[0],c=s[1],u=new r(function(e,t,r){return 3*(t+r)/4-r}(0,a,c)),l=0,h=c>0?a-4:a;for(o=0;o<h;o+=4)n=t[e.charCodeAt(o)]<<18|t[e.charCodeAt(o+1)]<<12|t[e.charCodeAt(o+2)]<<6|t[e.charCodeAt(o+3)],u[l++]=n>>16&255,u[l++]=n>>8&255,u[l++]=255&n;return 2===c&&(n=t[e.charCodeAt(o)]<<2|t[e.charCodeAt(o+1)]>>4,u[l++]=255&n),1===c&&(n=t[e.charCodeAt(o)]<<10|t[e.charCodeAt(o+1)]<<4|t[e.charCodeAt(o+2)]>>2,u[l++]=n>>8&255,u[l++]=255&n),u},he.fromByteArray=function(t){for(var r,n=t.length,o=n%3,i=[],a=16383,c=0,u=n-o;c<u;c+=a)i.push(s(t,c,c+a>u?u:c+a));return 1===o?(r=t[n-1],i.push(e[r>>2]+e[r<<4&63]+"==")):2===o&&(r=(t[n-2]<<8)+t[n-1],i.push(e[r>>10]+e[r>>4&63]+e[r<<2&63]+"=")),i.join("")};for(var e=[],t=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0;o<64;++o)e[o]=n[o],t[n.charCodeAt(o)]=o;function i(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function s(t,r,n){for(var o,i,s=[],a=r;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(e[(i=o)>>18&63]+e[i>>12&63]+e[i>>6&63]+e[63&i]);return s.join("")}return t["-".charCodeAt(0)]=62,t["_".charCodeAt(0)]=63,he}(),r=(ce||(ce=1,fe.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,c=(1<<a)-1,u=c>>1,l=-7,h=r?o-1:0,f=r?-1:1,p=e[t+h];for(h+=f,i=p&(1<<-l)-1,p>>=-l,l+=a;l>0;i=256*i+e[t+h],h+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=u}return(p?-1:1)*s*Math.pow(2,i-n)},fe.write=function(e,t,r,n,o,i){var s,a,c,u=8*i-o-1,l=(1<<u)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?f/c:f*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,o),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;e[r+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;e[r+p]=255&s,p+=d,s/=256,u-=8);e[r+p-d]|=128*m}),fe),n="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=s,e.SlowBuffer=function(e){return+e!=e&&(e=0),s.alloc(+e)},e.INSPECT_MAX_BYTES=50;var o=2147483647;function i(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,s.prototype),t}function s(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return u(e)}return a(e,t,r)}function a(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!s.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|p(e,t),n=i(r),o=n.write(e,t);return o!==r&&(n=n.slice(0,o)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(j(e,Uint8Array)){var t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return l(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(j(e,ArrayBuffer)||e&&j(e.buffer,ArrayBuffer))return h(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(j(e,SharedArrayBuffer)||e&&j(e.buffer,SharedArrayBuffer)))return h(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return s.from(n,t,r);var o=function(e){if(s.isBuffer(e)){var t=0|f(e.length),r=i(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||M(e.length)?i(0):l(e):"Buffer"===e.type&&Array.isArray(e.data)?l(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return s.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function u(e){return c(e),i(e<0?0:0|f(e))}function l(e){for(var t=e.length<0?0:0|f(e.length),r=i(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function h(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,s.prototype),n}function f(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function p(e,t){if(s.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||j(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return D(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return L(e).length;default:if(o)return n?-1:D(e).length;t=(""+t).toLowerCase(),o=!0}}function d(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,r);case"utf8":case"utf-8":return S(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return A(this,t,r);case"base64":return E(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function m(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function w(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),M(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=s.from(t,n)),s.isBuffer(t))return 0===t.length?-1:g(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):g(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,r,n,o){var i,s=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=r;i<a;i++)if(u(e,i)===u(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===c)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){for(var h=!0,f=0;f<c;f++)if(u(e,i+f)!==u(t,f)){h=!1;break}if(h)return i}return-1}function y(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(M(a))return s;e[r+s]=a}return s}function b(e,t,r,n){return U(D(t,e.length-r),e,r,n)}function v(e,t,r,n){return U(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return U(L(t),e,r,n)}function _(e,t,r,n){return U(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=(r=e.charCodeAt(s))>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function E(e,r,n){return 0===r&&n===e.length?t.fromByteArray(e):t.fromByteArray(e.slice(r,n))}function S(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,c,u=e[o],l=null,h=u>239?4:u>223?3:u>191?2:1;if(o+h<=r)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(i=e[o+1]))&&(c=(31&u)<<6|63&i)>127&&(l=c);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),o+=h}return function(e){var t=e.length;if(t<=k)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=k));return r}(n)}e.kMaxLength=o,s.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),s.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(s.prototype,"parent",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.buffer}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.byteOffset}}),s.poolSize=8192,s.from=function(e,t,r){return a(e,t,r)},Object.setPrototypeOf(s.prototype,Uint8Array.prototype),Object.setPrototypeOf(s,Uint8Array),s.alloc=function(e,t,r){return function(e,t,r){return c(e),e<=0?i(e):void 0!==t?"string"==typeof r?i(e).fill(t,r):i(e).fill(t):i(e)}(e,t,r)},s.allocUnsafe=function(e){return u(e)},s.allocUnsafeSlow=function(e){return u(e)},s.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==s.prototype},s.compare=function(e,t){if(j(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),j(t,Uint8Array)&&(t=s.from(t,t.offset,t.byteLength)),!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=s.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(j(i,Uint8Array))o+i.length>n.length?s.from(i).copy(n,o):Uint8Array.prototype.set.call(n,i,o);else{if(!s.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o)}o+=i.length}return n},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},s.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?S(this,0,e):d.apply(this,arguments)},s.prototype.toLocaleString=s.prototype.toString,s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},n&&(s.prototype[n]=s.prototype.inspect),s.prototype.compare=function(e,t,r,n,o){if(j(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),!s.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),c=Math.min(i,a),u=this.slice(n,o),l=e.slice(t,r),h=0;h<c;++h)if(u[h]!==l[h]){i=u[h],a=l[h];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},s.prototype.indexOf=function(e,t,r){return w(this,e,t,r,!0)},s.prototype.lastIndexOf=function(e,t,r){return w(this,e,t,r,!1)},s.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return b(this,e,t,r);case"ascii":case"latin1":case"binary":return v(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function A(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function R(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=z[e[i]];return o}function C(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length-1;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,r,n,o,i){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function F(e,t,n,o,i){return t=+t,n>>>=0,i||N(e,0,n,4),r.write(e,t,n,o,23,4),n+4}function P(e,t,n,o,i){return t=+t,n>>>=0,i||N(e,0,n,8),r.write(e,t,n,o,52,8),n+8}s.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return Object.setPrototypeOf(n,s.prototype),n},s.prototype.readUintLE=s.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},s.prototype.readUintBE=s.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},s.prototype.readUint8=s.prototype.readUInt8=function(e,t){return e>>>=0,t||I(e,1,this.length),this[e]},s.prototype.readUint16LE=s.prototype.readUInt16LE=function(e,t){return e>>>=0,t||I(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUint16BE=s.prototype.readUInt16BE=function(e,t){return e>>>=0,t||I(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUint32LE=s.prototype.readUInt32LE=function(e,t){return e>>>=0,t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUint32BE=s.prototype.readUInt32BE=function(e,t){return e>>>=0,t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},s.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},s.prototype.readInt8=function(e,t){return e>>>=0,t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){e>>>=0,t||I(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(e,t){e>>>=0,t||I(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(e,t){return e>>>=0,t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return e>>>=0,t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return e>>>=0,t||I(e,4,this.length),r.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return e>>>=0,t||I(e,4,this.length),r.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return e>>>=0,t||I(e,8,this.length),r.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return e>>>=0,t||I(e,8,this.length),r.read(this,e,!1,52,8)},s.prototype.writeUintLE=s.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||O(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},s.prototype.writeUintBE=s.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||O(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},s.prototype.writeUint8=s.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,1,255,0),this[t]=255&e,t+1},s.prototype.writeUint16LE=s.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeUint16BE=s.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeUint32LE=s.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},s.prototype.writeUint32BE=s.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);O(this,e,t,r,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s|0)-a&255;return t+r},s.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);O(this,e,t,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s|0)-a&255;return t+r},s.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},s.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeFloatLE=function(e,t,r){return F(this,e,t,!0,r)},s.prototype.writeFloatBE=function(e,t,r){return F(this,e,t,!1,r)},s.prototype.writeDoubleLE=function(e,t,r){return P(this,e,t,!0,r)},s.prototype.writeDoubleBE=function(e,t,r){return P(this,e,t,!1,r)},s.prototype.copy=function(e,t,r,n){if(!s.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},s.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var o=e.charCodeAt(0);("utf8"===n&&o<128||"latin1"===n)&&(e=o)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var a=s.isBuffer(e)?e:s.from(e,n),c=a.length;if(0===c)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=a[i%c]}return this};var B=/[^+/0-9A-Za-z-_]/g;function D(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function L(e){return t.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function j(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function M(e){return e!=e}var z=function(){for(var e="0123456789abcdef",t=new Array(256),r=0;r<16;++r)for(var n=16*r,o=0;o<16;++o)t[n+o]=e[r]+e[o];return t}()}(le)),le}var de,me,we,ge,ye,be,ve,xe,_e,Ee,Se,ke,Te,Ae,Re,Ce,Ie={},Oe={};function Ne(){return me?de:(me=1,de=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),r=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var n=Object.getOwnPropertySymbols(e);if(1!==n.length||n[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0})}function Fe(){if(ge)return we;ge=1;var e=Ne();return we=function(){return e()&&!!Symbol.toStringTag}}function Pe(){if(ke)return Se;ke=1;var e=function(){if(Ee)return _e;Ee=1;var e=Object.prototype.toString,t=Math.max,r=function(e,t){for(var r=[],n=0;n<e.length;n+=1)r[n]=e[n];for(var o=0;o<t.length;o+=1)r[o+e.length]=t[o];return r};return _e=function(n){var o=this;if("function"!=typeof o||"[object Function]"!==e.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var i,s=function(e){for(var t=[],r=1,n=0;r<e.length;r+=1,n+=1)t[n]=e[r];return t}(arguments),a=t(0,o.length-s.length),c=[],u=0;u<a;u++)c[u]="$"+u;if(i=Function("binder","return function ("+function(e){for(var t="",r=0;r<e.length;r+=1)t+=e[r],r+1<e.length&&(t+=",");return t}(c)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var e=o.apply(this,r(s,arguments));return Object(e)===e?e:this}return o.apply(n,r(s,arguments))})),o.prototype){var l=function(){};l.prototype=o.prototype,i.prototype=new l,l.prototype=null}return i},_e}();return Se=Function.prototype.bind||e}function Be(){if(Ce)return Re;var e;Ce=1;var t=SyntaxError,r=Function,n=TypeError,o=function(e){try{return r('"use strict"; return ('+e+").constructor;")()}catch(e){}},i=Object.getOwnPropertyDescriptor;if(i)try{i({},"")}catch(e){i=null}var s=function(){throw new n},a=i?function(){try{return s}catch(e){try{return i(arguments,"callee").get}catch(e){return s}}}():s,c=function(){if(be)return ye;be=1;var e="undefined"!=typeof Symbol&&Symbol,t=Ne();return ye=function(){return"function"==typeof e&&"function"==typeof Symbol&&"symbol"==typeof e("foo")&&"symbol"==typeof Symbol("bar")&&t()}}()(),u=function(){if(xe)return ve;xe=1;var e={foo:{}},t=Object;return ve=function(){return{__proto__:e}.foo===e.foo&&!({__proto__:null}instanceof t)}}()(),l=Object.getPrototypeOf||(u?function(e){return e.__proto__}:null),h={},f="undefined"!=typeof Uint8Array&&l?l(Uint8Array):e,p={"%AggregateError%":"undefined"==typeof AggregateError?e:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?e:ArrayBuffer,"%ArrayIteratorPrototype%":c&&l?l([][Symbol.iterator]()):e,"%AsyncFromSyncIteratorPrototype%":e,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?e:Atomics,"%BigInt%":"undefined"==typeof BigInt?e:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?e:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?e:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?e:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?e:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?e:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?e:FinalizationRegistry,"%Function%":r,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?e:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?e:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?e:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":c&&l?l(l([][Symbol.iterator]())):e,"%JSON%":"object"==typeof JSON?JSON:e,"%Map%":"undefined"==typeof Map?e:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&c&&l?l((new Map)[Symbol.iterator]()):e,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?e:Promise,"%Proxy%":"undefined"==typeof Proxy?e:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?e:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?e:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&c&&l?l((new Set)[Symbol.iterator]()):e,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?e:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":c&&l?l(""[Symbol.iterator]()):e,"%Symbol%":c?Symbol:e,"%SyntaxError%":t,"%ThrowTypeError%":a,"%TypedArray%":f,"%TypeError%":n,"%Uint8Array%":"undefined"==typeof Uint8Array?e:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?e:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?e:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?e:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?e:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?e:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?e:WeakSet};if(l)try{null.error}catch(e){var d=l(l(e));p["%Error.prototype%"]=d}var m=function e(t){var r;if("%AsyncFunction%"===t)r=o("async function () {}");else if("%GeneratorFunction%"===t)r=o("function* () {}");else if("%AsyncGeneratorFunction%"===t)r=o("async function* () {}");else if("%AsyncGenerator%"===t){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&l&&(r=l(i.prototype))}return p[t]=r,r},w={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},g=Pe(),y=function(){if(Ae)return Te;Ae=1;var e=Function.prototype.call,t=Object.prototype.hasOwnProperty,r=Pe();return Te=r.call(e,t)}(),b=g.call(Function.call,Array.prototype.concat),v=g.call(Function.apply,Array.prototype.splice),x=g.call(Function.call,String.prototype.replace),_=g.call(Function.call,String.prototype.slice),E=g.call(Function.call,RegExp.prototype.exec),S=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,k=/\\(\\)?/g,T=function(e,r){var o,i=e;if(y(w,i)&&(i="%"+(o=w[i])[0]+"%"),y(p,i)){var s=p[i];if(s===h&&(s=m(i)),void 0===s&&!r)throw new n("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:o,name:i,value:s}}throw new t("intrinsic "+e+" does not exist!")};return Re=function(e,r){if("string"!=typeof e||0===e.length)throw new n("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof r)throw new n('"allowMissing" argument must be a boolean');if(null===E(/^%?[^%]*%?$/,e))throw new t("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var o=function(e){var r=_(e,0,1),n=_(e,-1);if("%"===r&&"%"!==n)throw new t("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==r)throw new t("invalid intrinsic syntax, expected opening `%`");var o=[];return x(e,S,(function(e,t,r,n){o[o.length]=r?x(n,k,"$1"):t||e})),o}(e),s=o.length>0?o[0]:"",a=T("%"+s+"%",r),c=a.name,u=a.value,l=!1,h=a.alias;h&&(s=h[0],v(o,b([0,1],h)));for(var f=1,d=!0;f<o.length;f+=1){var m=o[f],w=_(m,0,1),g=_(m,-1);if(('"'===w||"'"===w||"`"===w||'"'===g||"'"===g||"`"===g)&&w!==g)throw new t("property names with quotes must have matching quotes");if("constructor"!==m&&d||(l=!0),y(p,c="%"+(s+="."+m)+"%"))u=p[c];else if(null!=u){if(!(m in u)){if(!r)throw new n("base intrinsic for "+e+" exists, but the property is not available.");return}if(i&&f+1>=o.length){var A=i(u,m);u=(d=!!A)&&"get"in A&&!("originalValue"in A.get)?A.get:u[m]}else d=y(u,m),u=u[m];d&&!l&&(p[c]=u)}}return u},Re}var De,Le,Ue,je,Me,ze,We,He,Ke,Ge,Ve,qe,Ze,Xe,Ye,$e,Je,Qe,et,tt,rt,nt,ot,it,st,at,ct,ut,lt,ht,ft,pt,dt,mt={exports:{}};function wt(){if(Le)return De;Le=1;var e=Be()("%Object.defineProperty%",!0),t=function(){if(e)try{return e({},"a",{value:1}),!0}catch(e){return!1}return!1};return t.hasArrayLengthDefineBug=function(){if(!t())return null;try{return 1!==e([],"length",{value:1}).length}catch(e){return!0}},De=t}function gt(){if(je)return Ue;je=1;var e=Be()("%Object.getOwnPropertyDescriptor%",!0);if(e)try{e([],"length")}catch(t){e=null}return Ue=e}function yt(){return Ke||(Ke=1,function(e){var t=Pe(),r=Be(),n=function(){if(He)return We;He=1;var e=Be(),t=function(){if(ze)return Me;ze=1;var e=wt()(),t=Be(),r=e&&t("%Object.defineProperty%",!0);if(r)try{r({},"a",{value:1})}catch(e){r=!1}var n=t("%SyntaxError%"),o=t("%TypeError%"),i=gt();return Me=function(e,t,s){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new o("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new o("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new o("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new o("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new o("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new o("`loose`, if provided, must be a boolean");var a=arguments.length>3?arguments[3]:null,c=arguments.length>4?arguments[4]:null,u=arguments.length>5?arguments[5]:null,l=arguments.length>6&&arguments[6],h=!!i&&i(e,t);if(r)r(e,t,{configurable:null===u&&h?h.configurable:!u,enumerable:null===a&&h?h.enumerable:!a,value:s,writable:null===c&&h?h.writable:!c});else{if(!l&&(a||c||u))throw new n("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=s}},Me}(),r=wt()(),n=gt(),o=e("%TypeError%"),i=e("%Math.floor%");return We=function(e,s){if("function"!=typeof e)throw new o("`fn` is not a function");if("number"!=typeof s||s<0||s>4294967295||i(s)!==s)throw new o("`length` must be a positive 32-bit integer");var a=arguments.length>2&&!!arguments[2],c=!0,u=!0;if("length"in e&&n){var l=n(e,"length");l&&!l.configurable&&(c=!1),l&&!l.writable&&(u=!1)}return(c||u||!a)&&(r?t(e,"length",s,!0,!0):t(e,"length",s)),e},We}(),o=r("%TypeError%"),i=r("%Function.prototype.apply%"),s=r("%Function.prototype.call%"),a=r("%Reflect.apply%",!0)||t.call(s,i),c=r("%Object.defineProperty%",!0),u=r("%Math.max%");if(c)try{c({},"a",{value:1})}catch(e){c=null}e.exports=function(e){if("function"!=typeof e)throw new o("a function is required");var r=a(t,s,arguments);return n(r,1+u(0,e.length-(arguments.length-1)),!0)};var l=function(){return a(t,i,arguments)};c?c(e.exports,"apply",{value:l}):e.exports.apply=l}(mt)),mt.exports}function bt(){if(Ve)return Ge;Ve=1;var e=Be(),t=yt(),r=t(e("String.prototype.indexOf"));return Ge=function(n,o){var i=e(n,!!o);return"function"==typeof i&&r(n,".prototype.")>-1?t(i):i}}function vt(){if(ot)return nt;ot=1;var e=function(){if(et)return Qe;et=1;var e=function(){if(Je)return $e;Je=1;var e,t,r=Function.prototype.toString,n="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof n&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw t}}),t={},n((function(){throw 42}),null,e)}catch(e){e!==t&&(n=null)}else n=null;var o=/^\s*class\b/,i=function(e){try{var t=r.call(e);return o.test(t)}catch(e){return!1}},s=function(e){try{return!i(e)&&(r.call(e),!0)}catch(e){return!1}},a=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,u=!(0 in[,]),l=function(){return!1};if("object"==typeof document){var h=document.all;a.call(h)===a.call(document.all)&&(l=function(e){if((u||!e)&&(void 0===e||"object"==typeof e))try{var t=a.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}return $e=n?function(r){if(l(r))return!0;if(!r)return!1;if("function"!=typeof r&&"object"!=typeof r)return!1;try{n(r,null,e)}catch(e){if(e!==t)return!1}return!i(r)&&s(r)}:function(e){if(l(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(c)return s(e);if(i(e))return!1;var t=a.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&s(e)}}(),t=Object.prototype.toString,r=Object.prototype.hasOwnProperty;return Qe=function(n,o,i){if(!e(o))throw new TypeError("iterator must be a function");var s;arguments.length>=3&&(s=i),"[object Array]"===t.call(n)?function(e,t,n){for(var o=0,i=e.length;o<i;o++)r.call(e,o)&&(null==n?t(e[o],o,e):t.call(n,e[o],o,e))}(n,o,s):"string"==typeof n?function(e,t,r){for(var n=0,o=e.length;n<o;n++)null==r?t(e.charAt(n),n,e):t.call(r,e.charAt(n),n,e)}(n,o,s):function(e,t,n){for(var o in e)r.call(e,o)&&(null==n?t(e[o],o,e):t.call(n,e[o],o,e))}(n,o,s)},Qe}(),t=function(){if(rt)return tt;rt=1;var e=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],t="undefined"==typeof globalThis?b:globalThis;return tt=function(){for(var r=[],n=0;n<e.length;n++)"function"==typeof t[e[n]]&&(r[r.length]=e[n]);return r}}(),r=yt(),n=bt(),o=gt(),i=n("Object.prototype.toString"),s=Fe()(),a="undefined"==typeof globalThis?b:globalThis,c=t(),u=n("String.prototype.slice"),l=Object.getPrototypeOf,h=n("Array.prototype.indexOf",!0)||function(e,t){for(var r=0;r<e.length;r+=1)if(e[r]===t)return r;return-1},f={__proto__:null};return e(c,s&&o&&l?function(e){var t=new a[e];if(Symbol.toStringTag in t){var n=l(t),i=o(n,Symbol.toStringTag);if(!i){var s=l(n);i=o(s,Symbol.toStringTag)}f["$"+e]=r(i.get)}}:function(e){var t=new a[e],n=t.slice||t.set;n&&(f["$"+e]=r(n))}),nt=function(t){if(!t||"object"!=typeof t)return!1;if(!s){var r=u(i(t),8,-1);return h(c,r)>-1?r:"Object"===r&&function(t){var r=!1;return e(f,(function(e,n){if(!r)try{e(t),r=u(n,1)}catch(e){}})),r}(t)}return o?function(t){var r=!1;return e(f,(function(e,n){if(!r)try{"$"+e(t)===n&&(r=u(n,1))}catch(e){}})),r}(t):null}}function xt(){return at||(at=1,function(e){var t=function(){if(Ze)return qe;Ze=1;var e=Fe()(),t=bt()("Object.prototype.toString"),r=function(r){return!(e&&r&&"object"==typeof r&&Symbol.toStringTag in r)&&"[object Arguments]"===t(r)},n=function(e){return!!r(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==t(e)&&"[object Function]"===t(e.callee)},o=function(){return r(arguments)}();return r.isLegacyArguments=n,qe=o?r:n}(),r=function(){if(Ye)return Xe;Ye=1;var e,t=Object.prototype.toString,r=Function.prototype.toString,n=/^\s*(?:function)?\*/,o=Fe()(),i=Object.getPrototypeOf;return Xe=function(s){if("function"!=typeof s)return!1;if(n.test(r.call(s)))return!0;if(!o)return"[object GeneratorFunction]"===t.call(s);if(!i)return!1;if(void 0===e){var a=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(e){}}();e=!!a&&i(a)}return i(s)===e}}(),n=vt(),o=function(){if(st)return it;st=1;var e=vt();return it=function(t){return!!e(t)}}();function i(e){return e.call.bind(e)}var s="undefined"!=typeof BigInt,a="undefined"!=typeof Symbol,c=i(Object.prototype.toString),u=i(Number.prototype.valueOf),l=i(String.prototype.valueOf),h=i(Boolean.prototype.valueOf);if(s)var f=i(BigInt.prototype.valueOf);if(a)var p=i(Symbol.prototype.valueOf);function d(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function m(e){return"[object Map]"===c(e)}function w(e){return"[object Set]"===c(e)}function g(e){return"[object WeakMap]"===c(e)}function y(e){return"[object WeakSet]"===c(e)}function b(e){return"[object ArrayBuffer]"===c(e)}function v(e){return"undefined"!=typeof ArrayBuffer&&(b.working?b(e):e instanceof ArrayBuffer)}function x(e){return"[object DataView]"===c(e)}function _(e){return"undefined"!=typeof DataView&&(x.working?x(e):e instanceof DataView)}e.isArgumentsObject=t,e.isGeneratorFunction=r,e.isTypedArray=o,e.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},e.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):o(e)||_(e)},e.isUint8Array=function(e){return"Uint8Array"===n(e)},e.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===n(e)},e.isUint16Array=function(e){return"Uint16Array"===n(e)},e.isUint32Array=function(e){return"Uint32Array"===n(e)},e.isInt8Array=function(e){return"Int8Array"===n(e)},e.isInt16Array=function(e){return"Int16Array"===n(e)},e.isInt32Array=function(e){return"Int32Array"===n(e)},e.isFloat32Array=function(e){return"Float32Array"===n(e)},e.isFloat64Array=function(e){return"Float64Array"===n(e)},e.isBigInt64Array=function(e){return"BigInt64Array"===n(e)},e.isBigUint64Array=function(e){return"BigUint64Array"===n(e)},m.working="undefined"!=typeof Map&&m(new Map),e.isMap=function(e){return"undefined"!=typeof Map&&(m.working?m(e):e instanceof Map)},w.working="undefined"!=typeof Set&&w(new Set),e.isSet=function(e){return"undefined"!=typeof Set&&(w.working?w(e):e instanceof Set)},g.working="undefined"!=typeof WeakMap&&g(new WeakMap),e.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(g.working?g(e):e instanceof WeakMap)},y.working="undefined"!=typeof WeakSet&&y(new WeakSet),e.isWeakSet=function(e){return y(e)},b.working="undefined"!=typeof ArrayBuffer&&b(new ArrayBuffer),e.isArrayBuffer=v,x.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&x(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=_;var E="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function S(e){return"[object SharedArrayBuffer]"===c(e)}function k(e){return void 0!==E&&(void 0===S.working&&(S.working=S(new E)),S.working?S(e):e instanceof E)}function T(e){return d(e,u)}function A(e){return d(e,l)}function R(e){return d(e,h)}function C(e){return s&&d(e,f)}function I(e){return a&&d(e,p)}e.isSharedArrayBuffer=k,e.isAsyncFunction=function(e){return"[object AsyncFunction]"===c(e)},e.isMapIterator=function(e){return"[object Map Iterator]"===c(e)},e.isSetIterator=function(e){return"[object Set Iterator]"===c(e)},e.isGeneratorObject=function(e){return"[object Generator]"===c(e)},e.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===c(e)},e.isNumberObject=T,e.isStringObject=A,e.isBooleanObject=R,e.isBigIntObject=C,e.isSymbolObject=I,e.isBoxedPrimitive=function(e){return T(e)||A(e)||R(e)||C(e)||I(e)},e.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(v(e)||k(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))}(Oe)),Oe}function _t(){return lt||(lt=1,function(e){var t=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},r=/%[sdj%]/g;e.format=function(e){if(!w(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(s(arguments[n]));return t.join(" ")}n=1;for(var o=arguments,i=o.length,a=String(e).replace(r,(function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(o[n++]);case"%d":return Number(o[n++]);case"%j":try{return JSON.stringify(o[n++])}catch(e){return"[Circular]"}default:return e}})),c=o[n];n<i;c=o[++n])d(c)||!b(c)?a+=" "+c:a+=" "+s(c);return a},e.deprecate=function(t,r){if(void 0!==ne&&!0===ne.noDeprecation)return t;if(void 0===ne)return function(){return e.deprecate(t,r).apply(this,arguments)};var n=!1;return function(){if(!n){if(ne.throwDeprecation)throw new Error(r);ne.traceDeprecation?console.trace(r):console.error(r),n=!0}return t.apply(this,arguments)}};var n={},o=/^$/;if(ne.env.NODE_DEBUG){var i=ne.env.NODE_DEBUG;i=i.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),o=new RegExp("^"+i+"$","i")}function s(t,r){var n={seen:[],stylize:c};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(r)?n.showHidden=r:r&&e._extend(n,r),g(n.showHidden)&&(n.showHidden=!1),g(n.depth)&&(n.depth=2),g(n.colors)&&(n.colors=!1),g(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=a),u(n,t,n.depth)}function a(e,t){var r=s.styles[t];return r?"["+s.colors[r][0]+"m"+e+"["+s.colors[r][1]+"m":e}function c(e,t){return e}function u(t,r,n){if(t.customInspect&&r&&_(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return w(o)||(o=u(t,o,n)),o}var i=function(e,t){if(g(t))return e.stylize("undefined","undefined");if(w(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return m(t)?e.stylize(""+t,"number"):p(t)?e.stylize(""+t,"boolean"):d(t)?e.stylize("null","null"):void 0}(t,r);if(i)return i;var s=Object.keys(r),a=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(r)),x(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return l(r);if(0===s.length){if(_(r)){var c=r.name?": "+r.name:"";return t.stylize("[Function"+c+"]","special")}if(y(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(v(r))return t.stylize(Date.prototype.toString.call(r),"date");if(x(r))return l(r)}var b,E="",S=!1,k=["{","}"];return f(r)&&(S=!0,k=["[","]"]),_(r)&&(E=" [Function"+(r.name?": "+r.name:"")+"]"),y(r)&&(E=" "+RegExp.prototype.toString.call(r)),v(r)&&(E=" "+Date.prototype.toUTCString.call(r)),x(r)&&(E=" "+l(r)),0!==s.length||S&&0!=r.length?n<0?y(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),b=S?function(e,t,r,n,o){for(var i=[],s=0,a=t.length;s<a;++s)T(t,String(s))?i.push(h(e,t,r,n,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(h(e,t,r,n,o,!0))})),i}(t,r,n,a,s):s.map((function(e){return h(t,r,n,a,e,S)})),t.seen.pop(),function(e,t,r){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(b,E,k)):k[0]+E+k[1]}function l(e){return"["+Error.prototype.toString.call(e)+"]"}function h(e,t,r,n,o,i){var s,a,c;if((c=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),T(n,o)||(s="["+o+"]"),a||(e.seen.indexOf(c.value)<0?(a=d(r)?u(e,c.value,null):u(e,c.value,r-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),g(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.slice(1,-1),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function f(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function d(e){return null===e}function m(e){return"number"==typeof e}function w(e){return"string"==typeof e}function g(e){return void 0===e}function y(e){return b(e)&&"[object RegExp]"===E(e)}function b(e){return"object"==typeof e&&null!==e}function v(e){return b(e)&&"[object Date]"===E(e)}function x(e){return b(e)&&("[object Error]"===E(e)||e instanceof Error)}function _(e){return"function"==typeof e}function E(e){return Object.prototype.toString.call(e)}function S(e){return e<10?"0"+e.toString(10):e.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!n[t])if(o.test(t)){var r=ne.pid;n[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else n[t]=function(){};return n[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=xt(),e.isArray=f,e.isBoolean=p,e.isNull=d,e.isNullOrUndefined=function(e){return null==e},e.isNumber=m,e.isString=w,e.isSymbol=function(e){return"symbol"==typeof e},e.isUndefined=g,e.isRegExp=y,e.types.isRegExp=y,e.isObject=b,e.isDate=v,e.types.isDate=v,e.isError=x,e.types.isNativeError=x,e.isFunction=_,e.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},e.isBuffer=ut?ct:(ut=1,ct=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8});var k=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.log=function(){var t,r;console.log("%s - %s",(r=[S((t=new Date).getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":"),[t.getDate(),k[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=M,e._extend=function(e,t){if(!t||!b(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var A="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function R(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}e.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(A&&e[A]){var r;if("function"!=typeof(r=e[A]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(r,A,{value:r,enumerable:!1,writable:!1,configurable:!0}),r}function r(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,o)}catch(e){r(e)}return n}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),A&&Object.defineProperty(r,A,{value:r,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(r,t(e))},e.promisify.custom=A,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function r(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var n=t.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var o=this,i=function(){return n.apply(o,arguments)};e.apply(this,t).then((function(e){ne.nextTick(i.bind(null,null,e))}),(function(e){ne.nextTick(R.bind(null,e,i))}))}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),Object.defineProperties(r,t(e)),r}}(Ie)),Ie}function Et(){if(dt)return pt;function e(e,n){r(e,n),t(e)}function t(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function r(e,t){e.emit("error",t)}return dt=1,pt={destroy:function(n,o){var i=this,s=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return s||a?(o?o(n):n&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,ne.nextTick(r,this,n)):ne.nextTick(r,this,n)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(n||null,(function(r){!o&&r?i._writableState?i._writableState.errorEmitted?ne.nextTick(t,i):(i._writableState.errorEmitted=!0,ne.nextTick(e,i,r)):ne.nextTick(e,i,r):o?(ne.nextTick(t,i),o(r)):ne.nextTick(t,i)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}}var St,kt,Tt,At,Rt,Ct,It,Ot,Nt,Ft={};function Pt(){if(St)return Ft;St=1;var e={};function t(t,r,n){n||(n=Error);var o=function(e){var t,n;function o(t,n,o){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,o))||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o}(n);o.prototype.name=n.name,o.prototype.code=t,e[t]=o}function r(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}return t("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),t("ERR_INVALID_ARG_TYPE",(function(e,t,n){var o,i,s,a,c;if("string"==typeof t&&(i="not ",t.substr(0,4)===i)?(o="must not be",t=t.replace(/^not /,"")):o="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-9,r)===t}(e," argument"))s="The ".concat(e," ").concat(o," ").concat(r(t,"type"));else{var u=("number"!=typeof c&&(c=0),c+1>(a=e).length||-1===a.indexOf(".",c)?"argument":"property");s='The "'.concat(e,'" ').concat(u," ").concat(o," ").concat(r(t,"type"))}return s+". Received type ".concat(typeof n)}),TypeError),t("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),t("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),t("ERR_STREAM_PREMATURE_CLOSE","Premature close"),t("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),t("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),t("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),t("ERR_STREAM_WRITE_AFTER_END","write after end"),t("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),t("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),t("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),Ft.codes=e,Ft}function Bt(){if(Tt)return kt;Tt=1;var e=Pt().codes.ERR_INVALID_OPT_VALUE;return kt={getHighWaterMark:function(t,r,n,o){var i=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(r,o,n);if(null!=i){if(!isFinite(i)||Math.floor(i)!==i||i<0)throw new e(o?n:"highWaterMark",i);return Math.floor(i)}return t.objectMode?16:16384}}}function Dt(){if(Rt)return At;function e(e){try{if(!b.localStorage)return!1}catch(e){return!1}var t=b.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}return Rt=1,At=function(t,r){if(e("noDeprecation"))return t;var n=!1;return function(){if(!n){if(e("throwDeprecation"))throw new Error(r);e("traceDeprecation")?console.trace(r):console.warn(r),n=!0}return t.apply(this,arguments)}},At}function Lt(){if(It)return Ct;function e(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t){var r=e.entry;for(e.entry=null;r;){var n=r.callback;t.pendingcb--,n(undefined),r=r.next}t.corkedRequestsFree.next=e}(t,e)}}var t;It=1,Ct=_,_.WritableState=x;var r,n={deprecate:Dt()},o=se(),i=pe().Buffer,s=b.Uint8Array||function(){},a=Et(),c=Bt().getHighWaterMark,u=Pt().codes,l=u.ERR_INVALID_ARG_TYPE,h=u.ERR_METHOD_NOT_IMPLEMENTED,f=u.ERR_MULTIPLE_CALLBACK,p=u.ERR_STREAM_CANNOT_PIPE,d=u.ERR_STREAM_DESTROYED,m=u.ERR_STREAM_NULL_VALUES,w=u.ERR_STREAM_WRITE_AFTER_END,g=u.ERR_UNKNOWN_ENCODING,y=a.errorOrDestroy;function v(){}function x(r,n,o){t=t||Ut(),r=r||{},"boolean"!=typeof o&&(o=n instanceof t),this.objectMode=!!r.objectMode,o&&(this.objectMode=this.objectMode||!!r.writableObjectMode),this.highWaterMark=c(this,r,"writableHighWaterMark",o),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var i=!1===r.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=r.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new f;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(ne.nextTick(o,n),ne.nextTick(R,e,t),e._writableState.errorEmitted=!0,y(e,n)):(o(n),e._writableState.errorEmitted=!0,y(e,n),R(e,t))}(e,r,n,t,o);else{var i=T(r)||e.destroyed;i||r.corked||r.bufferProcessing||!r.bufferedRequest||k(e,r),n?ne.nextTick(S,e,r,i,o):S(e,r,i,o)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==r.emitClose,this.autoDestroy=!!r.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new e(this)}function _(e){var n=this instanceof(t=t||Ut());if(!n&&!r.call(_,this))return new _(e);this._writableState=new x(e,this,n),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),o.call(this)}function E(e,t,r,n,o,i,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new d("write")):r?e._writev(o,t.onwrite):e._write(o,i,t.onwrite),t.sync=!1}function S(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),R(e,t)}function k(t,r){r.bufferProcessing=!0;var n=r.bufferedRequest;if(t._writev&&n&&n.next){var o=r.bufferedRequestCount,i=new Array(o),s=r.corkedRequestsFree;s.entry=n;for(var a=0,c=!0;n;)i[a]=n,n.isBuf||(c=!1),n=n.next,a+=1;i.allBuffers=c,E(t,r,!0,r.length,i,"",s.finish),r.pendingcb++,r.lastBufferedRequest=null,s.next?(r.corkedRequestsFree=s.next,s.next=null):r.corkedRequestsFree=new e(r),r.bufferedRequestCount=0}else{for(;n;){var u=n.chunk,l=n.encoding,h=n.callback;if(E(t,r,!1,r.objectMode?1:u.length,u,l,h),n=n.next,r.bufferedRequestCount--,r.writing)break}null===n&&(r.lastBufferedRequest=null)}r.bufferedRequest=n,r.bufferProcessing=!1}function T(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function A(e,t){e._final((function(r){t.pendingcb--,r&&y(e,r),t.prefinished=!0,e.emit("prefinish"),R(e,t)}))}function R(e,t){var r=T(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,ne.nextTick(A,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}return M(_,o),x.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(x.prototype,"buffer",{get:n.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(r=Function.prototype[Symbol.hasInstance],Object.defineProperty(_,Symbol.hasInstance,{value:function(e){return!!r.call(this,e)||this===_&&e&&e._writableState instanceof x}})):r=function(e){return e instanceof this},_.prototype.pipe=function(){y(this,new p)},_.prototype.write=function(e,t,r){var n,o=this._writableState,a=!1,c=!o.objectMode&&(n=e,i.isBuffer(n)||n instanceof s);return c&&!i.isBuffer(e)&&(e=function(e){return i.from(e)}(e)),"function"==typeof t&&(r=t,t=null),c?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=v),o.ending?function(e,t){var r=new w;y(e,r),ne.nextTick(t,r)}(this,r):(c||function(e,t,r,n){var o;return null===r?o=new m:"string"==typeof r||t.objectMode||(o=new l("chunk",["string","Buffer"],r)),!o||(y(e,o),ne.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,a=function(e,t,r,n,o,s){if(!r){var a=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=i.from(t,r)),t}(t,n,o);n!==a&&(r=!0,o="buffer",n=a)}var c=t.objectMode?1:n.length;t.length+=c;var u=t.length<t.highWaterMark;if(u||(t.needDrain=!0),t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:o,isBuf:r,callback:s,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else E(e,t,!1,c,n,o,s);return u}(this,o,c,e,t,r)),a},_.prototype.cork=function(){this._writableState.corked++},_.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||k(this,e))},_.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new g(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(_.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(_.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),_.prototype._write=function(e,t,r){r(new h("_write()"))},_.prototype._writev=null,_.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,R(e,t),r&&(t.finished?ne.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(_.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(_.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),_.prototype.destroy=a.destroy,_.prototype._undestroy=a.undestroy,_.prototype._destroy=function(e,t){t(e)},Ct}function Ut(){if(Nt)return Ot;Nt=1;var e=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};Ot=s;var t=sr(),r=Lt();M(s,t);for(var n=e(r.prototype),o=0;o<n.length;o++){var i=n[o];s.prototype[i]||(s.prototype[i]=r.prototype[i])}function s(e){if(!(this instanceof s))return new s(e);t.call(this,e),r.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",a)))}function a(){this._writableState.ended||ne.nextTick(c,this)}function c(e){e.end()}return Object.defineProperty(s.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(s.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(s.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(s.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),Ot}var jt,Mt,zt,Wt,Ht,Kt,Gt,Vt,qt,Zt,Xt,Yt,$t,Jt,Qt,er,tr={},rr={exports:{}};function nr(){if(Mt)return tr;Mt=1;var e=(jt||(jt=1,function(e,t){var r=pe(),n=r.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return n(e,t,r)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=i),o(n,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return n(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var o=n(e);return void 0!==t?"string"==typeof r?o.fill(t,r):o.fill(t):o.fill(0),o},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}}(rr,rr.exports)),rr.exports).Buffer,t=e.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function r(r){var n;switch(this.encoding=function(r){var n=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(r);if("string"!=typeof n&&(e.isEncoding===t||!t(r)))throw new Error("Unknown encoding: "+r);return n||r}(r),this.encoding){case"utf16le":this.text=i,this.end=s,n=4;break;case"utf8":this.fillLast=o,n=4;break;case"base64":this.text=a,this.end=c,n=3;break;default:return this.write=u,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=e.allocUnsafe(n)}function n(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function o(e){var t=this.lastTotal-this.lastNeed,r=function(e,t){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function i(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function s(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function a(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function c(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function u(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}return tr.StringDecoder=r,r.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},r.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},r.prototype.text=function(e,t){var r=function(e,t,r){var o=t.length-1;if(o<r)return 0;var i=n(t[o]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--o<r||-2===i?0:(i=n(t[o]))>=0?(i>0&&(e.lastNeed=i-2),i):--o<r||-2===i?0:(i=n(t[o]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var o=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,o),e.toString("utf8",t,o)},r.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length},tr}function or(){if(Wt)return zt;Wt=1;var e=Pt().codes.ERR_STREAM_PREMATURE_CLOSE;function t(){}return zt=function r(n,o,i){if("function"==typeof o)return r(n,null,o);o||(o={}),i=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];e.apply(this,n)}}}(i||t);var s=o.readable||!1!==o.readable&&n.readable,a=o.writable||!1!==o.writable&&n.writable,c=function(){n.writable||l()},u=n._writableState&&n._writableState.finished,l=function(){a=!1,u=!0,s||i.call(n)},h=n._readableState&&n._readableState.endEmitted,f=function(){s=!1,h=!0,a||i.call(n)},p=function(e){i.call(n,e)},d=function(){var t;return s&&!h?(n._readableState&&n._readableState.ended||(t=new e),i.call(n,t)):a&&!u?(n._writableState&&n._writableState.ended||(t=new e),i.call(n,t)):void 0},m=function(){n.req.on("finish",l)};return function(e){return e.setHeader&&"function"==typeof e.abort}(n)?(n.on("complete",l),n.on("abort",d),n.req?m():n.on("request",m)):a&&!n._writableState&&(n.on("end",c),n.on("close",c)),n.on("end",f),n.on("finish",l),!1!==o.error&&n.on("error",p),n.on("close",d),function(){n.removeListener("complete",l),n.removeListener("abort",d),n.removeListener("request",m),n.req&&n.req.removeListener("finish",l),n.removeListener("end",c),n.removeListener("close",c),n.removeListener("finish",l),n.removeListener("end",f),n.removeListener("error",p),n.removeListener("close",d)}},zt}function ir(){if(Kt)return Ht;var e;function t(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}Kt=1;var r=or(),n=Symbol("lastResolve"),o=Symbol("lastReject"),i=Symbol("error"),s=Symbol("ended"),a=Symbol("lastPromise"),c=Symbol("handlePromise"),u=Symbol("stream");function l(e,t){return{value:e,done:t}}function h(e){var t=e[n];if(null!==t){var r=e[u].read();null!==r&&(e[a]=null,e[n]=null,e[o]=null,t(l(r,!1)))}}function f(e){ne.nextTick(h,e)}var p=Object.getPrototypeOf((function(){})),d=Object.setPrototypeOf((t(e={get stream(){return this[u]},next:function(){var e=this,t=this[i];if(null!==t)return Promise.reject(t);if(this[s])return Promise.resolve(l(void 0,!0));if(this[u].destroyed)return new Promise((function(t,r){ne.nextTick((function(){e[i]?r(e[i]):t(l(void 0,!0))}))}));var r,n=this[a];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[s]?r(l(void 0,!0)):t[c](r,n)}),n)}}(n,this));else{var o=this[u].read();if(null!==o)return Promise.resolve(l(o,!1));r=new Promise(this[c])}return this[a]=r,r}},Symbol.asyncIterator,(function(){return this})),t(e,"return",(function(){var e=this;return new Promise((function(t,r){e[u].destroy(null,(function(e){e?r(e):t(l(void 0,!0))}))}))})),e),p);return Ht=function(e){var h,p=Object.create(d,(t(h={},u,{value:e,writable:!0}),t(h,n,{value:null,writable:!0}),t(h,o,{value:null,writable:!0}),t(h,i,{value:null,writable:!0}),t(h,s,{value:e._readableState.endEmitted,writable:!0}),t(h,c,{value:function(e,t){var r=p[u].read();r?(p[a]=null,p[n]=null,p[o]=null,e(l(r,!1))):(p[n]=e,p[o]=t)},writable:!0}),h));return p[a]=null,r(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=p[o];return null!==t&&(p[a]=null,p[n]=null,p[o]=null,t(e)),void(p[i]=e)}var r=p[n];null!==r&&(p[a]=null,p[n]=null,p[o]=null,r(l(void 0,!0))),p[s]=!0})),e.on("readable",f.bind(null,p)),p}}function sr(){if(Zt)return qt;var e;Zt=1,qt=_,_.ReadableState=x,U.EventEmitter;var t,r=function(e,t){return e.listeners(t).length},n=se(),o=pe().Buffer,i=b.Uint8Array||function(){},s=_t();t=s&&s.debuglog?s.debuglog("stream"):function(){};var a,c,u,l=function(){if(ft)return ht;function e(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function t(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}ft=1;var n=pe().Buffer,o=_t().inspect,i=o&&o.custom||"inspect";return ht=function(){function s(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.head=null,this.tail=null,this.length=0}var a;return a=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return n.alloc(0);for(var t,r,o,i=n.allocUnsafe(e>>>0),s=this.head,a=0;s;)t=s.data,r=i,o=a,n.prototype.copy.call(t,r,o),a+=s.data.length,s=s.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var o=t.data,i=e>o.length?o.length:e;if(i===o.length?n+=o:n+=o.slice(0,e),0==(e-=i)){i===o.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=o.slice(i));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=n.allocUnsafe(e),r=this.head,o=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,s=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,s),0==(e-=s)){s===i.length?(++o,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(s));break}++o}return this.length-=o,t}},{key:i,value:function(r,n){return o(this,function(r){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?e(Object(o),!0).forEach((function(e){t(r,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):e(Object(o)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))}))}return r}({},n,{depth:0,customInspect:!1}))}}],a&&r(s.prototype,a),s}(),ht}(),h=Et(),f=Bt().getHighWaterMark,p=Pt().codes,d=p.ERR_INVALID_ARG_TYPE,m=p.ERR_STREAM_PUSH_AFTER_EOF,w=p.ERR_METHOD_NOT_IMPLEMENTED,g=p.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;M(_,n);var y=h.errorOrDestroy,v=["error","close","destroy","pause","resume"];function x(t,r,n){e=e||Ut(),t=t||{},"boolean"!=typeof n&&(n=r instanceof e),this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=f(this,t,"readableHighWaterMark",n),this.buffer=new l,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(a||(a=nr().StringDecoder),this.decoder=new a(t.encoding),this.encoding=t.encoding)}function _(t){if(e=e||Ut(),!(this instanceof _))return new _(t);var r=this instanceof e;this._readableState=new x(t,this,r),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),n.call(this)}function E(e,r,n,s,a){t("readableAddChunk",r);var c,u=e._readableState;if(null===r)u.reading=!1,function(e,r){if(t("onEofChunk"),!r.ended){if(r.decoder){var n=r.decoder.end();n&&n.length&&(r.buffer.push(n),r.length+=r.objectMode?1:n.length)}r.ended=!0,r.sync?A(e):(r.needReadable=!1,r.emittedReadable||(r.emittedReadable=!0,R(e)))}}(e,u);else if(a||(c=function(e,t){var r,n;return n=t,o.isBuffer(n)||n instanceof i||"string"==typeof t||void 0===t||e.objectMode||(r=new d("chunk",["string","Buffer","Uint8Array"],t)),r}(u,r)),c)y(e,c);else if(u.objectMode||r&&r.length>0)if("string"==typeof r||u.objectMode||Object.getPrototypeOf(r)===o.prototype||(r=function(e){return o.from(e)}(r)),s)u.endEmitted?y(e,new g):S(e,u,r,!0);else if(u.ended)y(e,new m);else{if(u.destroyed)return!1;u.reading=!1,u.decoder&&!n?(r=u.decoder.write(r),u.objectMode||0!==r.length?S(e,u,r,!1):C(e,u)):S(e,u,r,!1)}else s||(u.reading=!1,C(e,u));return!u.ended&&(u.length<u.highWaterMark||0===u.length)}function S(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&A(e)),C(e,t)}Object.defineProperty(_.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),_.prototype.destroy=h.destroy,_.prototype._undestroy=h.undestroy,_.prototype._destroy=function(e,t){t(e)},_.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=o.from(e,t),t=""),r=!0),E(this,e,t,!1,r)},_.prototype.unshift=function(e){return E(this,e,null,!0,!1)},_.prototype.isPaused=function(){return!1===this._readableState.flowing},_.prototype.setEncoding=function(e){a||(a=nr().StringDecoder);var t=new a(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,n="";null!==r;)n+=t.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==n&&this._readableState.buffer.push(n),this._readableState.length=n.length,this};var k=1073741824;function T(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=k?e=k:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function A(e){var r=e._readableState;t("emitReadable",r.needReadable,r.emittedReadable),r.needReadable=!1,r.emittedReadable||(t("emitReadable",r.flowing),r.emittedReadable=!0,ne.nextTick(R,e))}function R(e){var r=e._readableState;t("emitReadable_",r.destroyed,r.length,r.ended),r.destroyed||!r.length&&!r.ended||(e.emit("readable"),r.emittedReadable=!1),r.needReadable=!r.flowing&&!r.ended&&r.length<=r.highWaterMark,P(e)}function C(e,t){t.readingMore||(t.readingMore=!0,ne.nextTick(I,e,t))}function I(e,r){for(;!r.reading&&!r.ended&&(r.length<r.highWaterMark||r.flowing&&0===r.length);){var n=r.length;if(t("maybeReadMore read 0"),e.read(0),n===r.length)break}r.readingMore=!1}function O(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function N(e){t("readable nexttick read 0"),e.read(0)}function F(e,r){t("resume",r.reading),r.reading||e.read(0),r.resumeScheduled=!1,e.emit("resume"),P(e),r.flowing&&!r.reading&&e.read(0)}function P(e){var r=e._readableState;for(t("flow",r.flowing);r.flowing&&null!==e.read(););}function B(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function D(e){var r=e._readableState;t("endReadable",r.endEmitted),r.endEmitted||(r.ended=!0,ne.nextTick(L,r,e))}function L(e,r){if(t("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,r.readable=!1,r.emit("end"),e.autoDestroy)){var n=r._writableState;(!n||n.autoDestroy&&n.finished)&&r.destroy()}}function j(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}return _.prototype.read=function(e){t("read",e),e=parseInt(e,10);var r=this._readableState,n=e;if(0!==e&&(r.emittedReadable=!1),0===e&&r.needReadable&&((0!==r.highWaterMark?r.length>=r.highWaterMark:r.length>0)||r.ended))return t("read: emitReadable",r.length,r.ended),0===r.length&&r.ended?D(this):A(this),null;if(0===(e=T(e,r))&&r.ended)return 0===r.length&&D(this),null;var o,i=r.needReadable;return t("need readable",i),(0===r.length||r.length-e<r.highWaterMark)&&t("length less than watermark",i=!0),r.ended||r.reading?t("reading or ended",i=!1):i&&(t("do read"),r.reading=!0,r.sync=!0,0===r.length&&(r.needReadable=!0),this._read(r.highWaterMark),r.sync=!1,r.reading||(e=T(n,r))),null===(o=e>0?B(e,r):null)?(r.needReadable=r.length<=r.highWaterMark,e=0):(r.length-=e,r.awaitDrain=0),0===r.length&&(r.ended||(r.needReadable=!0),n!==e&&r.ended&&D(this)),null!==o&&this.emit("data",o),o},_.prototype._read=function(e){y(this,new w("_read()"))},_.prototype.pipe=function(e,n){var o=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,t("pipe count=%d opts=%j",i.pipesCount,n);var s=n&&!1===n.end||e===ne.stdout||e===ne.stderr?d:a;function a(){t("onend"),e.end()}i.endEmitted?ne.nextTick(s):o.once("end",s),e.on("unpipe",(function r(n,s){t("onunpipe"),n===o&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,t("cleanup"),e.removeListener("close",f),e.removeListener("finish",p),e.removeListener("drain",c),e.removeListener("error",h),e.removeListener("unpipe",r),o.removeListener("end",a),o.removeListener("end",d),o.removeListener("data",l),u=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||c())}));var c=function(e){return function(){var n=e._readableState;t("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&r(e,"data")&&(n.flowing=!0,P(e))}}(o);e.on("drain",c);var u=!1;function l(r){t("ondata");var n=e.write(r);t("dest.write",n),!1===n&&((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==j(i.pipes,e))&&!u&&(t("false write response, pause",i.awaitDrain),i.awaitDrain++),o.pause())}function h(n){t("onerror",n),d(),e.removeListener("error",h),0===r(e,"error")&&y(e,n)}function f(){e.removeListener("finish",p),d()}function p(){t("onfinish"),e.removeListener("close",f),d()}function d(){t("unpipe"),o.unpipe(e)}return o.on("data",l),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",h),e.once("close",f),e.once("finish",p),e.emit("pipe",o),i.flowing||(t("pipe resume"),o.resume()),e},_.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,o=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<o;i++)n[i].emit("unpipe",this,{hasUnpiped:!1});return this}var s=j(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},_.prototype.on=function(e,r){var o=n.prototype.on.call(this,e,r),i=this._readableState;return"data"===e?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===e&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,t("on readable",i.length,i.reading),i.length?A(this):i.reading||ne.nextTick(N,this))),o},_.prototype.addListener=_.prototype.on,_.prototype.removeListener=function(e,t){var r=n.prototype.removeListener.call(this,e,t);return"readable"===e&&ne.nextTick(O,this),r},_.prototype.removeAllListeners=function(e){var t=n.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||ne.nextTick(O,this),t},_.prototype.resume=function(){var e=this._readableState;return e.flowing||(t("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,ne.nextTick(F,e,t))}(this,e)),e.paused=!1,this},_.prototype.pause=function(){return t("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(t("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},_.prototype.wrap=function(e){var r=this,n=this._readableState,o=!1;for(var i in e.on("end",(function(){if(t("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&r.push(e)}r.push(null)})),e.on("data",(function(i){t("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i||(n.objectMode||i&&i.length)&&(r.push(i)||(o=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var s=0;s<v.length;s++)e.on(v[s],this.emit.bind(this,v[s]));return this._read=function(r){t("wrapped _read",r),o&&(o=!1,e.resume())},this},"function"==typeof Symbol&&(_.prototype[Symbol.asyncIterator]=function(){return void 0===c&&(c=ir()),c(this)}),Object.defineProperty(_.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(_.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(_.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),_._fromList=B,Object.defineProperty(_.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(_.from=function(e,t){return void 0===u&&(u=Vt?Gt:(Vt=1,Gt=function(){throw new Error("Readable.from is not available in the browser")})),u(_,e,t)}),qt}function ar(){if(Yt)return Xt;Yt=1,Xt=a;var e=Pt().codes,t=e.ERR_METHOD_NOT_IMPLEMENTED,r=e.ERR_MULTIPLE_CALLBACK,n=e.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=e.ERR_TRANSFORM_WITH_LENGTH_0,i=Ut();function s(e,t){var n=this._transformState;n.transforming=!1;var o=n.writecb;if(null===o)return this.emit("error",new r);n.writechunk=null,n.writecb=null,null!=t&&this.push(t),o(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);i.call(this,e),this._transformState={afterTransform:s.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",c)}function c(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?u(this,null,null):this._flush((function(t,r){u(e,t,r)}))}function u(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new o;if(e._transformState.transforming)throw new n;return e.push(null)}return M(a,i),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,t)},a.prototype._transform=function(e,r,n){n(new t("_transform()"))},a.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var o=this._readableState;(n.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},a.prototype._destroy=function(e,t){i.prototype._destroy.call(this,e,(function(e){t(e)}))},Xt}var cr=lr,ur=U.EventEmitter;function lr(){ur.call(this)}M(lr,ur),lr.Readable=sr(),lr.Writable=Lt(),lr.Duplex=Ut(),lr.Transform=ar(),lr.PassThrough=function(){if(Jt)return $t;Jt=1,$t=t;var e=ar();function t(r){if(!(this instanceof t))return new t(r);e.call(this,r)}return M(t,e),t.prototype._transform=function(e,t,r){r(null,e)},$t}(),lr.finished=or(),lr.pipeline=function(){if(er)return Qt;var e;er=1;var t=Pt().codes,r=t.ERR_MISSING_ARGS,n=t.ERR_STREAM_DESTROYED;function o(e){if(e)throw e}function i(e){e()}function s(e,t){return e.pipe(t)}return Qt=function(){for(var t=arguments.length,a=new Array(t),c=0;c<t;c++)a[c]=arguments[c];var u,l=function(e){return e.length?"function"!=typeof e[e.length-1]?o:e.pop():o}(a);if(Array.isArray(a[0])&&(a=a[0]),a.length<2)throw new r("streams");var h=a.map((function(t,r){var o=r<a.length-1;return function(t,r,o,i){i=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(i);var s=!1;t.on("close",(function(){s=!0})),void 0===e&&(e=or()),e(t,{readable:r,writable:o},(function(e){if(e)return i(e);s=!0,i()}));var a=!1;return function(e){if(!s&&!a)return a=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void i(e||new n("pipe"))}}(t,o,r>0,(function(e){u||(u=e),e&&h.forEach(i),o||(h.forEach(i),l(u))}))}));return a.reduce(s)}}(),lr.Stream=lr,lr.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",a));var i=!1;function s(){i||(i=!0,e.end())}function a(){i||(i=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===ur.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",n),e.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",a),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",c),e.on("error",c),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e},function(e){e.parser=function(e,t){return new n(e,t)},e.SAXParser=n,e.SAXStream=i,e.createStream=function(e,t){return new i(e,t)},e.MAX_BUFFER_LENGTH=65536;var t,r=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function n(t,o){if(!(this instanceof n))return new n(t,o);var i=this;!function(e){for(var t=0,n=r.length;t<n;t++)e[r[t]]=""}(i),i.q=i.c="",i.bufferCheckPosition=e.MAX_BUFFER_LENGTH,i.opt=o||{},i.opt.lowercase=i.opt.lowercase||i.opt.lowercasetags,i.looseCase=i.opt.lowercase?"toLowerCase":"toUpperCase",i.tags=[],i.closed=i.closedRoot=i.sawRoot=!1,i.tag=i.error=null,i.strict=!!t,i.noscript=!(!t&&!i.opt.noscript),i.state=E.BEGIN,i.strictEntities=i.opt.strictEntities,i.ENTITIES=i.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),i.attribList=[],i.opt.xmlns&&(i.ns=Object.create(l)),i.trackPosition=!1!==i.opt.position,i.trackPosition&&(i.position=i.line=i.column=0),k(i,"onready")}e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t}),n.prototype={end:function(){I(this)},write:function(t){var n=this;if(this.error)throw this.error;if(n.closed)return C(n,"Cannot write after close. Assign an onready handler.");if(null===t)return I(n);"object"==typeof t&&(t=t.toString());for(var o=0,i="";i=j(t,o++),n.c=i,i;)switch(n.trackPosition&&(n.position++,"\n"===i?(n.line++,n.column=0):n.column++),n.state){case E.BEGIN:if(n.state=E.BEGIN_WHITESPACE,"\ufeff"===i)continue;U(n,i);continue;case E.BEGIN_WHITESPACE:U(n,i);continue;case E.TEXT:if(n.sawRoot&&!n.closedRoot){for(var c=o-1;i&&"<"!==i&&"&"!==i;)(i=j(t,o++))&&n.trackPosition&&(n.position++,"\n"===i?(n.line++,n.column=0):n.column++);n.textNode+=t.substring(c,o-1)}"<"!==i||n.sawRoot&&n.closedRoot&&!n.strict?(m(i)||n.sawRoot&&!n.closedRoot||O(n,"Text data outside of root node."),"&"===i?n.state=E.TEXT_ENTITY:n.textNode+=i):(n.state=E.OPEN_WAKA,n.startTagPosition=n.position);continue;case E.SCRIPT:"<"===i?n.state=E.SCRIPT_ENDING:n.script+=i;continue;case E.SCRIPT_ENDING:"/"===i?n.state=E.CLOSE_TAG:(n.script+="<"+i,n.state=E.SCRIPT);continue;case E.OPEN_WAKA:if("!"===i)n.state=E.SGML_DECL,n.sgmlDecl="";else if(m(i));else if(y(h,i))n.state=E.OPEN_TAG,n.tagName=i;else if("/"===i)n.state=E.CLOSE_TAG,n.tagName="";else if("?"===i)n.state=E.PROC_INST,n.procInstName=n.procInstBody="";else{if(O(n,"Unencoded <"),n.startTagPosition+1<n.position){var u=n.position-n.startTagPosition;i=new Array(u).join(" ")+i}n.textNode+="<"+i,n.state=E.TEXT}continue;case E.SGML_DECL:(n.sgmlDecl+i).toUpperCase()===s?(T(n,"onopencdata"),n.state=E.CDATA,n.sgmlDecl="",n.cdata=""):n.sgmlDecl+i==="--"?(n.state=E.COMMENT,n.comment="",n.sgmlDecl=""):(n.sgmlDecl+i).toUpperCase()===a?(n.state=E.DOCTYPE,(n.doctype||n.sawRoot)&&O(n,"Inappropriately located doctype declaration"),n.doctype="",n.sgmlDecl=""):">"===i?(T(n,"onsgmldeclaration",n.sgmlDecl),n.sgmlDecl="",n.state=E.TEXT):w(i)?(n.state=E.SGML_DECL_QUOTED,n.sgmlDecl+=i):n.sgmlDecl+=i;continue;case E.SGML_DECL_QUOTED:i===n.q&&(n.state=E.SGML_DECL,n.q=""),n.sgmlDecl+=i;continue;case E.DOCTYPE:">"===i?(n.state=E.TEXT,T(n,"ondoctype",n.doctype),n.doctype=!0):(n.doctype+=i,"["===i?n.state=E.DOCTYPE_DTD:w(i)&&(n.state=E.DOCTYPE_QUOTED,n.q=i));continue;case E.DOCTYPE_QUOTED:n.doctype+=i,i===n.q&&(n.q="",n.state=E.DOCTYPE);continue;case E.DOCTYPE_DTD:n.doctype+=i,"]"===i?n.state=E.DOCTYPE:w(i)&&(n.state=E.DOCTYPE_DTD_QUOTED,n.q=i);continue;case E.DOCTYPE_DTD_QUOTED:n.doctype+=i,i===n.q&&(n.state=E.DOCTYPE_DTD,n.q="");continue;case E.COMMENT:"-"===i?n.state=E.COMMENT_ENDING:n.comment+=i;continue;case E.COMMENT_ENDING:"-"===i?(n.state=E.COMMENT_ENDED,n.comment=R(n.opt,n.comment),n.comment&&T(n,"oncomment",n.comment),n.comment=""):(n.comment+="-"+i,n.state=E.COMMENT);continue;case E.COMMENT_ENDED:">"!==i?(O(n,"Malformed comment"),n.comment+="--"+i,n.state=E.COMMENT):n.state=E.TEXT;continue;case E.CDATA:"]"===i?n.state=E.CDATA_ENDING:n.cdata+=i;continue;case E.CDATA_ENDING:"]"===i?n.state=E.CDATA_ENDING_2:(n.cdata+="]"+i,n.state=E.CDATA);continue;case E.CDATA_ENDING_2:">"===i?(n.cdata&&T(n,"oncdata",n.cdata),T(n,"onclosecdata"),n.cdata="",n.state=E.TEXT):"]"===i?n.cdata+="]":(n.cdata+="]]"+i,n.state=E.CDATA);continue;case E.PROC_INST:"?"===i?n.state=E.PROC_INST_ENDING:m(i)?n.state=E.PROC_INST_BODY:n.procInstName+=i;continue;case E.PROC_INST_BODY:if(!n.procInstBody&&m(i))continue;"?"===i?n.state=E.PROC_INST_ENDING:n.procInstBody+=i;continue;case E.PROC_INST_ENDING:">"===i?(T(n,"onprocessinginstruction",{name:n.procInstName,body:n.procInstBody}),n.procInstName=n.procInstBody="",n.state=E.TEXT):(n.procInstBody+="?"+i,n.state=E.PROC_INST_BODY);continue;case E.OPEN_TAG:y(f,i)?n.tagName+=i:(N(n),">"===i?B(n):"/"===i?n.state=E.OPEN_TAG_SLASH:(m(i)||O(n,"Invalid character in tag name"),n.state=E.ATTRIB));continue;case E.OPEN_TAG_SLASH:">"===i?(B(n,!0),D(n)):(O(n,"Forward-slash in opening tag not followed by >"),n.state=E.ATTRIB);continue;case E.ATTRIB:if(m(i))continue;">"===i?B(n):"/"===i?n.state=E.OPEN_TAG_SLASH:y(h,i)?(n.attribName=i,n.attribValue="",n.state=E.ATTRIB_NAME):O(n,"Invalid attribute name");continue;case E.ATTRIB_NAME:"="===i?n.state=E.ATTRIB_VALUE:">"===i?(O(n,"Attribute without value"),n.attribValue=n.attribName,P(n),B(n)):m(i)?n.state=E.ATTRIB_NAME_SAW_WHITE:y(f,i)?n.attribName+=i:O(n,"Invalid attribute name");continue;case E.ATTRIB_NAME_SAW_WHITE:if("="===i)n.state=E.ATTRIB_VALUE;else{if(m(i))continue;O(n,"Attribute without value"),n.tag.attributes[n.attribName]="",n.attribValue="",T(n,"onattribute",{name:n.attribName,value:""}),n.attribName="",">"===i?B(n):y(h,i)?(n.attribName=i,n.state=E.ATTRIB_NAME):(O(n,"Invalid attribute name"),n.state=E.ATTRIB)}continue;case E.ATTRIB_VALUE:if(m(i))continue;w(i)?(n.q=i,n.state=E.ATTRIB_VALUE_QUOTED):(O(n,"Unquoted attribute value"),n.state=E.ATTRIB_VALUE_UNQUOTED,n.attribValue=i);continue;case E.ATTRIB_VALUE_QUOTED:if(i!==n.q){"&"===i?n.state=E.ATTRIB_VALUE_ENTITY_Q:n.attribValue+=i;continue}P(n),n.q="",n.state=E.ATTRIB_VALUE_CLOSED;continue;case E.ATTRIB_VALUE_CLOSED:m(i)?n.state=E.ATTRIB:">"===i?B(n):"/"===i?n.state=E.OPEN_TAG_SLASH:y(h,i)?(O(n,"No whitespace between attributes"),n.attribName=i,n.attribValue="",n.state=E.ATTRIB_NAME):O(n,"Invalid attribute name");continue;case E.ATTRIB_VALUE_UNQUOTED:if(!g(i)){"&"===i?n.state=E.ATTRIB_VALUE_ENTITY_U:n.attribValue+=i;continue}P(n),">"===i?B(n):n.state=E.ATTRIB;continue;case E.CLOSE_TAG:if(n.tagName)">"===i?D(n):y(f,i)?n.tagName+=i:n.script?(n.script+="</"+n.tagName,n.tagName="",n.state=E.SCRIPT):(m(i)||O(n,"Invalid tagname in closing tag"),n.state=E.CLOSE_TAG_SAW_WHITE);else{if(m(i))continue;b(h,i)?n.script?(n.script+="</"+i,n.state=E.SCRIPT):O(n,"Invalid tagname in closing tag."):n.tagName=i}continue;case E.CLOSE_TAG_SAW_WHITE:if(m(i))continue;">"===i?D(n):O(n,"Invalid characters in closing tag");continue;case E.TEXT_ENTITY:case E.ATTRIB_VALUE_ENTITY_Q:case E.ATTRIB_VALUE_ENTITY_U:var l,v;switch(n.state){case E.TEXT_ENTITY:l=E.TEXT,v="textNode";break;case E.ATTRIB_VALUE_ENTITY_Q:l=E.ATTRIB_VALUE_QUOTED,v="attribValue";break;case E.ATTRIB_VALUE_ENTITY_U:l=E.ATTRIB_VALUE_UNQUOTED,v="attribValue"}";"===i?(n[v]+=L(n),n.entity="",n.state=l):y(n.entity.length?d:p,i)?n.entity+=i:(O(n,"Invalid character in entity name"),n[v]+="&"+n.entity+i,n.entity="",n.state=l);continue;default:throw new Error(n,"Unknown state: "+n.state)}return n.position>=n.bufferCheckPosition&&function(t){for(var n=Math.max(e.MAX_BUFFER_LENGTH,10),o=0,i=0,s=r.length;i<s;i++){var a=t[r[i]].length;if(a>n)switch(r[i]){case"textNode":A(t);break;case"cdata":T(t,"oncdata",t.cdata),t.cdata="";break;case"script":T(t,"onscript",t.script),t.script="";break;default:C(t,"Max buffer length exceeded: "+r[i])}o=Math.max(o,a)}var c=e.MAX_BUFFER_LENGTH-o;t.bufferCheckPosition=c+t.position}(n),n},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;A(e=this),""!==e.cdata&&(T(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(T(e,"onscript",e.script),e.script="")}};try{t=cr.Stream}catch(e){t=function(){}}var o=e.EVENTS.filter((function(e){return"error"!==e&&"end"!==e}));function i(e,r){if(!(this instanceof i))return new i(e,r);t.apply(this),this._parser=new n(e,r),this.writable=!0,this.readable=!0;var s=this;this._parser.onend=function(){s.emit("end")},this._parser.onerror=function(e){s.emit("error",e),s._parser.error=null},this._decoder=null,o.forEach((function(e){Object.defineProperty(s,"on"+e,{get:function(){return s._parser["on"+e]},set:function(t){if(!t)return s.removeAllListeners(e),s._parser["on"+e]=t,t;s.on(e,t)},enumerable:!0,configurable:!1})}))}i.prototype=Object.create(t.prototype,{constructor:{value:i}}),i.prototype.write=function(e){if("function"==typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(e)){if(!this._decoder){var t=nr().StringDecoder;this._decoder=new t("utf8")}e=this._decoder.write(e)}return this._parser.write(e.toString()),this.emit("data",e),!0},i.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},i.prototype.on=function(e,r){var n=this;return n._parser["on"+e]||-1===o.indexOf(e)||(n._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),n.emit.apply(n,t)}),t.prototype.on.call(n,e,r)};var s="[CDATA[",a="DOCTYPE",c="http://www.w3.org/XML/1998/namespace",u="http://www.w3.org/2000/xmlns/",l={xml:c,xmlns:u},h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,p=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function w(e){return'"'===e||"'"===e}function g(e){return">"===e||m(e)}function y(e,t){return e.test(t)}function b(e,t){return!y(e,t)}var v,x,_,E=0;for(var S in e.STATE={BEGIN:E++,BEGIN_WHITESPACE:E++,TEXT:E++,TEXT_ENTITY:E++,OPEN_WAKA:E++,SGML_DECL:E++,SGML_DECL_QUOTED:E++,DOCTYPE:E++,DOCTYPE_QUOTED:E++,DOCTYPE_DTD:E++,DOCTYPE_DTD_QUOTED:E++,COMMENT_STARTING:E++,COMMENT:E++,COMMENT_ENDING:E++,COMMENT_ENDED:E++,CDATA:E++,CDATA_ENDING:E++,CDATA_ENDING_2:E++,PROC_INST:E++,PROC_INST_BODY:E++,PROC_INST_ENDING:E++,OPEN_TAG:E++,OPEN_TAG_SLASH:E++,ATTRIB:E++,ATTRIB_NAME:E++,ATTRIB_NAME_SAW_WHITE:E++,ATTRIB_VALUE:E++,ATTRIB_VALUE_QUOTED:E++,ATTRIB_VALUE_CLOSED:E++,ATTRIB_VALUE_UNQUOTED:E++,ATTRIB_VALUE_ENTITY_Q:E++,ATTRIB_VALUE_ENTITY_U:E++,CLOSE_TAG:E++,CLOSE_TAG_SAW_WHITE:E++,SCRIPT:E++,SCRIPT_ENDING:E++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach((function(t){var r=e.ENTITIES[t],n="number"==typeof r?String.fromCharCode(r):r;e.ENTITIES[t]=n})),e.STATE)e.STATE[e.STATE[S]]=S;function k(e,t,r){e[t]&&e[t](r)}function T(e,t,r){e.textNode&&A(e),k(e,t,r)}function A(e){e.textNode=R(e.opt,e.textNode),e.textNode&&k(e,"ontext",e.textNode),e.textNode=""}function R(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function C(e,t){return A(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,k(e,"onerror",t),e}function I(e){return e.sawRoot&&!e.closedRoot&&O(e,"Unclosed root tag"),e.state!==E.BEGIN&&e.state!==E.BEGIN_WHITESPACE&&e.state!==E.TEXT&&C(e,"Unexpected end"),A(e),e.c="",e.closed=!0,k(e,"onend"),n.call(e,e.strict,e.opt),e}function O(e,t){if("object"!=typeof e||!(e instanceof n))throw new Error("bad call to strictFail");e.strict&&C(e,t)}function N(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,r=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(r.ns=t.ns),e.attribList.length=0,T(e,"onopentagstart",r)}function F(e,t){var r=e.indexOf(":")<0?["",e]:e.split(":"),n=r[0],o=r[1];return t&&"xmlns"===e&&(n="xmlns",o=""),{prefix:n,local:o}}function P(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=F(e.attribName,!0),r=t.prefix,n=t.local;if("xmlns"===r)if("xml"===n&&e.attribValue!==c)O(e,"xml: prefix must be bound to "+c+"\nActual: "+e.attribValue);else if("xmlns"===n&&e.attribValue!==u)O(e,"xmlns: prefix must be bound to "+u+"\nActual: "+e.attribValue);else{var o=e.tag,i=e.tags[e.tags.length-1]||e;o.ns===i.ns&&(o.ns=Object.create(i.ns)),o.ns[n]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,T(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function B(e,t){if(e.opt.xmlns){var r=e.tag,n=F(e.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(O(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),r.uri=n.prefix);var o=e.tags[e.tags.length-1]||e;r.ns&&o.ns!==r.ns&&Object.keys(r.ns).forEach((function(t){T(e,"onopennamespace",{prefix:t,uri:r.ns[t]})}));for(var i=0,s=e.attribList.length;i<s;i++){var a=e.attribList[i],c=a[0],u=a[1],l=F(c,!0),h=l.prefix,f=l.local,p=""===h?"":r.ns[h]||"",d={name:c,value:u,prefix:h,local:f,uri:p};h&&"xmlns"!==h&&!p&&(O(e,"Unbound namespace prefix: "+JSON.stringify(h)),d.uri=h),e.tag.attributes[c]=d,T(e,"onattribute",d)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),T(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=E.TEXT:e.state=E.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function D(e){if(!e.tagName)return O(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=E.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=E.SCRIPT);T(e,"onscript",e.script),e.script=""}var t=e.tags.length,r=e.tagName;e.strict||(r=r[e.looseCase]());for(var n=r;t--&&e.tags[t].name!==n;)O(e,"Unexpected close tag");if(t<0)return O(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=E.TEXT);e.tagName=r;for(var o=e.tags.length;o-- >t;){var i=e.tag=e.tags.pop();e.tagName=e.tag.name,T(e,"onclosetag",e.tagName);var s={};for(var a in i.ns)s[a]=i.ns[a];var c=e.tags[e.tags.length-1]||e;e.opt.xmlns&&i.ns!==c.ns&&Object.keys(i.ns).forEach((function(t){var r=i.ns[t];T(e,"onclosenamespace",{prefix:t,uri:r})}))}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=E.TEXT}function L(e){var t,r=e.entity,n=r.toLowerCase(),o="";return e.ENTITIES[r]?e.ENTITIES[r]:e.ENTITIES[n]?e.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),o=(t=parseInt(r,16)).toString(16)):(r=r.slice(1),o=(t=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(t)||o.toLowerCase()!==r?(O(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function U(e,t){"<"===t?(e.state=E.OPEN_WAKA,e.startTagPosition=e.position):m(t)||(O(e,"Non-whitespace before first tag."),e.textNode=t,e.state=E.TEXT)}function j(e,t){var r="";return t<e.length&&(r=e.charAt(t)),r}E=e.STATE,String.fromCodePoint||(v=String.fromCharCode,x=Math.floor,_=function(){var e,t,r=[],n=-1,o=arguments.length;if(!o)return"";for(var i="";++n<o;){var s=Number(arguments[n]);if(!isFinite(s)||s<0||s>1114111||x(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?r.push(s):(e=55296+((s-=65536)>>10),t=s%1024+56320,r.push(e,t)),(n+1===o||r.length>16384)&&(i+=v.apply(null,r),r.length=0)}return i},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:_,configurable:!0,writable:!0}):String.fromCodePoint=_)}(_);var hr,fr,pr=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},dr=pr,mr={copyOptions:function(e){var t,r={};for(t in e)e.hasOwnProperty(t)&&(r[t]=e[t]);return r},ensureFlagExists:function(e,t){e in t&&"boolean"==typeof t[e]||(t[e]=!1)},ensureSpacesExists:function(e){(!("spaces"in e)||"number"!=typeof e.spaces&&"string"!=typeof e.spaces)&&(e.spaces=0)},ensureAlwaysArrayExists:function(e){"alwaysArray"in e&&("boolean"==typeof e.alwaysArray||dr(e.alwaysArray))||(e.alwaysArray=!1)},ensureKeyExists:function(e,t){e+"Key"in t&&"string"==typeof t[e+"Key"]||(t[e+"Key"]=t.compact?"_"+e:e)},checkFnExists:function(e,t){return e+"Fn"in t}},wr=_,gr=mr,yr=pr;function br(e){var t=Number(e);if(!isNaN(t))return t;var r=e.toLowerCase();return"true"===r||"false"!==r&&e}function vr(e,t){var r;if(hr.compact){if(!fr[hr[e+"Key"]]&&(yr(hr.alwaysArray)?-1!==hr.alwaysArray.indexOf(hr[e+"Key"]):hr.alwaysArray)&&(fr[hr[e+"Key"]]=[]),fr[hr[e+"Key"]]&&!yr(fr[hr[e+"Key"]])&&(fr[hr[e+"Key"]]=[fr[hr[e+"Key"]]]),e+"Fn"in hr&&"string"==typeof t&&(t=hr[e+"Fn"](t,fr)),"instruction"===e&&("instructionFn"in hr||"instructionNameFn"in hr))for(r in t)if(t.hasOwnProperty(r))if("instructionFn"in hr)t[r]=hr.instructionFn(t[r],r,fr);else{var n=t[r];delete t[r],t[hr.instructionNameFn(r,n,fr)]=n}yr(fr[hr[e+"Key"]])?fr[hr[e+"Key"]].push(t):fr[hr[e+"Key"]]=t}else{fr[hr.elementsKey]||(fr[hr.elementsKey]=[]);var o={};if(o[hr.typeKey]=e,"instruction"===e){for(r in t)if(t.hasOwnProperty(r))break;o[hr.nameKey]="instructionNameFn"in hr?hr.instructionNameFn(r,t,fr):r,hr.instructionHasAttributes?(o[hr.attributesKey]=t[r][hr.attributesKey],"instructionFn"in hr&&(o[hr.attributesKey]=hr.instructionFn(o[hr.attributesKey],r,fr))):("instructionFn"in hr&&(t[r]=hr.instructionFn(t[r],r,fr)),o[hr.instructionKey]=t[r])}else e+"Fn"in hr&&(t=hr[e+"Fn"](t,fr)),o[hr[e+"Key"]]=t;hr.addParent&&(o[hr.parentKey]=fr),fr[hr.elementsKey].push(o)}}function xr(e){var t;if("attributesFn"in hr&&e&&(e=hr.attributesFn(e,fr)),(hr.trim||"attributeValueFn"in hr||"attributeNameFn"in hr||hr.nativeTypeAttributes)&&e)for(t in e)if(e.hasOwnProperty(t)&&(hr.trim&&(e[t]=e[t].trim()),hr.nativeTypeAttributes&&(e[t]=br(e[t])),"attributeValueFn"in hr&&(e[t]=hr.attributeValueFn(e[t],t,fr)),"attributeNameFn"in hr)){var r=e[t];delete e[t],e[hr.attributeNameFn(t,e[t],fr)]=r}return e}function _r(e){var t={};if(e.body&&("xml"===e.name.toLowerCase()||hr.instructionHasAttributes)){for(var r,n=/([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;null!==(r=n.exec(e.body));)t[r[1]]=r[2]||r[3]||r[4];t=xr(t)}if("xml"===e.name.toLowerCase()){if(hr.ignoreDeclaration)return;fr[hr.declarationKey]={},Object.keys(t).length&&(fr[hr.declarationKey][hr.attributesKey]=t),hr.addParent&&(fr[hr.declarationKey][hr.parentKey]=fr)}else{if(hr.ignoreInstruction)return;hr.trim&&(e.body=e.body.trim());var o={};hr.instructionHasAttributes&&Object.keys(t).length?(o[e.name]={},o[e.name][hr.attributesKey]=t):o[e.name]=e.body,vr("instruction",o)}}function Er(e,t){var r;if("object"==typeof e&&(t=e.attributes,e=e.name),t=xr(t),"elementNameFn"in hr&&(e=hr.elementNameFn(e,fr)),hr.compact){var n;if(r={},!hr.ignoreAttributes&&t&&Object.keys(t).length)for(n in r[hr.attributesKey]={},t)t.hasOwnProperty(n)&&(r[hr.attributesKey][n]=t[n]);!(e in fr)&&(yr(hr.alwaysArray)?-1!==hr.alwaysArray.indexOf(e):hr.alwaysArray)&&(fr[e]=[]),fr[e]&&!yr(fr[e])&&(fr[e]=[fr[e]]),yr(fr[e])?fr[e].push(r):fr[e]=r}else fr[hr.elementsKey]||(fr[hr.elementsKey]=[]),(r={})[hr.typeKey]="element",r[hr.nameKey]=e,!hr.ignoreAttributes&&t&&Object.keys(t).length&&(r[hr.attributesKey]=t),hr.alwaysChildren&&(r[hr.elementsKey]=[]),fr[hr.elementsKey].push(r);r[hr.parentKey]=fr,fr=r}function Sr(e){hr.ignoreText||(e.trim()||hr.captureSpacesBetweenElements)&&(hr.trim&&(e=e.trim()),hr.nativeType&&(e=br(e)),hr.sanitize&&(e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")),vr("text",e))}function kr(e){hr.ignoreComment||(hr.trim&&(e=e.trim()),vr("comment",e))}function Tr(e){var t=fr[hr.parentKey];hr.addParent||delete fr[hr.parentKey],fr=t}function Ar(e){hr.ignoreCdata||(hr.trim&&(e=e.trim()),vr("cdata",e))}function Rr(e){hr.ignoreDoctype||(e=e.replace(/^ /,""),hr.trim&&(e=e.trim()),vr("doctype",e))}function Cr(e){e.note=e}var Ir=function(e,t){var r=wr.parser(!0,{}),n={};if(fr=n,hr=function(e){return hr=gr.copyOptions(e),gr.ensureFlagExists("ignoreDeclaration",hr),gr.ensureFlagExists("ignoreInstruction",hr),gr.ensureFlagExists("ignoreAttributes",hr),gr.ensureFlagExists("ignoreText",hr),gr.ensureFlagExists("ignoreComment",hr),gr.ensureFlagExists("ignoreCdata",hr),gr.ensureFlagExists("ignoreDoctype",hr),gr.ensureFlagExists("compact",hr),gr.ensureFlagExists("alwaysChildren",hr),gr.ensureFlagExists("addParent",hr),gr.ensureFlagExists("trim",hr),gr.ensureFlagExists("nativeType",hr),gr.ensureFlagExists("nativeTypeAttributes",hr),gr.ensureFlagExists("sanitize",hr),gr.ensureFlagExists("instructionHasAttributes",hr),gr.ensureFlagExists("captureSpacesBetweenElements",hr),gr.ensureAlwaysArrayExists(hr),gr.ensureKeyExists("declaration",hr),gr.ensureKeyExists("instruction",hr),gr.ensureKeyExists("attributes",hr),gr.ensureKeyExists("text",hr),gr.ensureKeyExists("comment",hr),gr.ensureKeyExists("cdata",hr),gr.ensureKeyExists("doctype",hr),gr.ensureKeyExists("type",hr),gr.ensureKeyExists("name",hr),gr.ensureKeyExists("elements",hr),gr.ensureKeyExists("parent",hr),gr.checkFnExists("doctype",hr),gr.checkFnExists("instruction",hr),gr.checkFnExists("cdata",hr),gr.checkFnExists("comment",hr),gr.checkFnExists("text",hr),gr.checkFnExists("instructionName",hr),gr.checkFnExists("elementName",hr),gr.checkFnExists("attributeName",hr),gr.checkFnExists("attributeValue",hr),gr.checkFnExists("attributes",hr),hr}(t),r.opt={strictEntities:!0},r.onopentag=Er,r.ontext=Sr,r.oncomment=kr,r.onclosetag=Tr,r.onerror=Cr,r.oncdata=Ar,r.ondoctype=Rr,r.onprocessinginstruction=_r,r.write(e).close(),n[hr.elementsKey]){var o=n[hr.elementsKey];delete n[hr.elementsKey],n[hr.elementsKey]=o,delete n.text}return n};var Or=Ir;const Nr=e=>{switch(e.type){case void 0:case"element":const t=new Pr(e.name,e.attributes),r=e.elements||[];for(const e of r){const r=Nr(e);void 0!==r&&t.push(r)}return t;case"text":return e.text;default:return}};class Fr extends w{}class Pr extends d{static fromXmlString(e){const t=Or(e,{compact:!1});return Nr(t)}constructor(e,t){super(e),t&&this.root.push(new Fr(t))}push(e){this.root.push(e)}}class Br extends d{constructor(e){super(""),this._attr=e}prepForXml(e){return{_attr:this._attr}}}class Dr extends d{constructor(e,t){super(e),t&&(this.root=t.root)}}const Lr=e=>{if(isNaN(e))throw new Error(`Invalid value '${e}' specified. Must be an integer.`);return Math.floor(e)},Ur=e=>{const t=Lr(e);if(t<0)throw new Error(`Invalid value '${e}' specified. Must be a positive integer.`);return t},jr=(e,t)=>{const r=2*t;if(e.length!==r||isNaN(Number(`0x${e}`)))throw new Error(`Invalid hex value '${e}'. Expected ${r} digit hex value`);return e},Mr=e=>jr(e,1),zr=e=>{const t=e.slice(-2),r=e.substring(0,e.length-2);return`${Number(r)}${t}`},Wr=e=>{const t=zr(e);if(parseFloat(t)<0)throw new Error(`Invalid value '${t}' specified. Expected a positive number.`);return t},Hr=e=>{if("auto"===e)return e;const t="#"===e.charAt(0)?e.substring(1):e;return jr(t,3)},Kr=e=>"string"==typeof e?zr(e):Lr(e),Gr=e=>"string"==typeof e?Wr(e):Ur(e),Vr=e=>"string"==typeof e?Wr(e):Ur(e),qr=Ur,Zr=Ur;class Xr extends d{constructor(e,t=!0){super(e),!0!==t&&this.root.push(new y({val:t}))}}class Yr extends d{constructor(e,t){super(e),this.root.push(new y({val:Gr(t)}))}}class $r extends d{constructor(e,t){super(e),this.root.push(new y({val:t}))}}const Jr=(e,t)=>new tn({name:e,attributes:{value:{key:"w:val",value:t}}});class Qr extends d{constructor(e,t){super(e),this.root.push(new y({val:t}))}}class en extends d{constructor(e,t){super(e),this.root.push(t)}}class tn extends d{constructor({name:e,attributes:t,children:r}){super(e),t&&this.root.push(new g(t)),r&&this.root.push(...r)}}const rn="left";class nn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val"})}}class on extends d{constructor(e){super("w:jc"),this.root.push(new nn({val:e}))}}class sn extends d{constructor(e,{color:t,size:r,space:n,style:o}){super(e),this.root.push(new an({style:o,color:void 0===t?void 0:Hr(t),size:void 0===r?void 0:qr(r),space:void 0===n?void 0:Zr(n)}))}}class an extends w{constructor(){super(...arguments),l(this,"xmlKeys",{style:"w:val",color:"w:color",size:"w:sz",space:"w:space"})}}const cn="single";class un extends m{constructor(e){super("w:pBdr"),e.top&&this.root.push(new sn("w:top",e.top)),e.bottom&&this.root.push(new sn("w:bottom",e.bottom)),e.left&&this.root.push(new sn("w:left",e.left)),e.right&&this.root.push(new sn("w:right",e.right))}}class ln extends d{constructor(){super("w:pBdr");const e=new sn("w:bottom",{color:"auto",space:1,style:cn,size:6});this.root.push(e)}}class hn extends d{constructor({start:e,end:t,left:r,right:n,hanging:o,firstLine:i}){super("w:ind"),this.root.push(new g({start:{key:"w:start",value:void 0===e?void 0:Kr(e)},end:{key:"w:end",value:void 0===t?void 0:Kr(t)},left:{key:"w:left",value:void 0===r?void 0:Kr(r)},right:{key:"w:right",value:void 0===n?void 0:Kr(n)},hanging:{key:"w:hanging",value:void 0===o?void 0:Vr(o)},firstLine:{key:"w:firstLine",value:void 0===i?void 0:Vr(i)}}))}}let fn=class extends d{constructor(){super("w:br")}};class pn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{type:"w:fldCharType",dirty:"w:dirty"})}}class dn extends d{constructor(e){super("w:fldChar"),this.root.push(new pn({type:"begin",dirty:e}))}}class mn extends d{constructor(e){super("w:fldChar"),this.root.push(new pn({type:"separate",dirty:e}))}}class wn extends d{constructor(e){super("w:fldChar"),this.root.push(new pn({type:"end",dirty:e}))}}const gn="preserve";class yn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{space:"xml:space"})}}class bn extends d{constructor(){super("w:instrText"),this.root.push(new yn({space:gn})),this.root.push("PAGE")}}class vn extends d{constructor(){super("w:instrText"),this.root.push(new yn({space:gn})),this.root.push("NUMPAGES")}}class xn extends d{constructor(){super("w:instrText"),this.root.push(new yn({space:gn})),this.root.push("SECTIONPAGES")}}class _n extends d{constructor(){super("w:instrText"),this.root.push(new yn({space:gn})),this.root.push("SECTION")}}class En extends w{constructor(){super(...arguments),l(this,"xmlKeys",{fill:"w:fill",color:"w:color",type:"w:val"})}}class Sn extends d{constructor({fill:e,color:t,type:r}){super("w:shd"),this.root.push(new En({fill:void 0===e?void 0:Hr(e),color:void 0===t?void 0:Hr(t),type:r}))}}class kn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{id:"w:id",author:"w:author",date:"w:date"})}}class Tn extends d{constructor(e){super("w:em"),this.root.push(new y({val:e}))}}class An extends Tn{constructor(e="dot"){super(e)}}class Rn extends d{constructor(e){super("w:spacing"),this.root.push(new y({val:Kr(e)}))}}class Cn extends d{constructor(e){super("w:color"),this.root.push(new y({val:Hr(e)}))}}class In extends d{constructor(e){super("w:highlight"),this.root.push(new y({val:e}))}}class On extends d{constructor(e){super("w:highlightCs"),this.root.push(new y({val:e}))}}class Nn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{ascii:"w:ascii",cs:"w:cs",eastAsia:"w:eastAsia",hAnsi:"w:hAnsi",hint:"w:hint"})}}class Fn extends d{constructor(e,t){if(super("w:rFonts"),"string"==typeof e){const r=e;this.root.push(new Nn({ascii:r,cs:r,eastAsia:r,hAnsi:r,hint:t}))}else{const t=e;this.root.push(new Nn(t))}}}let Pn=class extends d{constructor(e){super("w:vertAlign"),this.root.push(new y({val:e}))}};class Bn extends Pn{constructor(){super("superscript")}}class Dn extends Pn{constructor(){super("subscript")}}const Ln="single";class Un extends d{constructor(e=Ln,t){super("w:u"),this.root.push(new y({val:e,color:void 0===t?void 0:Hr(t)}))}}class jn extends m{constructor(e){var t,r;if(super("w:rPr"),!e)return;void 0!==e.noProof&&this.push(new Xr("w:noProof",e.noProof)),void 0!==e.bold&&this.push(new Xr("w:b",e.bold)),(void 0===e.boldComplexScript&&void 0!==e.bold||e.boldComplexScript)&&this.push(new Xr("w:bCs",null!=(t=e.boldComplexScript)?t:e.bold)),void 0!==e.italics&&this.push(new Xr("w:i",e.italics)),(void 0===e.italicsComplexScript&&void 0!==e.italics||e.italicsComplexScript)&&this.push(new Xr("w:iCs",null!=(r=e.italicsComplexScript)?r:e.italics)),e.underline&&this.push(new Un(e.underline.type,e.underline.color)),e.effect&&this.push(new $r("w:effect",e.effect)),e.emphasisMark&&this.push(new An(e.emphasisMark.type)),e.color&&this.push(new Cn(e.color)),e.kern&&this.push(new Yr("w:kern",e.kern)),e.position&&this.push(new $r("w:position",e.position)),void 0!==e.size&&this.push(new Yr("w:sz",e.size));const n=void 0===e.sizeComplexScript||!0===e.sizeComplexScript?e.size:e.sizeComplexScript;n&&this.push(new Yr("w:szCs",n)),void 0!==e.rightToLeft&&this.push(new Xr("w:rtl",e.rightToLeft)),void 0!==e.smallCaps?this.push(new Xr("w:smallCaps",e.smallCaps)):void 0!==e.allCaps&&this.push(new Xr("w:caps",e.allCaps)),void 0!==e.strike&&this.push(new Xr("w:strike",e.strike)),void 0!==e.doubleStrike&&this.push(new Xr("w:dstrike",e.doubleStrike)),e.subScript&&this.push(new Dn),e.superScript&&this.push(new Bn),e.style&&this.push(new $r("w:rStyle",e.style)),e.font&&("string"==typeof e.font?this.push(new Fn(e.font)):"name"in e.font?this.push(new Fn(e.font.name,e.font.hint)):this.push(new Fn(e.font))),e.highlight&&this.push(new In(e.highlight));const o=void 0===e.highlightComplexScript||!0===e.highlightComplexScript?e.highlight:e.highlightComplexScript;o&&this.push(new On(o)),e.characterSpacing&&this.push(new Rn(e.characterSpacing)),void 0!==e.emboss&&this.push(new Xr("w:emboss",e.emboss)),void 0!==e.imprint&&this.push(new Xr("w:imprint",e.imprint)),e.shading&&this.push(new Sn(e.shading)),e.revision&&this.push(new Mn(e.revision)),e.border&&this.push(new sn("w:bdr",e.border)),void 0!==e.snapToGrid&&this.push(new Xr("w:snapToGrid",e.snapToGrid)),e.vanish&&this.push(new Xr("w:vanish",e.vanish)),e.specVanish&&this.push(new Xr("w:specVanish",e.vanish)),void 0!==e.scale&&this.push(new Qr("w:w",e.scale)),e.language&&this.push((e=>new tn({name:"w:lang",attributes:{value:{key:"w:val",value:e.value},eastAsia:{key:"w:eastAsia",value:e.eastAsia},bidirectional:{key:"w:bidi",value:e.bidirectional}}}))(e.language)),e.math&&this.push(new Xr("w:oMath",e.math))}push(e){this.root.push(e)}}class Mn extends d{constructor(e){super("w:rPrChange"),this.root.push(new kn({id:e.id,author:e.author,date:e.date})),this.addChildElement(new jn(e))}}class zn extends d{constructor(e){var t;return super("w:t"),"string"==typeof e?(this.root.push(new yn({space:gn})),this.root.push(e),this):(this.root.push(new yn({space:null!=(t=e.space)?t:"default"})),this.root.push(e.text),this)}}class Wn extends d{constructor(e){if(super("w:r"),l(this,"properties"),this.properties=new jn(e),this.root.push(this.properties),e.break)for(let t=0;t<e.break;t++)this.root.push(new fn);if(e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case"CURRENT":this.root.push(new dn),this.root.push(new bn),this.root.push(new mn),this.root.push(new wn);break;case"TOTAL_PAGES":this.root.push(new dn),this.root.push(new vn),this.root.push(new mn),this.root.push(new wn);break;case"TOTAL_PAGES_IN_SECTION":this.root.push(new dn),this.root.push(new xn),this.root.push(new mn),this.root.push(new wn);break;case"SECTION":this.root.push(new dn),this.root.push(new _n),this.root.push(new mn),this.root.push(new wn);break;default:this.root.push(new zn(t))}else e.text&&this.root.push(new zn(e.text))}}class Hn extends Wn{constructor(e){if("string"==typeof e)return super({}),this.root.push(new zn(e)),this;super(e)}}const Kn=e=>Math.floor(72*e*20),Gn=(e=0)=>{let t=e;return()=>++t},Vn=e=>((e,t=21)=>(r=t)=>{let n="",o=r;for(;o--;)n+=e[Math.random()*e.length|0];return n})("1234567890abcdef",e)();class qn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{id:"w:id",initials:"w:initials",author:"w:author",date:"w:date"})}}class Zn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{"xmlns:cx":"xmlns:cx","xmlns:cx1":"xmlns:cx1","xmlns:cx2":"xmlns:cx2","xmlns:cx3":"xmlns:cx3","xmlns:cx4":"xmlns:cx4","xmlns:cx5":"xmlns:cx5","xmlns:cx6":"xmlns:cx6","xmlns:cx7":"xmlns:cx7","xmlns:cx8":"xmlns:cx8","xmlns:mc":"xmlns:mc","xmlns:aink":"xmlns:aink","xmlns:am3d":"xmlns:am3d","xmlns:o":"xmlns:o","xmlns:r":"xmlns:r","xmlns:m":"xmlns:m","xmlns:v":"xmlns:v","xmlns:wp14":"xmlns:wp14","xmlns:wp":"xmlns:wp","xmlns:w10":"xmlns:w10","xmlns:w":"xmlns:w","xmlns:w14":"xmlns:w14","xmlns:w15":"xmlns:w15","xmlns:w16cex":"xmlns:w16cex","xmlns:w16cid":"xmlns:w16cid","xmlns:w16":"xmlns:w16","xmlns:w16sdtdh":"xmlns:w16sdtdh","xmlns:w16se":"xmlns:w16se","xmlns:wpg":"xmlns:wpg","xmlns:wpi":"xmlns:wpi","xmlns:wne":"xmlns:wne","xmlns:wps":"xmlns:wps"})}}class Xn extends d{constructor({id:e,initials:t,author:r,date:n=new Date,children:o}){super("w:comment"),this.root.push(new qn({id:e,initials:t,author:r,date:n.toISOString()}));for(const e of o)this.root.push(e)}}class Yn extends d{constructor({children:e}){super("w:comments"),this.root.push(new Zn({"xmlns:cx":"http://schemas.microsoft.com/office/drawing/2014/chartex","xmlns:cx1":"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex","xmlns:cx2":"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex","xmlns:cx3":"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex","xmlns:cx4":"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex","xmlns:cx5":"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex","xmlns:cx6":"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex","xmlns:cx7":"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex","xmlns:cx8":"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex","xmlns:mc":"http://schemas.openxmlformats.org/markup-compatibility/2006","xmlns:aink":"http://schemas.microsoft.com/office/drawing/2016/ink","xmlns:am3d":"http://schemas.microsoft.com/office/drawing/2017/model3d","xmlns:o":"urn:schemas-microsoft-com:office:office","xmlns:r":"http://schemas.openxmlformats.org/officeDocument/2006/relationships","xmlns:m":"http://schemas.openxmlformats.org/officeDocument/2006/math","xmlns:v":"urn:schemas-microsoft-com:vml","xmlns:wp14":"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing","xmlns:wp":"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing","xmlns:w10":"urn:schemas-microsoft-com:office:word","xmlns:w":"http://schemas.openxmlformats.org/wordprocessingml/2006/main","xmlns:w14":"http://schemas.microsoft.com/office/word/2010/wordml","xmlns:w15":"http://schemas.microsoft.com/office/word/2012/wordml","xmlns:w16cex":"http://schemas.microsoft.com/office/word/2018/wordml/cex","xmlns:w16cid":"http://schemas.microsoft.com/office/word/2016/wordml/cid","xmlns:w16":"http://schemas.microsoft.com/office/word/2018/wordml","xmlns:w16sdtdh":"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash","xmlns:w16se":"http://schemas.microsoft.com/office/word/2015/wordml/symex","xmlns:wpg":"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup","xmlns:wpi":"http://schemas.microsoft.com/office/word/2010/wordprocessingInk","xmlns:wne":"http://schemas.microsoft.com/office/word/2006/wordml","xmlns:wps":"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}));for(const t of e)this.root.push(new Xn(t))}}class $n extends d{constructor(){super("w:pageBreakBefore")}}const Jn="auto";class Qn extends w{constructor(){super(...arguments),l(this,"xmlKeys",{after:"w:after",before:"w:before",line:"w:line",lineRule:"w:lineRule"})}}class eo extends d{constructor(e){super("w:spacing"),this.root.push(new Qn(e))}}let to=class extends d{constructor(e){super("w:pStyle"),this.root.push(new y({val:e}))}};class ro extends d{constructor(e){super("w:tabs");for(const t of e)this.root.push(new oo(t))}}class no extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val",pos:"w:pos",leader:"w:leader"})}}class oo extends d{constructor({type:e,position:t,leader:r}){super("w:tab"),this.root.push(new no({val:e,pos:t,leader:r}))}}class io extends d{constructor(e,t){super("w:numPr"),this.root.push(new so(t)),this.root.push(new ao(e))}}class so extends d{constructor(e){if(super("w:ilvl"),e>9)throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");this.root.push(new y({val:e}))}}class ao extends d{constructor(e){super("w:numId"),this.root.push(new y({val:"string"==typeof e?`{${e}}`:e}))}}class co extends d{constructor(){super(...arguments),l(this,"fileChild",Symbol())}}class uo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{id:"Id",type:"Type",target:"Target",targetMode:"TargetMode"})}}class lo extends d{constructor(e,t,r,n){super("Relationship"),this.root.push(new uo({id:e,type:t,target:r,targetMode:n}))}}class ho extends w{constructor(){super(...arguments),l(this,"xmlKeys",{id:"r:id",history:"w:history",anchor:"w:anchor"})}}class fo extends d{constructor(e,t,r){super("w:hyperlink"),l(this,"linkId"),this.linkId=t;const n={history:1,anchor:r||void 0,id:r?void 0:`rId${this.linkId}`},o=new ho(n);this.root.push(o),e.forEach((e=>{this.root.push(e)}))}}class po extends d{constructor(e){super("w:externalHyperlink"),this.options=e}}class mo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{id:"w:id",name:"w:name"})}}class wo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{id:"w:id"})}}class go{constructor(e){l(this,"bookmarkUniqueNumericId",Gn()),l(this,"start"),l(this,"children"),l(this,"end");const t=this.bookmarkUniqueNumericId();this.start=new yo(e.id,t),this.children=e.children,this.end=new bo(t)}}class yo extends d{constructor(e,t){super("w:bookmarkStart");const r=new mo({name:e,id:t});this.root.push(r)}}class bo extends d{constructor(e){super("w:bookmarkEnd");const t=new wo({id:e});this.root.push(t)}}class vo extends d{constructor(e){super("w:outlineLvl"),this.level=e,this.root.push(new y({val:e}))}}class xo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{verticalAlign:"w:val"})}}class _o extends d{constructor(e){super("w:vAlign"),this.root.push(new xo({verticalAlign:e}))}}const Eo="default";class So extends w{constructor(){super(...arguments),l(this,"xmlKeys",{type:"w:type",id:"r:id"})}}class ko extends d{constructor(e,t){super(e),this.root.push(new So({type:t.type||Eo,id:`rId${t.id}`}))}}class To extends d{constructor({space:e,count:t,separate:r,equalWidth:n,children:o}){super("w:cols"),this.root.push(new g({space:{key:"w:space",value:void 0===e?void 0:Vr(e)},count:{key:"w:num",value:void 0===t?void 0:Lr(t)},separate:{key:"w:sep",value:r},equalWidth:{key:"w:equalWidth",value:n}})),!n&&o&&o.forEach((e=>this.addChildElement(e)))}}class Ao extends w{constructor(){super(...arguments),l(this,"xmlKeys",{type:"w:type",linePitch:"w:linePitch",charSpace:"w:charSpace"})}}class Ro extends d{constructor(e,t,r){super("w:docGrid"),this.root.push(new Ao({type:r,linePitch:Lr(e),charSpace:t?Lr(t):void 0}))}}class Co extends w{constructor(){super(...arguments),l(this,"xmlKeys",{display:"w:display",offsetFrom:"w:offsetFrom",zOrder:"w:zOrder"})}}class Io extends m{constructor(e){if(super("w:pgBorders"),!e)return this;e.pageBorders?this.root.push(new Co({display:e.pageBorders.display,offsetFrom:e.pageBorders.offsetFrom,zOrder:e.pageBorders.zOrder})):this.root.push(new Co({})),e.pageBorderTop&&this.root.push(new sn("w:top",e.pageBorderTop)),e.pageBorderLeft&&this.root.push(new sn("w:left",e.pageBorderLeft)),e.pageBorderBottom&&this.root.push(new sn("w:bottom",e.pageBorderBottom)),e.pageBorderRight&&this.root.push(new sn("w:right",e.pageBorderRight))}}class Oo extends d{constructor(e,t,r,n,o,i,s){super("w:pgMar"),this.root.push(new g({top:{key:"w:top",value:Kr(e)},right:{key:"w:right",value:Vr(t)},bottom:{key:"w:bottom",value:Kr(r)},left:{key:"w:left",value:Vr(n)},header:{key:"w:header",value:Vr(o)},footer:{key:"w:footer",value:Vr(i)},gutter:{key:"w:gutter",value:Vr(s)}}))}}class No extends w{constructor(){super(...arguments),l(this,"xmlKeys",{start:"w:start",formatType:"w:fmt",separator:"w:chapSep"})}}class Fo extends d{constructor({start:e,formatType:t,separator:r}){super("w:pgNumType"),this.root.push(new No({start:void 0===e?void 0:Lr(e),formatType:t,separator:r}))}}class Po extends d{constructor(e,t,r){super("w:pgSz");const n="landscape"===r,o=Vr(e),i=Vr(t);this.root.push(new g({width:{key:"w:w",value:n?i:o},height:{key:"w:h",value:n?o:i},orientation:{key:"w:orient",value:r}}))}}class Bo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val"})}}class Do extends d{constructor(e){super("w:textDirection"),this.root.push(new Bo({val:e}))}}class Lo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val"})}}class Uo extends d{constructor(e){super("w:type"),this.root.push(new Lo({val:e}))}}class jo extends d{constructor({page:{size:{width:e=11906,height:t=16838,orientation:r="portrait"}={},margin:{top:n=1440,right:o=1440,bottom:i=1440,left:s=1440,header:a=708,footer:c=708,gutter:u=0}={},pageNumbers:l={},borders:h,textDirection:f}={},grid:{linePitch:p=360,charSpace:d,type:m}={},headerWrapperGroup:w={},footerWrapperGroup:g={},lineNumbers:y,titlePage:b,verticalAlign:v,column:x,type:_}={}){super("w:sectPr"),this.addHeaderFooterGroup("w:headerReference",w),this.addHeaderFooterGroup("w:footerReference",g),_&&this.root.push(new Uo(_)),this.root.push(new Po(e,t,r)),this.root.push(new Oo(n,o,i,s,a,c,u)),h&&this.root.push(new Io(h)),y&&this.root.push((({countBy:e,start:t,restart:r,distance:n})=>new tn({name:"w:lnNumType",attributes:{countBy:{key:"w:countBy",value:void 0===e?void 0:Lr(e)},start:{key:"w:start",value:void 0===t?void 0:Lr(t)},restart:{key:"w:restart",value:r},distance:{key:"w:distance",value:void 0===n?void 0:Vr(n)}}}))(y)),this.root.push(new Fo(l)),x&&this.root.push(new To(x)),v&&this.root.push(new _o(v)),void 0!==b&&this.root.push(new Xr("w:titlePg",b)),f&&this.root.push(new Do(f)),this.root.push(new Ro(p,d,m))}addHeaderFooterGroup(e,t){t.default&&this.root.push(new ko(e,{type:Eo,id:t.default.View.ReferenceId})),t.first&&this.root.push(new ko(e,{type:"first",id:t.first.View.ReferenceId})),t.even&&this.root.push(new ko(e,{type:"even",id:t.even.View.ReferenceId}))}}class Mo extends d{constructor(){super("w:body"),l(this,"sections",[])}addSection(e){const t=this.sections.pop();this.root.push(this.createSectionParagraph(t)),this.sections.push(new jo(e))}prepForXml(e){return 1===this.sections.length&&(this.root.splice(0,1),this.root.push(this.sections.pop())),super.prepForXml(e)}push(e){this.root.push(e)}createSectionParagraph(e){const t=new $o({}),r=new Yo({});return r.push(e),t.addChildElement(r),t}}class zo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",aink:"xmlns:aink",am3d:"xmlns:am3d",w16cex:"xmlns:w16cex",w16cid:"xmlns:w16cid",w16:"xmlns:w16",w16sdtdh:"xmlns:w16sdtdh",w16se:"xmlns:w16se"})}}class Wo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{color:"w:color",themeColor:"w:themeColor",themeShade:"w:themeShade",themeTint:"w:themeTint"})}}class Ho extends d{constructor(e){super("w:background"),this.root.push(new Wo({color:void 0===e.color?void 0:Hr(e.color),themeColor:e.themeColor,themeShade:void 0===e.themeShade?void 0:Mr(e.themeShade),themeTint:void 0===e.themeTint?void 0:Mr(e.themeTint)}))}}class Ko extends d{constructor(e){super("w:document"),l(this,"body"),this.root.push(new zo({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",aink:"http://schemas.microsoft.com/office/drawing/2016/ink",am3d:"http://schemas.microsoft.com/office/drawing/2017/model3d",w16cex:"http://schemas.microsoft.com/office/word/2018/wordml/cex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16:"http://schemas.microsoft.com/office/word/2018/wordml",w16sdtdh:"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex",Ignorable:"w14 w15 wp14"})),this.body=new Mo,e.background&&this.root.push(new Ho(e.background)),this.root.push(this.body)}add(e){return this.body.push(e),this}get Body(){return this.body}}class Go extends w{constructor(){super(...arguments),l(this,"xmlKeys",{xmlns:"xmlns"})}}class Vo extends d{constructor(){super("Relationships"),this.root.push(new Go({xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"}))}createRelationship(e,t,r,n){const o=new lo(`rId${e}`,t,r,n);return this.root.push(o),o}get RelationshipCount(){return this.root.length-1}}class qo{constructor(e){l(this,"document"),l(this,"relationships"),this.document=new Ko(e),this.relationships=new Vo}get View(){return this.document}get Relationships(){return this.relationships}}class Zo extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val"})}}class Xo extends d{constructor(){super("w:wordWrap"),this.root.push(new Zo({val:0}))}}class Yo extends m{constructor(e){var t,r;if(super("w:pPr"),l(this,"numberingReferences",[]),!e)return this;e.heading&&this.push(new to(e.heading)),e.bullet&&this.push(new to("ListParagraph")),e.numbering&&(e.style||e.heading||e.numbering.custom||this.push(new to("ListParagraph"))),e.style&&this.push(new to(e.style)),void 0!==e.keepNext&&this.push(new Xr("w:keepNext",e.keepNext)),void 0!==e.keepLines&&this.push(new Xr("w:keepLines",e.keepLines)),e.pageBreakBefore&&this.push(new $n),e.frame&&this.push((e=>{var t,r;return new tn({name:"w:framePr",attributes:{anchorLock:{key:"w:anchorLock",value:e.anchorLock},dropCap:{key:"w:dropCap",value:e.dropCap},width:{key:"w:w",value:e.width},height:{key:"w:h",value:e.height},x:{key:"w:x",value:e.position?e.position.x:void 0},y:{key:"w:y",value:e.position?e.position.y:void 0},anchorHorizontal:{key:"w:hAnchor",value:e.anchor.horizontal},anchorVertical:{key:"w:vAnchor",value:e.anchor.vertical},spaceHorizontal:{key:"w:hSpace",value:null==(t=e.space)?void 0:t.horizontal},spaceVertical:{key:"w:vSpace",value:null==(r=e.space)?void 0:r.vertical},rule:{key:"w:hRule",value:e.rule},alignmentX:{key:"w:xAlign",value:e.alignment?e.alignment.x:void 0},alignmentY:{key:"w:yAlign",value:e.alignment?e.alignment.y:void 0},lines:{key:"w:lines",value:e.lines},wrap:{key:"w:wrap",value:e.wrap}}})})(e.frame)),void 0!==e.widowControl&&this.push(new Xr("w:widowControl",e.widowControl)),e.bullet&&this.push(new io(1,e.bullet.level)),e.numbering&&(this.numberingReferences.push({reference:e.numbering.reference,instance:null!=(t=e.numbering.instance)?t:0}),this.push(new io(`${e.numbering.reference}-${null!=(r=e.numbering.instance)?r:0}`,e.numbering.level))),e.border&&this.push(new un(e.border)),e.thematicBreak&&this.push(new ln),e.shading&&this.push(new Sn(e.shading)),e.wordWrap&&this.push(new Xo),e.overflowPunctuation&&this.push(new Xr("w:overflowPunct",e.overflowPunctuation));const n=[...void 0!==e.rightTabStop?[{type:"right",position:e.rightTabStop}]:[],...e.tabStops?e.tabStops:[],...void 0!==e.leftTabStop?[{type:"left",position:e.leftTabStop}]:[]];n.length>0&&this.push(new ro(n)),void 0!==e.bidirectional&&this.push(new Xr("w:bidi",e.bidirectional)),e.spacing&&this.push(new eo(e.spacing)),e.indent&&this.push(new hn(e.indent)),void 0!==e.contextualSpacing&&this.push(new Xr("w:contextualSpacing",e.contextualSpacing)),e.alignment&&this.push(new on(e.alignment)),void 0!==e.outlineLevel&&this.push(new vo(e.outlineLevel)),void 0!==e.suppressLineNumbers&&this.push(new Xr("w:suppressLineNumbers",e.suppressLineNumbers)),void 0!==e.autoSpaceEastAsianText&&this.push(new Xr("w:autoSpaceDN",e.autoSpaceEastAsianText)),e.run&&this.push(new jn(e.run))}push(e){this.root.push(e)}prepForXml(e){if(e.viewWrapper instanceof qo)for(const t of this.numberingReferences)e.file.Numbering.createConcreteNumberingInstance(t.reference,t.instance);return super.prepForXml(e)}}class $o extends co{constructor(e){if(super("w:p"),l(this,"properties"),"string"==typeof e)return this.properties=new Yo({}),this.root.push(this.properties),this.root.push(new Hn(e)),this;if(this.properties=new Yo(e),this.root.push(this.properties),e.text&&this.root.push(new Hn(e.text)),e.children)for(const t of e.children)if(t instanceof go){this.root.push(t.start);for(const e of t.children)this.root.push(e);this.root.push(t.end)}else this.root.push(t)}prepForXml(e){for(const t of this.root)if(t instanceof po){const r=this.root.indexOf(t),n=new fo(t.options.children,((e=21)=>{let t="",r=e;for(;r--;)t+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64*Math.random()|0];return t})().toLowerCase());e.viewWrapper.Relationships.createRelationship(n.linkId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",t.options.link,"External"),this.root[r]=n}return super.prepForXml(e)}addRunToFront(e){return this.root.splice(1,0,e),this}}const Jo={style:"none",size:0,color:"auto"},Qo={style:cn,size:4,color:"auto"};l(class extends d{constructor(e){super("w:tblBorders"),e.top?this.root.push(new sn("w:top",e.top)):this.root.push(new sn("w:top",Qo)),e.left?this.root.push(new sn("w:left",e.left)):this.root.push(new sn("w:left",Qo)),e.bottom?this.root.push(new sn("w:bottom",e.bottom)):this.root.push(new sn("w:bottom",Qo)),e.right?this.root.push(new sn("w:right",e.right)):this.root.push(new sn("w:right",Qo)),e.insideHorizontal?this.root.push(new sn("w:insideH",e.insideHorizontal)):this.root.push(new sn("w:insideH",Qo)),e.insideVertical?this.root.push(new sn("w:insideV",e.insideVertical)):this.root.push(new sn("w:insideV",Qo))}},"NONE",{top:Jo,bottom:Jo,left:Jo,right:Jo,insideHorizontal:Jo,insideVertical:Jo});class ei extends w{constructor(){super(...arguments),l(this,"xmlKeys",{xmlns:"xmlns",vt:"xmlns:vt"})}}class ti extends d{constructor(){super("Properties"),this.root.push(new ei({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"}))}}class ri extends w{constructor(){super(...arguments),l(this,"xmlKeys",{xmlns:"xmlns"})}}class ni extends w{constructor(){super(...arguments),l(this,"xmlKeys",{contentType:"ContentType",extension:"Extension"})}}class oi extends d{constructor(e,t){super("Default"),this.root.push(new ni({contentType:e,extension:t}))}}class ii extends w{constructor(){super(...arguments),l(this,"xmlKeys",{contentType:"ContentType",partName:"PartName"})}}class si extends d{constructor(e,t){super("Override"),this.root.push(new ii({contentType:e,partName:t}))}}class ai extends d{constructor(){super("Types"),this.root.push(new ri({xmlns:"http://schemas.openxmlformats.org/package/2006/content-types"})),this.root.push(new oi("image/png","png")),this.root.push(new oi("image/jpeg","jpeg")),this.root.push(new oi("image/jpeg","jpg")),this.root.push(new oi("image/bmp","bmp")),this.root.push(new oi("image/gif","gif")),this.root.push(new oi("application/vnd.openxmlformats-package.relationships+xml","rels")),this.root.push(new oi("application/xml","xml")),this.root.push(new oi("application/vnd.openxmlformats-officedocument.obfuscatedFont","odttf")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml","/word/document.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml","/word/styles.xml")),this.root.push(new si("application/vnd.openxmlformats-package.core-properties+xml","/docProps/core.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.custom-properties+xml","/docProps/custom.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.extended-properties+xml","/docProps/app.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml","/word/numbering.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml","/word/footnotes.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml","/word/settings.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml","/word/comments.xml")),this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml","/word/fontTable.xml"))}addFooter(e){this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml",`/word/footer${e}.xml`))}addHeader(e){this.root.push(new si("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml",`/word/header${e}.xml`))}}class ci extends d{constructor(e){super("cp:coreProperties"),this.root.push(new zo({cp:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",xsi:"http://www.w3.org/2001/XMLSchema-instance"})),e.title&&this.root.push(new en("dc:title",e.title)),e.subject&&this.root.push(new en("dc:subject",e.subject)),e.creator&&this.root.push(new en("dc:creator",e.creator)),e.keywords&&this.root.push(new en("cp:keywords",e.keywords)),e.description&&this.root.push(new en("dc:description",e.description)),e.lastModifiedBy&&this.root.push(new en("cp:lastModifiedBy",e.lastModifiedBy)),e.revision&&this.root.push(new en("cp:revision",String(e.revision))),this.root.push(new ui("dcterms:created")),this.root.push(new ui("dcterms:modified"))}}class ui extends d{constructor(e){super(e),this.root.push(new zo({type:"dcterms:W3CDTF"})),this.root.push((new Date).toISOString())}}class li extends w{constructor(){super(...arguments),l(this,"xmlKeys",{xmlns:"xmlns",vt:"xmlns:vt"})}}class hi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{fmtid:"fmtid",pid:"pid",name:"name"})}}class fi extends d{constructor(e,t){super("property"),this.root.push(new hi({fmtid:"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",pid:e.toString(),name:t.name})),this.root.push(new pi(t.value))}}class pi extends d{constructor(e){super("vt:lpwstr"),this.root.push(e)}}class di extends d{constructor(e){super("Properties"),l(this,"nextId"),l(this,"properties",[]),this.root.push(new li({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"})),this.nextId=2;for(const t of e)this.addCustomProperty(t)}prepForXml(e){return this.properties.forEach((e=>this.root.push(e))),super.prepForXml(e)}addCustomProperty(e){this.properties.push(new fi(this.nextId++,e))}}class mi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"})}}let wi=class extends Dr{constructor(e,t){super("w:ftr",t),l(this,"refId"),this.refId=e,t||this.root.push(new mi({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}};class gi{constructor(e,t,r){l(this,"footer"),l(this,"relationships"),this.media=e,this.footer=new wi(t,r),this.relationships=new Vo}add(e){this.footer.add(e)}addChildElement(e){this.footer.addChildElement(e)}get View(){return this.footer}get Relationships(){return this.relationships}get Media(){return this.media}}class yi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{type:"w:type",id:"w:id"})}}class bi extends d{constructor(){super("w:footnoteRef")}}class vi extends Wn{constructor(){super({style:"FootnoteReference"}),this.root.push(new bi)}}class xi extends d{constructor(e){super("w:footnote"),this.root.push(new yi({type:e.type,id:e.id}));for(let t=0;t<e.children.length;t++){const r=e.children[t];0===t&&r.addRunToFront(new vi),this.root.push(r)}}}class _i extends d{constructor(){super("w:continuationSeparator")}}class Ei extends Wn{constructor(){super({}),this.root.push(new _i)}}class Si extends d{constructor(){super("w:separator")}}class ki extends Wn{constructor(){super({}),this.root.push(new Si)}}class Ti extends w{constructor(){super(...arguments),l(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"})}}class Ai extends d{constructor(){super("w:footnotes"),this.root.push(new Ti({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const e=new xi({id:-1,type:"separator",children:[new $o({spacing:{after:0,line:240,lineRule:Jn},children:[new ki]})]});this.root.push(e);const t=new xi({id:0,type:"continuationSeparator",children:[new $o({spacing:{after:0,line:240,lineRule:Jn},children:[new Ei]})]});this.root.push(t)}createFootNote(e,t){const r=new xi({id:e,children:t});this.root.push(r)}}class Ri{constructor(){l(this,"footnotess"),l(this,"relationships"),this.footnotess=new Ai,this.relationships=new Vo}get View(){return this.footnotess}get Relationships(){return this.relationships}}class Ci extends w{constructor(){super(...arguments),l(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",w16cid:"xmlns:w16cid",w16se:"xmlns:w16se"})}}let Ii=class extends Dr{constructor(e,t){super("w:hdr",t),l(this,"refId"),this.refId=e,t||this.root.push(new Ci({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}};class Oi{constructor(e,t,r){l(this,"header"),l(this,"relationships"),this.media=e,this.header=new Ii(t,r),this.relationships=new Vo}add(e){return this.header.add(e),this}addChildElement(e){this.header.addChildElement(e)}get View(){return this.header}get Relationships(){return this.relationships}get Media(){return this.media}}class Ni{constructor(){l(this,"map"),this.map=new Map}addImage(e,t){this.map.set(e,t)}get Array(){return Array.from(this.map.values())}}const Fi="bullet";class Pi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{ilvl:"w:ilvl",tentative:"w15:tentative"})}}class Bi extends d{constructor(e){super("w:numFmt"),this.root.push(new y({val:e}))}}class Di extends d{constructor(e){super("w:lvlText"),this.root.push(new y({val:e}))}}class Li extends d{constructor(e){super("w:lvlJc"),this.root.push(new y({val:e}))}}class Ui extends d{constructor(e){super("w:suff"),this.root.push(new y({val:e}))}}class ji extends d{constructor(){super("w:isLgl")}}class Mi extends d{constructor({level:e,format:t,text:r,alignment:n="start",start:o=1,style:i,suffix:s,isLegalNumberingStyle:a}){if(super("w:lvl"),l(this,"paragraphProperties"),l(this,"runProperties"),this.root.push(new Qr("w:start",Lr(o))),t&&this.root.push(new Bi(t)),s&&this.root.push(new Ui(s)),a&&this.root.push(new ji),r&&this.root.push(new Di(r)),this.root.push(new Li(n)),this.paragraphProperties=new Yo(i&&i.paragraph),this.runProperties=new jn(i&&i.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),e>9)throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");this.root.push(new Pi({ilvl:Lr(e),tentative:1}))}}class zi extends Mi{}class Wi extends d{constructor(e){super("w:multiLevelType"),this.root.push(new y({val:e}))}}class Hi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{abstractNumId:"w:abstractNumId",restartNumberingAfterBreak:"w15:restartNumberingAfterBreak"})}}class Ki extends d{constructor(e,t){super("w:abstractNum"),l(this,"id"),this.root.push(new Hi({abstractNumId:Lr(e),restartNumberingAfterBreak:0})),this.root.push(new Wi("hybridMultilevel")),this.id=e;for(const e of t)this.root.push(new zi(e))}}class Gi extends d{constructor(e){super("w:abstractNumId"),this.root.push(new y({val:e}))}}class Vi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{numId:"w:numId"})}}class qi extends d{constructor(e){if(super("w:num"),l(this,"numId"),l(this,"reference"),l(this,"instance"),this.numId=e.numId,this.reference=e.reference,this.instance=e.instance,this.root.push(new Vi({numId:Lr(e.numId)})),this.root.push(new Gi(Lr(e.abstractNumId))),e.overrideLevels&&e.overrideLevels.length)for(const t of e.overrideLevels)this.root.push(new Xi(t.num,t.start))}}class Zi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{ilvl:"w:ilvl"})}}class Xi extends d{constructor(e,t){super("w:lvlOverride"),this.root.push(new Zi({ilvl:e})),void 0!==t&&this.root.push(new $i(t))}}class Yi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val"})}}class $i extends d{constructor(e){super("w:startOverride"),this.root.push(new Yi({val:e}))}}class Ji extends d{constructor(e){super("w:numbering"),l(this,"abstractNumberingMap",new Map),l(this,"concreteNumberingMap",new Map),l(this,"referenceConfigMap",new Map),l(this,"abstractNumUniqueNumericId",Gn()),l(this,"concreteNumUniqueNumericId",Gn(1)),this.root.push(new zo({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const t=new Ki(this.abstractNumUniqueNumericId(),[{level:0,format:Fi,text:"●",alignment:rn,style:{paragraph:{indent:{left:Kn(.5),hanging:Kn(.25)}}}},{level:1,format:Fi,text:"○",alignment:rn,style:{paragraph:{indent:{left:Kn(1),hanging:Kn(.25)}}}},{level:2,format:Fi,text:"■",alignment:rn,style:{paragraph:{indent:{left:2160,hanging:Kn(.25)}}}},{level:3,format:Fi,text:"●",alignment:rn,style:{paragraph:{indent:{left:2880,hanging:Kn(.25)}}}},{level:4,format:Fi,text:"○",alignment:rn,style:{paragraph:{indent:{left:3600,hanging:Kn(.25)}}}},{level:5,format:Fi,text:"■",alignment:rn,style:{paragraph:{indent:{left:4320,hanging:Kn(.25)}}}},{level:6,format:Fi,text:"●",alignment:rn,style:{paragraph:{indent:{left:5040,hanging:Kn(.25)}}}},{level:7,format:Fi,text:"●",alignment:rn,style:{paragraph:{indent:{left:5760,hanging:Kn(.25)}}}},{level:8,format:Fi,text:"●",alignment:rn,style:{paragraph:{indent:{left:6480,hanging:Kn(.25)}}}}]);this.concreteNumberingMap.set("default-bullet-numbering",new qi({numId:1,abstractNumId:t.id,reference:"default-bullet-numbering",instance:0,overrideLevels:[{num:0,start:1}]})),this.abstractNumberingMap.set("default-bullet-numbering",t);for(const t of e.config)this.abstractNumberingMap.set(t.reference,new Ki(this.abstractNumUniqueNumericId(),t.levels)),this.referenceConfigMap.set(t.reference,t.levels)}prepForXml(e){for(const e of this.abstractNumberingMap.values())this.root.push(e);for(const e of this.concreteNumberingMap.values())this.root.push(e);return super.prepForXml(e)}createConcreteNumberingInstance(e,t){const r=this.abstractNumberingMap.get(e);if(!r)return;const n=`${e}-${t}`;if(this.concreteNumberingMap.has(n))return;const o=this.referenceConfigMap.get(e),i=o&&o[0].start,s={numId:this.concreteNumUniqueNumericId(),abstractNumId:r.id,reference:e,instance:t,overrideLevels:[i&&Number.isInteger(i)?{num:0,start:i}:{num:0,start:1}]};this.concreteNumberingMap.set(n,new qi(s))}get ConcreteNumbering(){return Array.from(this.concreteNumberingMap.values())}get ReferenceConfig(){return Array.from(this.referenceConfigMap.values())}}class Qi extends w{constructor(){super(...arguments),l(this,"xmlKeys",{version:"w:val",name:"w:name",uri:"w:uri"})}}class es extends d{constructor(e){super("w:compatSetting"),this.root.push(new Qi({version:e,uri:"http://schemas.microsoft.com/office/word",name:"compatibilityMode"}))}}class ts extends d{constructor(e){super("w:compat"),e.version&&this.root.push(new es(e.version)),e.useSingleBorderforContiguousCells&&this.root.push(new Xr("w:useSingleBorderforContiguousCells",e.useSingleBorderforContiguousCells)),e.wordPerfectJustification&&this.root.push(new Xr("w:wpJustification",e.wordPerfectJustification)),e.noTabStopForHangingIndent&&this.root.push(new Xr("w:noTabHangInd",e.noTabStopForHangingIndent)),e.noLeading&&this.root.push(new Xr("w:noLeading",e.noLeading)),e.spaceForUnderline&&this.root.push(new Xr("w:spaceForUL",e.spaceForUnderline)),e.noColumnBalance&&this.root.push(new Xr("w:noColumnBalance",e.noColumnBalance)),e.balanceSingleByteDoubleByteWidth&&this.root.push(new Xr("w:balanceSingleByteDoubleByteWidth",e.balanceSingleByteDoubleByteWidth)),e.noExtraLineSpacing&&this.root.push(new Xr("w:noExtraLineSpacing",e.noExtraLineSpacing)),e.doNotLeaveBackslashAlone&&this.root.push(new Xr("w:doNotLeaveBackslashAlone",e.doNotLeaveBackslashAlone)),e.underlineTrailingSpaces&&this.root.push(new Xr("w:ulTrailSpace",e.underlineTrailingSpaces)),e.doNotExpandShiftReturn&&this.root.push(new Xr("w:doNotExpandShiftReturn",e.doNotExpandShiftReturn)),e.spacingInWholePoints&&this.root.push(new Xr("w:spacingInWholePoints",e.spacingInWholePoints)),e.lineWrapLikeWord6&&this.root.push(new Xr("w:lineWrapLikeWord6",e.lineWrapLikeWord6)),e.printBodyTextBeforeHeader&&this.root.push(new Xr("w:printBodyTextBeforeHeader",e.printBodyTextBeforeHeader)),e.printColorsBlack&&this.root.push(new Xr("w:printColBlack",e.printColorsBlack)),e.spaceWidth&&this.root.push(new Xr("w:wpSpaceWidth",e.spaceWidth)),e.showBreaksInFrames&&this.root.push(new Xr("w:showBreaksInFrames",e.showBreaksInFrames)),e.subFontBySize&&this.root.push(new Xr("w:subFontBySize",e.subFontBySize)),e.suppressBottomSpacing&&this.root.push(new Xr("w:suppressBottomSpacing",e.suppressBottomSpacing)),e.suppressTopSpacing&&this.root.push(new Xr("w:suppressTopSpacing",e.suppressTopSpacing)),e.suppressSpacingAtTopOfPage&&this.root.push(new Xr("w:suppressSpacingAtTopOfPage",e.suppressSpacingAtTopOfPage)),e.suppressTopSpacingWP&&this.root.push(new Xr("w:suppressTopSpacingWP",e.suppressTopSpacingWP)),e.suppressSpBfAfterPgBrk&&this.root.push(new Xr("w:suppressSpBfAfterPgBrk",e.suppressSpBfAfterPgBrk)),e.swapBordersFacingPages&&this.root.push(new Xr("w:swapBordersFacingPages",e.swapBordersFacingPages)),e.convertMailMergeEsc&&this.root.push(new Xr("w:convMailMergeEsc",e.convertMailMergeEsc)),e.truncateFontHeightsLikeWP6&&this.root.push(new Xr("w:truncateFontHeightsLikeWP6",e.truncateFontHeightsLikeWP6)),e.macWordSmallCaps&&this.root.push(new Xr("w:mwSmallCaps",e.macWordSmallCaps)),e.usePrinterMetrics&&this.root.push(new Xr("w:usePrinterMetrics",e.usePrinterMetrics)),e.doNotSuppressParagraphBorders&&this.root.push(new Xr("w:doNotSuppressParagraphBorders",e.doNotSuppressParagraphBorders)),e.wrapTrailSpaces&&this.root.push(new Xr("w:wrapTrailSpaces",e.wrapTrailSpaces)),e.footnoteLayoutLikeWW8&&this.root.push(new Xr("w:footnoteLayoutLikeWW8",e.footnoteLayoutLikeWW8)),e.shapeLayoutLikeWW8&&this.root.push(new Xr("w:shapeLayoutLikeWW8",e.shapeLayoutLikeWW8)),e.alignTablesRowByRow&&this.root.push(new Xr("w:alignTablesRowByRow",e.alignTablesRowByRow)),e.forgetLastTabAlignment&&this.root.push(new Xr("w:forgetLastTabAlignment",e.forgetLastTabAlignment)),e.adjustLineHeightInTable&&this.root.push(new Xr("w:adjustLineHeightInTable",e.adjustLineHeightInTable)),e.autoSpaceLikeWord95&&this.root.push(new Xr("w:autoSpaceLikeWord95",e.autoSpaceLikeWord95)),e.noSpaceRaiseLower&&this.root.push(new Xr("w:noSpaceRaiseLower",e.noSpaceRaiseLower)),e.doNotUseHTMLParagraphAutoSpacing&&this.root.push(new Xr("w:doNotUseHTMLParagraphAutoSpacing",e.doNotUseHTMLParagraphAutoSpacing)),e.layoutRawTableWidth&&this.root.push(new Xr("w:layoutRawTableWidth",e.layoutRawTableWidth)),e.layoutTableRowsApart&&this.root.push(new Xr("w:layoutTableRowsApart",e.layoutTableRowsApart)),e.useWord97LineBreakRules&&this.root.push(new Xr("w:useWord97LineBreakRules",e.useWord97LineBreakRules)),e.doNotBreakWrappedTables&&this.root.push(new Xr("w:doNotBreakWrappedTables",e.doNotBreakWrappedTables)),e.doNotSnapToGridInCell&&this.root.push(new Xr("w:doNotSnapToGridInCell",e.doNotSnapToGridInCell)),e.selectFieldWithFirstOrLastCharacter&&this.root.push(new Xr("w:selectFldWithFirstOrLastChar",e.selectFieldWithFirstOrLastCharacter)),e.applyBreakingRules&&this.root.push(new Xr("w:applyBreakingRules",e.applyBreakingRules)),e.doNotWrapTextWithPunctuation&&this.root.push(new Xr("w:doNotWrapTextWithPunct",e.doNotWrapTextWithPunctuation)),e.doNotUseEastAsianBreakRules&&this.root.push(new Xr("w:doNotUseEastAsianBreakRules",e.doNotUseEastAsianBreakRules)),e.useWord2002TableStyleRules&&this.root.push(new Xr("w:useWord2002TableStyleRules",e.useWord2002TableStyleRules)),e.growAutofit&&this.root.push(new Xr("w:growAutofit",e.growAutofit)),e.useFELayout&&this.root.push(new Xr("w:useFELayout",e.useFELayout)),e.useNormalStyleForList&&this.root.push(new Xr("w:useNormalStyleForList",e.useNormalStyleForList)),e.doNotUseIndentAsNumberingTabStop&&this.root.push(new Xr("w:doNotUseIndentAsNumberingTabStop",e.doNotUseIndentAsNumberingTabStop)),e.useAlternateEastAsianLineBreakRules&&this.root.push(new Xr("w:useAltKinsokuLineBreakRules",e.useAlternateEastAsianLineBreakRules)),e.allowSpaceOfSameStyleInTable&&this.root.push(new Xr("w:allowSpaceOfSameStyleInTable",e.allowSpaceOfSameStyleInTable)),e.doNotSuppressIndentation&&this.root.push(new Xr("w:doNotSuppressIndentation",e.doNotSuppressIndentation)),e.doNotAutofitConstrainedTables&&this.root.push(new Xr("w:doNotAutofitConstrainedTables",e.doNotAutofitConstrainedTables)),e.autofitToFirstFixedWidthCell&&this.root.push(new Xr("w:autofitToFirstFixedWidthCell",e.autofitToFirstFixedWidthCell)),e.underlineTabInNumberingList&&this.root.push(new Xr("w:underlineTabInNumList",e.underlineTabInNumberingList)),e.displayHangulFixedWidth&&this.root.push(new Xr("w:displayHangulFixedWidth",e.displayHangulFixedWidth)),e.splitPgBreakAndParaMark&&this.root.push(new Xr("w:splitPgBreakAndParaMark",e.splitPgBreakAndParaMark)),e.doNotVerticallyAlignCellWithSp&&this.root.push(new Xr("w:doNotVertAlignCellWithSp",e.doNotVerticallyAlignCellWithSp)),e.doNotBreakConstrainedForcedTable&&this.root.push(new Xr("w:doNotBreakConstrainedForcedTable",e.doNotBreakConstrainedForcedTable)),e.ignoreVerticalAlignmentInTextboxes&&this.root.push(new Xr("w:doNotVertAlignInTxbx",e.ignoreVerticalAlignmentInTextboxes)),e.useAnsiKerningPairs&&this.root.push(new Xr("w:useAnsiKerningPairs",e.useAnsiKerningPairs)),e.cachedColumnBalance&&this.root.push(new Xr("w:cachedColBalance",e.cachedColumnBalance))}}class rs extends w{constructor(){super(...arguments),l(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"})}}class ns extends d{constructor(e){var t,r,n,o;super("w:settings"),this.root.push(new rs({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.root.push(new Xr("w:displayBackgroundShape",!0)),void 0!==e.trackRevisions&&this.root.push(new Xr("w:trackRevisions",e.trackRevisions)),void 0!==e.evenAndOddHeaders&&this.root.push(new Xr("w:evenAndOddHeaders",e.evenAndOddHeaders)),void 0!==e.updateFields&&this.root.push(new Xr("w:updateFields",e.updateFields)),void 0!==e.defaultTabStop&&this.root.push(new Qr("w:defaultTabStop",e.defaultTabStop)),this.root.push(new ts(u(c({},null!=(t=e.compatibility)?t:{}),{version:null!=(o=null!=(n=null==(r=e.compatibility)?void 0:r.version)?n:e.compatibilityModeVersion)?o:15})))}}class os extends w{constructor(){super(...arguments),l(this,"xmlKeys",{val:"w:val"})}}class is extends d{constructor(e){super("w:name"),this.root.push(new os({val:e}))}}class ss extends d{constructor(e){super("w:uiPriority"),this.root.push(new os({val:Lr(e)}))}}class as extends w{constructor(){super(...arguments),l(this,"xmlKeys",{type:"w:type",styleId:"w:styleId",default:"w:default",customStyle:"w:customStyle"})}}class cs extends d{constructor(e,t){super("w:style"),this.root.push(new as(e)),t.name&&this.root.push(new is(t.name)),t.basedOn&&this.root.push(new $r("w:basedOn",t.basedOn)),t.next&&this.root.push(new $r("w:next",t.next)),t.link&&this.root.push(new $r("w:link",t.link)),void 0!==t.uiPriority&&this.root.push(new ss(t.uiPriority)),void 0!==t.semiHidden&&this.root.push(new Xr("w:semiHidden",t.semiHidden)),void 0!==t.unhideWhenUsed&&this.root.push(new Xr("w:unhideWhenUsed",t.unhideWhenUsed)),void 0!==t.quickFormat&&this.root.push(new Xr("w:qFormat",t.quickFormat))}}class us extends cs{constructor(e){super({type:"paragraph",styleId:e.id},e),l(this,"paragraphProperties"),l(this,"runProperties"),this.paragraphProperties=new Yo(e.paragraph),this.runProperties=new jn(e.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties)}}class ls extends cs{constructor(e){super({type:"character",styleId:e.id},c({uiPriority:99,unhideWhenUsed:!0},e)),l(this,"runProperties"),this.runProperties=new jn(e.run),this.root.push(this.runProperties)}}class hs extends us{constructor(e){super(c({basedOn:"Normal",next:"Normal",quickFormat:!0},e))}}class fs extends hs{constructor(e){super(c({id:"Title",name:"Title"},e))}}class ps extends hs{constructor(e){super(c({id:"Heading1",name:"Heading 1"},e))}}class ds extends hs{constructor(e){super(c({id:"Heading2",name:"Heading 2"},e))}}class ms extends hs{constructor(e){super(c({id:"Heading3",name:"Heading 3"},e))}}class ws extends hs{constructor(e){super(c({id:"Heading4",name:"Heading 4"},e))}}class gs extends hs{constructor(e){super(c({id:"Heading5",name:"Heading 5"},e))}}class ys extends hs{constructor(e){super(c({id:"Heading6",name:"Heading 6"},e))}}class bs extends hs{constructor(e){super(c({id:"Strong",name:"Strong"},e))}}class vs extends us{constructor(e){super(c({id:"ListParagraph",name:"List Paragraph",basedOn:"Normal",quickFormat:!0},e))}}class xs extends us{constructor(e){super(c({id:"FootnoteText",name:"footnote text",link:"FootnoteTextChar",basedOn:"Normal",uiPriority:99,semiHidden:!0,unhideWhenUsed:!0,paragraph:{spacing:{after:0,line:240,lineRule:Jn}},run:{size:20}},e))}}class _s extends ls{constructor(e){super(c({id:"FootnoteReference",name:"footnote reference",basedOn:"DefaultParagraphFont",semiHidden:!0,run:{superScript:!0}},e))}}class Es extends ls{constructor(e){super(c({id:"FootnoteTextChar",name:"Footnote Text Char",basedOn:"DefaultParagraphFont",link:"FootnoteText",semiHidden:!0,run:{size:20}},e))}}class Ss extends ls{constructor(e){super(c({id:"Hyperlink",name:"Hyperlink",basedOn:"DefaultParagraphFont",run:{color:"0563C1",underline:{type:Ln}}},e))}}class ks extends d{constructor(e){if(super("w:styles"),e.initialStyles&&this.root.push(e.initialStyles),e.importedStyles)for(const t of e.importedStyles)this.root.push(t);if(e.paragraphStyles)for(const t of e.paragraphStyles)this.root.push(new us(t));if(e.characterStyles)for(const t of e.characterStyles)this.root.push(new ls(t))}}class Ts extends d{constructor(e){super("w:pPrDefault"),this.root.push(new Yo(e))}}class As extends d{constructor(e){super("w:rPrDefault"),this.root.push(new jn(e))}}class Rs extends d{constructor(e){super("w:docDefaults"),l(this,"runPropertiesDefaults"),l(this,"paragraphPropertiesDefaults"),this.runPropertiesDefaults=new As(e.run),this.paragraphPropertiesDefaults=new Ts(e.paragraph),this.root.push(this.runPropertiesDefaults),this.root.push(this.paragraphPropertiesDefaults)}}class Cs{newInstance(e){const t=Or(e,{compact:!1});let r;for(const e of t.elements||[])"w:styles"===e.name&&(r=e);if(void 0===r)throw new Error("can not find styles element");const n=r.elements||[];return new ks({initialStyles:new Br(r.attributes),importedStyles:n.map((e=>Nr(e)))})}}class Is{newInstance(e={}){var t;return{initialStyles:new zo({mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",Ignorable:"w14 w15"}),importedStyles:[new Rs(null!=(t=e.document)?t:{}),new fs(c({run:{size:56}},e.title)),new ps(c({run:{color:"2E74B5",size:32}},e.heading1)),new ds(c({run:{color:"2E74B5",size:26}},e.heading2)),new ms(c({run:{color:"1F4D78",size:24}},e.heading3)),new ws(c({run:{color:"2E74B5",italics:!0}},e.heading4)),new gs(c({run:{color:"2E74B5"}},e.heading5)),new ys(c({run:{color:"1F4D78"}},e.heading6)),new bs(c({run:{bold:!0}},e.strong)),new vs(e.listParagraph||{}),new Ss(e.hyperlink||{}),new _s(e.footnoteReference||{}),new xs(e.footnoteText||{}),new Es(e.footnoteTextChar||{})]}}}const Os=({id:e,fontKey:t,subsetted:r},n)=>new tn({name:n,attributes:c({id:{key:"r:id",value:e}},t?{fontKey:{key:"w:fontKey",value:`{${t}}`}}:{}),children:[...r?[new Xr("w:subsetted",r)]:[]]});class Ns{constructor(e){var t;l(this,"fontTable"),l(this,"relationships"),l(this,"fontOptionsWithKey",[]),this.options=e,this.fontOptionsWithKey=e.map((e=>u(c({},e),{fontKey:`${Vn(8)}-${Vn(4)}-${Vn(4)}-${Vn(4)}-${Vn(12)}`}))),this.fontTable=(t=this.fontOptionsWithKey,new tn({name:"w:fonts",attributes:{mc:{key:"xmlns:mc",value:"http://schemas.openxmlformats.org/markup-compatibility/2006"},r:{key:"xmlns:r",value:"http://schemas.openxmlformats.org/officeDocument/2006/relationships"},w:{key:"xmlns:w",value:"http://schemas.openxmlformats.org/wordprocessingml/2006/main"},w14:{key:"xmlns:w14",value:"http://schemas.microsoft.com/office/word/2010/wordml"},w15:{key:"xmlns:w15",value:"http://schemas.microsoft.com/office/word/2012/wordml"},w16cex:{key:"xmlns:w16cex",value:"http://schemas.microsoft.com/office/word/2018/wordml/cex"},w16cid:{key:"xmlns:w16cid",value:"http://schemas.microsoft.com/office/word/2016/wordml/cid"},w16:{key:"xmlns:w16",value:"http://schemas.microsoft.com/office/word/2018/wordml"},w16sdtdh:{key:"xmlns:w16sdtdh",value:"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash"},w16se:{key:"xmlns:w16se",value:"http://schemas.microsoft.com/office/word/2015/wordml/symex"},Ignorable:{key:"mc:Ignorable",value:"w14 w15 w16se w16cid w16 w16cex w16sdtdh"}},children:t.map(((e,t)=>(({name:e,index:t,fontKey:r,characterSet:n})=>(({name:e,altName:t,panose1:r,charset:n,family:o,notTrueType:i,pitch:s,sig:a,embedRegular:c,embedBold:u,embedItalic:l,embedBoldItalic:h})=>new tn({name:"w:font",attributes:{name:{key:"w:name",value:e}},children:[...t?[Jr("w:altName",t)]:[],...r?[Jr("w:panose1",r)]:[],...n?[Jr("w:charset",n)]:[],...o?[Jr("w:family",o)]:[],...i?[new Xr("w:notTrueType",i)]:[],...s?[Jr("w:pitch",s)]:[],...a?[new tn({name:"w:sig",attributes:{usb0:{key:"w:usb0",value:a.usb0},usb1:{key:"w:usb1",value:a.usb1},usb2:{key:"w:usb2",value:a.usb2},usb3:{key:"w:usb3",value:a.usb3},csb0:{key:"w:csb0",value:a.csb0},csb1:{key:"w:csb1",value:a.csb1}}})]:[],...c?[Os(c,"w:embedRegular")]:[],...u?[Os(u,"w:embedBold")]:[],...l?[Os(l,"w:embedItalic")]:[],...h?[Os(h,"w:embedBoldItalic")]:[]]}))({name:e,sig:{usb0:"E0002AFF",usb1:"C000247B",usb2:"00000009",usb3:"00000000",csb0:"000001FF",csb1:"00000000"},charset:n,family:"auto",pitch:"variable",embedRegular:{fontKey:r,id:`rId${t}`}}))({name:e.name,index:t+1,fontKey:e.fontKey})))})),this.relationships=new Vo;for(let t=0;t<e.length;t++)this.relationships.createRelationship(t+1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/font",`fonts/${e[t].name}.odttf`)}get View(){return this.fontTable}get Relationships(){return this.relationships}}class Fs{constructor(e){var t,r,n,o,i,s,a,h;if(l(this,"currentRelationshipId",1),l(this,"documentWrapper"),l(this,"headers",[]),l(this,"footers",[]),l(this,"coreProperties"),l(this,"numbering"),l(this,"media"),l(this,"fileRelationships"),l(this,"footnotesWrapper"),l(this,"settings"),l(this,"contentTypes"),l(this,"customProperties"),l(this,"appProperties"),l(this,"styles"),l(this,"comments"),l(this,"fontWrapper"),this.coreProperties=new ci(u(c({},e),{creator:null!=(t=e.creator)?t:"Un-named",revision:null!=(r=e.revision)?r:1,lastModifiedBy:null!=(n=e.lastModifiedBy)?n:"Un-named"})),this.numbering=new Ji(e.numbering?e.numbering:{config:[]}),this.comments=new Yn(null!=(o=e.comments)?o:{children:[]}),this.fileRelationships=new Vo,this.customProperties=new di(null!=(i=e.customProperties)?i:[]),this.appProperties=new ti,this.footnotesWrapper=new Ri,this.contentTypes=new ai,this.documentWrapper=new qo({background:e.background}),this.settings=new ns({compatibilityModeVersion:e.compatabilityModeVersion,compatibility:e.compatibility,evenAndOddHeaders:!!e.evenAndOddHeaderAndFooters,trackRevisions:null==(s=e.features)?void 0:s.trackRevisions,updateFields:null==(a=e.features)?void 0:a.updateFields,defaultTabStop:e.defaultTabStop}),this.media=new Ni,e.externalStyles){const t=new Cs;this.styles=t.newInstance(e.externalStyles)}else if(e.styles){const t=(new Is).newInstance(e.styles.default);this.styles=new ks(c(c({},t),e.styles))}else{const e=new Is;this.styles=new ks(e.newInstance())}this.addDefaultRelationships();for(const t of e.sections)this.addSection(t);if(e.footnotes)for(const t in e.footnotes)this.footnotesWrapper.View.createFootNote(parseFloat(t),e.footnotes[t].children);this.fontWrapper=new Ns(null!=(h=e.fonts)?h:[])}addSection({headers:e={},footers:t={},children:r,properties:n}){this.documentWrapper.View.Body.addSection(u(c({},n),{headerWrapperGroup:{default:e.default?this.createHeader(e.default):void 0,first:e.first?this.createHeader(e.first):void 0,even:e.even?this.createHeader(e.even):void 0},footerWrapperGroup:{default:t.default?this.createFooter(t.default):void 0,first:t.first?this.createFooter(t.first):void 0,even:t.even?this.createFooter(t.even):void 0}}));for(const e of r)this.documentWrapper.View.add(e)}createHeader(e){const t=new Oi(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addHeaderToDocument(t),t}createFooter(e){const t=new gi(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addFooterToDocument(t),t}addHeaderToDocument(e,t=Eo){this.headers.push({header:e,type:t}),this.documentWrapper.Relationships.createRelationship(e.View.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header",`header${this.headers.length}.xml`),this.contentTypes.addHeader(this.headers.length)}addFooterToDocument(e,t=Eo){this.footers.push({footer:e,type:t}),this.documentWrapper.Relationships.createRelationship(e.View.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer",`footer${this.footers.length}.xml`),this.contentTypes.addFooter(this.footers.length)}addDefaultRelationships(){this.fileRelationships.createRelationship(1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument","word/document.xml"),this.fileRelationships.createRelationship(2,"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties","docProps/core.xml"),this.fileRelationships.createRelationship(3,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties","docProps/app.xml"),this.fileRelationships.createRelationship(4,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties","docProps/custom.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles","styles.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering","numbering.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes","footnotes.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings","settings.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments","comments.xml")}get Document(){return this.documentWrapper}get Styles(){return this.styles}get CoreProperties(){return this.coreProperties}get Numbering(){return this.numbering}get Media(){return this.media}get FileRelationships(){return this.fileRelationships}get Headers(){return this.headers.map((e=>e.header))}get Footers(){return this.footers.map((e=>e.footer))}get ContentTypes(){return this.contentTypes}get CustomProperties(){return this.customProperties}get AppProperties(){return this.appProperties}get FootNotes(){return this.footnotesWrapper}get Settings(){return this.settings}get Comments(){return this.comments}get FontTable(){return this.fontWrapper}}function Ps(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Bs={exports:{}};Bs.exports=function e(t,r,n){function o(s,a){if(!r[s]){if(!t[s]){if(!a&&Ps)return Ps(s);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=r[s]={exports:{}};t[s][0].call(u.exports,(function(e){return o(t[s][1][e]||e)}),u,u.exports,e,t,r,n)}return r[s].exports}for(var i=Ps,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,r){var n=e("./utils"),o=e("./support"),i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,o,s,a,c,u,l=[],h=0,f=e.length,p=f,d="string"!==n.getTypeOf(e);h<e.length;)p=f-h,o=d?(t=e[h++],r=h<f?e[h++]:0,h<f?e[h++]:0):(t=e.charCodeAt(h++),r=h<f?e.charCodeAt(h++):0,h<f?e.charCodeAt(h++):0),s=t>>2,a=(3&t)<<4|r>>4,c=1<p?(15&r)<<2|o>>6:64,u=2<p?63&o:64,l.push(i.charAt(s)+i.charAt(a)+i.charAt(c)+i.charAt(u));return l.join("")},r.decode=function(e){var t,r,n,s,a,c,u=0,l=0,h="data:";if(e.substr(0,5)===h)throw new Error("Invalid base64 input, it looks like a data url.");var f,p=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===i.charAt(64)&&p--,e.charAt(e.length-2)===i.charAt(64)&&p--,p%1!=0)throw new Error("Invalid base64 input, bad content length.");for(f=o.uint8array?new Uint8Array(0|p):new Array(0|p);u<e.length;)t=i.indexOf(e.charAt(u++))<<2|(s=i.indexOf(e.charAt(u++)))>>4,r=(15&s)<<4|(a=i.indexOf(e.charAt(u++)))>>2,n=(3&a)<<6|(c=i.indexOf(e.charAt(u++))),f[l++]=t,64!==a&&(f[l++]=r),64!==c&&(f[l++]=n);return f}},{"./support":30,"./utils":32}],2:[function(e,t,r){var n=e("./external"),o=e("./stream/DataWorker"),i=e("./stream/Crc32Probe"),s=e("./stream/DataLengthProbe");function a(e,t,r,n,o){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=o}a.prototype={getContentWorker:function(){var e=new o(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new s("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new o(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,r){return e.pipe(new i).pipe(new s("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new s("compressedSize")).withStreamInfo("compression",t)},t.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){var n=e("./utils"),o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=o,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t[s])];return~e}(0|t,e,e.length):function(e,t,r){var n=o,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t.charCodeAt(s))];return~e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,o=e("pako"),i=e("./utils"),s=e("./stream/GenericWorker"),a=n?"uint8array":"array";function c(e,t){s.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",i.inherits(c,s),c.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(i.transformTo(a,e.data),!1)},c.prototype.flush=function(){s.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},c.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this._pako=null},c.prototype._createPako=function(){this._pako=new o[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(e){return new c("Deflate",e)},r.uncompressWorker=function(){return new c("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){function n(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function o(e,t,r,o,s,l){var h,f,p=e.file,d=e.compression,m=l!==a.utf8encode,w=i.transformTo("string",l(p.name)),g=i.transformTo("string",a.utf8encode(p.name)),y=p.comment,b=i.transformTo("string",l(y)),v=i.transformTo("string",a.utf8encode(y)),x=g.length!==p.name.length,_=v.length!==y.length,E="",S="",k="",T=p.dir,A=p.date,R={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(R.crc32=e.crc32,R.compressedSize=e.compressedSize,R.uncompressedSize=e.uncompressedSize);var C=0;t&&(C|=8),m||!x&&!_||(C|=2048);var I,O,N=0,F=0;T&&(N|=16),"UNIX"===s?(F=798,N|=(O=I=p.unixPermissions,I||(O=T?16893:33204),(65535&O)<<16)):(F=20,N|=function(e){return 63&(e||0)}(p.dosPermissions)),h=A.getUTCHours(),h<<=6,h|=A.getUTCMinutes(),h<<=5,h|=A.getUTCSeconds()/2,f=A.getUTCFullYear()-1980,f<<=4,f|=A.getUTCMonth()+1,f<<=5,f|=A.getUTCDate(),x&&(S=n(1,1)+n(c(w),4)+g,E+="up"+n(S.length,2)+S),_&&(k=n(1,1)+n(c(b),4)+v,E+="uc"+n(k.length,2)+k);var P="";return P+="\n\0",P+=n(C,2),P+=d.magic,P+=n(h,2),P+=n(f,2),P+=n(R.crc32,4),P+=n(R.compressedSize,4),P+=n(R.uncompressedSize,4),P+=n(w.length,2),P+=n(E.length,2),{fileRecord:u.LOCAL_FILE_HEADER+P+w+E,dirRecord:u.CENTRAL_FILE_HEADER+n(F,2)+P+n(b.length,2)+"\0\0\0\0"+n(N,4)+n(o,4)+w+E+b}}var i=e("../utils"),s=e("../stream/GenericWorker"),a=e("../utf8"),c=e("../crc32"),u=e("../signature");function l(e,t,r,n){s.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}i.inherits(l,s),l.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,s.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},l.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=o(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},l.prototype.closedSource=function(e){this.accumulate=!1;var t,r=this.streamFiles&&!e.file.dir,i=o(e,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(i.dirRecord),r)this.push({data:(t=e,u.DATA_DESCRIPTOR+n(t.crc32,4)+n(t.compressedSize,4)+n(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:i.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},l.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r,o,s,a,c,l,h=this.bytesWritten-e,f=(r=this.dirRecords.length,o=h,s=e,a=this.zipComment,c=this.encodeFileName,l=i.transformTo("string",c(a)),u.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(r,2)+n(r,2)+n(o,4)+n(s,4)+n(l.length,2)+l);this.push({data:f,meta:{percent:100}})},l.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},l.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},l.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},l.prototype.error=function(e){var t=this._sources;if(!s.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},l.prototype.lock=function(){s.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=l},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){var n=e("../compressions"),o=e("./ZipFileWorker");r.generateWorker=function(e,t,r){var i=new o(t.streamFiles,r,t.platform,t.encodeFileName),s=0;try{e.forEach((function(e,r){s++;var o=function(e,t){var r=e||t,o=n[r];if(!o)throw new Error(r+" is not a valid compression method !");return o}(r.options.compression,t.compression),a=r.options.compressionOptions||t.compressionOptions||{},c=r.dir,u=r.date;r._compressWorker(o,a).withStreamInfo("file",{name:e,dir:c,date:u,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(i)})),i.entriesCount=s}catch(e){i.error(e)}return i}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){var n=e("./utils"),o=e("./external"),i=e("./utf8"),s=e("./zipEntries"),a=e("./stream/Crc32Probe"),c=e("./nodejsUtils");function u(e){return new o.Promise((function(t,r){var n=e.decompressed.getContentWorker().pipe(new a);n.on("error",(function(e){r(e)})).on("end",(function(){n.streamInfo.crc32!==e.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var r=this;return t=n.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode}),c.isNode&&c.isStream(e)?o.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var r=new s(t);return r.load(e),r})).then((function(e){var r=[o.Promise.resolve(e)],n=e.files;if(t.checkCRC32)for(var i=0;i<n.length;i++)r.push(u(n[i]));return o.Promise.all(r)})).then((function(e){for(var o=e.shift(),i=o.files,s=0;s<i.length;s++){var a=i[s],c=a.fileNameStr,u=n.resolve(a.fileNameStr);r.file(u,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:t.createFolders}),a.dir||(r.file(u).unsafeOriginalName=c)}return o.zipComment.length&&(r.comment=o.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){var n=e("../utils"),o=e("../stream/GenericWorker");function i(e,t){o.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(i,o),i.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},i.prototype.pause=function(){return!!o.prototype.pause.call(this)&&(this._stream.pause(),!0)},i.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=i},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){var n=e("readable-stream").Readable;function o(e,t,r){n.call(this,t),this._helper=e;var o=this;e.on("data",(function(e,t){o.push(e)||o._helper.pause(),r&&r(t)})).on("error",(function(e){o.emit("error",e)})).on("end",(function(){o.push(null)}))}e("../utils").inherits(o,n),o.prototype._read=function(){this._helper.resume()},t.exports=o},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){function n(e,t,r){var n,o=i.getTypeOf(t),a=i.extend(r||{},c);a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(e=m(e)),a.createFolders&&(n=d(e))&&w.call(this,n,!0);var h="string"===o&&!1===a.binary&&!1===a.base64;r&&void 0!==r.binary||(a.binary=!h),(t instanceof u&&0===t.uncompressedSize||a.dir||!t||0===t.length)&&(a.base64=!1,a.binary=!0,t="",a.compression="STORE",o="string");var g;g=t instanceof u||t instanceof s?t:f.isNode&&f.isStream(t)?new p(e,t):i.prepareContent(e,t,a.binary,a.optimizedBinaryString,a.base64);var y=new l(e,g,a);this.files[e]=y}var o=e("./utf8"),i=e("./utils"),s=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),c=e("./defaults"),u=e("./compressedObject"),l=e("./zipObject"),h=e("./generate"),f=e("./nodejsUtils"),p=e("./nodejs/NodejsStreamInputAdapter"),d=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},w=function(e,t){return t=void 0!==t?t:c.createFolders,e=m(e),this.files[e]||n.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function g(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(e){var t=[];return this.forEach((function(r,n){e(r,n)&&t.push(n)})),t},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,n.call(this,e,t,r),this;if(g(e)){var o=e;return this.filter((function(e,t){return!t.dir&&o.test(e)}))}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(e){if(!e)return this;if(g(e))return this.filter((function(t,r){return r.dir&&e.test(t)}));var t=this.root+e,r=w.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter((function(t,r){return r.name.slice(0,e.length)===e})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=i.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:o.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");i.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=h.generateWorker(this,r,n)}catch(e){(t=new s("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){var n=e("./DataReader");function o(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(o,n),o.prototype.byteAt=function(e){return this.data[this.zero+e]},o.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),o=e.charCodeAt(3),i=this.length-4;0<=i;--i)if(this.data[i]===t&&this.data[i+1]===r&&this.data[i+2]===n&&this.data[i+3]===o)return i-this.zero;return-1},o.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),o=e.charCodeAt(3),i=this.readData(4);return t===i[0]&&r===i[1]&&n===i[2]&&o===i[3]},o.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){var n=e("../utils");function o(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}o.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=o},{"../utils":32}],19:[function(e,t,r){var n=e("./Uint8ArrayReader");function o(e){n.call(this,e)}e("../utils").inherits(o,n),o.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){var n=e("./DataReader");function o(e){n.call(this,e)}e("../utils").inherits(o,n),o.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},o.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},o.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},o.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){var n=e("./ArrayReader");function o(e){n.call(this,e)}e("../utils").inherits(o,n),o.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){var n=e("../utils"),o=e("../support"),i=e("./ArrayReader"),s=e("./StringReader"),a=e("./NodeBufferReader"),c=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||o.uint8array?"nodebuffer"===t?new a(e):o.uint8array?new c(n.transformTo("uint8array",e)):new i(n.transformTo("array",e)):new s(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){var n=e("./GenericWorker"),o=e("../utils");function i(e){n.call(this,"ConvertWorker to "+e),this.destType=e}o.inherits(i,n),i.prototype.processChunk=function(e){this.push({data:o.transformTo(this.destType,e.data),meta:e.meta})},t.exports=i},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){var n=e("./GenericWorker"),o=e("../crc32");function i(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(i,n),i.prototype.processChunk=function(e){this.streamInfo.crc32=o(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=i},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){var n=e("../utils"),o=e("./GenericWorker");function i(e){o.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(i,o),i.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}o.prototype.processChunk.call(this,e)},t.exports=i},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){var n=e("../utils"),o=e("./GenericWorker");function i(e){o.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}n.inherits(i,o),i.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this.data=null},i.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},i.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},i.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=i},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){var n=e("../utils"),o=e("./ConvertWorker"),i=e("./GenericWorker"),s=e("../base64"),a=e("../support"),c=e("../external"),u=null;if(a.nodestream)try{u=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function l(e,t,r){var s=t;switch(t){case"blob":case"arraybuffer":s="uint8array";break;case"base64":s="string"}try{this._internalType=s,this._outputType=t,this._mimeType=r,n.checkSupport(s),this._worker=e.pipe(new o(s)),e.lock()}catch(e){this._worker=new i("error"),this._worker.error(e)}}l.prototype={accumulate:function(e){return function(e,t){return new c.Promise((function(r,o){var i=[],a=e._internalType,c=e._outputType,u=e._mimeType;e.on("data",(function(e,r){i.push(e),t&&t(r)})).on("error",(function(e){i=[],o(e)})).on("end",(function(){try{var e=function(e,t,r){switch(e){case"blob":return n.newBlob(n.transformTo("arraybuffer",t),r);case"base64":return s.encode(t);default:return n.transformTo(e,t)}}(c,function(e,t){var r,n=0,o=null,i=0;for(r=0;r<t.length;r++)i+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(o=new Uint8Array(i),r=0;r<t.length;r++)o.set(t[r],n),n+=t[r].length;return o;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(a,i),u);r(e)}catch(e){o(e)}i=[]})).resume()}))}(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,(function(e){t.call(r,e.data,e.meta)})):this._worker.on(e,(function(){n.delay(t,arguments,r)})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new u(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=l},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(n),r.blob=0===o.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){for(var n=e("./utils"),o=e("./support"),i=e("./nodejsUtils"),s=e("./stream/GenericWorker"),a=new Array(256),c=0;c<256;c++)a[c]=252<=c?6:248<=c?5:240<=c?4:224<=c?3:192<=c?2:1;function u(){s.call(this,"utf-8 decode"),this.leftOver=null}function l(){s.call(this,"utf-8 encode")}a[254]=a[254]=1,r.utf8encode=function(e){return o.nodebuffer?i.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,c=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),c+=r<128?1:r<2048?2:r<65536?3:4;for(t=o.uint8array?new Uint8Array(c):new Array(c),i=s=0;s<c;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},r.utf8decode=function(e){return o.nodebuffer?n.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,o,i,s=e.length,c=new Array(2*s);for(t=r=0;t<s;)if((o=e[t++])<128)c[r++]=o;else if(4<(i=a[o]))c[r++]=65533,t+=i-1;else{for(o&=2===i?31:3===i?15:7;1<i&&t<s;)o=o<<6|63&e[t++],i--;1<i?c[r++]=65533:o<65536?c[r++]=o:(o-=65536,c[r++]=55296|o>>10&1023,c[r++]=56320|1023&o)}return c.length!==r&&(c.subarray?c=c.subarray(0,r):c.length=r),n.applyFromCharCode(c)}(e=n.transformTo(o.uint8array?"uint8array":"array",e))},n.inherits(u,s),u.prototype.processChunk=function(e){var t=n.transformTo(o.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(o.uint8array){var i=t;(t=new Uint8Array(i.length+this.leftOver.length)).set(this.leftOver,0),t.set(i,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var s=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+a[e[r]]>t?r:t}(t),c=t;s!==t.length&&(o.uint8array?(c=t.subarray(0,s),this.leftOver=t.subarray(s,t.length)):(c=t.slice(0,s),this.leftOver=t.slice(s,t.length))),this.push({data:r.utf8decode(c),meta:e.meta})},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=u,n.inherits(l,s),l.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){var n=e("./support"),o=e("./base64"),i=e("./nodejsUtils"),s=e("./external");function a(e){return e}function c(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),r.newBlob=function(e,t){r.checkSupport("blob");try{return new Blob([e],{type:t})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var u={stringifyByChunk:function(e,t,r){var n=[],o=0,i=e.length;if(i<=r)return String.fromCharCode.apply(null,e);for(;o<i;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(o,Math.min(o+r,i)))):n.push(String.fromCharCode.apply(null,e.subarray(o,Math.min(o+r,i)))),o+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,i.allocBuffer(1)).length}catch(e){return!1}}()}};function l(e){var t=65536,n=r.getTypeOf(e),o=!0;if("uint8array"===n?o=u.applyCanBeUsed.uint8array:"nodebuffer"===n&&(o=u.applyCanBeUsed.nodebuffer),o)for(;1<t;)try{return u.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return u.stringifyByChar(e)}function h(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}r.applyFromCharCode=l;var f={};f.string={string:a,array:function(e){return c(e,new Array(e.length))},arraybuffer:function(e){return f.string.uint8array(e).buffer},uint8array:function(e){return c(e,new Uint8Array(e.length))},nodebuffer:function(e){return c(e,i.allocBuffer(e.length))}},f.array={string:l,array:a,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return i.newBufferFrom(e)}},f.arraybuffer={string:function(e){return l(new Uint8Array(e))},array:function(e){return h(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:a,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return i.newBufferFrom(new Uint8Array(e))}},f.uint8array={string:l,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:a,nodebuffer:function(e){return i.newBufferFrom(e)}},f.nodebuffer={string:l,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return f.nodebuffer.uint8array(e).buffer},uint8array:function(e){return h(e,new Uint8Array(e.length))},nodebuffer:a},r.transformTo=function(e,t){if(t=t||"",!e)return t;r.checkSupport(e);var n=r.getTypeOf(t);return f[n][e](t)},r.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var o=t[n];"."===o||""===o&&0!==n&&n!==t.length-1||(".."===o?r.pop():r.push(o))}return r.join("/")},r.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&i.isBuffer(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},r.delay=function(e,t,r){setImmediate((function(){e.apply(r||null,t||[])}))},r.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},r.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},r.prepareContent=function(e,t,i,a,u){return s.Promise.resolve(t).then((function(e){return n.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new s.Promise((function(t,r){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.onerror=function(e){r(e.target.error)},n.readAsArrayBuffer(e)})):e})).then((function(t){var l,h=r.getTypeOf(t);return h?("arraybuffer"===h?t=r.transformTo("uint8array",t):"string"===h&&(u?t=o.decode(t):i&&!0!==a&&(t=c(l=t,n.uint8array?new Uint8Array(l.length):new Array(l.length)))),t):s.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){var n=e("./reader/readerFor"),o=e("./utils"),i=e("./signature"),s=e("./zipEntry"),a=e("./support");function c(e){this.files=[],this.loadOptions=e}c.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+o.pretty(t)+", expected "+o.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",r=o.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(i.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(i.CENTRAL_FILE_HEADER);)(e=new s({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(i.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,i.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(i.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===o.MAX_VALUE_16BITS||this.diskWithCentralDirStart===o.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===o.MAX_VALUE_16BITS||this.centralDirRecords===o.MAX_VALUE_16BITS||this.centralDirSize===o.MAX_VALUE_32BITS||this.centralDirOffset===o.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,i.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,i.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=c},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){var n=e("./reader/readerFor"),o=e("./utils"),i=e("./compressedObject"),s=e("./crc32"),a=e("./utf8"),c=e("./compressions"),u=e("./support");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return!(1&~this.bitFlag)},useUTF8:function(){return!(2048&~this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in c)if(Object.prototype.hasOwnProperty.call(c,t)&&c[t].magic===e)return c[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+o.pretty(this.compressionMethod)+" unknown (inner file : "+o.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===o.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===o.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===o.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===o.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,o=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<o;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(o)},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=o.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=o.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)||s(this.fileName)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)||s(this.fileComment)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var o=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),s=e("./utf8"),a=e("./compressedObject"),c=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new s.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new s.Utf8DecodeWorker))}catch(e){(t=new c("error")).error(e)}return new o(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof a&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new s.Utf8EncodeWorker)),a.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof c?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<u.length;h++)n.prototype[u[h]]=l;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(e){var r,n,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,s=new o(l),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var c=new e.MessageChannel;c.port1.onmessage=l,r=function(){c.port2.postMessage(0)}}var u=[];function l(){var e,t;n=!0;for(var r=u.length;r;){for(t=u,u=[],e=-1;++e<r;)t[e]();r=u.length}n=!1}t.exports=function(e){1!==u.push(e)||n||r()}}).call(this,void 0!==b?b:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){var n=e("immediate");function o(){}var i={},s=["REJECTED"],a=["FULFILLED"],c=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=c,this.queue=[],this.outcome=void 0,e!==o&&p(this,e)}function l(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function h(e,t,r){n((function(){var n;try{n=t(r)}catch(t){return i.reject(e,t)}n===e?i.reject(e,new TypeError("Cannot resolve promise with itself")):i.resolve(e,n)}))}function f(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var r=!1;function n(t){r||(r=!0,i.reject(e,t))}function o(t){r||(r=!0,i.resolve(e,t))}var s=d((function(){t(o,n)}));"error"===s.status&&n(s.value)}function d(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=u).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(r){return t.resolve(e()).then((function(){return r}))}),(function(r){return t.resolve(e()).then((function(){throw r}))}))},u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(o);return this.state!==c?h(r,this.state===a?e:t,this.outcome):this.queue.push(new l(r,e,t)),r},l.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){i.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},i.resolve=function(e,t){var r=d(f,t);if("error"===r.status)return i.reject(e,r.value);var n=r.value;if(n)p(e,n);else{e.state=a,e.outcome=t;for(var o=-1,s=e.queue.length;++o<s;)e.queue[o].callFulfilled(t)}return e},i.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},u.reject=function(e){var t=new this(o);return i.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var s=new Array(r),a=0,c=-1,u=new this(o);++c<r;)l(e[c],c);return u;function l(e,o){t.resolve(e).then((function(e){s[o]=e,++a!==r||n||(n=!0,i.resolve(u,s))}),(function(e){n||(n=!0,i.reject(u,e))}))}},u.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,s=-1,a=new this(o);++s<t;)n=e[s],this.resolve(n).then((function(e){r||(r=!0,i.resolve(a,e))}),(function(e){r||(r=!0,i.reject(a,e))}));return a}},{immediate:36}],38:[function(e,t,r){var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){var n=e("./zlib/deflate"),o=e("./utils/common"),i=e("./utils/strings"),s=e("./zlib/messages"),a=e("./zlib/zstream"),c=Object.prototype.toString;function u(e){if(!(this instanceof u))return new u(e);this.options=o.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==r)throw new Error(s[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var l;if(l="string"==typeof t.dictionary?i.string2buf(t.dictionary):"[object ArrayBuffer]"===c.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(s[r]);this._dict_set=!0}}function l(e,t){var r=new u(t);if(r.push(e,!0),r.err)throw r.msg||s[r.err];return r.result}u.prototype.push=function(e,t){var r,s,a=this.strm,u=this.options.chunkSize;if(this.ended)return!1;s=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=i.string2buf(e):"[object ArrayBuffer]"===c.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new o.Buf8(u),a.next_out=0,a.avail_out=u),1!==(r=n.deflate(a,s))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==a.avail_out&&(0!==a.avail_in||4!==s&&2!==s)||("string"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(a.output,a.next_out))):this.onData(o.shrinkBuf(a.output,a.next_out)))}while((0<a.avail_in||0===a.avail_out)&&1!==r);return 4===s?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==s||(this.onEnd(0),!(a.avail_out=0))},u.prototype.onData=function(e){this.chunks.push(e)},u.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=u,r.deflate=l,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,l(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,l(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){var n=e("./zlib/inflate"),o=e("./utils/common"),i=e("./utils/strings"),s=e("./zlib/constants"),a=e("./zlib/messages"),c=e("./zlib/zstream"),u=e("./zlib/gzheader"),l=Object.prototype.toString;function h(e){if(!(this instanceof h))return new h(e);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&!(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new c,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==s.Z_OK)throw new Error(a[r]);this.header=new u,n.inflateGetHeader(this.strm,this.header)}function f(e,t){var r=new h(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}h.prototype.push=function(e,t){var r,a,c,u,h,f,p=this.strm,d=this.options.chunkSize,m=this.options.dictionary,w=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?s.Z_FINISH:s.Z_NO_FLUSH,"string"==typeof e?p.input=i.binstring2buf(e):"[object ArrayBuffer]"===l.call(e)?p.input=new Uint8Array(e):p.input=e,p.next_in=0,p.avail_in=p.input.length;do{if(0===p.avail_out&&(p.output=new o.Buf8(d),p.next_out=0,p.avail_out=d),(r=n.inflate(p,s.Z_NO_FLUSH))===s.Z_NEED_DICT&&m&&(f="string"==typeof m?i.string2buf(m):"[object ArrayBuffer]"===l.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,f)),r===s.Z_BUF_ERROR&&!0===w&&(r=s.Z_OK,w=!1),r!==s.Z_STREAM_END&&r!==s.Z_OK)return this.onEnd(r),!(this.ended=!0);p.next_out&&(0!==p.avail_out&&r!==s.Z_STREAM_END&&(0!==p.avail_in||a!==s.Z_FINISH&&a!==s.Z_SYNC_FLUSH)||("string"===this.options.to?(c=i.utf8border(p.output,p.next_out),u=p.next_out-c,h=i.buf2string(p.output,c),p.next_out=u,p.avail_out=d-u,u&&o.arraySet(p.output,p.output,c,u,0),this.onData(h)):this.onData(o.shrinkBuf(p.output,p.next_out)))),0===p.avail_in&&0===p.avail_out&&(w=!0)}while((0<p.avail_in||0===p.avail_out)&&r!==s.Z_STREAM_END);return r===s.Z_STREAM_END&&(a=s.Z_FINISH),a===s.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===s.Z_OK):a!==s.Z_SYNC_FLUSH||(this.onEnd(s.Z_OK),!(p.avail_out=0))},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===s.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=h,r.inflate=f,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},r.ungzip=f},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,r,n,o){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),o);else for(var i=0;i<n;i++)e[o+i]=t[r+i]},flattenChunks:function(e){var t,r,n,o,i,s;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(s=new Uint8Array(n),t=o=0,r=e.length;t<r;t++)i=e[t],s.set(i,o),o+=i.length;return s}},i={arraySet:function(e,t,r,n,o){for(var i=0;i<n;i++)e[o+i]=t[r+i]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,o)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,i))},r.setTyped(n)},{}],42:[function(e,t,r){var n=e("./common"),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(e){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){i=!1}for(var s=new n.Buf8(256),a=0;a<256;a++)s[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function c(e,t){if(t<65537&&(e.subarray&&i||!e.subarray&&o))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",s=0;s<t;s++)r+=String.fromCharCode(e[s]);return r}s[254]=s[254]=1,r.string2buf=function(e){var t,r,o,i,s,a=e.length,c=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(o=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),c+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(c),i=s=0;s<c;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(o=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return c(e,e.length)},r.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,o=t.length;r<o;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,o,i,a=t||e.length,u=new Array(2*a);for(r=n=0;r<a;)if((o=e[r++])<128)u[n++]=o;else if(4<(i=s[o]))u[n++]=65533,r+=i-1;else{for(o&=2===i?31:3===i?15:7;1<i&&r<a;)o=o<<6|63&e[r++],i--;1<i?u[n++]=65533:o<65536?u[n++]=o:(o-=65536,u[n++]=55296|o>>10&1023,u[n++]=56320|1023&o)}return c(u,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+s[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){t.exports=function(e,t,r,n){for(var o=65535&e,i=e>>>16&65535,s=0;0!==r;){for(r-=s=2e3<r?2e3:r;i=i+(o=o+t[n++]|0)|0,--s;);o%=65521,i%=65521}return o|i<<16}},{}],44:[function(e,t,r){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,o){var i=n,s=o+r;e^=-1;for(var a=o;a<s;a++)e=e>>>8^i[255&(e^t[a])];return~e}},{}],46:[function(e,t,r){var n,o=e("../utils/common"),i=e("./trees"),s=e("./adler32"),a=e("./crc32"),c=e("./messages"),u=-2,l=258,h=262,f=113;function p(e,t){return e.msg=c[t],t}function d(e){return(e<<1)-(4<e?9:0)}function m(e){for(var t=e.length;0<=--t;)e[t]=0}function w(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(o.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function g(e,t){i._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,w(e.strm)}function y(e,t){e.pending_buf[e.pending++]=t}function b(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function v(e,t){var r,n,o=e.max_chain_length,i=e.strstart,s=e.prev_length,a=e.nice_match,c=e.strstart>e.w_size-h?e.strstart-(e.w_size-h):0,u=e.window,f=e.w_mask,p=e.prev,d=e.strstart+l,m=u[i+s-1],w=u[i+s];e.prev_length>=e.good_match&&(o>>=2),a>e.lookahead&&(a=e.lookahead);do{if(u[(r=t)+s]===w&&u[r+s-1]===m&&u[r]===u[i]&&u[++r]===u[i+1]){i+=2,r++;do{}while(u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&i<d);if(n=l-(d-i),i=d-l,s<n){if(e.match_start=t,a<=(s=n))break;m=u[i+s-1],w=u[i+s]}}}while((t=p[t&f])>c&&0!=--o);return s<=e.lookahead?s:e.lookahead}function x(e){var t,r,n,i,c,u,l,f,p,d,m=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-h)){for(o.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=r=e.hash_size;n=e.head[--t],e.head[t]=m<=n?n-m:0,--r;);for(t=r=m;n=e.prev[--t],e.prev[t]=m<=n?n-m:0,--r;);i+=m}if(0===e.strm.avail_in)break;if(u=e.strm,l=e.window,f=e.strstart+e.lookahead,d=void 0,(p=i)<(d=u.avail_in)&&(d=p),r=0===d?0:(u.avail_in-=d,o.arraySet(l,u.input,u.next_in,d,f),1===u.state.wrap?u.adler=s(u.adler,l,d,f):2===u.state.wrap&&(u.adler=a(u.adler,l,d,f)),u.next_in+=d,u.total_in+=d,d),e.lookahead+=r,e.lookahead+e.insert>=3)for(c=e.strstart-e.insert,e.ins_h=e.window[c],e.ins_h=(e.ins_h<<e.hash_shift^e.window[c+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[c+3-1])&e.hash_mask,e.prev[c&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=c,c++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<h&&0!==e.strm.avail_in)}function _(e,t){for(var r,n;;){if(e.lookahead<h){if(x(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-h&&(e.match_length=v(e,r)),e.match_length>=3)if(n=i._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}function E(e,t){for(var r,n,o;;){if(e.lookahead<h){if(x(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-h&&(e.match_length=v(e,r),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(o=e.strstart+e.lookahead-3,n=i._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(g(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=i._tr_tally(e,0,e.window[e.strstart-1]))&&g(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=i._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}function S(e,t,r,n,o){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=o}function k(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(1146),this.dyn_dtree=new o.Buf16(122),this.bl_tree=new o.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(16),this.heap=new o.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function T(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:f,e.adler=2===t.wrap?0:1,t.last_flush=0,i._tr_init(t),0):p(e,u)}function A(e){var t,r=T(e);return 0===r&&((t=e.state).window_size=2*t.w_size,m(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),r}function R(e,t,r,n,i,s){if(!e)return u;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||9<i||8!==r||n<8||15<n||t<0||9<t||s<0||4<s)return p(e,u);8===n&&(n=9);var c=new k;return(e.state=c).strm=e,c.wrap=a,c.gzhead=null,c.w_bits=n,c.w_size=1<<c.w_bits,c.w_mask=c.w_size-1,c.hash_bits=i+7,c.hash_size=1<<c.hash_bits,c.hash_mask=c.hash_size-1,c.hash_shift=~~((c.hash_bits+3-1)/3),c.window=new o.Buf8(2*c.w_size),c.head=new o.Buf16(c.hash_size),c.prev=new o.Buf16(c.w_size),c.lit_bufsize=1<<i+6,c.pending_buf_size=4*c.lit_bufsize,c.pending_buf=new o.Buf8(c.pending_buf_size),c.d_buf=1*c.lit_bufsize,c.l_buf=3*c.lit_bufsize,c.level=t,c.strategy=s,c.method=r,A(e)}n=[new S(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(x(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,g(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-h&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(g(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(g(e,!1),e.strm.avail_out),1)})),new S(4,4,8,4,_),new S(4,5,16,8,_),new S(4,6,32,32,_),new S(4,4,16,16,E),new S(8,16,32,32,E),new S(8,16,128,128,E),new S(8,32,128,256,E),new S(32,128,258,1024,E),new S(32,258,258,4096,E)],r.deflateInit=function(e,t){return R(e,t,8,15,8,0)},r.deflateInit2=R,r.deflateReset=A,r.deflateResetKeep=T,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?u:(e.state.gzhead=t,0):u},r.deflate=function(e,t){var r,o,s,c;if(!e||!e.state||5<t||t<0)return e?p(e,u):u;if(o=e.state,!e.output||!e.input&&0!==e.avail_in||666===o.status&&4!==t)return p(e,0===e.avail_out?-5:u);if(o.strm=e,r=o.last_flush,o.last_flush=t,42===o.status)if(2===o.wrap)e.adler=0,y(o,31),y(o,139),y(o,8),o.gzhead?(y(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),y(o,255&o.gzhead.time),y(o,o.gzhead.time>>8&255),y(o,o.gzhead.time>>16&255),y(o,o.gzhead.time>>24&255),y(o,9===o.level?2:2<=o.strategy||o.level<2?4:0),y(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(y(o,255&o.gzhead.extra.length),y(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(e.adler=a(e.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(y(o,0),y(o,0),y(o,0),y(o,0),y(o,0),y(o,9===o.level?2:2<=o.strategy||o.level<2?4:0),y(o,3),o.status=f);else{var h=8+(o.w_bits-8<<4)<<8;h|=(2<=o.strategy||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(h|=32),h+=31-h%31,o.status=f,b(o,h),0!==o.strstart&&(b(o,e.adler>>>16),b(o,65535&e.adler)),e.adler=1}if(69===o.status)if(o.gzhead.extra){for(s=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),w(e),s=o.pending,o.pending!==o.pending_buf_size));)y(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){s=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),w(e),s=o.pending,o.pending===o.pending_buf_size)){c=1;break}c=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,y(o,c)}while(0!==c);o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),0===c&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){s=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),w(e),s=o.pending,o.pending===o.pending_buf_size)){c=1;break}c=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,y(o,c)}while(0!==c);o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),0===c&&(o.status=103)}else o.status=103;if(103===o.status&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&w(e),o.pending+2<=o.pending_buf_size&&(y(o,255&e.adler),y(o,e.adler>>8&255),e.adler=0,o.status=f)):o.status=f),0!==o.pending){if(w(e),0===e.avail_out)return o.last_flush=-1,0}else if(0===e.avail_in&&d(t)<=d(r)&&4!==t)return p(e,-5);if(666===o.status&&0!==e.avail_in)return p(e,-5);if(0!==e.avail_in||0!==o.lookahead||0!==t&&666!==o.status){var v=2===o.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(x(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}(o,t):3===o.strategy?function(e,t){for(var r,n,o,s,a=e.window;;){if(e.lookahead<=l){if(x(e),e.lookahead<=l&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(n=a[o=e.strstart-1])===a[++o]&&n===a[++o]&&n===a[++o]){s=e.strstart+l;do{}while(n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&o<s);e.match_length=l-(s-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(r=i._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}(o,t):n[o.level].func(o,t);if(3!==v&&4!==v||(o.status=666),1===v||3===v)return 0===e.avail_out&&(o.last_flush=-1),0;if(2===v&&(1===t?i._tr_align(o):5!==t&&(i._tr_stored_block(o,0,0,!1),3===t&&(m(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),w(e),0===e.avail_out))return o.last_flush=-1,0}return 4!==t?0:o.wrap<=0?1:(2===o.wrap?(y(o,255&e.adler),y(o,e.adler>>8&255),y(o,e.adler>>16&255),y(o,e.adler>>24&255),y(o,255&e.total_in),y(o,e.total_in>>8&255),y(o,e.total_in>>16&255),y(o,e.total_in>>24&255)):(b(o,e.adler>>>16),b(o,65535&e.adler)),w(e),0<o.wrap&&(o.wrap=-o.wrap),0!==o.pending?0:1)},r.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==f&&666!==t?p(e,u):(e.state=null,t===f?p(e,-3):0):u},r.deflateSetDictionary=function(e,t){var r,n,i,a,c,l,h,f,p=t.length;if(!e||!e.state)return u;if(2===(a=(r=e.state).wrap)||1===a&&42!==r.status||r.lookahead)return u;for(1===a&&(e.adler=s(e.adler,t,p,0)),r.wrap=0,p>=r.w_size&&(0===a&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new o.Buf8(r.w_size),o.arraySet(f,t,p-r.w_size,r.w_size,0),t=f,p=r.w_size),c=e.avail_in,l=e.next_in,h=e.input,e.avail_in=p,e.next_in=0,e.input=t,x(r);r.lookahead>=3;){for(n=r.strstart,i=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=2,x(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,e.next_in=l,e.input=h,e.avail_in=c,r.wrap=a,0},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){t.exports=function(e,t){var r,n,o,i,s,a,c,u,l,h,f,p,d,m,w,g,y,b,v,x,_,E,S,k,T;r=e.state,n=e.next_in,k=e.input,o=n+(e.avail_in-5),i=e.next_out,T=e.output,s=i-(t-e.avail_out),a=i+(e.avail_out-257),c=r.dmax,u=r.wsize,l=r.whave,h=r.wnext,f=r.window,p=r.hold,d=r.bits,m=r.lencode,w=r.distcode,g=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;e:do{d<15&&(p+=k[n++]<<d,d+=8,p+=k[n++]<<d,d+=8),b=m[p&g];t:for(;;){if(p>>>=v=b>>>24,d-=v,0==(v=b>>>16&255))T[i++]=65535&b;else{if(!(16&v)){if(!(64&v)){b=m[(65535&b)+(p&(1<<v)-1)];continue t}if(32&v){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}x=65535&b,(v&=15)&&(d<v&&(p+=k[n++]<<d,d+=8),x+=p&(1<<v)-1,p>>>=v,d-=v),d<15&&(p+=k[n++]<<d,d+=8,p+=k[n++]<<d,d+=8),b=w[p&y];r:for(;;){if(p>>>=v=b>>>24,d-=v,!(16&(v=b>>>16&255))){if(!(64&v)){b=w[(65535&b)+(p&(1<<v)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(_=65535&b,d<(v&=15)&&(p+=k[n++]<<d,(d+=8)<v&&(p+=k[n++]<<d,d+=8)),c<(_+=p&(1<<v)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(p>>>=v,d-=v,(v=i-s)<_){if(l<(v=_-v)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=f,(E=0)===h){if(E+=u-v,v<x){for(x-=v;T[i++]=f[E++],--v;);E=i-_,S=T}}else if(h<v){if(E+=u+h-v,(v-=h)<x){for(x-=v;T[i++]=f[E++],--v;);if(E=0,h<x){for(x-=v=h;T[i++]=f[E++],--v;);E=i-_,S=T}}}else if(E+=h-v,v<x){for(x-=v;T[i++]=f[E++],--v;);E=i-_,S=T}for(;2<x;)T[i++]=S[E++],T[i++]=S[E++],T[i++]=S[E++],x-=3;x&&(T[i++]=S[E++],1<x&&(T[i++]=S[E++]))}else{for(E=i-_;T[i++]=T[E++],T[i++]=T[E++],T[i++]=T[E++],2<(x-=3););x&&(T[i++]=T[E++],1<x&&(T[i++]=T[E++]))}break}}break}}while(n<o&&i<a);n-=x=d>>3,p&=(1<<(d-=x<<3))-1,e.next_in=n,e.next_out=i,e.avail_in=n<o?o-n+5:5-(n-o),e.avail_out=i<a?a-i+257:257-(i-a),r.hold=p,r.bits=d}},{}],49:[function(e,t,r){var n=e("../utils/common"),o=e("./adler32"),i=e("./crc32"),s=e("./inffast"),a=e("./inftrees"),c=-2;function u(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function h(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(852),t.distcode=t.distdyn=new n.Buf32(592),t.sane=1,t.back=-1,0):c}function f(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,h(e)):c}function p(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?c:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,f(e))):c}function d(e,t){var r,n;return e?(n=new l,(e.state=n).window=null,0!==(r=p(e,t))&&(e.state=null),r):c}var m,w,g=!0;function y(e){if(g){var t;for(m=new n.Buf32(512),w=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(1,e.lens,0,288,m,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(2,e.lens,0,32,w,0,e.work,{bits:5}),g=!1}e.lencode=m,e.lenbits=9,e.distcode=w,e.distbits=5}function b(e,t,r,o){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new n.Buf8(s.wsize)),o>=s.wsize?(n.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(o<(i=s.wsize-s.wnext)&&(i=o),n.arraySet(s.window,t,r-o,i,s.wnext),(o-=i)?(n.arraySet(s.window,t,r-o,o,0),s.wnext=o,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=f,r.inflateReset2=p,r.inflateResetKeep=h,r.inflateInit=function(e){return d(e,15)},r.inflateInit2=d,r.inflate=function(e,t){var r,l,h,f,p,d,m,w,g,v,x,_,E,S,k,T,A,R,C,I,O,N,F,P,B=0,D=new n.Buf8(4),L=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return c;12===(r=e.state).mode&&(r.mode=13),p=e.next_out,h=e.output,m=e.avail_out,f=e.next_in,l=e.input,d=e.avail_in,w=r.hold,g=r.bits,v=d,x=m,N=0;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;g<16;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(2&r.wrap&&35615===w){D[r.check=0]=255&w,D[1]=w>>>8&255,r.check=i(r.check,D,2,0),g=w=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&w)<<8)+(w>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&w)){e.msg="unknown compression method",r.mode=30;break}if(g-=4,O=8+(15&(w>>>=4)),0===r.wbits)r.wbits=O;else if(O>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<O,e.adler=r.check=1,r.mode=512&w?10:12,g=w=0;break;case 2:for(;g<16;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(r.flags=w,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=w>>8&1),512&r.flags&&(D[0]=255&w,D[1]=w>>>8&255,r.check=i(r.check,D,2,0)),g=w=0,r.mode=3;case 3:for(;g<32;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}r.head&&(r.head.time=w),512&r.flags&&(D[0]=255&w,D[1]=w>>>8&255,D[2]=w>>>16&255,D[3]=w>>>24&255,r.check=i(r.check,D,4,0)),g=w=0,r.mode=4;case 4:for(;g<16;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}r.head&&(r.head.xflags=255&w,r.head.os=w>>8),512&r.flags&&(D[0]=255&w,D[1]=w>>>8&255,r.check=i(r.check,D,2,0)),g=w=0,r.mode=5;case 5:if(1024&r.flags){for(;g<16;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}r.length=w,r.head&&(r.head.extra_len=w),512&r.flags&&(D[0]=255&w,D[1]=w>>>8&255,r.check=i(r.check,D,2,0)),g=w=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(d<(_=r.length)&&(_=d),_&&(r.head&&(O=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,l,f,_,O)),512&r.flags&&(r.check=i(r.check,l,_,f)),d-=_,f+=_,r.length-=_),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===d)break e;for(_=0;O=l[f+_++],r.head&&O&&r.length<65536&&(r.head.name+=String.fromCharCode(O)),O&&_<d;);if(512&r.flags&&(r.check=i(r.check,l,_,f)),d-=_,f+=_,O)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===d)break e;for(_=0;O=l[f+_++],r.head&&O&&r.length<65536&&(r.head.comment+=String.fromCharCode(O)),O&&_<d;);if(512&r.flags&&(r.check=i(r.check,l,_,f)),d-=_,f+=_,O)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;g<16;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(w!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}g=w=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;g<32;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}e.adler=r.check=u(w),g=w=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=p,e.avail_out=m,e.next_in=f,e.avail_in=d,r.hold=w,r.bits=g,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){w>>>=7&g,g-=7&g,r.mode=27;break}for(;g<3;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}switch(r.last=1&w,g-=1,3&(w>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==t)break;w>>>=2,g-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}w>>>=2,g-=2;break;case 14:for(w>>>=7&g,g-=7&g;g<32;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if((65535&w)!=(w>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&w,g=w=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(_=r.length){if(d<_&&(_=d),m<_&&(_=m),0===_)break e;n.arraySet(h,l,f,_,p),d-=_,f+=_,m-=_,p+=_,r.length-=_;break}r.mode=12;break;case 17:for(;g<14;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(r.nlen=257+(31&w),w>>>=5,g-=5,r.ndist=1+(31&w),w>>>=5,g-=5,r.ncode=4+(15&w),w>>>=4,g-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;g<3;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}r.lens[L[r.have++]]=7&w,w>>>=3,g-=3}for(;r.have<19;)r.lens[L[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,F={bits:r.lenbits},N=a(0,r.lens,0,19,r.lencode,0,r.work,F),r.lenbits=F.bits,N){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;T=(B=r.lencode[w&(1<<r.lenbits)-1])>>>16&255,A=65535&B,!((k=B>>>24)<=g);){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(A<16)w>>>=k,g-=k,r.lens[r.have++]=A;else{if(16===A){for(P=k+2;g<P;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(w>>>=k,g-=k,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}O=r.lens[r.have-1],_=3+(3&w),w>>>=2,g-=2}else if(17===A){for(P=k+3;g<P;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}g-=k,O=0,_=3+(7&(w>>>=k)),w>>>=3,g-=3}else{for(P=k+7;g<P;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}g-=k,O=0,_=11+(127&(w>>>=k)),w>>>=7,g-=7}if(r.have+_>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;_--;)r.lens[r.have++]=O}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,F={bits:r.lenbits},N=a(1,r.lens,0,r.nlen,r.lencode,0,r.work,F),r.lenbits=F.bits,N){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,F={bits:r.distbits},N=a(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,F),r.distbits=F.bits,N){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=d&&258<=m){e.next_out=p,e.avail_out=m,e.next_in=f,e.avail_in=d,r.hold=w,r.bits=g,s(e,x),p=e.next_out,h=e.output,m=e.avail_out,f=e.next_in,l=e.input,d=e.avail_in,w=r.hold,g=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;T=(B=r.lencode[w&(1<<r.lenbits)-1])>>>16&255,A=65535&B,!((k=B>>>24)<=g);){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(T&&!(240&T)){for(R=k,C=T,I=A;T=(B=r.lencode[I+((w&(1<<R+C)-1)>>R)])>>>16&255,A=65535&B,!(R+(k=B>>>24)<=g);){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}w>>>=R,g-=R,r.back+=R}if(w>>>=k,g-=k,r.back+=k,r.length=A,0===T){r.mode=26;break}if(32&T){r.back=-1,r.mode=12;break}if(64&T){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&T,r.mode=22;case 22:if(r.extra){for(P=r.extra;g<P;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}r.length+=w&(1<<r.extra)-1,w>>>=r.extra,g-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;T=(B=r.distcode[w&(1<<r.distbits)-1])>>>16&255,A=65535&B,!((k=B>>>24)<=g);){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(!(240&T)){for(R=k,C=T,I=A;T=(B=r.distcode[I+((w&(1<<R+C)-1)>>R)])>>>16&255,A=65535&B,!(R+(k=B>>>24)<=g);){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}w>>>=R,g-=R,r.back+=R}if(w>>>=k,g-=k,r.back+=k,64&T){e.msg="invalid distance code",r.mode=30;break}r.offset=A,r.extra=15&T,r.mode=24;case 24:if(r.extra){for(P=r.extra;g<P;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}r.offset+=w&(1<<r.extra)-1,w>>>=r.extra,g-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===m)break e;if(_=x-m,r.offset>_){if((_=r.offset-_)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}E=_>r.wnext?(_-=r.wnext,r.wsize-_):r.wnext-_,_>r.length&&(_=r.length),S=r.window}else S=h,E=p-r.offset,_=r.length;for(m<_&&(_=m),m-=_,r.length-=_;h[p++]=S[E++],--_;);0===r.length&&(r.mode=21);break;case 26:if(0===m)break e;h[p++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;g<32;){if(0===d)break e;d--,w|=l[f++]<<g,g+=8}if(x-=m,e.total_out+=x,r.total+=x,x&&(e.adler=r.check=r.flags?i(r.check,h,x,p-x):o(r.check,h,x,p-x)),x=m,(r.flags?w:u(w))!==r.check){e.msg="incorrect data check",r.mode=30;break}g=w=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;g<32;){if(0===d)break e;d--,w+=l[f++]<<g,g+=8}if(w!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}g=w=0}r.mode=29;case 29:N=1;break e;case 30:N=-3;break e;case 31:return-4;default:return c}return e.next_out=p,e.avail_out=m,e.next_in=f,e.avail_in=d,r.hold=w,r.bits=g,(r.wsize||x!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&b(e,e.output,e.next_out,x-e.avail_out)?(r.mode=31,-4):(v-=e.avail_in,x-=e.avail_out,e.total_in+=v,e.total_out+=x,r.total+=x,r.wrap&&x&&(e.adler=r.check=r.flags?i(r.check,h,x,e.next_out-x):o(r.check,h,x,e.next_out-x)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==v&&0===x||4===t)&&0===N&&(N=-5),N)},r.inflateEnd=function(e){if(!e||!e.state)return c;var t=e.state;return t.window&&(t.window=null),e.state=null,0},r.inflateGetHeader=function(e,t){var r;return e&&e.state&&2&(r=e.state).wrap?((r.head=t).done=!1,0):c},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?c:11===r.mode&&o(1,t,n,0)!==r.check?-3:b(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,0):c},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){var n=e("../utils/common"),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],i=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,c,u,l,h,f){var p,d,m,w,g,y,b,v,x,_=f.bits,E=0,S=0,k=0,T=0,A=0,R=0,C=0,I=0,O=0,N=0,F=null,P=0,B=new n.Buf16(16),D=new n.Buf16(16),L=null,U=0;for(E=0;E<=15;E++)B[E]=0;for(S=0;S<c;S++)B[t[r+S]]++;for(A=_,T=15;1<=T&&0===B[T];T--);if(T<A&&(A=T),0===T)return u[l++]=20971520,u[l++]=20971520,f.bits=1,0;for(k=1;k<T&&0===B[k];k++);for(A<k&&(A=k),E=I=1;E<=15;E++)if(I<<=1,(I-=B[E])<0)return-1;if(0<I&&(0===e||1!==T))return-1;for(D[1]=0,E=1;E<15;E++)D[E+1]=D[E]+B[E];for(S=0;S<c;S++)0!==t[r+S]&&(h[D[t[r+S]]++]=S);if(y=0===e?(F=L=h,19):1===e?(F=o,P-=257,L=i,U-=257,256):(F=s,L=a,-1),E=k,g=l,C=S=N=0,m=-1,w=(O=1<<(R=A))-1,1===e&&852<O||2===e&&592<O)return 1;for(;;){for(b=E-C,x=h[S]<y?(v=0,h[S]):h[S]>y?(v=L[U+h[S]],F[P+h[S]]):(v=96,0),p=1<<E-C,k=d=1<<R;u[g+(N>>C)+(d-=p)]=b<<24|v<<16|x,0!==d;);for(p=1<<E-1;N&p;)p>>=1;if(0!==p?(N&=p-1,N+=p):N=0,S++,0==--B[E]){if(E===T)break;E=t[r+h[S]]}if(A<E&&(N&w)!==m){for(0===C&&(C=A),g+=k,I=1<<(R=E-C);R+C<T&&!((I-=B[R+C])<=0);)R++,I<<=1;if(O+=1<<R,1===e&&852<O||2===e&&592<O)return 1;u[m=N&w]=A<<24|R<<16|g-l}}return 0!==N&&(u[g+N]=E-C<<24|64<<16),f.bits=A,0}},{"../utils/common":41}],51:[function(e,t,r){t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){var n=e("../utils/common");function o(e){for(var t=e.length;0<=--t;)e[t]=0}var i=256,s=286,a=30,c=15,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],p=new Array(576);o(p);var d=new Array(60);o(d);var m=new Array(512);o(m);var w=new Array(256);o(w);var g=new Array(29);o(g);var y,b,v,x=new Array(a);function _(e,t,r,n,o){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=o,this.has_stree=e&&e.length}function E(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function S(e){return e<256?m[e]:m[256+(e>>>7)]}function k(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function T(e,t,r){e.bi_valid>16-r?(e.bi_buf|=t<<e.bi_valid&65535,k(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=r-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function A(e,t,r){T(e,r[2*t],r[2*t+1])}function R(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function C(e,t,r){var n,o,i=new Array(16),s=0;for(n=1;n<=c;n++)i[n]=s=s+r[n-1]<<1;for(o=0;o<=t;o++){var a=e[2*o+1];0!==a&&(e[2*o]=R(i[a]++,a))}}function I(e){var t;for(t=0;t<s;t++)e.dyn_ltree[2*t]=0;for(t=0;t<a;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function O(e){8<e.bi_valid?k(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function N(e,t,r,n){var o=2*t,i=2*r;return e[o]<e[i]||e[o]===e[i]&&n[t]<=n[r]}function F(e,t,r){for(var n=e.heap[r],o=r<<1;o<=e.heap_len&&(o<e.heap_len&&N(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!N(t,n,e.heap[o],e.depth));)e.heap[r]=e.heap[o],r=o,o<<=1;e.heap[r]=n}function P(e,t,r){var n,o,s,a,c=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*c]<<8|e.pending_buf[e.d_buf+2*c+1],o=e.pending_buf[e.l_buf+c],c++,0===n?A(e,o,t):(A(e,(s=w[o])+i+1,t),0!==(a=u[s])&&T(e,o-=g[s],a),A(e,s=S(--n),r),0!==(a=l[s])&&T(e,n-=x[s],a)),c<e.last_lit;);A(e,256,t)}function B(e,t){var r,n,o,i=t.dyn_tree,s=t.stat_desc.static_tree,a=t.stat_desc.has_stree,u=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<u;r++)0!==i[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):i[2*r+1]=0;for(;e.heap_len<2;)i[2*(o=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[o]=0,e.opt_len--,a&&(e.static_len-=s[2*o+1]);for(t.max_code=l,r=e.heap_len>>1;1<=r;r--)F(e,i,r);for(o=u;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],F(e,i,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,i[2*o]=i[2*r]+i[2*n],e.depth[o]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,i[2*r+1]=i[2*n+1]=o,e.heap[1]=o++,F(e,i,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,o,i,s,a,u=t.dyn_tree,l=t.max_code,h=t.stat_desc.static_tree,f=t.stat_desc.has_stree,p=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,m=t.stat_desc.max_length,w=0;for(i=0;i<=c;i++)e.bl_count[i]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)m<(i=u[2*u[2*(n=e.heap[r])+1]+1]+1)&&(i=m,w++),u[2*n+1]=i,l<n||(e.bl_count[i]++,s=0,d<=n&&(s=p[n-d]),a=u[2*n],e.opt_len+=a*(i+s),f&&(e.static_len+=a*(h[2*n+1]+s)));if(0!==w){do{for(i=m-1;0===e.bl_count[i];)i--;e.bl_count[i]--,e.bl_count[i+1]+=2,e.bl_count[m]--,w-=2}while(0<w);for(i=m;0!==i;i--)for(n=e.bl_count[i];0!==n;)l<(o=e.heap[--r])||(u[2*o+1]!==i&&(e.opt_len+=(i-u[2*o+1])*u[2*o],u[2*o+1]=i),n--)}}(e,t),C(i,l,e.bl_count)}function D(e,t,r){var n,o,i=-1,s=t[1],a=0,c=7,u=4;for(0===s&&(c=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)o=s,s=t[2*(n+1)+1],++a<c&&o===s||(a<u?e.bl_tree[2*o]+=a:0!==o?(o!==i&&e.bl_tree[2*o]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,i=o,u=(a=0)===s?(c=138,3):o===s?(c=6,3):(c=7,4))}function L(e,t,r){var n,o,i=-1,s=t[1],a=0,c=7,u=4;for(0===s&&(c=138,u=3),n=0;n<=r;n++)if(o=s,s=t[2*(n+1)+1],!(++a<c&&o===s)){if(a<u)for(;A(e,o,e.bl_tree),0!=--a;);else 0!==o?(o!==i&&(A(e,o,e.bl_tree),a--),A(e,16,e.bl_tree),T(e,a-3,2)):a<=10?(A(e,17,e.bl_tree),T(e,a-3,3)):(A(e,18,e.bl_tree),T(e,a-11,7));i=o,u=(a=0)===s?(c=138,3):o===s?(c=6,3):(c=7,4)}}o(x);var U=!1;function j(e,t,r,o){var i,s,a;T(e,0+(o?1:0),3),s=t,a=r,O(i=e),k(i,a),k(i,~a),n.arraySet(i.pending_buf,i.window,s,a,i.pending),i.pending+=a}r._tr_init=function(e){U||(function(){var e,t,r,n,o,i=new Array(16);for(n=r=0;n<28;n++)for(g[n]=r,e=0;e<1<<u[n];e++)w[r++]=n;for(w[r-1]=n,n=o=0;n<16;n++)for(x[n]=o,e=0;e<1<<l[n];e++)m[o++]=n;for(o>>=7;n<a;n++)for(x[n]=o<<7,e=0;e<1<<l[n]-7;e++)m[256+o++]=n;for(t=0;t<=c;t++)i[t]=0;for(e=0;e<=143;)p[2*e+1]=8,e++,i[8]++;for(;e<=255;)p[2*e+1]=9,e++,i[9]++;for(;e<=279;)p[2*e+1]=7,e++,i[7]++;for(;e<=287;)p[2*e+1]=8,e++,i[8]++;for(C(p,287,i),e=0;e<a;e++)d[2*e+1]=5,d[2*e]=R(e,5);y=new _(p,u,257,s,c),b=new _(d,l,0,a,c),v=new _(new Array(0),h,0,19,7)}(),U=!0),e.l_desc=new E(e.dyn_ltree,y),e.d_desc=new E(e.dyn_dtree,b),e.bl_desc=new E(e.bl_tree,v),e.bi_buf=0,e.bi_valid=0,I(e)},r._tr_stored_block=j,r._tr_flush_block=function(e,t,r,n){var o,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<i;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),B(e,e.l_desc),B(e,e.d_desc),a=function(e){var t;for(D(e,e.dyn_ltree,e.l_desc.max_code),D(e,e.dyn_dtree,e.d_desc.max_code),B(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),o=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=o&&(o=s)):o=s=r+5,r+4<=o&&-1!==t?j(e,t,r,n):4===e.strategy||s===o?(T(e,2+(n?1:0),3),P(e,p,d)):(T(e,4+(n?1:0),3),function(e,t,r,n){var o;for(T(e,t-257,5),T(e,r-1,5),T(e,n-4,4),o=0;o<n;o++)T(e,e.bl_tree[2*f[o]+1],3);L(e,e.dyn_ltree,t-1),L(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),P(e,e.dyn_ltree,e.dyn_dtree)),I(e),n&&O(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(w[r]+i+1)]++,e.dyn_dtree[2*S(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){var t;T(e,2,3),A(e,256,p),16===(t=e).bi_valid?(k(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}},{"../utils/common":41}],53:[function(e,t,r){t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(e){if(!e.setImmediate){var t,r,n,o,i=1,s={},a=!1,c=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,t="[object process]"==={}.toString.call(e.process)?function(e){ne.nextTick((function(){h(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?(o="setImmediate$"+Math.random()+"$",e.addEventListener?e.addEventListener("message",f,!1):e.attachEvent("onmessage",f),function(t){e.postMessage(o+t,"*")}):e.MessageChannel?((n=new MessageChannel).port1.onmessage=function(e){h(e.data)},function(e){n.port2.postMessage(e)}):c&&"onreadystatechange"in c.createElement("script")?(r=c.documentElement,function(e){var t=c.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):function(e){setTimeout(h,0,e)},u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var r=new Array(arguments.length-1),n=0;n<r.length;n++)r[n]=arguments[n+1];var o={callback:e,args:r};return s[i]=o,t(i),i++},u.clearImmediate=l}function l(e){delete s[e]}function h(e){if(a)setTimeout(h,0,e);else{var t=s[e];if(t){a=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(undefined,r)}}(t)}finally{l(e),a=!1}}}}function f(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&h(+t.data.slice(o.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,void 0!==b?b:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10);const Ds=v(Bs.exports);var Ls={exports:{}},Us={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"},js=function(e){return e&&e.replace?e.replace(/([&"<>'])/g,(function(e,t){return Us[t]})):e},Ms=cr.Stream;function zs(e,t,r){r=r||0;var n,o,i=(n=t,new Array(r||0).join(n||"")),s=e;if("object"==typeof e&&(s=e[o=Object.keys(e)[0]])&&s._elem)return s._elem.name=o,s._elem.icount=r,s._elem.indent=t,s._elem.indents=i,s._elem.interrupt=s,s._elem;var a,c=[],u=[];function l(e){Object.keys(e).forEach((function(t){c.push(function(e,t){return e+'="'+js(t)+'"'}(t,e[t]))}))}switch(typeof s){case"object":if(null===s)break;s._attr&&l(s._attr),s._cdata&&u.push(("<![CDATA["+s._cdata).replace(/\]\]>/g,"]]]]><![CDATA[>")+"]]>"),s.forEach&&(a=!1,u.push(""),s.forEach((function(e){"object"==typeof e?"_attr"==Object.keys(e)[0]?l(e._attr):u.push(zs(e,t,r+1)):(u.pop(),a=!0,u.push(js(e)))})),a||u.push(""));break;default:u.push(js(s))}return{name:o,interrupt:!1,attributes:c,content:u,icount:r,indents:i,indent:t}}function Ws(e,t,r){if("object"!=typeof t)return e(!1,t);var n=t.interrupt?1:t.content.length;function o(){for(;t.content.length;){var o=t.content.shift();if(void 0!==o){if(i(o))return;Ws(e,o)}}e(!1,(n>1?t.indents:"")+(t.name?"</"+t.name+">":"")+(t.indent&&!r?"\n":"")),r&&r()}function i(t){return!!t.interrupt&&(t.interrupt.append=e,t.interrupt.end=o,t.interrupt=!1,e(!0),!0)}if(e(!1,t.indents+(t.name?"<"+t.name:"")+(t.attributes.length?" "+t.attributes.join(" "):"")+(n?t.name?">":"":t.name?"/>":"")+(t.indent&&n>1?"\n":"")),!n)return e(!1,t.indent?"\n":"");i(t)||o()}Ls.exports=function(e,t){"object"!=typeof t&&(t={indent:t});var r,n,o=t.stream?new Ms:null,i="",s=!1,a=t.indent?!0===t.indent?"    ":t.indent:"",c=!0;function u(e){c?ne.nextTick(e):e()}function l(e,t){if(void 0!==t&&(i+=t),e&&!s&&(o=o||new Ms,s=!0),e&&s){var r=i;u((function(){o.emit("data",r)})),i=""}}function h(e,t){Ws(l,zs(e,a,a?1:0),t)}function f(){if(o){var e=i;u((function(){o.emit("data",e),o.emit("end"),o.readable=!1,o.emit("close")}))}}return u((function(){c=!1})),t.declaration&&(n={version:"1.0",encoding:(r=t.declaration).encoding||"UTF-8"},r.standalone&&(n.standalone=r.standalone),h({"?xml":{_attr:n}}),i=i.replace("/>","?>")),e&&e.forEach?e.forEach((function(t,r){var n;r+1===e.length&&(n=f),h(t,n)})):h(e,f),o?(o.readable=!0,o):i},Ls.exports.element=Ls.exports.Element=function(){return{_elem:zs(Array.prototype.slice.call(arguments)),push:function(e){if(!this.append)throw new Error("not assigned to a parent!");var t=this,r=this._elem.indent;Ws(this.append,zs(e,r,this._elem.icount+(r?1:0)),(function(){t.append(!0)}))},close:function(e){void 0!==e&&this.push(e),this.end&&this.end()}}};const Hs=v(Ls.exports),Ks=(e,t)=>{const r=t.replace(/-/g,"");if(32!==r.length)throw new Error(`Error: Cannot extract GUID from font filename: ${t}`);const n=r.replace(/(..)/g,"$1 ").trim().split(" ").map((e=>parseInt(e,16)));n.reverse();const o=e.slice(0,32).map(((e,t)=>e^n[t%n.length]));return Buffer.concat([e.slice(0,0),o,e.slice(32)])};class Gs{format(e,t={stack:[]}){const r=e.prepForXml(t);if(r)return r;throw Error("XMLComponent did not format correctly")}}class Vs{replace(e,t,r){let n=e;return t.forEach(((e,t)=>{n=n.replace(new RegExp(`{${e.fileName}}`,"g"),(r+t).toString())})),n}getMediaData(e,t){return t.Array.filter((t=>e.search(`{${t.fileName}}`)>0))}}class qs{replace(e,t){let r=e;for(const e of t)r=r.replace(new RegExp(`{${e.reference}-${e.instance}}`,"g"),e.numId.toString());return r}}const Zs=e=>!0===e?"  ":!1===e?void 0:e;class Xs{static toString(e,t){return h(this,null,(function*(){const r=this.compiler.compile(e,Zs(t));return yield r.generateAsync({type:"string",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBuffer(e,t){return h(this,null,(function*(){const r=this.compiler.compile(e,Zs(t));return yield r.generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBase64String(e,t){return h(this,null,(function*(){const r=this.compiler.compile(e,Zs(t));return yield r.generateAsync({type:"base64",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBlob(e,t){return h(this,null,(function*(){const r=this.compiler.compile(e,Zs(t));return yield r.generateAsync({type:"blob",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toStream(e,t){const r=new cr.Stream;return this.compiler.compile(e,Zs(t)).generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"}).then((e=>{r.emit("data",e),r.emit("end")})),r}}l(Xs,"compiler",new class{constructor(){l(this,"formatter"),l(this,"imageReplacer"),l(this,"numberingReplacer"),this.formatter=new Gs,this.imageReplacer=new Vs,this.numberingReplacer=new qs}compile(e,t){const r=new Ds,n=this.xmlifyFile(e,t),o=new Map(Object.entries(n));for(const[,e]of o)if(Array.isArray(e))for(const t of e)r.file(t.path,t.data);else r.file(e.path,e.data);for(const{stream:t,fileName:n}of e.Media.Array)r.file(`word/media/${n}`,t);for(const{data:t,name:n,fontKey:o}of e.FontTable.fontOptionsWithKey){const[e]=n.split(".");r.file(`word/fonts/${e}.odttf`,Ks(t,o))}return r}xmlifyFile(e,t){const r=e.Document.Relationships.RelationshipCount+1,n=Hs(this.formatter.format(e.Document.View,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),o=this.imageReplacer.getMediaData(n,e.Media);return{Relationships:{data:(()=>(o.forEach(((t,n)=>{e.Document.Relationships.createRelationship(r+n,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t.fileName}`)})),Hs(this.formatter.format(e.Document.Relationships,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}})))(),path:"word/_rels/document.xml.rels"},Document:{data:(()=>{const t=this.imageReplacer.replace(n,o,r);return this.numberingReplacer.replace(t,e.Numbering.ConcreteNumbering)})(),path:"word/document.xml"},Styles:{data:(()=>{const r=Hs(this.formatter.format(e.Styles,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}});return this.numberingReplacer.replace(r,e.Numbering.ConcreteNumbering)})(),path:"word/styles.xml"},Properties:{data:Hs(this.formatter.format(e.CoreProperties,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/core.xml"},Numbering:{data:Hs(this.formatter.format(e.Numbering,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/numbering.xml"},FileRelationships:{data:Hs(this.formatter.format(e.FileRelationships,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"_rels/.rels"},HeaderRelationships:e.Headers.map(((r,n)=>{const o=Hs(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}});return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:Hs(this.formatter.format(r.Relationships,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:`word/_rels/header${n+1}.xml.rels`}})),FooterRelationships:e.Footers.map(((r,n)=>{const o=Hs(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}});return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:Hs(this.formatter.format(r.Relationships,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:`word/_rels/footer${n+1}.xml.rels`}})),Headers:e.Headers.map(((r,n)=>{const o=Hs(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),i=this.imageReplacer.getMediaData(o,e.Media),s=this.imageReplacer.replace(o,i,0);return{data:this.numberingReplacer.replace(s,e.Numbering.ConcreteNumbering),path:`word/header${n+1}.xml`}})),Footers:e.Footers.map(((r,n)=>{const o=Hs(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),i=this.imageReplacer.getMediaData(o,e.Media),s=this.imageReplacer.replace(o,i,0);return{data:this.numberingReplacer.replace(s,e.Numbering.ConcreteNumbering),path:`word/footer${n+1}.xml`}})),ContentTypes:{data:Hs(this.formatter.format(e.ContentTypes,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"[Content_Types].xml"},CustomProperties:{data:Hs(this.formatter.format(e.CustomProperties,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/custom.xml"},AppProperties:{data:Hs(this.formatter.format(e.AppProperties,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/app.xml"},FootNotes:{data:Hs(this.formatter.format(e.FootNotes.View,{viewWrapper:e.FootNotes,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"word/footnotes.xml"},FootNotesRelationships:{data:Hs(this.formatter.format(e.FootNotes.Relationships,{viewWrapper:e.FootNotes,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"word/_rels/footnotes.xml.rels"},Settings:{data:Hs(this.formatter.format(e.Settings,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/settings.xml"},Comments:{data:Hs(this.formatter.format(e.Comments,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/comments.xml"},FontTable:{data:Hs(this.formatter.format(e.FontTable.View,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/fontTable.xml"},FontTableRelationships:{data:(()=>Hs(this.formatter.format(e.FontTable.Relationships,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}))(),path:"word/_rels/fontTable.xml.rels"}}}}),new Gs,new Gs,new Vs;var Ys=r(213),$s=["EMMA","FABIEN","LILIANE","JOSE","RAYMOND","CAMILLE","PHILIPPE","LEO","LESLIE","AUDREY","SOFIANE"],Js=function(){function e(e,t,r){this.character=e,this.text=t,this.direction=r}return e.prototype.getRenderedHtml=function(){var e=document.createElement("div"),t=document.createElement("p"),r=document.createElement("strong");if(r.textContent="".concat(this.character),t.appendChild(r),t.classList.add("character-direction"),this.direction){var n=document.createTextNode(", ");t.appendChild(n);var o=document.createElement("em");o.textContent=this.direction,t.appendChild(o)}e.appendChild(t);var i=document.createElement("p");return i.textContent=this.text,i.classList.add("dialogue-text"),e.appendChild(i),e},e.prototype.getRenderedDocxParagraph=function(){var e=[],t=new $o({children:[new Hn({text:this.character.toUpperCase(),break:1})],style:"character"});this.direction&&t.addChildElement(new Hn({text:", ".concat(this.direction),italics:!0,bold:!1}));var r=new $o({style:"text"});return r.addChildElement(new Hn({text:this.text})),e[0]=t,e[1]=r,e},e}(),Qs=function(){function e(e){this.content=e}return e.prototype.getRenderedHtml=function(){var e=document.createElement("p");return e.classList.add("direction"),e&&(e.textContent+="".concat(this.content)),e},e.prototype.getRenderedDocxParagraph=function(){return[new $o({children:[new Hn({text:this.content,break:1})],style:"direction"})]},e}(),ea=function(e){var t=function(e){var t,r,n,o=e.match(/^(\w+)\s*(?:[, ]\s*(?:\(([^)]+)\)|([a-zA-Zéèêà' ]+)))?\s*:\s*(.+)$/);if(!o)return null;t=o[1],r=o[2]||o[3]||"",n=o[4];for(var i=0;i<$s.length;i++)if($s[i].toUpperCase().startsWith(t.toUpperCase())){var s=$s[i];return new Js(s,n,r)}return null}(e);return t||new Qs(e)};var ta=function(){var e=document.getElementById("userInput");return console.log(e),e.value?(console.log(e.value),function(e){for(var t=e.split("\n"),r=[],n=0;n<t.length;n++){var o=t[n],i=ea(o);r[n]=i}return r}(e.value)):[]},ra=function(){var e=document.getElementById("liveRenderDiv");if(null!=e){e.innerHTML="";for(var t=ta(),r=0;r<(null==t?void 0:t.length);r++){var n=t[r];e.appendChild(n.getRenderedHtml())}}};document.getElementById("userInput").addEventListener("input",(function(e){ra()})),document.getElementById("downloadButton").addEventListener("click",(function(){console.log("hello"),function(){var e,t,r,n;e=this,t=void 0,n=function(){var e,t,r,n,o;return function(e,t){var r,n,o,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(i=0)),i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(i){switch(i.label){case 0:for(e=[],t=ta(),r=0;r<t.length;r++)e.push.apply(e,t[r].getRenderedDocxParagraph());return n=new Fs({creator:"Clippy",title:"Sample Document",description:"A brief example of using docx",sections:[{children:e}],styles:{paragraphStyles:[{id:"character",name:"character",basedOn:"Normal",next:"Normal",quickFormat:!0,run:{bold:!0,font:"Times New Roman",size:26},paragraph:{alignment:"center"}},{id:"text",name:"text",basedOn:"Normal",next:"Normal",quickFormat:!0,run:{bold:!1,font:"Times New Roman",size:26},paragraph:{alignment:rn}},{id:"direction",name:"direction",basedOn:"Normal",next:"Normal",quickFormat:!0,run:{bold:!1,italics:!0,font:"Times New Roman",size:26},paragraph:{}}]}}),[4,Xs.toBlob(n)];case 1:return o=i.sent(),(0,Ys.saveAs)(o,"generated_document.docx"),[2]}}))},new((r=void 0)||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))}()})),window.onload=function(){var e,t;e=function(){for(var e="userInput=",t=document.cookie.split(";"),r=0;r<t.length;r++){for(var n=t[r];" "===n.charAt(0);)n=n.substring(1);if(0===n.indexOf(e))return decodeURIComponent(n.substring(10))}return null}(),t=document.getElementById("userInput"),e&&t&&(t.value=e),function(){var e=document.getElementById("userInput");e&&e.addEventListener("input",(function(){!function(e,t){var r=new Date;r.setTime(r.getTime()+6048e5);var n="expires="+r.toUTCString();document.cookie="userInput="+encodeURIComponent(t)+";"+n+";path=/"}(0,e.value)}))}(),ra()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,