/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={526:(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,i=a(e),s=i[0],u=i[1],c=new o(function(e,t,r){return 3*(t+r)/4-r}(0,s,u)),l=0,h=u>0?s-4:s;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],c[l++]=t>>16&255,c[l++]=t>>8&255,c[l++]=255&t;return 2===u&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,c[l++]=255&t),1===u&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,c[l++]=t>>8&255,c[l++]=255&t),c},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],s=16383,a=0,c=n-o;a<c;a+=s)i.push(u(e,a,a+s>c?c:a+s));return 1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),i.join("")};for(var r=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)r[s]=i[s],n[i.charCodeAt(s)]=s;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,n){for(var o,i,s=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},287:(e,t,r)=>{"use strict";const n=r(526),o=r(251),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=u,t.SlowBuffer=function(e){return+e!=e&&(e=0),u.alloc(+e)},t.INSPECT_MAX_BYTES=50;const s=2147483647;function a(e){if(e>s)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return c(e,t,r)}function c(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|m(e,t);let n=a(r);const o=n.write(e,t);return o!==r&&(n=n.slice(0,o)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(q(e,Uint8Array)){const t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(q(e,ArrayBuffer)||e&&q(e.buffer,ArrayBuffer))return f(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(q(e,SharedArrayBuffer)||e&&q(e.buffer,SharedArrayBuffer)))return f(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const o=function(e){if(u.isBuffer(e)){const t=0|d(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||Z(e.length)?a(0):p(e):"Buffer"===e.type&&Array.isArray(e.data)?p(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return l(e),a(e<0?0:0|d(e))}function p(e){const t=e.length<0?0:0|d(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function f(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function d(e){if(e>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|e}function m(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||q(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let o=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return V(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(e).length;default:if(o)return n?-1:V(e).length;t=(""+t).toLowerCase(),o=!0}}function w(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return N(this,t,r);case"utf8":case"utf-8":return S(this,t,r);case"ascii":return k(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function y(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Z(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,o){let i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){let n=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===u)return n*s}else-1!==n&&(i-=i-n),n=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){let r=!0;for(let n=0;n<u;n++)if(c(e,i+n)!==c(t,n)){r=!1;break}if(r)return i}return-1}function v(e,t,r,n){r=Number(r)||0;const o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;const i=t.length;let s;for(n>i/2&&(n=i/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(Z(n))return s;e[r+s]=n}return s}function x(e,t,r,n){return X(V(t,e.length-r),e,r,n)}function E(e,t,r,n){return X(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function _(e,t,r,n){return X($(t),e,r,n)}function T(e,t,r,n){return X(function(e,t){let r,n,o;const i=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function S(e,t,r){r=Math.min(e.length,r);const n=[];let o=t;for(;o<r;){const t=e[o];let i=null,s=t>239?4:t>223?3:t>191?2:1;if(o+s<=r){let r,n,a,u;switch(s){case 1:t<128&&(i=t);break;case 2:r=e[o+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(i=u));break;case 3:r=e[o+1],n=e[o+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(i=u));break;case 4:r=e[o+1],n=e[o+2],a=e[o+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(i=u))}}null===i?(i=65533,s=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),o+=s}return function(e){const t=e.length;if(t<=I)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=I));return r}(n)}t.kMaxLength=s,u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return c(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return l(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},u.allocUnsafe=function(e){return h(e)},u.allocUnsafeSlow=function(e){return h(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(q(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),q(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let o=0;for(r=0;r<e.length;++r){let t=e[r];if(q(t,Uint8Array))o+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,o)):Uint8Array.prototype.set.call(n,t,o);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,o)}o+=t.length}return n},u.byteLength=m,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?S(this,0,e):w.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},i&&(u.prototype[i]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,o){if(q(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;let i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(i,s),c=this.slice(n,o),l=e.slice(t,r);for(let e=0;e<a;++e)if(c[e]!==l[e]){i=c[e],s=l[e];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let i=!1;for(;;)switch(n){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return x(this,e,t,r);case"ascii":case"latin1":case"binary":return E(this,e,t,r);case"base64":return _(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const I=4096;function k(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function R(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function N(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let o="";for(let n=t;n<r;++n)o+=Y[e[n]];return o}function O(e,t,r){const n=e.slice(t,r);let o="";for(let e=0;e<n.length-1;e+=2)o+=String.fromCharCode(n[e]+256*n[e+1]);return o}function C(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,r,n,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function L(e,t,r,n,o){z(t,n,o,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function P(e,t,r,n,o){z(t,n,o,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function B(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function F(e,t,r,n,i){return t=+t,r>>>=0,i||B(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function U(e,t,r,n,i){return t=+t,r>>>=0,i||B(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=this[e],o=1,i=0;for(;++i<t&&(o*=256);)n+=this[e+i]*o;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=this[e+--t],o=1;for(;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||C(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||C(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||C(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=J((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||G(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,o=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(o)<<BigInt(32))})),u.prototype.readBigUInt64BE=J((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||G(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],o=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(o)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=this[e],o=1,i=0;for(;++i<t&&(o*=256);)n+=this[e+i]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||C(e,t,this.length);let n=t,o=1,i=this[e+--n];for(;n>0&&(o*=256);)i+=this[e+--n]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return e>>>=0,t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||C(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||C(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=J((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||G(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=J((function(e){W(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||G(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||C(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||C(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||C(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||C(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||D(this,e,t,r,Math.pow(2,8*r)-1,0);let o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||D(this,e,t,r,Math.pow(2,8*r)-1,0);let o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=J((function(e,t=0){return L(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=J((function(e,t=0){return P(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,e,t,r,n-1,-n)}let o=0,i=1,s=0;for(this[t]=255&e;++o<r&&(i*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/i|0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,e,t,r,n-1,-n)}let o=r-1,i=1,s=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/i|0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=J((function(e,t=0){return L(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=J((function(e,t=0){return P(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,r){return F(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return F(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return U(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return U(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{const i=u.isBuffer(e)?e:u.from(e,n),s=i.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=i[o%s]}return this};const M={};function j(e,t,r){M[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function H(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function z(e,t,r,n,o,i){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let o;throw o=i>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(i+1)}${n}`:`>= -(2${n} ** ${8*(i+1)-1}${n}) and < 2 ** ${8*(i+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new M.ERR_OUT_OF_RANGE("value",o,e)}!function(e,t,r){W(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||G(t,e.length-(r+1))}(n,o,i)}function W(e,t){if("number"!=typeof e)throw new M.ERR_INVALID_ARG_TYPE(t,"number",e)}function G(e,t,r){if(Math.floor(e)!==e)throw W(e,r),new M.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new M.ERR_BUFFER_OUT_OF_BOUNDS;throw new M.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}j("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),j("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),j("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,o=r;return Number.isInteger(r)&&Math.abs(r)>2**32?o=H(String(r)):"bigint"==typeof r&&(o=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(o=H(o)),o+="n"),n+=` It must be ${t}. Received ${o}`,n}),RangeError);const K=/[^+/0-9A-Za-z-_]/g;function V(e,t){let r;t=t||1/0;const n=e.length;let o=null;const i=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function $(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(K,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function X(e,t,r,n){let o;for(o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function q(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Z(e){return e!=e}const Y=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let o=0;o<16;++o)t[n+o]=e[r]+e[o]}return t}();function J(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},251:(e,t)=>{t.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?o-1:0,p=r?-1:1,f=e[t+h];for(h+=p,i=f&(1<<-l)-1,f>>=-l,l+=a;l>0;i=256*i+e[t+h],h+=p,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,n),i-=c}return(f?-1:1)*s*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:i-1,d=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*u-1)*Math.pow(2,o),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;e[r+f]=255&a,f+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+f]=255&s,f+=d,s/=256,c-=8);e[r+f-d]|=128*m}},692:(e,t,r)=>{"use strict";var n=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,l=(e,t)=>{for(var r in t||(t={}))a.call(t,r)&&c(e,r,t[r]);if(s)for(var r of s(t))u.call(t,r)&&c(e,r,t[r]);return e},h=(e,t)=>o(e,i(t)),p=(e,t,r)=>(c(e,"symbol"!=typeof t?t+"":t,r),r),f=(e,t,r)=>new Promise(((n,o)=>{var i=e=>{try{a(r.next(e))}catch(e){o(e)}},s=e=>{try{a(r.throw(e))}catch(e){o(e)}},a=e=>e.done?n(e.value):Promise.resolve(e.value).then(i,s);a((r=r.apply(e,t)).next())}));Object.defineProperty(t,Symbol.toStringTag,{value:"Module"});class d{constructor(e){p(this,"rootKey"),this.rootKey=e}}const m=Object.seal({});class w extends d{constructor(e){super(e),p(this,"root"),this.root=new Array}prepForXml(e){var t;e.stack.push(this);const r=this.root.map((t=>t instanceof d?t.prepForXml(e):t)).filter((e=>void 0!==e));return e.stack.pop(),{[this.rootKey]:r.length?1===r.length&&(null==(t=r[0])?void 0:t._attr)?r[0]:r:m}}addChildElement(e){return this.root.push(e),this}}class g extends w{prepForXml(e){const t=super.prepForXml(e);if(t&&("object"!=typeof t[this.rootKey]||Object.keys(t[this.rootKey]).length))return t}}class y extends d{constructor(e){super("_attr"),p(this,"xmlKeys"),this.root=e}prepForXml(e){const t={};return Object.keys(this.root).forEach((e=>{const r=this.root[e];if(void 0!==r){const n=this.xmlKeys&&this.xmlKeys[e]||e;t[n]=r}})),{_attr:t}}}class b extends d{constructor(e){super("_attr"),this.root=e}prepForXml(e){return{_attr:Object.values(this.root).filter((({value:e})=>void 0!==e)).reduce(((e,{key:t,value:r})=>h(l({},e),{[t]:r})),{})}}}class v extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val",color:"w:color",fill:"w:fill",space:"w:space",sz:"w:sz",type:"w:type",rsidR:"w:rsidR",rsidRPr:"w:rsidRPr",rsidSect:"w:rsidSect",w:"w:w",h:"w:h",top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",linePitch:"w:linePitch",pos:"w:pos"})}}var x="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self?self:{};function E(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var _,T={},A={exports:{}},S="object"==typeof Reflect?Reflect:null,I=S&&"function"==typeof S.apply?S.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};_=S&&"function"==typeof S.ownKeys?S.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var k=Number.isNaN||function(e){return e!=e};function R(){R.init.call(this)}A.exports=R,A.exports.once=function(e,t){return new Promise((function(r,n){function o(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),r([].slice.call(arguments))}M(e,t,i,{once:!0}),"error"!==t&&function(e,t){"function"==typeof e.on&&M(e,"error",t,{once:!0})}(e,o)}))},R.EventEmitter=R,R.prototype._events=void 0,R.prototype._eventsCount=0,R.prototype._maxListeners=void 0;var N=10;function O(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function C(e){return void 0===e._maxListeners?R.defaultMaxListeners:e._maxListeners}function D(e,t,r,n){var o,i,s,a;if(O(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),s=i[t]),void 0===s)s=i[t]=r,++e._eventsCount;else if("function"==typeof s?s=i[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(o=C(e))>0&&s.length>o&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return e}function L(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function P(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=L.bind(n);return o.listener=r,n.wrapFn=o,o}function B(e,t,r){var n=e._events;if(void 0===n)return[];var o=n[t];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(o):U(o,o.length)}function F(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function U(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function M(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){n.once&&e.removeEventListener(t,o),r(i)}))}}Object.defineProperty(R,"defaultMaxListeners",{enumerable:!0,get:function(){return N},set:function(e){if("number"!=typeof e||e<0||k(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");N=e}}),R.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},R.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||k(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},R.prototype.getMaxListeners=function(){return C(this)},R.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,o=this._events;if(void 0!==o)n=n&&void 0===o.error;else if(!n)return!1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var a=o[e];if(void 0===a)return!1;if("function"==typeof a)I(a,this,t);else{var u=a.length,c=U(a,u);for(r=0;r<u;++r)I(c[r],this,t)}return!0},R.prototype.addListener=function(e,t){return D(this,e,t,!1)},R.prototype.on=R.prototype.addListener,R.prototype.prependListener=function(e,t){return D(this,e,t,!0)},R.prototype.once=function(e,t){return O(t),this.on(e,P(this,e,t)),this},R.prototype.prependOnceListener=function(e,t){return O(t),this.prependListener(e,P(this,e,t)),this},R.prototype.removeListener=function(e,t){var r,n,o,i,s;if(O(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){s=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,o),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},R.prototype.off=R.prototype.removeListener,R.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},R.prototype.listeners=function(e){return B(this,e,!0)},R.prototype.rawListeners=function(e){return B(this,e,!1)},R.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):F.call(e,t)},R.prototype.listenerCount=F,R.prototype.eventNames=function(){return this._eventsCount>0?_(this._events):[]};var j=A.exports,H={exports:{}};"function"==typeof Object.create?H.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:H.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}};var z=H.exports;function W(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var G,K,V={exports:{}},$=V.exports={};function X(){throw new Error("setTimeout has not been defined")}function q(){throw new Error("clearTimeout has not been defined")}function Z(e){if(G===setTimeout)return setTimeout(e,0);if((G===X||!G)&&setTimeout)return G=setTimeout,setTimeout(e,0);try{return G(e,0)}catch(t){try{return G.call(null,e,0)}catch(t){return G.call(this,e,0)}}}!function(){try{G="function"==typeof setTimeout?setTimeout:X}catch(e){G=X}try{K="function"==typeof clearTimeout?clearTimeout:q}catch(e){K=q}}();var Y,J=[],Q=!1,ee=-1;function te(){Q&&Y&&(Q=!1,Y.length?J=Y.concat(J):ee=-1,J.length&&re())}function re(){if(!Q){var e=Z(te);Q=!0;for(var t=J.length;t;){for(Y=J,J=[];++ee<t;)Y&&Y[ee].run();ee=-1,t=J.length}Y=null,Q=!1,function(e){if(K===clearTimeout)return clearTimeout(e);if((K===q||!K)&&clearTimeout)return K=clearTimeout,clearTimeout(e);try{return K(e)}catch(t){try{return K.call(null,e)}catch(t){return K.call(this,e)}}}(e)}}function ne(e,t){this.fun=e,this.array=t}function oe(){}$.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];J.push(new ne(e,t)),1!==J.length||Q||Z(re)},ne.prototype.run=function(){this.fun.apply(null,this.array)},$.title="browser",$.browser=!0,$.env={},$.argv=[],$.version="",$.versions={},$.on=oe,$.addListener=oe,$.once=oe,$.off=oe,$.removeListener=oe,$.removeAllListeners=oe,$.emit=oe,$.prependListener=oe,$.prependOnceListener=oe,$.listeners=function(e){return[]},$.binding=function(e){throw new Error("process.binding is not supported")},$.cwd=function(){return"/"},$.chdir=function(e){throw new Error("process.chdir is not supported")},$.umask=function(){return 0};const ie=W(V.exports);var se,ae;function ue(){return ae?se:(ae=1,se=j.EventEmitter)}var ce,le,he,pe={},fe={},de={};function me(){return he||(he=1,function(e){var t=function(){if(ce)return fe;ce=1,fe.byteLength=function(e){var t=i(e),r=t[0],n=t[1];return 3*(r+n)/4-n},fe.toByteArray=function(e){var n,o,s=i(e),a=s[0],u=s[1],c=new r(function(e,t,r){return 3*(t+r)/4-r}(0,a,u)),l=0,h=u>0?a-4:a;for(o=0;o<h;o+=4)n=t[e.charCodeAt(o)]<<18|t[e.charCodeAt(o+1)]<<12|t[e.charCodeAt(o+2)]<<6|t[e.charCodeAt(o+3)],c[l++]=n>>16&255,c[l++]=n>>8&255,c[l++]=255&n;return 2===u&&(n=t[e.charCodeAt(o)]<<2|t[e.charCodeAt(o+1)]>>4,c[l++]=255&n),1===u&&(n=t[e.charCodeAt(o)]<<10|t[e.charCodeAt(o+1)]<<4|t[e.charCodeAt(o+2)]>>2,c[l++]=n>>8&255,c[l++]=255&n),c},fe.fromByteArray=function(t){for(var r,n=t.length,o=n%3,i=[],a=16383,u=0,c=n-o;u<c;u+=a)i.push(s(t,u,u+a>c?c:u+a));return 1===o?(r=t[n-1],i.push(e[r>>2]+e[r<<4&63]+"==")):2===o&&(r=(t[n-2]<<8)+t[n-1],i.push(e[r>>10]+e[r>>4&63]+e[r<<2&63]+"=")),i.join("")};for(var e=[],t=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0;o<64;++o)e[o]=n[o],t[n.charCodeAt(o)]=o;function i(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function s(t,r,n){for(var o,i,s=[],a=r;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(e[(i=o)>>18&63]+e[i>>12&63]+e[i>>6&63]+e[63&i]);return s.join("")}return t["-".charCodeAt(0)]=62,t["_".charCodeAt(0)]=63,fe}(),r=(le||(le=1,de.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?o-1:0,p=r?-1:1,f=e[t+h];for(h+=p,i=f&(1<<-l)-1,f>>=-l,l+=a;l>0;i=256*i+e[t+h],h+=p,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=p,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,n),i-=c}return(f?-1:1)*s*Math.pow(2,i-n)},de.write=function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:i-1,d=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*u-1)*Math.pow(2,o),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;e[r+f]=255&a,f+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+f]=255&s,f+=d,s/=256,c-=8);e[r+f-d]|=128*m}),de),n="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=s,e.SlowBuffer=function(e){return+e!=e&&(e=0),s.alloc(+e)},e.INSPECT_MAX_BYTES=50;var o=2147483647;function i(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,s.prototype),t}function s(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return c(e)}return a(e,t,r)}function a(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!s.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|f(e,t),n=i(r),o=n.write(e,t);return o!==r&&(n=n.slice(0,o)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(M(e,Uint8Array)){var t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return l(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(M(e,ArrayBuffer)||e&&M(e.buffer,ArrayBuffer))return h(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(M(e,SharedArrayBuffer)||e&&M(e.buffer,SharedArrayBuffer)))return h(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return s.from(n,t,r);var o=function(e){if(s.isBuffer(e)){var t=0|p(e.length),r=i(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||j(e.length)?i(0):l(e):"Buffer"===e.type&&Array.isArray(e.data)?l(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return s.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function c(e){return u(e),i(e<0?0:0|p(e))}function l(e){for(var t=e.length<0?0:0|p(e.length),r=i(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function h(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,s.prototype),n}function p(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function f(e,t){if(s.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||M(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(e).length;default:if(o)return n?-1:B(e).length;t=(""+t).toLowerCase(),o=!0}}function d(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return k(this,t,r);case"utf8":case"utf-8":return T(this,t,r);case"ascii":return S(this,t,r);case"latin1":case"binary":return I(this,t,r);case"base64":return _(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function m(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function w(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),j(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=s.from(t,n)),s.isBuffer(t))return 0===t.length?-1:g(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):g(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,r,n,o){var i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){h=!1;break}if(h)return i}return-1}function y(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(j(a))return s;e[r+s]=a}return s}function b(e,t,r,n){return U(B(t,e.length-r),e,r,n)}function v(e,t,r,n){return U(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return U(F(t),e,r,n)}function E(e,t,r,n){return U(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=(r=e.charCodeAt(s))>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function _(e,r,n){return 0===r&&n===e.length?t.fromByteArray(e):t.fromByteArray(e.slice(r,n))}function T(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,u,c=e[o],l=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),o+=h}return function(e){var t=e.length;if(t<=A)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=A));return r}(n)}e.kMaxLength=o,s.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),s.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(s.prototype,"parent",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.buffer}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.byteOffset}}),s.poolSize=8192,s.from=function(e,t,r){return a(e,t,r)},Object.setPrototypeOf(s.prototype,Uint8Array.prototype),Object.setPrototypeOf(s,Uint8Array),s.alloc=function(e,t,r){return function(e,t,r){return u(e),e<=0?i(e):void 0!==t?"string"==typeof r?i(e).fill(t,r):i(e).fill(t):i(e)}(e,t,r)},s.allocUnsafe=function(e){return c(e)},s.allocUnsafeSlow=function(e){return c(e)},s.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==s.prototype},s.compare=function(e,t){if(M(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),M(t,Uint8Array)&&(t=s.from(t,t.offset,t.byteLength)),!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=s.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(M(i,Uint8Array))o+i.length>n.length?s.from(i).copy(n,o):Uint8Array.prototype.set.call(n,i,o);else{if(!s.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o)}o+=i.length}return n},s.byteLength=f,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},s.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?T(this,0,e):d.apply(this,arguments)},s.prototype.toLocaleString=s.prototype.toString,s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},n&&(s.prototype[n]=s.prototype.inspect),s.prototype.compare=function(e,t,r,n,o){if(M(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),!s.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),u=Math.min(i,a),c=this.slice(n,o),l=e.slice(t,r),h=0;h<u;++h)if(c[h]!==l[h]){i=c[h],a=l[h];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},s.prototype.indexOf=function(e,t,r){return w(this,e,t,r,!0)},s.prototype.lastIndexOf=function(e,t,r){return w(this,e,t,r,!1)},s.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return b(this,e,t,r);case"ascii":case"latin1":case"binary":return v(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var A=4096;function S(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function I(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function k(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=H[e[i]];return o}function R(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length-1;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function N(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,r,n,o,i){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function C(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(e,t,n,o,i){return t=+t,n>>>=0,i||C(e,0,n,4),r.write(e,t,n,o,23,4),n+4}function L(e,t,n,o,i){return t=+t,n>>>=0,i||C(e,0,n,8),r.write(e,t,n,o,52,8),n+8}s.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return Object.setPrototypeOf(n,s.prototype),n},s.prototype.readUintLE=s.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},s.prototype.readUintBE=s.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},s.prototype.readUint8=s.prototype.readUInt8=function(e,t){return e>>>=0,t||N(e,1,this.length),this[e]},s.prototype.readUint16LE=s.prototype.readUInt16LE=function(e,t){return e>>>=0,t||N(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUint16BE=s.prototype.readUInt16BE=function(e,t){return e>>>=0,t||N(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUint32LE=s.prototype.readUInt32LE=function(e,t){return e>>>=0,t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUint32BE=s.prototype.readUInt32BE=function(e,t){return e>>>=0,t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},s.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},s.prototype.readInt8=function(e,t){return e>>>=0,t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){e>>>=0,t||N(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(e,t){e>>>=0,t||N(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(e,t){return e>>>=0,t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return e>>>=0,t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return e>>>=0,t||N(e,4,this.length),r.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return e>>>=0,t||N(e,4,this.length),r.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return e>>>=0,t||N(e,8,this.length),r.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return e>>>=0,t||N(e,8,this.length),r.read(this,e,!1,52,8)},s.prototype.writeUintLE=s.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||O(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},s.prototype.writeUintBE=s.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||O(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},s.prototype.writeUint8=s.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,1,255,0),this[t]=255&e,t+1},s.prototype.writeUint16LE=s.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeUint16BE=s.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeUint32LE=s.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},s.prototype.writeUint32BE=s.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);O(this,e,t,r,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s|0)-a&255;return t+r},s.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);O(this,e,t,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s|0)-a&255;return t+r},s.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},s.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeFloatLE=function(e,t,r){return D(this,e,t,!0,r)},s.prototype.writeFloatBE=function(e,t,r){return D(this,e,t,!1,r)},s.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},s.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},s.prototype.copy=function(e,t,r,n){if(!s.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},s.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var o=e.charCodeAt(0);("utf8"===n&&o<128||"latin1"===n)&&(e=o)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var a=s.isBuffer(e)?e:s.from(e,n),u=a.length;if(0===u)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=a[i%u]}return this};var P=/[^+/0-9A-Za-z-_]/g;function B(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function F(e){return t.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(P,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function M(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function j(e){return e!=e}var H=function(){for(var e="0123456789abcdef",t=new Array(256),r=0;r<16;++r)for(var n=16*r,o=0;o<16;++o)t[n+o]=e[r]+e[o];return t}()}(pe)),pe}var we,ge,ye,be,ve,xe,Ee,_e,Te,Ae,Se,Ie,ke,Re,Ne,Oe,Ce={},De={};function Le(){return ge?we:(ge=1,we=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),r=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var n=Object.getOwnPropertySymbols(e);if(1!==n.length||n[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0})}function Pe(){if(be)return ye;be=1;var e=Le();return ye=function(){return e()&&!!Symbol.toStringTag}}function Be(){if(Ie)return Se;Ie=1;var e=function(){if(Ae)return Te;Ae=1;var e=Object.prototype.toString,t=Math.max,r=function(e,t){for(var r=[],n=0;n<e.length;n+=1)r[n]=e[n];for(var o=0;o<t.length;o+=1)r[o+e.length]=t[o];return r};return Te=function(n){var o=this;if("function"!=typeof o||"[object Function]"!==e.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var i,s=function(e){for(var t=[],r=1,n=0;r<e.length;r+=1,n+=1)t[n]=e[r];return t}(arguments),a=t(0,o.length-s.length),u=[],c=0;c<a;c++)u[c]="$"+c;if(i=Function("binder","return function ("+function(e){for(var t="",r=0;r<e.length;r+=1)t+=e[r],r+1<e.length&&(t+=",");return t}(u)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var e=o.apply(this,r(s,arguments));return Object(e)===e?e:this}return o.apply(n,r(s,arguments))})),o.prototype){var l=function(){};l.prototype=o.prototype,i.prototype=new l,l.prototype=null}return i},Te}();return Se=Function.prototype.bind||e}function Fe(){if(Oe)return Ne;var e;Oe=1;var t=SyntaxError,r=Function,n=TypeError,o=function(e){try{return r('"use strict"; return ('+e+").constructor;")()}catch(e){}},i=Object.getOwnPropertyDescriptor;if(i)try{i({},"")}catch(e){i=null}var s=function(){throw new n},a=i?function(){try{return s}catch(e){try{return i(arguments,"callee").get}catch(e){return s}}}():s,u=function(){if(xe)return ve;xe=1;var e="undefined"!=typeof Symbol&&Symbol,t=Le();return ve=function(){return"function"==typeof e&&"function"==typeof Symbol&&"symbol"==typeof e("foo")&&"symbol"==typeof Symbol("bar")&&t()}}()(),c=function(){if(_e)return Ee;_e=1;var e={foo:{}},t=Object;return Ee=function(){return{__proto__:e}.foo===e.foo&&!({__proto__:null}instanceof t)}}()(),l=Object.getPrototypeOf||(c?function(e){return e.__proto__}:null),h={},p="undefined"!=typeof Uint8Array&&l?l(Uint8Array):e,f={"%AggregateError%":"undefined"==typeof AggregateError?e:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?e:ArrayBuffer,"%ArrayIteratorPrototype%":u&&l?l([][Symbol.iterator]()):e,"%AsyncFromSyncIteratorPrototype%":e,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?e:Atomics,"%BigInt%":"undefined"==typeof BigInt?e:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?e:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?e:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?e:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?e:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?e:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?e:FinalizationRegistry,"%Function%":r,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?e:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?e:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?e:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u&&l?l(l([][Symbol.iterator]())):e,"%JSON%":"object"==typeof JSON?JSON:e,"%Map%":"undefined"==typeof Map?e:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u&&l?l((new Map)[Symbol.iterator]()):e,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?e:Promise,"%Proxy%":"undefined"==typeof Proxy?e:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?e:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?e:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u&&l?l((new Set)[Symbol.iterator]()):e,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?e:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":u&&l?l(""[Symbol.iterator]()):e,"%Symbol%":u?Symbol:e,"%SyntaxError%":t,"%ThrowTypeError%":a,"%TypedArray%":p,"%TypeError%":n,"%Uint8Array%":"undefined"==typeof Uint8Array?e:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?e:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?e:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?e:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?e:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?e:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?e:WeakSet};if(l)try{null.error}catch(e){var d=l(l(e));f["%Error.prototype%"]=d}var m=function e(t){var r;if("%AsyncFunction%"===t)r=o("async function () {}");else if("%GeneratorFunction%"===t)r=o("function* () {}");else if("%AsyncGeneratorFunction%"===t)r=o("async function* () {}");else if("%AsyncGenerator%"===t){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&l&&(r=l(i.prototype))}return f[t]=r,r},w={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},g=Be(),y=function(){if(Re)return ke;Re=1;var e=Function.prototype.call,t=Object.prototype.hasOwnProperty,r=Be();return ke=r.call(e,t)}(),b=g.call(Function.call,Array.prototype.concat),v=g.call(Function.apply,Array.prototype.splice),x=g.call(Function.call,String.prototype.replace),E=g.call(Function.call,String.prototype.slice),_=g.call(Function.call,RegExp.prototype.exec),T=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,A=/\\(\\)?/g,S=function(e,r){var o,i=e;if(y(w,i)&&(i="%"+(o=w[i])[0]+"%"),y(f,i)){var s=f[i];if(s===h&&(s=m(i)),void 0===s&&!r)throw new n("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:o,name:i,value:s}}throw new t("intrinsic "+e+" does not exist!")};return Ne=function(e,r){if("string"!=typeof e||0===e.length)throw new n("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof r)throw new n('"allowMissing" argument must be a boolean');if(null===_(/^%?[^%]*%?$/,e))throw new t("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var o=function(e){var r=E(e,0,1),n=E(e,-1);if("%"===r&&"%"!==n)throw new t("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==r)throw new t("invalid intrinsic syntax, expected opening `%`");var o=[];return x(e,T,(function(e,t,r,n){o[o.length]=r?x(n,A,"$1"):t||e})),o}(e),s=o.length>0?o[0]:"",a=S("%"+s+"%",r),u=a.name,c=a.value,l=!1,h=a.alias;h&&(s=h[0],v(o,b([0,1],h)));for(var p=1,d=!0;p<o.length;p+=1){var m=o[p],w=E(m,0,1),g=E(m,-1);if(('"'===w||"'"===w||"`"===w||'"'===g||"'"===g||"`"===g)&&w!==g)throw new t("property names with quotes must have matching quotes");if("constructor"!==m&&d||(l=!0),y(f,u="%"+(s+="."+m)+"%"))c=f[u];else if(null!=c){if(!(m in c)){if(!r)throw new n("base intrinsic for "+e+" exists, but the property is not available.");return}if(i&&p+1>=o.length){var I=i(c,m);c=(d=!!I)&&"get"in I&&!("originalValue"in I.get)?I.get:c[m]}else d=y(c,m),c=c[m];d&&!l&&(f[u]=c)}}return c},Ne}var Ue,Me,je,He,ze,We,Ge,Ke,Ve,$e,Xe,qe,Ze,Ye,Je,Qe,et,tt,rt,nt,ot,it,st,at,ut,ct,lt,ht,pt,ft,dt,mt,wt,gt={exports:{}};function yt(){if(Me)return Ue;Me=1;var e=Fe()("%Object.defineProperty%",!0),t=function(){if(e)try{return e({},"a",{value:1}),!0}catch(e){return!1}return!1};return t.hasArrayLengthDefineBug=function(){if(!t())return null;try{return 1!==e([],"length",{value:1}).length}catch(e){return!0}},Ue=t}function bt(){if(He)return je;He=1;var e=Fe()("%Object.getOwnPropertyDescriptor%",!0);if(e)try{e([],"length")}catch(t){e=null}return je=e}function vt(){return Ve||(Ve=1,function(e){var t=Be(),r=Fe(),n=function(){if(Ke)return Ge;Ke=1;var e=Fe(),t=function(){if(We)return ze;We=1;var e=yt()(),t=Fe(),r=e&&t("%Object.defineProperty%",!0);if(r)try{r({},"a",{value:1})}catch(e){r=!1}var n=t("%SyntaxError%"),o=t("%TypeError%"),i=bt();return ze=function(e,t,s){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new o("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new o("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new o("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new o("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new o("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new o("`loose`, if provided, must be a boolean");var a=arguments.length>3?arguments[3]:null,u=arguments.length>4?arguments[4]:null,c=arguments.length>5?arguments[5]:null,l=arguments.length>6&&arguments[6],h=!!i&&i(e,t);if(r)r(e,t,{configurable:null===c&&h?h.configurable:!c,enumerable:null===a&&h?h.enumerable:!a,value:s,writable:null===u&&h?h.writable:!u});else{if(!l&&(a||u||c))throw new n("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=s}},ze}(),r=yt()(),n=bt(),o=e("%TypeError%"),i=e("%Math.floor%");return Ge=function(e,s){if("function"!=typeof e)throw new o("`fn` is not a function");if("number"!=typeof s||s<0||s>4294967295||i(s)!==s)throw new o("`length` must be a positive 32-bit integer");var a=arguments.length>2&&!!arguments[2],u=!0,c=!0;if("length"in e&&n){var l=n(e,"length");l&&!l.configurable&&(u=!1),l&&!l.writable&&(c=!1)}return(u||c||!a)&&(r?t(e,"length",s,!0,!0):t(e,"length",s)),e},Ge}(),o=r("%TypeError%"),i=r("%Function.prototype.apply%"),s=r("%Function.prototype.call%"),a=r("%Reflect.apply%",!0)||t.call(s,i),u=r("%Object.defineProperty%",!0),c=r("%Math.max%");if(u)try{u({},"a",{value:1})}catch(e){u=null}e.exports=function(e){if("function"!=typeof e)throw new o("a function is required");var r=a(t,s,arguments);return n(r,1+c(0,e.length-(arguments.length-1)),!0)};var l=function(){return a(t,i,arguments)};u?u(e.exports,"apply",{value:l}):e.exports.apply=l}(gt)),gt.exports}function xt(){if(Xe)return $e;Xe=1;var e=Fe(),t=vt(),r=t(e("String.prototype.indexOf"));return $e=function(n,o){var i=e(n,!!o);return"function"==typeof i&&r(n,".prototype.")>-1?t(i):i}}function Et(){if(st)return it;st=1;var e=function(){if(rt)return tt;rt=1;var e=function(){if(et)return Qe;et=1;var e,t,r=Function.prototype.toString,n="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof n&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw t}}),t={},n((function(){throw 42}),null,e)}catch(e){e!==t&&(n=null)}else n=null;var o=/^\s*class\b/,i=function(e){try{var t=r.call(e);return o.test(t)}catch(e){return!1}},s=function(e){try{return!i(e)&&(r.call(e),!0)}catch(e){return!1}},a=Object.prototype.toString,u="function"==typeof Symbol&&!!Symbol.toStringTag,c=!(0 in[,]),l=function(){return!1};if("object"==typeof document){var h=document.all;a.call(h)===a.call(document.all)&&(l=function(e){if((c||!e)&&(void 0===e||"object"==typeof e))try{var t=a.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}return Qe=n?function(r){if(l(r))return!0;if(!r)return!1;if("function"!=typeof r&&"object"!=typeof r)return!1;try{n(r,null,e)}catch(e){if(e!==t)return!1}return!i(r)&&s(r)}:function(e){if(l(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(u)return s(e);if(i(e))return!1;var t=a.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&s(e)}}(),t=Object.prototype.toString,r=Object.prototype.hasOwnProperty;return tt=function(n,o,i){if(!e(o))throw new TypeError("iterator must be a function");var s;arguments.length>=3&&(s=i),"[object Array]"===t.call(n)?function(e,t,n){for(var o=0,i=e.length;o<i;o++)r.call(e,o)&&(null==n?t(e[o],o,e):t.call(n,e[o],o,e))}(n,o,s):"string"==typeof n?function(e,t,r){for(var n=0,o=e.length;n<o;n++)null==r?t(e.charAt(n),n,e):t.call(r,e.charAt(n),n,e)}(n,o,s):function(e,t,n){for(var o in e)r.call(e,o)&&(null==n?t(e[o],o,e):t.call(n,e[o],o,e))}(n,o,s)},tt}(),t=function(){if(ot)return nt;ot=1;var e=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],t="undefined"==typeof globalThis?x:globalThis;return nt=function(){for(var r=[],n=0;n<e.length;n++)"function"==typeof t[e[n]]&&(r[r.length]=e[n]);return r}}(),r=vt(),n=xt(),o=bt(),i=n("Object.prototype.toString"),s=Pe()(),a="undefined"==typeof globalThis?x:globalThis,u=t(),c=n("String.prototype.slice"),l=Object.getPrototypeOf,h=n("Array.prototype.indexOf",!0)||function(e,t){for(var r=0;r<e.length;r+=1)if(e[r]===t)return r;return-1},p={__proto__:null};return e(u,s&&o&&l?function(e){var t=new a[e];if(Symbol.toStringTag in t){var n=l(t),i=o(n,Symbol.toStringTag);if(!i){var s=l(n);i=o(s,Symbol.toStringTag)}p["$"+e]=r(i.get)}}:function(e){var t=new a[e],n=t.slice||t.set;n&&(p["$"+e]=r(n))}),it=function(t){if(!t||"object"!=typeof t)return!1;if(!s){var r=c(i(t),8,-1);return h(u,r)>-1?r:"Object"===r&&function(t){var r=!1;return e(p,(function(e,n){if(!r)try{e(t),r=c(n,1)}catch(e){}})),r}(t)}return o?function(t){var r=!1;return e(p,(function(e,n){if(!r)try{"$"+e(t)===n&&(r=c(n,1))}catch(e){}})),r}(t):null}}function _t(){return ct||(ct=1,function(e){var t=function(){if(Ze)return qe;Ze=1;var e=Pe()(),t=xt()("Object.prototype.toString"),r=function(r){return!(e&&r&&"object"==typeof r&&Symbol.toStringTag in r)&&"[object Arguments]"===t(r)},n=function(e){return!!r(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==t(e)&&"[object Function]"===t(e.callee)},o=function(){return r(arguments)}();return r.isLegacyArguments=n,qe=o?r:n}(),r=function(){if(Je)return Ye;Je=1;var e,t=Object.prototype.toString,r=Function.prototype.toString,n=/^\s*(?:function)?\*/,o=Pe()(),i=Object.getPrototypeOf;return Ye=function(s){if("function"!=typeof s)return!1;if(n.test(r.call(s)))return!0;if(!o)return"[object GeneratorFunction]"===t.call(s);if(!i)return!1;if(void 0===e){var a=function(){if(!o)return!1;try{return Function("return function*() {}")()}catch(e){}}();e=!!a&&i(a)}return i(s)===e}}(),n=Et(),o=function(){if(ut)return at;ut=1;var e=Et();return at=function(t){return!!e(t)}}();function i(e){return e.call.bind(e)}var s="undefined"!=typeof BigInt,a="undefined"!=typeof Symbol,u=i(Object.prototype.toString),c=i(Number.prototype.valueOf),l=i(String.prototype.valueOf),h=i(Boolean.prototype.valueOf);if(s)var p=i(BigInt.prototype.valueOf);if(a)var f=i(Symbol.prototype.valueOf);function d(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function m(e){return"[object Map]"===u(e)}function w(e){return"[object Set]"===u(e)}function g(e){return"[object WeakMap]"===u(e)}function y(e){return"[object WeakSet]"===u(e)}function b(e){return"[object ArrayBuffer]"===u(e)}function v(e){return"undefined"!=typeof ArrayBuffer&&(b.working?b(e):e instanceof ArrayBuffer)}function x(e){return"[object DataView]"===u(e)}function E(e){return"undefined"!=typeof DataView&&(x.working?x(e):e instanceof DataView)}e.isArgumentsObject=t,e.isGeneratorFunction=r,e.isTypedArray=o,e.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},e.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):o(e)||E(e)},e.isUint8Array=function(e){return"Uint8Array"===n(e)},e.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===n(e)},e.isUint16Array=function(e){return"Uint16Array"===n(e)},e.isUint32Array=function(e){return"Uint32Array"===n(e)},e.isInt8Array=function(e){return"Int8Array"===n(e)},e.isInt16Array=function(e){return"Int16Array"===n(e)},e.isInt32Array=function(e){return"Int32Array"===n(e)},e.isFloat32Array=function(e){return"Float32Array"===n(e)},e.isFloat64Array=function(e){return"Float64Array"===n(e)},e.isBigInt64Array=function(e){return"BigInt64Array"===n(e)},e.isBigUint64Array=function(e){return"BigUint64Array"===n(e)},m.working="undefined"!=typeof Map&&m(new Map),e.isMap=function(e){return"undefined"!=typeof Map&&(m.working?m(e):e instanceof Map)},w.working="undefined"!=typeof Set&&w(new Set),e.isSet=function(e){return"undefined"!=typeof Set&&(w.working?w(e):e instanceof Set)},g.working="undefined"!=typeof WeakMap&&g(new WeakMap),e.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(g.working?g(e):e instanceof WeakMap)},y.working="undefined"!=typeof WeakSet&&y(new WeakSet),e.isWeakSet=function(e){return y(e)},b.working="undefined"!=typeof ArrayBuffer&&b(new ArrayBuffer),e.isArrayBuffer=v,x.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&x(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=E;var _="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function T(e){return"[object SharedArrayBuffer]"===u(e)}function A(e){return void 0!==_&&(void 0===T.working&&(T.working=T(new _)),T.working?T(e):e instanceof _)}function S(e){return d(e,c)}function I(e){return d(e,l)}function k(e){return d(e,h)}function R(e){return s&&d(e,p)}function N(e){return a&&d(e,f)}e.isSharedArrayBuffer=A,e.isAsyncFunction=function(e){return"[object AsyncFunction]"===u(e)},e.isMapIterator=function(e){return"[object Map Iterator]"===u(e)},e.isSetIterator=function(e){return"[object Set Iterator]"===u(e)},e.isGeneratorObject=function(e){return"[object Generator]"===u(e)},e.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===u(e)},e.isNumberObject=S,e.isStringObject=I,e.isBooleanObject=k,e.isBigIntObject=R,e.isSymbolObject=N,e.isBoxedPrimitive=function(e){return S(e)||I(e)||k(e)||R(e)||N(e)},e.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(v(e)||A(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))}(De)),De}function Tt(){return pt||(pt=1,function(e){var t=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},r=/%[sdj%]/g;e.format=function(e){if(!w(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(s(arguments[n]));return t.join(" ")}n=1;for(var o=arguments,i=o.length,a=String(e).replace(r,(function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return String(o[n++]);case"%d":return Number(o[n++]);case"%j":try{return JSON.stringify(o[n++])}catch(e){return"[Circular]"}default:return e}})),u=o[n];n<i;u=o[++n])d(u)||!b(u)?a+=" "+u:a+=" "+s(u);return a},e.deprecate=function(t,r){if(void 0!==ie&&!0===ie.noDeprecation)return t;if(void 0===ie)return function(){return e.deprecate(t,r).apply(this,arguments)};var n=!1;return function(){if(!n){if(ie.throwDeprecation)throw new Error(r);ie.traceDeprecation?console.trace(r):console.error(r),n=!0}return t.apply(this,arguments)}};var n={},o=/^$/;if(ie.env.NODE_DEBUG){var i=ie.env.NODE_DEBUG;i=i.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),o=new RegExp("^"+i+"$","i")}function s(t,r){var n={seen:[],stylize:u};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),f(r)?n.showHidden=r:r&&e._extend(n,r),g(n.showHidden)&&(n.showHidden=!1),g(n.depth)&&(n.depth=2),g(n.colors)&&(n.colors=!1),g(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=a),c(n,t,n.depth)}function a(e,t){var r=s.styles[t];return r?"["+s.colors[r][0]+"m"+e+"["+s.colors[r][1]+"m":e}function u(e,t){return e}function c(t,r,n){if(t.customInspect&&r&&E(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return w(o)||(o=c(t,o,n)),o}var i=function(e,t){if(g(t))return e.stylize("undefined","undefined");if(w(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return m(t)?e.stylize(""+t,"number"):f(t)?e.stylize(""+t,"boolean"):d(t)?e.stylize("null","null"):void 0}(t,r);if(i)return i;var s=Object.keys(r),a=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(r)),x(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return l(r);if(0===s.length){if(E(r)){var u=r.name?": "+r.name:"";return t.stylize("[Function"+u+"]","special")}if(y(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(v(r))return t.stylize(Date.prototype.toString.call(r),"date");if(x(r))return l(r)}var b,_="",T=!1,A=["{","}"];return p(r)&&(T=!0,A=["[","]"]),E(r)&&(_=" [Function"+(r.name?": "+r.name:"")+"]"),y(r)&&(_=" "+RegExp.prototype.toString.call(r)),v(r)&&(_=" "+Date.prototype.toUTCString.call(r)),x(r)&&(_=" "+l(r)),0!==s.length||T&&0!=r.length?n<0?y(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),b=T?function(e,t,r,n,o){for(var i=[],s=0,a=t.length;s<a;++s)S(t,String(s))?i.push(h(e,t,r,n,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(h(e,t,r,n,o,!0))})),i}(t,r,n,a,s):s.map((function(e){return h(t,r,n,a,e,T)})),t.seen.pop(),function(e,t,r){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(b,_,A)):A[0]+_+A[1]}function l(e){return"["+Error.prototype.toString.call(e)+"]"}function h(e,t,r,n,o,i){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),S(n,o)||(s="["+o+"]"),a||(e.seen.indexOf(u.value)<0?(a=d(r)?c(e,u.value,null):c(e,u.value,r-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),g(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.slice(1,-1),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function p(e){return Array.isArray(e)}function f(e){return"boolean"==typeof e}function d(e){return null===e}function m(e){return"number"==typeof e}function w(e){return"string"==typeof e}function g(e){return void 0===e}function y(e){return b(e)&&"[object RegExp]"===_(e)}function b(e){return"object"==typeof e&&null!==e}function v(e){return b(e)&&"[object Date]"===_(e)}function x(e){return b(e)&&("[object Error]"===_(e)||e instanceof Error)}function E(e){return"function"==typeof e}function _(e){return Object.prototype.toString.call(e)}function T(e){return e<10?"0"+e.toString(10):e.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!n[t])if(o.test(t)){var r=ie.pid;n[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else n[t]=function(){};return n[t]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=_t(),e.isArray=p,e.isBoolean=f,e.isNull=d,e.isNullOrUndefined=function(e){return null==e},e.isNumber=m,e.isString=w,e.isSymbol=function(e){return"symbol"==typeof e},e.isUndefined=g,e.isRegExp=y,e.types.isRegExp=y,e.isObject=b,e.isDate=v,e.types.isDate=v,e.isError=x,e.types.isNativeError=x,e.isFunction=E,e.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},e.isBuffer=ht?lt:(ht=1,lt=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8});var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function S(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.log=function(){var t,r;console.log("%s - %s",(r=[T((t=new Date).getHours()),T(t.getMinutes()),T(t.getSeconds())].join(":"),[t.getDate(),A[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=z,e._extend=function(e,t){if(!t||!b(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var I="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function k(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}e.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(I&&e[I]){var r;if("function"!=typeof(r=e[I]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(r,I,{value:r,enumerable:!1,writable:!1,configurable:!0}),r}function r(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,o)}catch(e){r(e)}return n}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),I&&Object.defineProperty(r,I,{value:r,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(r,t(e))},e.promisify.custom=I,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function r(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var n=t.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var o=this,i=function(){return n.apply(o,arguments)};e.apply(this,t).then((function(e){ie.nextTick(i.bind(null,null,e))}),(function(e){ie.nextTick(k.bind(null,e,i))}))}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),Object.defineProperties(r,t(e)),r}}(Ce)),Ce}function At(){if(wt)return mt;function e(e,n){r(e,n),t(e)}function t(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function r(e,t){e.emit("error",t)}return wt=1,mt={destroy:function(n,o){var i=this,s=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return s||a?(o?o(n):n&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,ie.nextTick(r,this,n)):ie.nextTick(r,this,n)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(n||null,(function(r){!o&&r?i._writableState?i._writableState.errorEmitted?ie.nextTick(t,i):(i._writableState.errorEmitted=!0,ie.nextTick(e,i,r)):ie.nextTick(e,i,r):o?(ie.nextTick(t,i),o(r)):ie.nextTick(t,i)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}}var St,It,kt,Rt,Nt,Ot,Ct,Dt,Lt,Pt={};function Bt(){if(St)return Pt;St=1;var e={};function t(t,r,n){n||(n=Error);var o=function(e){var t,n;function o(t,n,o){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,o))||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o}(n);o.prototype.name=n.name,o.prototype.code=t,e[t]=o}function r(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}return t("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),t("ERR_INVALID_ARG_TYPE",(function(e,t,n){var o,i,s,a,u;if("string"==typeof t&&(i="not ",t.substr(0,4)===i)?(o="must not be",t=t.replace(/^not /,"")):o="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-9,r)===t}(e," argument"))s="The ".concat(e," ").concat(o," ").concat(r(t,"type"));else{var c=("number"!=typeof u&&(u=0),u+1>(a=e).length||-1===a.indexOf(".",u)?"argument":"property");s='The "'.concat(e,'" ').concat(c," ").concat(o," ").concat(r(t,"type"))}return s+". Received type ".concat(typeof n)}),TypeError),t("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),t("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),t("ERR_STREAM_PREMATURE_CLOSE","Premature close"),t("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),t("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),t("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),t("ERR_STREAM_WRITE_AFTER_END","write after end"),t("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),t("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),t("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),Pt.codes=e,Pt}function Ft(){if(kt)return It;kt=1;var e=Bt().codes.ERR_INVALID_OPT_VALUE;return It={getHighWaterMark:function(t,r,n,o){var i=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(r,o,n);if(null!=i){if(!isFinite(i)||Math.floor(i)!==i||i<0)throw new e(o?n:"highWaterMark",i);return Math.floor(i)}return t.objectMode?16:16384}}}function Ut(){if(Nt)return Rt;function e(e){try{if(!x.localStorage)return!1}catch(e){return!1}var t=x.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}return Nt=1,Rt=function(t,r){if(e("noDeprecation"))return t;var n=!1;return function(){if(!n){if(e("throwDeprecation"))throw new Error(r);e("traceDeprecation")?console.trace(r):console.warn(r),n=!0}return t.apply(this,arguments)}},Rt}function Mt(){if(Ct)return Ot;function e(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t){var r=e.entry;for(e.entry=null;r;){var n=r.callback;t.pendingcb--,n(undefined),r=r.next}t.corkedRequestsFree.next=e}(t,e)}}var t;Ct=1,Ot=E,E.WritableState=v;var r,n={deprecate:Ut()},o=ue(),i=me().Buffer,s=x.Uint8Array||function(){},a=At(),u=Ft().getHighWaterMark,c=Bt().codes,l=c.ERR_INVALID_ARG_TYPE,h=c.ERR_METHOD_NOT_IMPLEMENTED,p=c.ERR_MULTIPLE_CALLBACK,f=c.ERR_STREAM_CANNOT_PIPE,d=c.ERR_STREAM_DESTROYED,m=c.ERR_STREAM_NULL_VALUES,w=c.ERR_STREAM_WRITE_AFTER_END,g=c.ERR_UNKNOWN_ENCODING,y=a.errorOrDestroy;function b(){}function v(r,n,o){t=t||jt(),r=r||{},"boolean"!=typeof o&&(o=n instanceof t),this.objectMode=!!r.objectMode,o&&(this.objectMode=this.objectMode||!!r.writableObjectMode),this.highWaterMark=u(this,r,"writableHighWaterMark",o),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var i=!1===r.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=r.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new p;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(ie.nextTick(o,n),ie.nextTick(k,e,t),e._writableState.errorEmitted=!0,y(e,n)):(o(n),e._writableState.errorEmitted=!0,y(e,n),k(e,t))}(e,r,n,t,o);else{var i=S(r)||e.destroyed;i||r.corked||r.bufferProcessing||!r.bufferedRequest||A(e,r),n?ie.nextTick(T,e,r,i,o):T(e,r,i,o)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==r.emitClose,this.autoDestroy=!!r.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new e(this)}function E(e){var n=this instanceof(t=t||jt());if(!n&&!r.call(E,this))return new E(e);this._writableState=new v(e,this,n),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),o.call(this)}function _(e,t,r,n,o,i,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new d("write")):r?e._writev(o,t.onwrite):e._write(o,i,t.onwrite),t.sync=!1}function T(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),k(e,t)}function A(t,r){r.bufferProcessing=!0;var n=r.bufferedRequest;if(t._writev&&n&&n.next){var o=r.bufferedRequestCount,i=new Array(o),s=r.corkedRequestsFree;s.entry=n;for(var a=0,u=!0;n;)i[a]=n,n.isBuf||(u=!1),n=n.next,a+=1;i.allBuffers=u,_(t,r,!0,r.length,i,"",s.finish),r.pendingcb++,r.lastBufferedRequest=null,s.next?(r.corkedRequestsFree=s.next,s.next=null):r.corkedRequestsFree=new e(r),r.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,l=n.encoding,h=n.callback;if(_(t,r,!1,r.objectMode?1:c.length,c,l,h),n=n.next,r.bufferedRequestCount--,r.writing)break}null===n&&(r.lastBufferedRequest=null)}r.bufferedRequest=n,r.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function I(e,t){e._final((function(r){t.pendingcb--,r&&y(e,r),t.prefinished=!0,e.emit("prefinish"),k(e,t)}))}function k(e,t){var r=S(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,ie.nextTick(I,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}return z(E,o),v.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(v.prototype,"buffer",{get:n.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(r=Function.prototype[Symbol.hasInstance],Object.defineProperty(E,Symbol.hasInstance,{value:function(e){return!!r.call(this,e)||this===E&&e&&e._writableState instanceof v}})):r=function(e){return e instanceof this},E.prototype.pipe=function(){y(this,new f)},E.prototype.write=function(e,t,r){var n,o=this._writableState,a=!1,u=!o.objectMode&&(n=e,i.isBuffer(n)||n instanceof s);return u&&!i.isBuffer(e)&&(e=function(e){return i.from(e)}(e)),"function"==typeof t&&(r=t,t=null),u?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=b),o.ending?function(e,t){var r=new w;y(e,r),ie.nextTick(t,r)}(this,r):(u||function(e,t,r,n){var o;return null===r?o=new m:"string"==typeof r||t.objectMode||(o=new l("chunk",["string","Buffer"],r)),!o||(y(e,o),ie.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,a=function(e,t,r,n,o,s){if(!r){var a=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=i.from(t,r)),t}(t,n,o);n!==a&&(r=!0,o="buffer",n=a)}var u=t.objectMode?1:n.length;t.length+=u;var c=t.length<t.highWaterMark;if(c||(t.needDrain=!0),t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:o,isBuf:r,callback:s,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else _(e,t,!1,u,n,o,s);return c}(this,o,u,e,t,r)),a},E.prototype.cork=function(){this._writableState.corked++},E.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||A(this,e))},E.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new g(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(E.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(E.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),E.prototype._write=function(e,t,r){r(new h("_write()"))},E.prototype._writev=null,E.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,k(e,t),r&&(t.finished?ie.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(E.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(E.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),E.prototype.destroy=a.destroy,E.prototype._undestroy=a.undestroy,E.prototype._destroy=function(e,t){t(e)},Ot}function jt(){if(Lt)return Dt;Lt=1;var e=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};Dt=s;var t=ur(),r=Mt();z(s,t);for(var n=e(r.prototype),o=0;o<n.length;o++){var i=n[o];s.prototype[i]||(s.prototype[i]=r.prototype[i])}function s(e){if(!(this instanceof s))return new s(e);t.call(this,e),r.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",a)))}function a(){this._writableState.ended||ie.nextTick(u,this)}function u(e){e.end()}return Object.defineProperty(s.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(s.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(s.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(s.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),Dt}var Ht,zt,Wt,Gt,Kt,Vt,$t,Xt,qt,Zt,Yt,Jt,Qt,er,tr,rr,nr={},or={exports:{}};function ir(){if(zt)return nr;zt=1;var e=(Ht||(Ht=1,function(e,t){var r=me(),n=r.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return n(e,t,r)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=r:(o(r,t),t.Buffer=i),o(n,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return n(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var o=n(e);return void 0!==t?"string"==typeof r?o.fill(t,r):o.fill(t):o.fill(0),o},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}}(or,or.exports)),or.exports).Buffer,t=e.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function r(r){var n;switch(this.encoding=function(r){var n=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(r);if("string"!=typeof n&&(e.isEncoding===t||!t(r)))throw new Error("Unknown encoding: "+r);return n||r}(r),this.encoding){case"utf16le":this.text=i,this.end=s,n=4;break;case"utf8":this.fillLast=o,n=4;break;case"base64":this.text=a,this.end=u,n=3;break;default:return this.write=c,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=e.allocUnsafe(n)}function n(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function o(e){var t=this.lastTotal-this.lastNeed,r=function(e,t){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function i(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function s(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function a(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function u(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function c(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}return nr.StringDecoder=r,r.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},r.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},r.prototype.text=function(e,t){var r=function(e,t,r){var o=t.length-1;if(o<r)return 0;var i=n(t[o]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--o<r||-2===i?0:(i=n(t[o]))>=0?(i>0&&(e.lastNeed=i-2),i):--o<r||-2===i?0:(i=n(t[o]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var o=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,o),e.toString("utf8",t,o)},r.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length},nr}function sr(){if(Gt)return Wt;Gt=1;var e=Bt().codes.ERR_STREAM_PREMATURE_CLOSE;function t(){}return Wt=function r(n,o,i){if("function"==typeof o)return r(n,null,o);o||(o={}),i=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];e.apply(this,n)}}}(i||t);var s=o.readable||!1!==o.readable&&n.readable,a=o.writable||!1!==o.writable&&n.writable,u=function(){n.writable||l()},c=n._writableState&&n._writableState.finished,l=function(){a=!1,c=!0,s||i.call(n)},h=n._readableState&&n._readableState.endEmitted,p=function(){s=!1,h=!0,a||i.call(n)},f=function(e){i.call(n,e)},d=function(){var t;return s&&!h?(n._readableState&&n._readableState.ended||(t=new e),i.call(n,t)):a&&!c?(n._writableState&&n._writableState.ended||(t=new e),i.call(n,t)):void 0},m=function(){n.req.on("finish",l)};return function(e){return e.setHeader&&"function"==typeof e.abort}(n)?(n.on("complete",l),n.on("abort",d),n.req?m():n.on("request",m)):a&&!n._writableState&&(n.on("end",u),n.on("close",u)),n.on("end",p),n.on("finish",l),!1!==o.error&&n.on("error",f),n.on("close",d),function(){n.removeListener("complete",l),n.removeListener("abort",d),n.removeListener("request",m),n.req&&n.req.removeListener("finish",l),n.removeListener("end",u),n.removeListener("close",u),n.removeListener("finish",l),n.removeListener("end",p),n.removeListener("error",f),n.removeListener("close",d)}},Wt}function ar(){if(Vt)return Kt;var e;function t(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}Vt=1;var r=sr(),n=Symbol("lastResolve"),o=Symbol("lastReject"),i=Symbol("error"),s=Symbol("ended"),a=Symbol("lastPromise"),u=Symbol("handlePromise"),c=Symbol("stream");function l(e,t){return{value:e,done:t}}function h(e){var t=e[n];if(null!==t){var r=e[c].read();null!==r&&(e[a]=null,e[n]=null,e[o]=null,t(l(r,!1)))}}function p(e){ie.nextTick(h,e)}var f=Object.getPrototypeOf((function(){})),d=Object.setPrototypeOf((t(e={get stream(){return this[c]},next:function(){var e=this,t=this[i];if(null!==t)return Promise.reject(t);if(this[s])return Promise.resolve(l(void 0,!0));if(this[c].destroyed)return new Promise((function(t,r){ie.nextTick((function(){e[i]?r(e[i]):t(l(void 0,!0))}))}));var r,n=this[a];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[s]?r(l(void 0,!0)):t[u](r,n)}),n)}}(n,this));else{var o=this[c].read();if(null!==o)return Promise.resolve(l(o,!1));r=new Promise(this[u])}return this[a]=r,r}},Symbol.asyncIterator,(function(){return this})),t(e,"return",(function(){var e=this;return new Promise((function(t,r){e[c].destroy(null,(function(e){e?r(e):t(l(void 0,!0))}))}))})),e),f);return Kt=function(e){var h,f=Object.create(d,(t(h={},c,{value:e,writable:!0}),t(h,n,{value:null,writable:!0}),t(h,o,{value:null,writable:!0}),t(h,i,{value:null,writable:!0}),t(h,s,{value:e._readableState.endEmitted,writable:!0}),t(h,u,{value:function(e,t){var r=f[c].read();r?(f[a]=null,f[n]=null,f[o]=null,e(l(r,!1))):(f[n]=e,f[o]=t)},writable:!0}),h));return f[a]=null,r(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=f[o];return null!==t&&(f[a]=null,f[n]=null,f[o]=null,t(e)),void(f[i]=e)}var r=f[n];null!==r&&(f[a]=null,f[n]=null,f[o]=null,r(l(void 0,!0))),f[s]=!0})),e.on("readable",p.bind(null,f)),f}}function ur(){if(Zt)return qt;var e;Zt=1,qt=E,E.ReadableState=v,j.EventEmitter;var t,r=function(e,t){return e.listeners(t).length},n=ue(),o=me().Buffer,i=x.Uint8Array||function(){},s=Tt();t=s&&s.debuglog?s.debuglog("stream"):function(){};var a,u,c,l=function(){if(dt)return ft;function e(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function t(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}dt=1;var n=me().Buffer,o=Tt().inspect,i=o&&o.custom||"inspect";return ft=function(){function s(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.head=null,this.tail=null,this.length=0}var a;return a=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return n.alloc(0);for(var t,r,o,i=n.allocUnsafe(e>>>0),s=this.head,a=0;s;)t=s.data,r=i,o=a,n.prototype.copy.call(t,r,o),a+=s.data.length,s=s.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var o=t.data,i=e>o.length?o.length:e;if(i===o.length?n+=o:n+=o.slice(0,e),0==(e-=i)){i===o.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=o.slice(i));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=n.allocUnsafe(e),r=this.head,o=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,s=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,s),0==(e-=s)){s===i.length?(++o,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(s));break}++o}return this.length-=o,t}},{key:i,value:function(r,n){return o(this,function(r){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?e(Object(o),!0).forEach((function(e){t(r,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):e(Object(o)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))}))}return r}({},n,{depth:0,customInspect:!1}))}}],a&&r(s.prototype,a),s}(),ft}(),h=At(),p=Ft().getHighWaterMark,f=Bt().codes,d=f.ERR_INVALID_ARG_TYPE,m=f.ERR_STREAM_PUSH_AFTER_EOF,w=f.ERR_METHOD_NOT_IMPLEMENTED,g=f.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;z(E,n);var y=h.errorOrDestroy,b=["error","close","destroy","pause","resume"];function v(t,r,n){e=e||jt(),t=t||{},"boolean"!=typeof n&&(n=r instanceof e),this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=p(this,t,"readableHighWaterMark",n),this.buffer=new l,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(a||(a=ir().StringDecoder),this.decoder=new a(t.encoding),this.encoding=t.encoding)}function E(t){if(e=e||jt(),!(this instanceof E))return new E(t);var r=this instanceof e;this._readableState=new v(t,this,r),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),n.call(this)}function _(e,r,n,s,a){t("readableAddChunk",r);var u,c=e._readableState;if(null===r)c.reading=!1,function(e,r){if(t("onEofChunk"),!r.ended){if(r.decoder){var n=r.decoder.end();n&&n.length&&(r.buffer.push(n),r.length+=r.objectMode?1:n.length)}r.ended=!0,r.sync?I(e):(r.needReadable=!1,r.emittedReadable||(r.emittedReadable=!0,k(e)))}}(e,c);else if(a||(u=function(e,t){var r,n;return n=t,o.isBuffer(n)||n instanceof i||"string"==typeof t||void 0===t||e.objectMode||(r=new d("chunk",["string","Buffer","Uint8Array"],t)),r}(c,r)),u)y(e,u);else if(c.objectMode||r&&r.length>0)if("string"==typeof r||c.objectMode||Object.getPrototypeOf(r)===o.prototype||(r=function(e){return o.from(e)}(r)),s)c.endEmitted?y(e,new g):T(e,c,r,!0);else if(c.ended)y(e,new m);else{if(c.destroyed)return!1;c.reading=!1,c.decoder&&!n?(r=c.decoder.write(r),c.objectMode||0!==r.length?T(e,c,r,!1):R(e,c)):T(e,c,r,!1)}else s||(c.reading=!1,R(e,c));return!c.ended&&(c.length<c.highWaterMark||0===c.length)}function T(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&I(e)),R(e,t)}Object.defineProperty(E.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),E.prototype.destroy=h.destroy,E.prototype._undestroy=h.undestroy,E.prototype._destroy=function(e,t){t(e)},E.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=o.from(e,t),t=""),r=!0),_(this,e,t,!1,r)},E.prototype.unshift=function(e){return _(this,e,null,!0,!1)},E.prototype.isPaused=function(){return!1===this._readableState.flowing},E.prototype.setEncoding=function(e){a||(a=ir().StringDecoder);var t=new a(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,n="";null!==r;)n+=t.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==n&&this._readableState.buffer.push(n),this._readableState.length=n.length,this};var A=1073741824;function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=A?e=A:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function I(e){var r=e._readableState;t("emitReadable",r.needReadable,r.emittedReadable),r.needReadable=!1,r.emittedReadable||(t("emitReadable",r.flowing),r.emittedReadable=!0,ie.nextTick(k,e))}function k(e){var r=e._readableState;t("emitReadable_",r.destroyed,r.length,r.ended),r.destroyed||!r.length&&!r.ended||(e.emit("readable"),r.emittedReadable=!1),r.needReadable=!r.flowing&&!r.ended&&r.length<=r.highWaterMark,L(e)}function R(e,t){t.readingMore||(t.readingMore=!0,ie.nextTick(N,e,t))}function N(e,r){for(;!r.reading&&!r.ended&&(r.length<r.highWaterMark||r.flowing&&0===r.length);){var n=r.length;if(t("maybeReadMore read 0"),e.read(0),n===r.length)break}r.readingMore=!1}function O(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function C(e){t("readable nexttick read 0"),e.read(0)}function D(e,r){t("resume",r.reading),r.reading||e.read(0),r.resumeScheduled=!1,e.emit("resume"),L(e),r.flowing&&!r.reading&&e.read(0)}function L(e){var r=e._readableState;for(t("flow",r.flowing);r.flowing&&null!==e.read(););}function P(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function B(e){var r=e._readableState;t("endReadable",r.endEmitted),r.endEmitted||(r.ended=!0,ie.nextTick(F,r,e))}function F(e,r){if(t("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,r.readable=!1,r.emit("end"),e.autoDestroy)){var n=r._writableState;(!n||n.autoDestroy&&n.finished)&&r.destroy()}}function U(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}return E.prototype.read=function(e){t("read",e),e=parseInt(e,10);var r=this._readableState,n=e;if(0!==e&&(r.emittedReadable=!1),0===e&&r.needReadable&&((0!==r.highWaterMark?r.length>=r.highWaterMark:r.length>0)||r.ended))return t("read: emitReadable",r.length,r.ended),0===r.length&&r.ended?B(this):I(this),null;if(0===(e=S(e,r))&&r.ended)return 0===r.length&&B(this),null;var o,i=r.needReadable;return t("need readable",i),(0===r.length||r.length-e<r.highWaterMark)&&t("length less than watermark",i=!0),r.ended||r.reading?t("reading or ended",i=!1):i&&(t("do read"),r.reading=!0,r.sync=!0,0===r.length&&(r.needReadable=!0),this._read(r.highWaterMark),r.sync=!1,r.reading||(e=S(n,r))),null===(o=e>0?P(e,r):null)?(r.needReadable=r.length<=r.highWaterMark,e=0):(r.length-=e,r.awaitDrain=0),0===r.length&&(r.ended||(r.needReadable=!0),n!==e&&r.ended&&B(this)),null!==o&&this.emit("data",o),o},E.prototype._read=function(e){y(this,new w("_read()"))},E.prototype.pipe=function(e,n){var o=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,t("pipe count=%d opts=%j",i.pipesCount,n);var s=n&&!1===n.end||e===ie.stdout||e===ie.stderr?d:a;function a(){t("onend"),e.end()}i.endEmitted?ie.nextTick(s):o.once("end",s),e.on("unpipe",(function r(n,s){t("onunpipe"),n===o&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,t("cleanup"),e.removeListener("close",p),e.removeListener("finish",f),e.removeListener("drain",u),e.removeListener("error",h),e.removeListener("unpipe",r),o.removeListener("end",a),o.removeListener("end",d),o.removeListener("data",l),c=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||u())}));var u=function(e){return function(){var n=e._readableState;t("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&r(e,"data")&&(n.flowing=!0,L(e))}}(o);e.on("drain",u);var c=!1;function l(r){t("ondata");var n=e.write(r);t("dest.write",n),!1===n&&((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==U(i.pipes,e))&&!c&&(t("false write response, pause",i.awaitDrain),i.awaitDrain++),o.pause())}function h(n){t("onerror",n),d(),e.removeListener("error",h),0===r(e,"error")&&y(e,n)}function p(){e.removeListener("finish",f),d()}function f(){t("onfinish"),e.removeListener("close",p),d()}function d(){t("unpipe"),o.unpipe(e)}return o.on("data",l),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",h),e.once("close",p),e.once("finish",f),e.emit("pipe",o),i.flowing||(t("pipe resume"),o.resume()),e},E.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,o=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<o;i++)n[i].emit("unpipe",this,{hasUnpiped:!1});return this}var s=U(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},E.prototype.on=function(e,r){var o=n.prototype.on.call(this,e,r),i=this._readableState;return"data"===e?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===e&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,t("on readable",i.length,i.reading),i.length?I(this):i.reading||ie.nextTick(C,this))),o},E.prototype.addListener=E.prototype.on,E.prototype.removeListener=function(e,t){var r=n.prototype.removeListener.call(this,e,t);return"readable"===e&&ie.nextTick(O,this),r},E.prototype.removeAllListeners=function(e){var t=n.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||ie.nextTick(O,this),t},E.prototype.resume=function(){var e=this._readableState;return e.flowing||(t("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,ie.nextTick(D,e,t))}(this,e)),e.paused=!1,this},E.prototype.pause=function(){return t("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(t("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},E.prototype.wrap=function(e){var r=this,n=this._readableState,o=!1;for(var i in e.on("end",(function(){if(t("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&r.push(e)}r.push(null)})),e.on("data",(function(i){t("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i||(n.objectMode||i&&i.length)&&(r.push(i)||(o=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var s=0;s<b.length;s++)e.on(b[s],this.emit.bind(this,b[s]));return this._read=function(r){t("wrapped _read",r),o&&(o=!1,e.resume())},this},"function"==typeof Symbol&&(E.prototype[Symbol.asyncIterator]=function(){return void 0===u&&(u=ar()),u(this)}),Object.defineProperty(E.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(E.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(E.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),E._fromList=P,Object.defineProperty(E.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(E.from=function(e,t){return void 0===c&&(c=Xt?$t:(Xt=1,$t=function(){throw new Error("Readable.from is not available in the browser")})),c(E,e,t)}),qt}function cr(){if(Jt)return Yt;Jt=1,Yt=a;var e=Bt().codes,t=e.ERR_METHOD_NOT_IMPLEMENTED,r=e.ERR_MULTIPLE_CALLBACK,n=e.ERR_TRANSFORM_ALREADY_TRANSFORMING,o=e.ERR_TRANSFORM_WITH_LENGTH_0,i=jt();function s(e,t){var n=this._transformState;n.transforming=!1;var o=n.writecb;if(null===o)return this.emit("error",new r);n.writechunk=null,n.writecb=null,null!=t&&this.push(t),o(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);i.call(this,e),this._transformState={afterTransform:s.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",u)}function u(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?c(this,null,null):this._flush((function(t,r){c(e,t,r)}))}function c(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new o;if(e._transformState.transforming)throw new n;return e.push(null)}return z(a,i),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,t)},a.prototype._transform=function(e,r,n){n(new t("_transform()"))},a.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var o=this._readableState;(n.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},a.prototype._destroy=function(e,t){i.prototype._destroy.call(this,e,(function(e){t(e)}))},Yt}var lr=pr,hr=j.EventEmitter;function pr(){hr.call(this)}z(pr,hr),pr.Readable=ur(),pr.Writable=Mt(),pr.Duplex=jt(),pr.Transform=cr(),pr.PassThrough=function(){if(er)return Qt;er=1,Qt=t;var e=cr();function t(r){if(!(this instanceof t))return new t(r);e.call(this,r)}return z(t,e),t.prototype._transform=function(e,t,r){r(null,e)},Qt}(),pr.finished=sr(),pr.pipeline=function(){if(rr)return tr;var e;rr=1;var t=Bt().codes,r=t.ERR_MISSING_ARGS,n=t.ERR_STREAM_DESTROYED;function o(e){if(e)throw e}function i(e){e()}function s(e,t){return e.pipe(t)}return tr=function(){for(var t=arguments.length,a=new Array(t),u=0;u<t;u++)a[u]=arguments[u];var c,l=function(e){return e.length?"function"!=typeof e[e.length-1]?o:e.pop():o}(a);if(Array.isArray(a[0])&&(a=a[0]),a.length<2)throw new r("streams");var h=a.map((function(t,r){var o=r<a.length-1;return function(t,r,o,i){i=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(i);var s=!1;t.on("close",(function(){s=!0})),void 0===e&&(e=sr()),e(t,{readable:r,writable:o},(function(e){if(e)return i(e);s=!0,i()}));var a=!1;return function(e){if(!s&&!a)return a=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void i(e||new n("pipe"))}}(t,o,r>0,(function(e){c||(c=e),e&&h.forEach(i),o||(h.forEach(i),l(c))}))}));return a.reduce(s)}}(),pr.Stream=pr,pr.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",a));var i=!1;function s(){i||(i=!0,e.end())}function a(){i||(i=!0,"function"==typeof e.destroy&&e.destroy())}function u(e){if(c(),0===hr.listenerCount(this,"error"))throw e}function c(){r.removeListener("data",n),e.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",a),r.removeListener("error",u),e.removeListener("error",u),r.removeListener("end",c),r.removeListener("close",c),e.removeListener("close",c)}return r.on("error",u),e.on("error",u),r.on("end",c),r.on("close",c),e.on("close",c),e.emit("pipe",r),e},function(e){e.parser=function(e,t){return new n(e,t)},e.SAXParser=n,e.SAXStream=i,e.createStream=function(e,t){return new i(e,t)},e.MAX_BUFFER_LENGTH=65536;var t,r=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function n(t,o){if(!(this instanceof n))return new n(t,o);var i=this;!function(e){for(var t=0,n=r.length;t<n;t++)e[r[t]]=""}(i),i.q=i.c="",i.bufferCheckPosition=e.MAX_BUFFER_LENGTH,i.opt=o||{},i.opt.lowercase=i.opt.lowercase||i.opt.lowercasetags,i.looseCase=i.opt.lowercase?"toLowerCase":"toUpperCase",i.tags=[],i.closed=i.closedRoot=i.sawRoot=!1,i.tag=i.error=null,i.strict=!!t,i.noscript=!(!t&&!i.opt.noscript),i.state=_.BEGIN,i.strictEntities=i.opt.strictEntities,i.ENTITIES=i.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),i.attribList=[],i.opt.xmlns&&(i.ns=Object.create(l)),i.trackPosition=!1!==i.opt.position,i.trackPosition&&(i.position=i.line=i.column=0),A(i,"onready")}e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t}),n.prototype={end:function(){N(this)},write:function(t){var n=this;if(this.error)throw this.error;if(n.closed)return R(n,"Cannot write after close. Assign an onready handler.");if(null===t)return N(n);"object"==typeof t&&(t=t.toString());for(var o=0,i="";i=M(t,o++),n.c=i,i;)switch(n.trackPosition&&(n.position++,"\n"===i?(n.line++,n.column=0):n.column++),n.state){case _.BEGIN:if(n.state=_.BEGIN_WHITESPACE,"\ufeff"===i)continue;U(n,i);continue;case _.BEGIN_WHITESPACE:U(n,i);continue;case _.TEXT:if(n.sawRoot&&!n.closedRoot){for(var u=o-1;i&&"<"!==i&&"&"!==i;)(i=M(t,o++))&&n.trackPosition&&(n.position++,"\n"===i?(n.line++,n.column=0):n.column++);n.textNode+=t.substring(u,o-1)}"<"!==i||n.sawRoot&&n.closedRoot&&!n.strict?(m(i)||n.sawRoot&&!n.closedRoot||O(n,"Text data outside of root node."),"&"===i?n.state=_.TEXT_ENTITY:n.textNode+=i):(n.state=_.OPEN_WAKA,n.startTagPosition=n.position);continue;case _.SCRIPT:"<"===i?n.state=_.SCRIPT_ENDING:n.script+=i;continue;case _.SCRIPT_ENDING:"/"===i?n.state=_.CLOSE_TAG:(n.script+="<"+i,n.state=_.SCRIPT);continue;case _.OPEN_WAKA:if("!"===i)n.state=_.SGML_DECL,n.sgmlDecl="";else if(m(i));else if(y(h,i))n.state=_.OPEN_TAG,n.tagName=i;else if("/"===i)n.state=_.CLOSE_TAG,n.tagName="";else if("?"===i)n.state=_.PROC_INST,n.procInstName=n.procInstBody="";else{if(O(n,"Unencoded <"),n.startTagPosition+1<n.position){var c=n.position-n.startTagPosition;i=new Array(c).join(" ")+i}n.textNode+="<"+i,n.state=_.TEXT}continue;case _.SGML_DECL:(n.sgmlDecl+i).toUpperCase()===s?(S(n,"onopencdata"),n.state=_.CDATA,n.sgmlDecl="",n.cdata=""):n.sgmlDecl+i==="--"?(n.state=_.COMMENT,n.comment="",n.sgmlDecl=""):(n.sgmlDecl+i).toUpperCase()===a?(n.state=_.DOCTYPE,(n.doctype||n.sawRoot)&&O(n,"Inappropriately located doctype declaration"),n.doctype="",n.sgmlDecl=""):">"===i?(S(n,"onsgmldeclaration",n.sgmlDecl),n.sgmlDecl="",n.state=_.TEXT):w(i)?(n.state=_.SGML_DECL_QUOTED,n.sgmlDecl+=i):n.sgmlDecl+=i;continue;case _.SGML_DECL_QUOTED:i===n.q&&(n.state=_.SGML_DECL,n.q=""),n.sgmlDecl+=i;continue;case _.DOCTYPE:">"===i?(n.state=_.TEXT,S(n,"ondoctype",n.doctype),n.doctype=!0):(n.doctype+=i,"["===i?n.state=_.DOCTYPE_DTD:w(i)&&(n.state=_.DOCTYPE_QUOTED,n.q=i));continue;case _.DOCTYPE_QUOTED:n.doctype+=i,i===n.q&&(n.q="",n.state=_.DOCTYPE);continue;case _.DOCTYPE_DTD:n.doctype+=i,"]"===i?n.state=_.DOCTYPE:w(i)&&(n.state=_.DOCTYPE_DTD_QUOTED,n.q=i);continue;case _.DOCTYPE_DTD_QUOTED:n.doctype+=i,i===n.q&&(n.state=_.DOCTYPE_DTD,n.q="");continue;case _.COMMENT:"-"===i?n.state=_.COMMENT_ENDING:n.comment+=i;continue;case _.COMMENT_ENDING:"-"===i?(n.state=_.COMMENT_ENDED,n.comment=k(n.opt,n.comment),n.comment&&S(n,"oncomment",n.comment),n.comment=""):(n.comment+="-"+i,n.state=_.COMMENT);continue;case _.COMMENT_ENDED:">"!==i?(O(n,"Malformed comment"),n.comment+="--"+i,n.state=_.COMMENT):n.state=_.TEXT;continue;case _.CDATA:"]"===i?n.state=_.CDATA_ENDING:n.cdata+=i;continue;case _.CDATA_ENDING:"]"===i?n.state=_.CDATA_ENDING_2:(n.cdata+="]"+i,n.state=_.CDATA);continue;case _.CDATA_ENDING_2:">"===i?(n.cdata&&S(n,"oncdata",n.cdata),S(n,"onclosecdata"),n.cdata="",n.state=_.TEXT):"]"===i?n.cdata+="]":(n.cdata+="]]"+i,n.state=_.CDATA);continue;case _.PROC_INST:"?"===i?n.state=_.PROC_INST_ENDING:m(i)?n.state=_.PROC_INST_BODY:n.procInstName+=i;continue;case _.PROC_INST_BODY:if(!n.procInstBody&&m(i))continue;"?"===i?n.state=_.PROC_INST_ENDING:n.procInstBody+=i;continue;case _.PROC_INST_ENDING:">"===i?(S(n,"onprocessinginstruction",{name:n.procInstName,body:n.procInstBody}),n.procInstName=n.procInstBody="",n.state=_.TEXT):(n.procInstBody+="?"+i,n.state=_.PROC_INST_BODY);continue;case _.OPEN_TAG:y(p,i)?n.tagName+=i:(C(n),">"===i?P(n):"/"===i?n.state=_.OPEN_TAG_SLASH:(m(i)||O(n,"Invalid character in tag name"),n.state=_.ATTRIB));continue;case _.OPEN_TAG_SLASH:">"===i?(P(n,!0),B(n)):(O(n,"Forward-slash in opening tag not followed by >"),n.state=_.ATTRIB);continue;case _.ATTRIB:if(m(i))continue;">"===i?P(n):"/"===i?n.state=_.OPEN_TAG_SLASH:y(h,i)?(n.attribName=i,n.attribValue="",n.state=_.ATTRIB_NAME):O(n,"Invalid attribute name");continue;case _.ATTRIB_NAME:"="===i?n.state=_.ATTRIB_VALUE:">"===i?(O(n,"Attribute without value"),n.attribValue=n.attribName,L(n),P(n)):m(i)?n.state=_.ATTRIB_NAME_SAW_WHITE:y(p,i)?n.attribName+=i:O(n,"Invalid attribute name");continue;case _.ATTRIB_NAME_SAW_WHITE:if("="===i)n.state=_.ATTRIB_VALUE;else{if(m(i))continue;O(n,"Attribute without value"),n.tag.attributes[n.attribName]="",n.attribValue="",S(n,"onattribute",{name:n.attribName,value:""}),n.attribName="",">"===i?P(n):y(h,i)?(n.attribName=i,n.state=_.ATTRIB_NAME):(O(n,"Invalid attribute name"),n.state=_.ATTRIB)}continue;case _.ATTRIB_VALUE:if(m(i))continue;w(i)?(n.q=i,n.state=_.ATTRIB_VALUE_QUOTED):(O(n,"Unquoted attribute value"),n.state=_.ATTRIB_VALUE_UNQUOTED,n.attribValue=i);continue;case _.ATTRIB_VALUE_QUOTED:if(i!==n.q){"&"===i?n.state=_.ATTRIB_VALUE_ENTITY_Q:n.attribValue+=i;continue}L(n),n.q="",n.state=_.ATTRIB_VALUE_CLOSED;continue;case _.ATTRIB_VALUE_CLOSED:m(i)?n.state=_.ATTRIB:">"===i?P(n):"/"===i?n.state=_.OPEN_TAG_SLASH:y(h,i)?(O(n,"No whitespace between attributes"),n.attribName=i,n.attribValue="",n.state=_.ATTRIB_NAME):O(n,"Invalid attribute name");continue;case _.ATTRIB_VALUE_UNQUOTED:if(!g(i)){"&"===i?n.state=_.ATTRIB_VALUE_ENTITY_U:n.attribValue+=i;continue}L(n),">"===i?P(n):n.state=_.ATTRIB;continue;case _.CLOSE_TAG:if(n.tagName)">"===i?B(n):y(p,i)?n.tagName+=i:n.script?(n.script+="</"+n.tagName,n.tagName="",n.state=_.SCRIPT):(m(i)||O(n,"Invalid tagname in closing tag"),n.state=_.CLOSE_TAG_SAW_WHITE);else{if(m(i))continue;b(h,i)?n.script?(n.script+="</"+i,n.state=_.SCRIPT):O(n,"Invalid tagname in closing tag."):n.tagName=i}continue;case _.CLOSE_TAG_SAW_WHITE:if(m(i))continue;">"===i?B(n):O(n,"Invalid characters in closing tag");continue;case _.TEXT_ENTITY:case _.ATTRIB_VALUE_ENTITY_Q:case _.ATTRIB_VALUE_ENTITY_U:var l,v;switch(n.state){case _.TEXT_ENTITY:l=_.TEXT,v="textNode";break;case _.ATTRIB_VALUE_ENTITY_Q:l=_.ATTRIB_VALUE_QUOTED,v="attribValue";break;case _.ATTRIB_VALUE_ENTITY_U:l=_.ATTRIB_VALUE_UNQUOTED,v="attribValue"}";"===i?(n[v]+=F(n),n.entity="",n.state=l):y(n.entity.length?d:f,i)?n.entity+=i:(O(n,"Invalid character in entity name"),n[v]+="&"+n.entity+i,n.entity="",n.state=l);continue;default:throw new Error(n,"Unknown state: "+n.state)}return n.position>=n.bufferCheckPosition&&function(t){for(var n=Math.max(e.MAX_BUFFER_LENGTH,10),o=0,i=0,s=r.length;i<s;i++){var a=t[r[i]].length;if(a>n)switch(r[i]){case"textNode":I(t);break;case"cdata":S(t,"oncdata",t.cdata),t.cdata="";break;case"script":S(t,"onscript",t.script),t.script="";break;default:R(t,"Max buffer length exceeded: "+r[i])}o=Math.max(o,a)}var u=e.MAX_BUFFER_LENGTH-o;t.bufferCheckPosition=u+t.position}(n),n},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;I(e=this),""!==e.cdata&&(S(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(S(e,"onscript",e.script),e.script="")}};try{t=lr.Stream}catch(e){t=function(){}}var o=e.EVENTS.filter((function(e){return"error"!==e&&"end"!==e}));function i(e,r){if(!(this instanceof i))return new i(e,r);t.apply(this),this._parser=new n(e,r),this.writable=!0,this.readable=!0;var s=this;this._parser.onend=function(){s.emit("end")},this._parser.onerror=function(e){s.emit("error",e),s._parser.error=null},this._decoder=null,o.forEach((function(e){Object.defineProperty(s,"on"+e,{get:function(){return s._parser["on"+e]},set:function(t){if(!t)return s.removeAllListeners(e),s._parser["on"+e]=t,t;s.on(e,t)},enumerable:!0,configurable:!1})}))}i.prototype=Object.create(t.prototype,{constructor:{value:i}}),i.prototype.write=function(e){if("function"==typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(e)){if(!this._decoder){var t=ir().StringDecoder;this._decoder=new t("utf8")}e=this._decoder.write(e)}return this._parser.write(e.toString()),this.emit("data",e),!0},i.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},i.prototype.on=function(e,r){var n=this;return n._parser["on"+e]||-1===o.indexOf(e)||(n._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),n.emit.apply(n,t)}),t.prototype.on.call(n,e,r)};var s="[CDATA[",a="DOCTYPE",u="http://www.w3.org/XML/1998/namespace",c="http://www.w3.org/2000/xmlns/",l={xml:u,xmlns:c},h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,p=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function w(e){return'"'===e||"'"===e}function g(e){return">"===e||m(e)}function y(e,t){return e.test(t)}function b(e,t){return!y(e,t)}var v,x,E,_=0;for(var T in e.STATE={BEGIN:_++,BEGIN_WHITESPACE:_++,TEXT:_++,TEXT_ENTITY:_++,OPEN_WAKA:_++,SGML_DECL:_++,SGML_DECL_QUOTED:_++,DOCTYPE:_++,DOCTYPE_QUOTED:_++,DOCTYPE_DTD:_++,DOCTYPE_DTD_QUOTED:_++,COMMENT_STARTING:_++,COMMENT:_++,COMMENT_ENDING:_++,COMMENT_ENDED:_++,CDATA:_++,CDATA_ENDING:_++,CDATA_ENDING_2:_++,PROC_INST:_++,PROC_INST_BODY:_++,PROC_INST_ENDING:_++,OPEN_TAG:_++,OPEN_TAG_SLASH:_++,ATTRIB:_++,ATTRIB_NAME:_++,ATTRIB_NAME_SAW_WHITE:_++,ATTRIB_VALUE:_++,ATTRIB_VALUE_QUOTED:_++,ATTRIB_VALUE_CLOSED:_++,ATTRIB_VALUE_UNQUOTED:_++,ATTRIB_VALUE_ENTITY_Q:_++,ATTRIB_VALUE_ENTITY_U:_++,CLOSE_TAG:_++,CLOSE_TAG_SAW_WHITE:_++,SCRIPT:_++,SCRIPT_ENDING:_++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach((function(t){var r=e.ENTITIES[t],n="number"==typeof r?String.fromCharCode(r):r;e.ENTITIES[t]=n})),e.STATE)e.STATE[e.STATE[T]]=T;function A(e,t,r){e[t]&&e[t](r)}function S(e,t,r){e.textNode&&I(e),A(e,t,r)}function I(e){e.textNode=k(e.opt,e.textNode),e.textNode&&A(e,"ontext",e.textNode),e.textNode=""}function k(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function R(e,t){return I(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,A(e,"onerror",t),e}function N(e){return e.sawRoot&&!e.closedRoot&&O(e,"Unclosed root tag"),e.state!==_.BEGIN&&e.state!==_.BEGIN_WHITESPACE&&e.state!==_.TEXT&&R(e,"Unexpected end"),I(e),e.c="",e.closed=!0,A(e,"onend"),n.call(e,e.strict,e.opt),e}function O(e,t){if("object"!=typeof e||!(e instanceof n))throw new Error("bad call to strictFail");e.strict&&R(e,t)}function C(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,r=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(r.ns=t.ns),e.attribList.length=0,S(e,"onopentagstart",r)}function D(e,t){var r=e.indexOf(":")<0?["",e]:e.split(":"),n=r[0],o=r[1];return t&&"xmlns"===e&&(n="xmlns",o=""),{prefix:n,local:o}}function L(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=D(e.attribName,!0),r=t.prefix,n=t.local;if("xmlns"===r)if("xml"===n&&e.attribValue!==u)O(e,"xml: prefix must be bound to "+u+"\nActual: "+e.attribValue);else if("xmlns"===n&&e.attribValue!==c)O(e,"xmlns: prefix must be bound to "+c+"\nActual: "+e.attribValue);else{var o=e.tag,i=e.tags[e.tags.length-1]||e;o.ns===i.ns&&(o.ns=Object.create(i.ns)),o.ns[n]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,S(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function P(e,t){if(e.opt.xmlns){var r=e.tag,n=D(e.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(O(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),r.uri=n.prefix);var o=e.tags[e.tags.length-1]||e;r.ns&&o.ns!==r.ns&&Object.keys(r.ns).forEach((function(t){S(e,"onopennamespace",{prefix:t,uri:r.ns[t]})}));for(var i=0,s=e.attribList.length;i<s;i++){var a=e.attribList[i],u=a[0],c=a[1],l=D(u,!0),h=l.prefix,p=l.local,f=""===h?"":r.ns[h]||"",d={name:u,value:c,prefix:h,local:p,uri:f};h&&"xmlns"!==h&&!f&&(O(e,"Unbound namespace prefix: "+JSON.stringify(h)),d.uri=h),e.tag.attributes[u]=d,S(e,"onattribute",d)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),S(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=_.TEXT:e.state=_.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function B(e){if(!e.tagName)return O(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=_.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=_.SCRIPT);S(e,"onscript",e.script),e.script=""}var t=e.tags.length,r=e.tagName;e.strict||(r=r[e.looseCase]());for(var n=r;t--&&e.tags[t].name!==n;)O(e,"Unexpected close tag");if(t<0)return O(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=_.TEXT);e.tagName=r;for(var o=e.tags.length;o-- >t;){var i=e.tag=e.tags.pop();e.tagName=e.tag.name,S(e,"onclosetag",e.tagName);var s={};for(var a in i.ns)s[a]=i.ns[a];var u=e.tags[e.tags.length-1]||e;e.opt.xmlns&&i.ns!==u.ns&&Object.keys(i.ns).forEach((function(t){var r=i.ns[t];S(e,"onclosenamespace",{prefix:t,uri:r})}))}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=_.TEXT}function F(e){var t,r=e.entity,n=r.toLowerCase(),o="";return e.ENTITIES[r]?e.ENTITIES[r]:e.ENTITIES[n]?e.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),o=(t=parseInt(r,16)).toString(16)):(r=r.slice(1),o=(t=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(t)||o.toLowerCase()!==r?(O(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function U(e,t){"<"===t?(e.state=_.OPEN_WAKA,e.startTagPosition=e.position):m(t)||(O(e,"Non-whitespace before first tag."),e.textNode=t,e.state=_.TEXT)}function M(e,t){var r="";return t<e.length&&(r=e.charAt(t)),r}_=e.STATE,String.fromCodePoint||(v=String.fromCharCode,x=Math.floor,E=function(){var e,t,r=[],n=-1,o=arguments.length;if(!o)return"";for(var i="";++n<o;){var s=Number(arguments[n]);if(!isFinite(s)||s<0||s>1114111||x(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?r.push(s):(e=55296+((s-=65536)>>10),t=s%1024+56320,r.push(e,t)),(n+1===o||r.length>16384)&&(i+=v.apply(null,r),r.length=0)}return i},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:E,configurable:!0,writable:!0}):String.fromCodePoint=E)}(T);var fr,dr,mr=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},wr=mr,gr={copyOptions:function(e){var t,r={};for(t in e)e.hasOwnProperty(t)&&(r[t]=e[t]);return r},ensureFlagExists:function(e,t){e in t&&"boolean"==typeof t[e]||(t[e]=!1)},ensureSpacesExists:function(e){(!("spaces"in e)||"number"!=typeof e.spaces&&"string"!=typeof e.spaces)&&(e.spaces=0)},ensureAlwaysArrayExists:function(e){"alwaysArray"in e&&("boolean"==typeof e.alwaysArray||wr(e.alwaysArray))||(e.alwaysArray=!1)},ensureKeyExists:function(e,t){e+"Key"in t&&"string"==typeof t[e+"Key"]||(t[e+"Key"]=t.compact?"_"+e:e)},checkFnExists:function(e,t){return e+"Fn"in t}},yr=T,br=gr,vr=mr;function xr(e){var t=Number(e);if(!isNaN(t))return t;var r=e.toLowerCase();return"true"===r||"false"!==r&&e}function Er(e,t){var r;if(fr.compact){if(!dr[fr[e+"Key"]]&&(vr(fr.alwaysArray)?-1!==fr.alwaysArray.indexOf(fr[e+"Key"]):fr.alwaysArray)&&(dr[fr[e+"Key"]]=[]),dr[fr[e+"Key"]]&&!vr(dr[fr[e+"Key"]])&&(dr[fr[e+"Key"]]=[dr[fr[e+"Key"]]]),e+"Fn"in fr&&"string"==typeof t&&(t=fr[e+"Fn"](t,dr)),"instruction"===e&&("instructionFn"in fr||"instructionNameFn"in fr))for(r in t)if(t.hasOwnProperty(r))if("instructionFn"in fr)t[r]=fr.instructionFn(t[r],r,dr);else{var n=t[r];delete t[r],t[fr.instructionNameFn(r,n,dr)]=n}vr(dr[fr[e+"Key"]])?dr[fr[e+"Key"]].push(t):dr[fr[e+"Key"]]=t}else{dr[fr.elementsKey]||(dr[fr.elementsKey]=[]);var o={};if(o[fr.typeKey]=e,"instruction"===e){for(r in t)if(t.hasOwnProperty(r))break;o[fr.nameKey]="instructionNameFn"in fr?fr.instructionNameFn(r,t,dr):r,fr.instructionHasAttributes?(o[fr.attributesKey]=t[r][fr.attributesKey],"instructionFn"in fr&&(o[fr.attributesKey]=fr.instructionFn(o[fr.attributesKey],r,dr))):("instructionFn"in fr&&(t[r]=fr.instructionFn(t[r],r,dr)),o[fr.instructionKey]=t[r])}else e+"Fn"in fr&&(t=fr[e+"Fn"](t,dr)),o[fr[e+"Key"]]=t;fr.addParent&&(o[fr.parentKey]=dr),dr[fr.elementsKey].push(o)}}function _r(e){var t;if("attributesFn"in fr&&e&&(e=fr.attributesFn(e,dr)),(fr.trim||"attributeValueFn"in fr||"attributeNameFn"in fr||fr.nativeTypeAttributes)&&e)for(t in e)if(e.hasOwnProperty(t)&&(fr.trim&&(e[t]=e[t].trim()),fr.nativeTypeAttributes&&(e[t]=xr(e[t])),"attributeValueFn"in fr&&(e[t]=fr.attributeValueFn(e[t],t,dr)),"attributeNameFn"in fr)){var r=e[t];delete e[t],e[fr.attributeNameFn(t,e[t],dr)]=r}return e}function Tr(e){var t={};if(e.body&&("xml"===e.name.toLowerCase()||fr.instructionHasAttributes)){for(var r,n=/([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;null!==(r=n.exec(e.body));)t[r[1]]=r[2]||r[3]||r[4];t=_r(t)}if("xml"===e.name.toLowerCase()){if(fr.ignoreDeclaration)return;dr[fr.declarationKey]={},Object.keys(t).length&&(dr[fr.declarationKey][fr.attributesKey]=t),fr.addParent&&(dr[fr.declarationKey][fr.parentKey]=dr)}else{if(fr.ignoreInstruction)return;fr.trim&&(e.body=e.body.trim());var o={};fr.instructionHasAttributes&&Object.keys(t).length?(o[e.name]={},o[e.name][fr.attributesKey]=t):o[e.name]=e.body,Er("instruction",o)}}function Ar(e,t){var r;if("object"==typeof e&&(t=e.attributes,e=e.name),t=_r(t),"elementNameFn"in fr&&(e=fr.elementNameFn(e,dr)),fr.compact){var n;if(r={},!fr.ignoreAttributes&&t&&Object.keys(t).length)for(n in r[fr.attributesKey]={},t)t.hasOwnProperty(n)&&(r[fr.attributesKey][n]=t[n]);!(e in dr)&&(vr(fr.alwaysArray)?-1!==fr.alwaysArray.indexOf(e):fr.alwaysArray)&&(dr[e]=[]),dr[e]&&!vr(dr[e])&&(dr[e]=[dr[e]]),vr(dr[e])?dr[e].push(r):dr[e]=r}else dr[fr.elementsKey]||(dr[fr.elementsKey]=[]),(r={})[fr.typeKey]="element",r[fr.nameKey]=e,!fr.ignoreAttributes&&t&&Object.keys(t).length&&(r[fr.attributesKey]=t),fr.alwaysChildren&&(r[fr.elementsKey]=[]),dr[fr.elementsKey].push(r);r[fr.parentKey]=dr,dr=r}function Sr(e){fr.ignoreText||(e.trim()||fr.captureSpacesBetweenElements)&&(fr.trim&&(e=e.trim()),fr.nativeType&&(e=xr(e)),fr.sanitize&&(e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")),Er("text",e))}function Ir(e){fr.ignoreComment||(fr.trim&&(e=e.trim()),Er("comment",e))}function kr(e){var t=dr[fr.parentKey];fr.addParent||delete dr[fr.parentKey],dr=t}function Rr(e){fr.ignoreCdata||(fr.trim&&(e=e.trim()),Er("cdata",e))}function Nr(e){fr.ignoreDoctype||(e=e.replace(/^ /,""),fr.trim&&(e=e.trim()),Er("doctype",e))}function Or(e){e.note=e}var Cr,Dr,Lr=function(e,t){var r=yr.parser(!0,{}),n={};if(dr=n,fr=function(e){return fr=br.copyOptions(e),br.ensureFlagExists("ignoreDeclaration",fr),br.ensureFlagExists("ignoreInstruction",fr),br.ensureFlagExists("ignoreAttributes",fr),br.ensureFlagExists("ignoreText",fr),br.ensureFlagExists("ignoreComment",fr),br.ensureFlagExists("ignoreCdata",fr),br.ensureFlagExists("ignoreDoctype",fr),br.ensureFlagExists("compact",fr),br.ensureFlagExists("alwaysChildren",fr),br.ensureFlagExists("addParent",fr),br.ensureFlagExists("trim",fr),br.ensureFlagExists("nativeType",fr),br.ensureFlagExists("nativeTypeAttributes",fr),br.ensureFlagExists("sanitize",fr),br.ensureFlagExists("instructionHasAttributes",fr),br.ensureFlagExists("captureSpacesBetweenElements",fr),br.ensureAlwaysArrayExists(fr),br.ensureKeyExists("declaration",fr),br.ensureKeyExists("instruction",fr),br.ensureKeyExists("attributes",fr),br.ensureKeyExists("text",fr),br.ensureKeyExists("comment",fr),br.ensureKeyExists("cdata",fr),br.ensureKeyExists("doctype",fr),br.ensureKeyExists("type",fr),br.ensureKeyExists("name",fr),br.ensureKeyExists("elements",fr),br.ensureKeyExists("parent",fr),br.checkFnExists("doctype",fr),br.checkFnExists("instruction",fr),br.checkFnExists("cdata",fr),br.checkFnExists("comment",fr),br.checkFnExists("text",fr),br.checkFnExists("instructionName",fr),br.checkFnExists("elementName",fr),br.checkFnExists("attributeName",fr),br.checkFnExists("attributeValue",fr),br.checkFnExists("attributes",fr),fr}(t),r.opt={strictEntities:!0},r.onopentag=Ar,r.ontext=Sr,r.oncomment=Ir,r.onclosetag=kr,r.onerror=Or,r.oncdata=Rr,r.ondoctype=Nr,r.onprocessinginstruction=Tr,r.write(e).close(),n[fr.elementsKey]){var o=n[fr.elementsKey];delete n[fr.elementsKey],n[fr.elementsKey]=o,delete n.text}return n},Pr=gr,Br=mr;function Fr(e,t,r){return(!r&&e.spaces?"\n":"")+Array(t+1).join(e.spaces)}function Ur(e,t,r){if(t.ignoreAttributes)return"";"attributesFn"in t&&(e=t.attributesFn(e,Dr,Cr));var n,o,i,s,a=[];for(n in e)e.hasOwnProperty(n)&&null!==e[n]&&void 0!==e[n]&&(s=t.noQuotesForNativeAttributes&&"string"!=typeof e[n]?"":'"',o=(o=""+e[n]).replace(/"/g,"&quot;"),i="attributeNameFn"in t?t.attributeNameFn(n,o,Dr,Cr):n,a.push(t.spaces&&t.indentAttributes?Fr(t,r+1,!1):" "),a.push(i+"="+s+("attributeValueFn"in t?t.attributeValueFn(o,n,Dr,Cr):o)+s));return e&&Object.keys(e).length&&t.spaces&&t.indentAttributes&&a.push(Fr(t,r,!1)),a.join("")}function Mr(e,t,r){return Cr=e,Dr="xml",t.ignoreDeclaration?"":"<?xml"+Ur(e[t.attributesKey],t,r)+"?>"}function jr(e,t,r){if(t.ignoreInstruction)return"";var n;for(n in e)if(e.hasOwnProperty(n))break;var o="instructionNameFn"in t?t.instructionNameFn(n,e[n],Dr,Cr):n;if("object"==typeof e[n])return Cr=e,Dr=o,"<?"+o+Ur(e[n][t.attributesKey],t,r)+"?>";var i=e[n]?e[n]:"";return"instructionFn"in t&&(i=t.instructionFn(i,n,Dr,Cr)),"<?"+o+(i?" "+i:"")+"?>"}function Hr(e,t){return t.ignoreComment?"":"\x3c!--"+("commentFn"in t?t.commentFn(e,Dr,Cr):e)+"--\x3e"}function zr(e,t){return t.ignoreCdata?"":"<![CDATA["+("cdataFn"in t?t.cdataFn(e,Dr,Cr):e.replace("]]>","]]]]><![CDATA[>"))+"]]>"}function Wr(e,t){return t.ignoreDoctype?"":"<!DOCTYPE "+("doctypeFn"in t?t.doctypeFn(e,Dr,Cr):e)+">"}function Gr(e,t){return t.ignoreText?"":(e=(e=(e=""+e).replace(/&amp;/g,"&")).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"textFn"in t?t.textFn(e,Dr,Cr):e)}function Kr(e,t,r,n){return e.reduce((function(e,o){var i=Fr(t,r,n&&!e);switch(o.type){case"element":return e+i+function(e,t,r){Cr=e,Dr=e.name;var n=[],o="elementNameFn"in t?t.elementNameFn(e.name,e):e.name;n.push("<"+o),e[t.attributesKey]&&n.push(Ur(e[t.attributesKey],t,r));var i=e[t.elementsKey]&&e[t.elementsKey].length||e[t.attributesKey]&&"preserve"===e[t.attributesKey]["xml:space"];return i||(i="fullTagEmptyElementFn"in t?t.fullTagEmptyElementFn(e.name,e):t.fullTagEmptyElement),i?(n.push(">"),e[t.elementsKey]&&e[t.elementsKey].length&&(n.push(Kr(e[t.elementsKey],t,r+1)),Cr=e,Dr=e.name),n.push(t.spaces&&function(e,t){var r;if(e.elements&&e.elements.length)for(r=0;r<e.elements.length;++r)switch(e.elements[r][t.typeKey]){case"text":if(t.indentText)return!0;break;case"cdata":if(t.indentCdata)return!0;break;case"instruction":if(t.indentInstruction)return!0;break;default:return!0}return!1}(e,t)?"\n"+Array(r+1).join(t.spaces):""),n.push("</"+o+">")):n.push("/>"),n.join("")}(o,t,r);case"comment":return e+i+Hr(o[t.commentKey],t);case"doctype":return e+i+Wr(o[t.doctypeKey],t);case"cdata":return e+(t.indentCdata?i:"")+zr(o[t.cdataKey],t);case"text":return e+(t.indentText?i:"")+Gr(o[t.textKey],t);case"instruction":var s={};return s[o[t.nameKey]]=o[t.attributesKey]?o:o[t.instructionKey],e+(t.indentInstruction?i:"")+jr(s,t,r)}}),"")}function Vr(e,t,r){var n;for(n in e)if(e.hasOwnProperty(n))switch(n){case t.parentKey:case t.attributesKey:break;case t.textKey:if(t.indentText||r)return!0;break;case t.cdataKey:if(t.indentCdata||r)return!0;break;case t.instructionKey:if(t.indentInstruction||r)return!0;break;case t.doctypeKey:case t.commentKey:default:return!0}return!1}function $r(e,t,r,n,o){Cr=e,Dr=t;var i="elementNameFn"in r?r.elementNameFn(t,e):t;if(null==e||""===e)return"fullTagEmptyElementFn"in r&&r.fullTagEmptyElementFn(t,e)||r.fullTagEmptyElement?"<"+i+"></"+i+">":"<"+i+"/>";var s=[];if(t){if(s.push("<"+i),"object"!=typeof e)return s.push(">"+Gr(e,r)+"</"+i+">"),s.join("");e[r.attributesKey]&&s.push(Ur(e[r.attributesKey],r,n));var a=Vr(e,r,!0)||e[r.attributesKey]&&"preserve"===e[r.attributesKey]["xml:space"];if(a||(a="fullTagEmptyElementFn"in r?r.fullTagEmptyElementFn(t,e):r.fullTagEmptyElement),!a)return s.push("/>"),s.join("");s.push(">")}return s.push(Xr(e,r,n+1,!1)),Cr=e,Dr=t,t&&s.push((o?Fr(r,n,!1):"")+"</"+i+">"),s.join("")}function Xr(e,t,r,n){var o,i,s,a=[];for(i in e)if(e.hasOwnProperty(i))for(s=Br(e[i])?e[i]:[e[i]],o=0;o<s.length;++o){switch(i){case t.declarationKey:a.push(Mr(s[o],t,r));break;case t.instructionKey:a.push((t.indentInstruction?Fr(t,r,n):"")+jr(s[o],t,r));break;case t.attributesKey:case t.parentKey:break;case t.textKey:a.push((t.indentText?Fr(t,r,n):"")+Gr(s[o],t));break;case t.cdataKey:a.push((t.indentCdata?Fr(t,r,n):"")+zr(s[o],t));break;case t.doctypeKey:a.push(Fr(t,r,n)+Wr(s[o],t));break;case t.commentKey:a.push(Fr(t,r,n)+Hr(s[o],t));break;default:a.push(Fr(t,r,n)+$r(s[o],i,t,r,Vr(s[o],t)))}n=n&&!a.length}return a.join("")}var qr=function(e,t){t=function(e){var t=Pr.copyOptions(e);return Pr.ensureFlagExists("ignoreDeclaration",t),Pr.ensureFlagExists("ignoreInstruction",t),Pr.ensureFlagExists("ignoreAttributes",t),Pr.ensureFlagExists("ignoreText",t),Pr.ensureFlagExists("ignoreComment",t),Pr.ensureFlagExists("ignoreCdata",t),Pr.ensureFlagExists("ignoreDoctype",t),Pr.ensureFlagExists("compact",t),Pr.ensureFlagExists("indentText",t),Pr.ensureFlagExists("indentCdata",t),Pr.ensureFlagExists("indentAttributes",t),Pr.ensureFlagExists("indentInstruction",t),Pr.ensureFlagExists("fullTagEmptyElement",t),Pr.ensureFlagExists("noQuotesForNativeAttributes",t),Pr.ensureSpacesExists(t),"number"==typeof t.spaces&&(t.spaces=Array(t.spaces+1).join(" ")),Pr.ensureKeyExists("declaration",t),Pr.ensureKeyExists("instruction",t),Pr.ensureKeyExists("attributes",t),Pr.ensureKeyExists("text",t),Pr.ensureKeyExists("comment",t),Pr.ensureKeyExists("cdata",t),Pr.ensureKeyExists("doctype",t),Pr.ensureKeyExists("type",t),Pr.ensureKeyExists("name",t),Pr.ensureKeyExists("elements",t),Pr.checkFnExists("doctype",t),Pr.checkFnExists("instruction",t),Pr.checkFnExists("cdata",t),Pr.checkFnExists("comment",t),Pr.checkFnExists("text",t),Pr.checkFnExists("instructionName",t),Pr.checkFnExists("elementName",t),Pr.checkFnExists("attributeName",t),Pr.checkFnExists("attributeValue",t),Pr.checkFnExists("attributes",t),Pr.checkFnExists("fullTagEmptyElement",t),t}(t);var r=[];return Cr=e,Dr="_root_",t.compact?r.push(Xr(e,t,0,!0)):(e[t.declarationKey]&&r.push(Mr(e[t.declarationKey],t,0)),e[t.elementsKey]&&e[t.elementsKey].length&&r.push(Kr(e[t.elementsKey],t,0,!r.length))),r.join("")},Zr=Lr,Yr=qr;const Jr=e=>{switch(e.type){case void 0:case"element":const t=new en(e.name,e.attributes),r=e.elements||[];for(const e of r){const r=Jr(e);void 0!==r&&t.push(r)}return t;case"text":return e.text;default:return}};class Qr extends y{}class en extends w{static fromXmlString(e){const t=Zr(e,{compact:!1});return Jr(t)}constructor(e,t){super(e),t&&this.root.push(new Qr(t))}push(e){this.root.push(e)}}class tn extends w{constructor(e){super(""),this._attr=e}prepForXml(e){return{_attr:this._attr}}}class rn extends w{constructor(e,t){super(e),t&&(this.root=t.root)}}const nn=e=>{if(isNaN(e))throw new Error(`Invalid value '${e}' specified. Must be an integer.`);return Math.floor(e)},on=e=>{const t=nn(e);if(t<0)throw new Error(`Invalid value '${e}' specified. Must be a positive integer.`);return t},sn=(e,t)=>{const r=2*t;if(e.length!==r||isNaN(Number(`0x${e}`)))throw new Error(`Invalid hex value '${e}'. Expected ${r} digit hex value`);return e},an=e=>sn(e,2),un=e=>sn(e,1),cn=e=>{const t=e.slice(-2),r=e.substring(0,e.length-2);return`${Number(r)}${t}`},ln=e=>{const t=cn(e);if(parseFloat(t)<0)throw new Error(`Invalid value '${t}' specified. Expected a positive number.`);return t},hn=e=>{if("auto"===e)return e;const t="#"===e.charAt(0)?e.substring(1):e;return sn(t,3)},pn=e=>"string"==typeof e?cn(e):nn(e),fn=e=>"string"==typeof e?ln(e):on(e),dn=e=>"string"==typeof e?ln(e):on(e),mn=e=>{const t=e.substring(0,e.length-1);return`${Number(t)}%`},wn=e=>"number"==typeof e?nn(e):"%"===e.slice(-1)?mn(e):cn(e),gn=on,yn=on,bn=e=>e.toISOString();class vn extends w{constructor(e,t=!0){super(e),!0!==t&&this.root.push(new v({val:t}))}}class xn extends w{constructor(e,t){super(e),this.root.push(new v({val:fn(t)}))}}class En extends w{}class _n extends w{constructor(e,t){super(e),this.root.push(new v({val:t}))}}const Tn=(e,t)=>new kn({name:e,attributes:{value:{key:"w:val",value:t}}});class An extends w{constructor(e,t){super(e),this.root.push(new v({val:t}))}}class Sn extends w{constructor(e,t){super(e),this.root.push(new v({val:t}))}}class In extends w{constructor(e,t){super(e),this.root.push(t)}}class kn extends w{constructor({name:e,attributes:t,children:r}){super(e),t&&this.root.push(new b(t)),r&&this.root.push(...r)}}const Rn={START:"start",CENTER:"center",END:"end",BOTH:"both",MEDIUM_KASHIDA:"mediumKashida",DISTRIBUTE:"distribute",NUM_TAB:"numTab",HIGH_KASHIDA:"highKashida",LOW_KASHIDA:"lowKashida",THAI_DISTRIBUTE:"thaiDistribute",LEFT:"left",RIGHT:"right",JUSTIFIED:"both"};class Nn extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class On extends w{constructor(e){super("w:jc"),this.root.push(new Nn({val:e}))}}class Cn extends w{constructor(e,{color:t,size:r,space:n,style:o}){super(e),this.root.push(new Dn({style:o,color:void 0===t?void 0:hn(t),size:void 0===r?void 0:gn(r),space:void 0===n?void 0:yn(n)}))}}class Dn extends y{constructor(){super(...arguments),p(this,"xmlKeys",{style:"w:val",color:"w:color",size:"w:sz",space:"w:space"})}}const Ln={SINGLE:"single",DASH_DOT_STROKED:"dashDotStroked",DASHED:"dashed",DASH_SMALL_GAP:"dashSmallGap",DOT_DASH:"dotDash",DOT_DOT_DASH:"dotDotDash",DOTTED:"dotted",DOUBLE:"double",DOUBLE_WAVE:"doubleWave",INSET:"inset",NIL:"nil",NONE:"none",OUTSET:"outset",THICK:"thick",THICK_THIN_LARGE_GAP:"thickThinLargeGap",THICK_THIN_MEDIUM_GAP:"thickThinMediumGap",THICK_THIN_SMALL_GAP:"thickThinSmallGap",THIN_THICK_LARGE_GAP:"thinThickLargeGap",THIN_THICK_MEDIUM_GAP:"thinThickMediumGap",THIN_THICK_SMALL_GAP:"thinThickSmallGap",THIN_THICK_THIN_LARGE_GAP:"thinThickThinLargeGap",THIN_THICK_THIN_MEDIUM_GAP:"thinThickThinMediumGap",THIN_THICK_THIN_SMALL_GAP:"thinThickThinSmallGap",THREE_D_EMBOSS:"threeDEmboss",THREE_D_ENGRAVE:"threeDEngrave",TRIPLE:"triple",WAVE:"wave"};class Pn extends g{constructor(e){super("w:pBdr"),e.top&&this.root.push(new Cn("w:top",e.top)),e.bottom&&this.root.push(new Cn("w:bottom",e.bottom)),e.left&&this.root.push(new Cn("w:left",e.left)),e.right&&this.root.push(new Cn("w:right",e.right))}}class Bn extends w{constructor(){super("w:pBdr");const e=new Cn("w:bottom",{color:"auto",space:1,style:Ln.SINGLE,size:6});this.root.push(e)}}class Fn extends w{constructor({start:e,end:t,left:r,right:n,hanging:o,firstLine:i}){super("w:ind"),this.root.push(new b({start:{key:"w:start",value:void 0===e?void 0:pn(e)},end:{key:"w:end",value:void 0===t?void 0:pn(t)},left:{key:"w:left",value:void 0===r?void 0:pn(r)},right:{key:"w:right",value:void 0===n?void 0:pn(n)},hanging:{key:"w:hanging",value:void 0===o?void 0:dn(o)},firstLine:{key:"w:firstLine",value:void 0===i?void 0:dn(i)}}))}}let Un=class extends w{constructor(){super("w:br")}};class Mn extends y{constructor(){super(...arguments),p(this,"xmlKeys",{type:"w:fldCharType",dirty:"w:dirty"})}}class jn extends w{constructor(e){super("w:fldChar"),this.root.push(new Mn({type:"begin",dirty:e}))}}class Hn extends w{constructor(e){super("w:fldChar"),this.root.push(new Mn({type:"separate",dirty:e}))}}class zn extends w{constructor(e){super("w:fldChar"),this.root.push(new Mn({type:"end",dirty:e}))}}const Wn={DEFAULT:"default",PRESERVE:"preserve"};class Gn extends y{constructor(){super(...arguments),p(this,"xmlKeys",{space:"xml:space"})}}class Kn extends w{constructor(){super("w:instrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("PAGE")}}class Vn extends w{constructor(){super("w:instrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("NUMPAGES")}}class $n extends w{constructor(){super("w:instrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("SECTIONPAGES")}}class Xn extends w{constructor(){super("w:instrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("SECTION")}}class qn extends y{constructor(){super(...arguments),p(this,"xmlKeys",{fill:"w:fill",color:"w:color",type:"w:val"})}}class Zn extends w{constructor({fill:e,color:t,type:r}){super("w:shd"),this.root.push(new qn({fill:void 0===e?void 0:hn(e),color:void 0===t?void 0:hn(t),type:r}))}}class Yn extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"w:id",author:"w:author",date:"w:date"})}}const Jn={DOT:"dot"};class Qn extends w{constructor(e){super("w:em"),this.root.push(new v({val:e}))}}class eo extends Qn{constructor(e=Jn.DOT){super(e)}}class to extends w{constructor(e){super("w:spacing"),this.root.push(new v({val:pn(e)}))}}class ro extends w{constructor(e){super("w:color"),this.root.push(new v({val:hn(e)}))}}class no extends w{constructor(e){super("w:highlight"),this.root.push(new v({val:e}))}}class oo extends w{constructor(e){super("w:highlightCs"),this.root.push(new v({val:e}))}}class io extends y{constructor(){super(...arguments),p(this,"xmlKeys",{ascii:"w:ascii",cs:"w:cs",eastAsia:"w:eastAsia",hAnsi:"w:hAnsi",hint:"w:hint"})}}class so extends w{constructor(e,t){if(super("w:rFonts"),"string"==typeof e){const r=e;this.root.push(new io({ascii:r,cs:r,eastAsia:r,hAnsi:r,hint:t}))}else{const t=e;this.root.push(new io(t))}}}let ao=class extends w{constructor(e){super("w:vertAlign"),this.root.push(new v({val:e}))}};class uo extends ao{constructor(){super("superscript")}}class co extends ao{constructor(){super("subscript")}}const lo={SINGLE:"single",WORDS:"words",DOUBLE:"double",THICK:"thick",DOTTED:"dotted",DOTTEDHEAVY:"dottedHeavy",DASH:"dash",DASHEDHEAVY:"dashedHeavy",DASHLONG:"dashLong",DASHLONGHEAVY:"dashLongHeavy",DOTDASH:"dotDash",DASHDOTHEAVY:"dashDotHeavy",DOTDOTDASH:"dotDotDash",DASHDOTDOTHEAVY:"dashDotDotHeavy",WAVE:"wave",WAVYHEAVY:"wavyHeavy",WAVYDOUBLE:"wavyDouble",NONE:"none"};class ho extends w{constructor(e=lo.SINGLE,t){super("w:u"),this.root.push(new v({val:e,color:void 0===t?void 0:hn(t)}))}}class po extends g{constructor(e){var t,r;if(super("w:rPr"),!e)return;void 0!==e.noProof&&this.push(new vn("w:noProof",e.noProof)),void 0!==e.bold&&this.push(new vn("w:b",e.bold)),(void 0===e.boldComplexScript&&void 0!==e.bold||e.boldComplexScript)&&this.push(new vn("w:bCs",null!=(t=e.boldComplexScript)?t:e.bold)),void 0!==e.italics&&this.push(new vn("w:i",e.italics)),(void 0===e.italicsComplexScript&&void 0!==e.italics||e.italicsComplexScript)&&this.push(new vn("w:iCs",null!=(r=e.italicsComplexScript)?r:e.italics)),e.underline&&this.push(new ho(e.underline.type,e.underline.color)),e.effect&&this.push(new _n("w:effect",e.effect)),e.emphasisMark&&this.push(new eo(e.emphasisMark.type)),e.color&&this.push(new ro(e.color)),e.kern&&this.push(new xn("w:kern",e.kern)),e.position&&this.push(new _n("w:position",e.position)),void 0!==e.size&&this.push(new xn("w:sz",e.size));const n=void 0===e.sizeComplexScript||!0===e.sizeComplexScript?e.size:e.sizeComplexScript;n&&this.push(new xn("w:szCs",n)),void 0!==e.rightToLeft&&this.push(new vn("w:rtl",e.rightToLeft)),void 0!==e.smallCaps?this.push(new vn("w:smallCaps",e.smallCaps)):void 0!==e.allCaps&&this.push(new vn("w:caps",e.allCaps)),void 0!==e.strike&&this.push(new vn("w:strike",e.strike)),void 0!==e.doubleStrike&&this.push(new vn("w:dstrike",e.doubleStrike)),e.subScript&&this.push(new co),e.superScript&&this.push(new uo),e.style&&this.push(new _n("w:rStyle",e.style)),e.font&&("string"==typeof e.font?this.push(new so(e.font)):"name"in e.font?this.push(new so(e.font.name,e.font.hint)):this.push(new so(e.font))),e.highlight&&this.push(new no(e.highlight));const o=void 0===e.highlightComplexScript||!0===e.highlightComplexScript?e.highlight:e.highlightComplexScript;o&&this.push(new oo(o)),e.characterSpacing&&this.push(new to(e.characterSpacing)),void 0!==e.emboss&&this.push(new vn("w:emboss",e.emboss)),void 0!==e.imprint&&this.push(new vn("w:imprint",e.imprint)),e.shading&&this.push(new Zn(e.shading)),e.revision&&this.push(new fo(e.revision)),e.border&&this.push(new Cn("w:bdr",e.border)),void 0!==e.snapToGrid&&this.push(new vn("w:snapToGrid",e.snapToGrid)),e.vanish&&this.push(new vn("w:vanish",e.vanish)),e.specVanish&&this.push(new vn("w:specVanish",e.vanish)),void 0!==e.scale&&this.push(new An("w:w",e.scale)),e.language&&this.push((e=>new kn({name:"w:lang",attributes:{value:{key:"w:val",value:e.value},eastAsia:{key:"w:eastAsia",value:e.eastAsia},bidirectional:{key:"w:bidi",value:e.bidirectional}}}))(e.language)),e.math&&this.push(new vn("w:oMath",e.math))}push(e){this.root.push(e)}}class fo extends w{constructor(e){super("w:rPrChange"),this.root.push(new Yn({id:e.id,author:e.author,date:e.date})),this.addChildElement(new po(e))}}class mo extends w{constructor(e){var t;return super("w:t"),"string"==typeof e?(this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push(e),this):(this.root.push(new Gn({space:null!=(t=e.space)?t:Wn.DEFAULT})),this.root.push(e.text),this)}}const wo={CURRENT:"CURRENT",TOTAL_PAGES:"TOTAL_PAGES",TOTAL_PAGES_IN_SECTION:"TOTAL_PAGES_IN_SECTION",CURRENT_SECTION:"SECTION"};class go extends w{constructor(e){if(super("w:r"),p(this,"properties"),this.properties=new po(e),this.root.push(this.properties),e.break)for(let t=0;t<e.break;t++)this.root.push(new Un);if(e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case wo.CURRENT:this.root.push(new jn),this.root.push(new Kn),this.root.push(new Hn),this.root.push(new zn);break;case wo.TOTAL_PAGES:this.root.push(new jn),this.root.push(new Vn),this.root.push(new Hn),this.root.push(new zn);break;case wo.TOTAL_PAGES_IN_SECTION:this.root.push(new jn),this.root.push(new $n),this.root.push(new Hn),this.root.push(new zn);break;case wo.CURRENT_SECTION:this.root.push(new jn),this.root.push(new Xn),this.root.push(new Hn),this.root.push(new zn);break;default:this.root.push(new mo(t))}else e.text&&this.root.push(new mo(e.text))}}class yo extends go{constructor(e){if("string"==typeof e)return super({}),this.root.push(new mo(e)),this;super(e)}}class bo extends y{constructor(){super(...arguments),p(this,"xmlKeys",{char:"w:char",symbolfont:"w:font"})}}let vo=class extends w{constructor(e="",t="Wingdings"){super("w:sym"),this.root.push(new bo({char:e,symbolfont:t}))}};class xo extends go{constructor(e){if("string"==typeof e)return super({}),this.root.push(new vo(e)),this;super(e),this.root.push(new vo(e.char,e.symbolfont))}}const Eo=e=>Math.floor(72*e*20),_o=(e=0)=>{let t=e;return()=>++t},To=()=>_o(),Ao=()=>_o(1),So=()=>_o(),Io=()=>_o(),ko=()=>((e=21)=>{let t="",r=e;for(;r--;)t+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64*Math.random()|0];return t})().toLowerCase(),Ro=e=>((e,t=21)=>(r=t)=>{let n="",o=r;for(;o--;)n+=e[Math.random()*e.length|0];return n})("1234567890abcdef",e)(),No=()=>`${Ro(8)}-${Ro(4)}-${Ro(4)}-${Ro(4)}-${Ro(12)}`,Oo={CHARACTER:"character",COLUMN:"column",INSIDE_MARGIN:"insideMargin",LEFT_MARGIN:"leftMargin",MARGIN:"margin",OUTSIDE_MARGIN:"outsideMargin",PAGE:"page",RIGHT_MARGIN:"rightMargin"},Co={BOTTOM_MARGIN:"bottomMargin",INSIDE_MARGIN:"insideMargin",LINE:"line",MARGIN:"margin",OUTSIDE_MARGIN:"outsideMargin",PAGE:"page",PARAGRAPH:"paragraph",TOP_MARGIN:"topMargin"};class Do extends y{constructor(){super(...arguments),p(this,"xmlKeys",{x:"x",y:"y"})}}class Lo extends w{constructor(){super("wp:simplePos"),this.root.push(new Do({x:0,y:0}))}}class Po extends w{constructor(e){super("wp:align"),this.root.push(e)}}class Bo extends w{constructor(e){super("wp:posOffset"),this.root.push(e.toString())}}class Fo extends y{constructor(){super(...arguments),p(this,"xmlKeys",{relativeFrom:"relativeFrom"})}}class Uo extends w{constructor(e){if(super("wp:positionH"),this.root.push(new Fo({relativeFrom:e.relative||Oo.PAGE})),e.align)this.root.push(new Po(e.align));else{if(void 0===e.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new Bo(e.offset))}}}class Mo extends y{constructor(){super(...arguments),p(this,"xmlKeys",{relativeFrom:"relativeFrom"})}}class jo extends w{constructor(e){if(super("wp:positionV"),this.root.push(new Mo({relativeFrom:e.relative||Co.PAGE})),e.align)this.root.push(new Po(e.align));else{if(void 0===e.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new Bo(e.offset))}}}class Ho extends y{constructor(){super(...arguments),p(this,"xmlKeys",{uri:"uri"})}}class zo extends y{constructor(){super(...arguments),p(this,"xmlKeys",{embed:"r:embed",cstate:"cstate"})}}class Wo extends w{constructor(e){super("a:blip"),this.root.push(new zo({embed:`rId{${e.fileName}}`,cstate:"none"}))}}class Go extends w{constructor(){super("a:srcRect")}}class Ko extends w{constructor(){super("a:fillRect")}}class Vo extends w{constructor(){super("a:stretch"),this.root.push(new Ko)}}class $o extends w{constructor(e){super("pic:blipFill"),this.root.push(new Wo(e)),this.root.push(new Go),this.root.push(new Vo)}}class Xo extends y{constructor(){super(...arguments),p(this,"xmlKeys",{noChangeAspect:"noChangeAspect",noChangeArrowheads:"noChangeArrowheads"})}}class qo extends w{constructor(){super("a:picLocks"),this.root.push(new Xo({noChangeAspect:1,noChangeArrowheads:1}))}}class Zo extends w{constructor(){super("pic:cNvPicPr"),this.root.push(new qo)}}const Yo=(e,t)=>new kn({name:"a:hlinkClick",attributes:h(l({},t?{xmlns:{key:"xmlns:a",value:"http://schemas.openxmlformats.org/drawingml/2006/main"}}:{}),{id:{key:"r:id",value:`rId${e}`}})});class Jo extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"id",name:"name",descr:"descr"})}}class Qo extends w{constructor(){super("pic:cNvPr"),this.root.push(new Jo({id:0,name:"",descr:""}))}prepForXml(e){for(let t=e.stack.length-1;t>=0;t--){const r=e.stack[t];if(r instanceof ps){this.root.push(Yo(r.linkId,!1));break}}return super.prepForXml(e)}}class ei extends w{constructor(){super("pic:nvPicPr"),this.root.push(new Qo),this.root.push(new Zo)}}class ti extends y{constructor(){super(...arguments),p(this,"xmlKeys",{xmlns:"xmlns:pic"})}}class ri extends y{constructor(){super(...arguments),p(this,"xmlKeys",{cx:"cx",cy:"cy"})}}class ni extends w{constructor(e,t){super("a:ext"),p(this,"attributes"),this.attributes=new ri({cx:e,cy:t}),this.root.push(this.attributes)}}class oi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{x:"x",y:"y"})}}class ii extends w{constructor(){super("a:off"),this.root.push(new oi({x:0,y:0}))}}class si extends y{constructor(){super(...arguments),p(this,"xmlKeys",{flipVertical:"flipV",flipHorizontal:"flipH",rotation:"rot"})}}class ai extends w{constructor(e){var t,r;super("a:xfrm"),p(this,"extents"),this.root.push(new si({flipVertical:null==(t=e.flip)?void 0:t.vertical,flipHorizontal:null==(r=e.flip)?void 0:r.horizontal,rotation:e.rotation})),this.extents=new ni(e.emus.x,e.emus.y),this.root.push(new ii),this.root.push(this.extents)}}const ui=()=>new kn({name:"a:noFill"}),ci=e=>new kn({name:"a:schemeClr",attributes:{value:{key:"val",value:e.value}}}),li=e=>new kn({name:"a:srgbClr",attributes:{value:{key:"val",value:e.value}}}),hi=e=>new kn({name:"a:solidFill",children:["rgb"===e.type?li(e):ci(e)]});class pi extends w{constructor(){super("a:avLst")}}class fi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{prst:"prst"})}}class di extends w{constructor(){super("a:prstGeom"),this.root.push(new fi({prst:"rect"})),this.root.push(new pi)}}class mi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{bwMode:"bwMode"})}}class wi extends w{constructor({outline:e,transform:t}){var r;super("pic:spPr"),p(this,"form"),this.root.push(new mi({bwMode:"auto"})),this.form=new ai(t),this.root.push(this.form),this.root.push(new di),e&&(this.root.push(ui()),this.root.push(new kn({name:"a:ln",attributes:{width:{key:"w",value:(r=e).width},cap:{key:"cap",value:r.cap},compoundLine:{key:"cmpd",value:r.compoundLine},align:{key:"algn",value:r.align}},children:["noFill"===r.type?ui():"rgb"===r.solidFillType?hi({type:"rgb",value:r.value}):hi({type:"scheme",value:r.value})]})))}}class gi extends w{constructor({mediaData:e,transform:t,outline:r}){super("pic:pic"),this.root.push(new ti({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.root.push(new ei),this.root.push(new $o(e)),this.root.push(new wi({transform:t,outline:r}))}}class yi extends w{constructor({mediaData:e,transform:t,outline:r}){super("a:graphicData"),p(this,"pic"),this.root.push(new Ho({uri:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.pic=new gi({mediaData:e,transform:t,outline:r}),this.root.push(this.pic)}}class bi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{a:"xmlns:a"})}}class vi extends w{constructor({mediaData:e,transform:t,outline:r}){super("a:graphic"),p(this,"data"),this.root.push(new bi({a:"http://schemas.openxmlformats.org/drawingml/2006/main"})),this.data=new yi({mediaData:e,transform:t,outline:r}),this.root.push(this.data)}}const xi={NONE:0,SQUARE:1,TIGHT:2,TOP_AND_BOTTOM:3},Ei={BOTH_SIDES:"bothSides",LEFT:"left",RIGHT:"right",LARGEST:"largest"};class _i extends w{constructor(){super("wp:wrapNone")}}class Ti extends y{constructor(){super(...arguments),p(this,"xmlKeys",{distT:"distT",distB:"distB",distL:"distL",distR:"distR",wrapText:"wrapText"})}}class Ai extends w{constructor(e,t={top:0,bottom:0,left:0,right:0}){super("wp:wrapSquare"),this.root.push(new Ti({wrapText:e.side||Ei.BOTH_SIDES,distT:t.top,distB:t.bottom,distL:t.left,distR:t.right}))}}class Si extends y{constructor(){super(...arguments),p(this,"xmlKeys",{distT:"distT",distB:"distB"})}}class Ii extends w{constructor(e={top:0,bottom:0}){super("wp:wrapTight"),this.root.push(new Si({distT:e.top,distB:e.bottom}))}}class ki extends y{constructor(){super(...arguments),p(this,"xmlKeys",{distT:"distT",distB:"distB"})}}class Ri extends w{constructor(e={top:0,bottom:0}){super("wp:wrapTopAndBottom"),this.root.push(new ki({distT:e.top,distB:e.bottom}))}}class Ni extends w{constructor({name:e,description:t,title:r}={name:"",description:"",title:""}){super("wp:docPr"),p(this,"docPropertiesUniqueNumericId",So()),this.root.push(new b({id:{key:"id",value:this.docPropertiesUniqueNumericId()},name:{key:"name",value:e},description:{key:"descr",value:t},title:{key:"title",value:r}}))}prepForXml(e){for(let t=e.stack.length-1;t>=0;t--){const r=e.stack[t];if(r instanceof ps){this.root.push(Yo(r.linkId,!0));break}}return super.prepForXml(e)}}const Oi=({top:e,right:t,bottom:r,left:n})=>new kn({name:"wp:effectExtent",attributes:{top:{key:"t",value:e},right:{key:"r",value:t},bottom:{key:"b",value:r},left:{key:"l",value:n}}});class Ci extends y{constructor(){super(...arguments),p(this,"xmlKeys",{cx:"cx",cy:"cy"})}}class Di extends w{constructor(e,t){super("wp:extent"),p(this,"attributes"),this.attributes=new Ci({cx:e,cy:t}),this.root.push(this.attributes)}}class Li extends y{constructor(){super(...arguments),p(this,"xmlKeys",{xmlns:"xmlns:a",noChangeAspect:"noChangeAspect"})}}class Pi extends w{constructor(){super("a:graphicFrameLocks"),this.root.push(new Li({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/main",noChangeAspect:1}))}}class Bi extends w{constructor(){super("wp:cNvGraphicFramePr"),this.root.push(new Pi)}}class Fi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{distT:"distT",distB:"distB",distL:"distL",distR:"distR",allowOverlap:"allowOverlap",behindDoc:"behindDoc",layoutInCell:"layoutInCell",locked:"locked",relativeHeight:"relativeHeight",simplePos:"simplePos"})}}class Ui extends w{constructor({mediaData:e,transform:t,drawingOptions:r}){super("wp:anchor");const n=l({allowOverlap:!0,behindDocument:!1,lockAnchor:!1,layoutInCell:!0,verticalPosition:{},horizontalPosition:{}},r.floating);if(this.root.push(new Fi({distT:n.margins&&n.margins.top||0,distB:n.margins&&n.margins.bottom||0,distL:n.margins&&n.margins.left||0,distR:n.margins&&n.margins.right||0,simplePos:"0",allowOverlap:!0===n.allowOverlap?"1":"0",behindDoc:!0===n.behindDocument?"1":"0",locked:!0===n.lockAnchor?"1":"0",layoutInCell:!0===n.layoutInCell?"1":"0",relativeHeight:n.zIndex?n.zIndex:t.emus.y})),this.root.push(new Lo),this.root.push(new Uo(n.horizontalPosition)),this.root.push(new jo(n.verticalPosition)),this.root.push(new Di(t.emus.x,t.emus.y)),this.root.push(Oi({top:0,right:0,bottom:0,left:0})),void 0!==r.floating&&void 0!==r.floating.wrap)switch(r.floating.wrap.type){case xi.SQUARE:this.root.push(new Ai(r.floating.wrap,r.floating.margins));break;case xi.TIGHT:this.root.push(new Ii(r.floating.margins));break;case xi.TOP_AND_BOTTOM:this.root.push(new Ri(r.floating.margins));break;default:this.root.push(new _i)}else this.root.push(new _i);this.root.push(new Ni(r.docProperties)),this.root.push(new Bi),this.root.push(new vi({mediaData:e,transform:t,outline:r.outline}))}}class Mi extends w{constructor(e,t={}){super("w:drawing"),t.floating?this.root.push(new Ui({mediaData:e,transform:e.transformation,drawingOptions:t})):this.root.push((({mediaData:e,transform:t,docProperties:r,outline:n})=>{var o,i,s,a;return new kn({name:"wp:inline",attributes:{distanceTop:{key:"distT",value:0},distanceBottom:{key:"distB",value:0},distanceLeft:{key:"distL",value:0},distanceRight:{key:"distR",value:0}},children:[new Di(t.emus.x,t.emus.y),Oi(n?{top:2*(null!=(o=n.width)?o:9525),right:2*(null!=(i=n.width)?i:9525),bottom:2*(null!=(s=n.width)?s:9525),left:2*(null!=(a=n.width)?a:9525)}:{top:0,right:0,bottom:0,left:0}),new Ni(r),new Bi,new vi({mediaData:e,transform:t,outline:n})]})})({mediaData:e,transform:e.transformation,docProperties:t.docProperties,outline:t.outline}))}}class ji extends w{constructor(e){super("w:instrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push(`SEQ ${e}`)}}class Hi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{instr:"w:instr"})}}class zi extends w{constructor(e,t){super("w:fldSimple"),this.root.push(new Hi({instr:e})),void 0!==t&&this.root.push(new yo(t))}}class Wi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"w:id",initials:"w:initials",author:"w:author",date:"w:date"})}}class Gi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"w:id"})}}class Ki extends y{constructor(){super(...arguments),p(this,"xmlKeys",{"xmlns:cx":"xmlns:cx","xmlns:cx1":"xmlns:cx1","xmlns:cx2":"xmlns:cx2","xmlns:cx3":"xmlns:cx3","xmlns:cx4":"xmlns:cx4","xmlns:cx5":"xmlns:cx5","xmlns:cx6":"xmlns:cx6","xmlns:cx7":"xmlns:cx7","xmlns:cx8":"xmlns:cx8","xmlns:mc":"xmlns:mc","xmlns:aink":"xmlns:aink","xmlns:am3d":"xmlns:am3d","xmlns:o":"xmlns:o","xmlns:r":"xmlns:r","xmlns:m":"xmlns:m","xmlns:v":"xmlns:v","xmlns:wp14":"xmlns:wp14","xmlns:wp":"xmlns:wp","xmlns:w10":"xmlns:w10","xmlns:w":"xmlns:w","xmlns:w14":"xmlns:w14","xmlns:w15":"xmlns:w15","xmlns:w16cex":"xmlns:w16cex","xmlns:w16cid":"xmlns:w16cid","xmlns:w16":"xmlns:w16","xmlns:w16sdtdh":"xmlns:w16sdtdh","xmlns:w16se":"xmlns:w16se","xmlns:wpg":"xmlns:wpg","xmlns:wpi":"xmlns:wpi","xmlns:wne":"xmlns:wne","xmlns:wps":"xmlns:wps"})}}class Vi extends w{constructor({id:e,initials:t,author:r,date:n=new Date,children:o}){super("w:comment"),this.root.push(new Wi({id:e,initials:t,author:r,date:n.toISOString()}));for(const e of o)this.root.push(e)}}class $i extends w{constructor({children:e}){super("w:comments"),this.root.push(new Ki({"xmlns:cx":"http://schemas.microsoft.com/office/drawing/2014/chartex","xmlns:cx1":"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex","xmlns:cx2":"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex","xmlns:cx3":"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex","xmlns:cx4":"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex","xmlns:cx5":"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex","xmlns:cx6":"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex","xmlns:cx7":"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex","xmlns:cx8":"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex","xmlns:mc":"http://schemas.openxmlformats.org/markup-compatibility/2006","xmlns:aink":"http://schemas.microsoft.com/office/drawing/2016/ink","xmlns:am3d":"http://schemas.microsoft.com/office/drawing/2017/model3d","xmlns:o":"urn:schemas-microsoft-com:office:office","xmlns:r":"http://schemas.openxmlformats.org/officeDocument/2006/relationships","xmlns:m":"http://schemas.openxmlformats.org/officeDocument/2006/math","xmlns:v":"urn:schemas-microsoft-com:vml","xmlns:wp14":"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing","xmlns:wp":"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing","xmlns:w10":"urn:schemas-microsoft-com:office:word","xmlns:w":"http://schemas.openxmlformats.org/wordprocessingml/2006/main","xmlns:w14":"http://schemas.microsoft.com/office/word/2010/wordml","xmlns:w15":"http://schemas.microsoft.com/office/word/2012/wordml","xmlns:w16cex":"http://schemas.microsoft.com/office/word/2018/wordml/cex","xmlns:w16cid":"http://schemas.microsoft.com/office/word/2016/wordml/cid","xmlns:w16":"http://schemas.microsoft.com/office/word/2018/wordml","xmlns:w16sdtdh":"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash","xmlns:w16se":"http://schemas.microsoft.com/office/word/2015/wordml/symex","xmlns:wpg":"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup","xmlns:wpi":"http://schemas.microsoft.com/office/word/2010/wordprocessingInk","xmlns:wne":"http://schemas.microsoft.com/office/word/2006/wordml","xmlns:wps":"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}));for(const t of e)this.root.push(new Vi(t))}}class Xi extends w{constructor(e){super("w:br"),this.root.push(new v({type:e}))}}class qi extends w{constructor(){super("w:pageBreakBefore")}}const Zi={AT_LEAST:"atLeast",EXACTLY:"exactly",EXACT:"exact",AUTO:"auto"};class Yi extends y{constructor(){super(...arguments),p(this,"xmlKeys",{after:"w:after",before:"w:before",line:"w:line",lineRule:"w:lineRule"})}}class Ji extends w{constructor(e){super("w:spacing"),this.root.push(new Yi(e))}}let Qi=class extends w{constructor(e){super("w:pStyle"),this.root.push(new v({val:e}))}};class es extends w{constructor(e){super("w:tabs");for(const t of e)this.root.push(new ns(t))}}const ts={LEFT:"left",RIGHT:"right",CENTER:"center",BAR:"bar",CLEAR:"clear",DECIMAL:"decimal",END:"end",NUM:"num",START:"start"};class rs extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val",pos:"w:pos",leader:"w:leader"})}}class ns extends w{constructor({type:e,position:t,leader:r}){super("w:tab"),this.root.push(new rs({val:e,pos:t,leader:r}))}}class os extends w{constructor(e,t){super("w:numPr"),this.root.push(new is(t)),this.root.push(new ss(e))}}class is extends w{constructor(e){if(super("w:ilvl"),e>9)throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");this.root.push(new v({val:e}))}}class ss extends w{constructor(e){super("w:numId"),this.root.push(new v({val:"string"==typeof e?`{${e}}`:e}))}}class as extends w{constructor(){super(...arguments),p(this,"fileChild",Symbol())}}class us extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"Id",type:"Type",target:"Target",targetMode:"TargetMode"})}}const cs="External";class ls extends w{constructor(e,t,r,n){super("Relationship"),this.root.push(new us({id:e,type:t,target:r,targetMode:n}))}}class hs extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"r:id",history:"w:history",anchor:"w:anchor"})}}class ps extends w{constructor(e,t,r){super("w:hyperlink"),p(this,"linkId"),this.linkId=t;const n={history:1,anchor:r||void 0,id:r?void 0:`rId${this.linkId}`},o=new hs(n);this.root.push(o),e.forEach((e=>{this.root.push(e)}))}}class fs extends w{constructor(e){super("w:externalHyperlink"),this.options=e}}class ds extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"w:id",name:"w:name"})}}class ms extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"w:id"})}}class ws{constructor(e){p(this,"bookmarkUniqueNumericId",Io()),p(this,"start"),p(this,"children"),p(this,"end");const t=this.bookmarkUniqueNumericId();this.start=new gs(e.id,t),this.children=e.children,this.end=new ys(t)}}class gs extends w{constructor(e,t){super("w:bookmarkStart");const r=new ds({name:e,id:t});this.root.push(r)}}class ys extends w{constructor(e){super("w:bookmarkEnd");const t=new ms({id:e});this.root.push(t)}}class bs extends w{constructor(e){super("w:outlineLvl"),this.level=e,this.root.push(new v({val:e}))}}class vs extends w{constructor(e,t={}){super("w:instrText"),this.root.push(new Gn({space:Wn.PRESERVE}));let r=`PAGEREF ${e}`;t.hyperlink&&(r=`${r} \\h`),t.useRelativePosition&&(r=`${r} \\p`),this.root.push(r)}}class xs extends y{constructor(){super(...arguments),p(this,"xmlKeys",{verticalAlign:"w:val"})}}class Es extends w{constructor(e){super("w:vAlign"),this.root.push(new xs({verticalAlign:e}))}}const _s={DEFAULT:"default",FIRST:"first",EVEN:"even"};class Ts extends y{constructor(){super(...arguments),p(this,"xmlKeys",{type:"w:type",id:"r:id"})}}const As={HEADER:"w:headerReference",FOOTER:"w:footerReference"};class Ss extends w{constructor(e,t){super(e),this.root.push(new Ts({type:t.type||_s.DEFAULT,id:`rId${t.id}`}))}}class Is extends w{constructor({space:e,count:t,separate:r,equalWidth:n,children:o}){super("w:cols"),this.root.push(new b({space:{key:"w:space",value:void 0===e?void 0:dn(e)},count:{key:"w:num",value:void 0===t?void 0:nn(t)},separate:{key:"w:sep",value:r},equalWidth:{key:"w:equalWidth",value:n}})),!n&&o&&o.forEach((e=>this.addChildElement(e)))}}class ks extends y{constructor(){super(...arguments),p(this,"xmlKeys",{type:"w:type",linePitch:"w:linePitch",charSpace:"w:charSpace"})}}class Rs extends w{constructor(e,t,r){super("w:docGrid"),this.root.push(new ks({type:r,linePitch:nn(e),charSpace:t?nn(t):void 0}))}}const Ns=({countBy:e,start:t,restart:r,distance:n})=>new kn({name:"w:lnNumType",attributes:{countBy:{key:"w:countBy",value:void 0===e?void 0:nn(e)},start:{key:"w:start",value:void 0===t?void 0:nn(t)},restart:{key:"w:restart",value:r},distance:{key:"w:distance",value:void 0===n?void 0:dn(n)}}});class Os extends y{constructor(){super(...arguments),p(this,"xmlKeys",{display:"w:display",offsetFrom:"w:offsetFrom",zOrder:"w:zOrder"})}}class Cs extends g{constructor(e){if(super("w:pgBorders"),!e)return this;e.pageBorders?this.root.push(new Os({display:e.pageBorders.display,offsetFrom:e.pageBorders.offsetFrom,zOrder:e.pageBorders.zOrder})):this.root.push(new Os({})),e.pageBorderTop&&this.root.push(new Cn("w:top",e.pageBorderTop)),e.pageBorderLeft&&this.root.push(new Cn("w:left",e.pageBorderLeft)),e.pageBorderBottom&&this.root.push(new Cn("w:bottom",e.pageBorderBottom)),e.pageBorderRight&&this.root.push(new Cn("w:right",e.pageBorderRight))}}class Ds extends w{constructor(e,t,r,n,o,i,s){super("w:pgMar"),this.root.push(new b({top:{key:"w:top",value:pn(e)},right:{key:"w:right",value:dn(t)},bottom:{key:"w:bottom",value:pn(r)},left:{key:"w:left",value:dn(n)},header:{key:"w:header",value:dn(o)},footer:{key:"w:footer",value:dn(i)},gutter:{key:"w:gutter",value:dn(s)}}))}}class Ls extends y{constructor(){super(...arguments),p(this,"xmlKeys",{start:"w:start",formatType:"w:fmt",separator:"w:chapSep"})}}class Ps extends w{constructor({start:e,formatType:t,separator:r}){super("w:pgNumType"),this.root.push(new Ls({start:void 0===e?void 0:nn(e),formatType:t,separator:r}))}}const Bs={PORTRAIT:"portrait",LANDSCAPE:"landscape"};class Fs extends w{constructor(e,t,r){super("w:pgSz");const n=r===Bs.LANDSCAPE,o=dn(e),i=dn(t);this.root.push(new b({width:{key:"w:w",value:n?i:o},height:{key:"w:h",value:n?o:i},orientation:{key:"w:orient",value:r}}))}}class Us extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class Ms extends w{constructor(e){super("w:textDirection"),this.root.push(new Us({val:e}))}}class js extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class Hs extends w{constructor(e){super("w:type"),this.root.push(new js({val:e}))}}const zs={TOP:1440,RIGHT:1440,BOTTOM:1440,LEFT:1440,HEADER:708,FOOTER:708,GUTTER:0},Ws={WIDTH:11906,HEIGHT:16838,ORIENTATION:Bs.PORTRAIT};class Gs extends w{constructor({page:{size:{width:e=Ws.WIDTH,height:t=Ws.HEIGHT,orientation:r=Ws.ORIENTATION}={},margin:{top:n=zs.TOP,right:o=zs.RIGHT,bottom:i=zs.BOTTOM,left:s=zs.LEFT,header:a=zs.HEADER,footer:u=zs.FOOTER,gutter:c=zs.GUTTER}={},pageNumbers:l={},borders:h,textDirection:p}={},grid:{linePitch:f=360,charSpace:d,type:m}={},headerWrapperGroup:w={},footerWrapperGroup:g={},lineNumbers:y,titlePage:b,verticalAlign:v,column:x,type:E}={}){super("w:sectPr"),this.addHeaderFooterGroup(As.HEADER,w),this.addHeaderFooterGroup(As.FOOTER,g),E&&this.root.push(new Hs(E)),this.root.push(new Fs(e,t,r)),this.root.push(new Ds(n,o,i,s,a,u,c)),h&&this.root.push(new Cs(h)),y&&this.root.push(Ns(y)),this.root.push(new Ps(l)),x&&this.root.push(new Is(x)),v&&this.root.push(new Es(v)),void 0!==b&&this.root.push(new vn("w:titlePg",b)),p&&this.root.push(new Ms(p)),this.root.push(new Rs(f,d,m))}addHeaderFooterGroup(e,t){t.default&&this.root.push(new Ss(e,{type:_s.DEFAULT,id:t.default.View.ReferenceId})),t.first&&this.root.push(new Ss(e,{type:_s.FIRST,id:t.first.View.ReferenceId})),t.even&&this.root.push(new Ss(e,{type:_s.EVEN,id:t.even.View.ReferenceId}))}}class Ks extends w{constructor(){super("w:body"),p(this,"sections",[])}addSection(e){const t=this.sections.pop();this.root.push(this.createSectionParagraph(t)),this.sections.push(new Gs(e))}prepForXml(e){return 1===this.sections.length&&(this.root.splice(0,1),this.root.push(this.sections.pop())),super.prepForXml(e)}push(e){this.root.push(e)}createSectionParagraph(e){const t=new na({}),r=new ra({});return r.push(e),t.addChildElement(r),t}}class Vs extends y{constructor(){super(...arguments),p(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",aink:"xmlns:aink",am3d:"xmlns:am3d",w16cex:"xmlns:w16cex",w16cid:"xmlns:w16cid",w16:"xmlns:w16",w16sdtdh:"xmlns:w16sdtdh",w16se:"xmlns:w16se"})}}class $s extends y{constructor(){super(...arguments),p(this,"xmlKeys",{color:"w:color",themeColor:"w:themeColor",themeShade:"w:themeShade",themeTint:"w:themeTint"})}}class Xs extends w{constructor(e){super("w:background"),this.root.push(new $s({color:void 0===e.color?void 0:hn(e.color),themeColor:e.themeColor,themeShade:void 0===e.themeShade?void 0:un(e.themeShade),themeTint:void 0===e.themeTint?void 0:un(e.themeTint)}))}}class qs extends w{constructor(e){super("w:document"),p(this,"body"),this.root.push(new Vs({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",aink:"http://schemas.microsoft.com/office/drawing/2016/ink",am3d:"http://schemas.microsoft.com/office/drawing/2017/model3d",w16cex:"http://schemas.microsoft.com/office/word/2018/wordml/cex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16:"http://schemas.microsoft.com/office/word/2018/wordml",w16sdtdh:"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex",Ignorable:"w14 w15 wp14"})),this.body=new Ks,e.background&&this.root.push(new Xs(e.background)),this.root.push(this.body)}add(e){return this.body.push(e),this}get Body(){return this.body}}class Zs extends y{constructor(){super(...arguments),p(this,"xmlKeys",{xmlns:"xmlns"})}}class Ys extends w{constructor(){super("Relationships"),this.root.push(new Zs({xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"}))}createRelationship(e,t,r,n){const o=new ls(`rId${e}`,t,r,n);return this.root.push(o),o}get RelationshipCount(){return this.root.length-1}}class Js{constructor(e){p(this,"document"),p(this,"relationships"),this.document=new qs(e),this.relationships=new Ys}get View(){return this.document}get Relationships(){return this.relationships}}class Qs extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class ea extends w{constructor(){super("w:wordWrap"),this.root.push(new Qs({val:0}))}}const ta=e=>{var t,r;return new kn({name:"w:framePr",attributes:{anchorLock:{key:"w:anchorLock",value:e.anchorLock},dropCap:{key:"w:dropCap",value:e.dropCap},width:{key:"w:w",value:e.width},height:{key:"w:h",value:e.height},x:{key:"w:x",value:e.position?e.position.x:void 0},y:{key:"w:y",value:e.position?e.position.y:void 0},anchorHorizontal:{key:"w:hAnchor",value:e.anchor.horizontal},anchorVertical:{key:"w:vAnchor",value:e.anchor.vertical},spaceHorizontal:{key:"w:hSpace",value:null==(t=e.space)?void 0:t.horizontal},spaceVertical:{key:"w:vSpace",value:null==(r=e.space)?void 0:r.vertical},rule:{key:"w:hRule",value:e.rule},alignmentX:{key:"w:xAlign",value:e.alignment?e.alignment.x:void 0},alignmentY:{key:"w:yAlign",value:e.alignment?e.alignment.y:void 0},lines:{key:"w:lines",value:e.lines},wrap:{key:"w:wrap",value:e.wrap}}})};class ra extends g{constructor(e){var t,r;if(super("w:pPr"),p(this,"numberingReferences",[]),!e)return this;e.heading&&this.push(new Qi(e.heading)),e.bullet&&this.push(new Qi("ListParagraph")),e.numbering&&(e.style||e.heading||e.numbering.custom||this.push(new Qi("ListParagraph"))),e.style&&this.push(new Qi(e.style)),void 0!==e.keepNext&&this.push(new vn("w:keepNext",e.keepNext)),void 0!==e.keepLines&&this.push(new vn("w:keepLines",e.keepLines)),e.pageBreakBefore&&this.push(new qi),e.frame&&this.push(ta(e.frame)),void 0!==e.widowControl&&this.push(new vn("w:widowControl",e.widowControl)),e.bullet&&this.push(new os(1,e.bullet.level)),e.numbering&&(this.numberingReferences.push({reference:e.numbering.reference,instance:null!=(t=e.numbering.instance)?t:0}),this.push(new os(`${e.numbering.reference}-${null!=(r=e.numbering.instance)?r:0}`,e.numbering.level))),e.border&&this.push(new Pn(e.border)),e.thematicBreak&&this.push(new Bn),e.shading&&this.push(new Zn(e.shading)),e.wordWrap&&this.push(new ea),e.overflowPunctuation&&this.push(new vn("w:overflowPunct",e.overflowPunctuation));const n=[...void 0!==e.rightTabStop?[{type:ts.RIGHT,position:e.rightTabStop}]:[],...e.tabStops?e.tabStops:[],...void 0!==e.leftTabStop?[{type:ts.LEFT,position:e.leftTabStop}]:[]];n.length>0&&this.push(new es(n)),void 0!==e.bidirectional&&this.push(new vn("w:bidi",e.bidirectional)),e.spacing&&this.push(new Ji(e.spacing)),e.indent&&this.push(new Fn(e.indent)),void 0!==e.contextualSpacing&&this.push(new vn("w:contextualSpacing",e.contextualSpacing)),e.alignment&&this.push(new On(e.alignment)),void 0!==e.outlineLevel&&this.push(new bs(e.outlineLevel)),void 0!==e.suppressLineNumbers&&this.push(new vn("w:suppressLineNumbers",e.suppressLineNumbers)),void 0!==e.autoSpaceEastAsianText&&this.push(new vn("w:autoSpaceDN",e.autoSpaceEastAsianText)),e.run&&this.push(new po(e.run))}push(e){this.root.push(e)}prepForXml(e){if(e.viewWrapper instanceof Js)for(const t of this.numberingReferences)e.file.Numbering.createConcreteNumberingInstance(t.reference,t.instance);return super.prepForXml(e)}}class na extends as{constructor(e){if(super("w:p"),p(this,"properties"),"string"==typeof e)return this.properties=new ra({}),this.root.push(this.properties),this.root.push(new yo(e)),this;if(this.properties=new ra(e),this.root.push(this.properties),e.text&&this.root.push(new yo(e.text)),e.children)for(const t of e.children)if(t instanceof ws){this.root.push(t.start);for(const e of t.children)this.root.push(e);this.root.push(t.end)}else this.root.push(t)}prepForXml(e){for(const t of this.root)if(t instanceof fs){const r=this.root.indexOf(t),n=new ps(t.options.children,ko());e.viewWrapper.Relationships.createRelationship(n.linkId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",t.options.link,cs),this.root[r]=n}return super.prepForXml(e)}addRunToFront(e){return this.root.splice(1,0,e),this}}class oa extends w{constructor(e){super("m:t"),this.root.push(e)}}class ia extends w{constructor(e){super("m:den");for(const t of e)this.root.push(t)}}class sa extends w{constructor(e){super("m:num");for(const t of e)this.root.push(t)}}class aa extends y{constructor(){super(...arguments),p(this,"xmlKeys",{accent:"m:val"})}}class ua extends w{constructor(e){super("m:chr"),this.root.push(new aa({accent:e}))}}class ca extends w{constructor(e){super("m:e");for(const t of e)this.root.push(t)}}class la extends y{constructor(){super(...arguments),p(this,"xmlKeys",{value:"m:val"})}}class ha extends w{constructor(){super("m:limLoc"),this.root.push(new la({value:"undOvr"}))}}class pa extends y{constructor(){super(...arguments),p(this,"xmlKeys",{hide:"m:val"})}}class fa extends w{constructor(){super("m:subHide"),this.root.push(new pa({hide:1}))}}class da extends y{constructor(){super(...arguments),p(this,"xmlKeys",{hide:"m:val"})}}class ma extends w{constructor(){super("m:supHide"),this.root.push(new da({hide:1}))}}class wa extends w{constructor(e,t,r){super("m:naryPr"),e&&this.root.push(new ua(e)),this.root.push(new ha),t||this.root.push(new ma),r||this.root.push(new fa)}}class ga extends w{constructor(e){super("m:sub");for(const t of e)this.root.push(t)}}class ya extends w{constructor(e){super("m:sup");for(const t of e)this.root.push(t)}}class ba extends w{constructor(){super("m:sSupPr")}}class va extends w{constructor(){super("m:sSubPr")}}class xa extends w{constructor(){super("m:sSubSupPr")}}class Ea extends w{constructor(){super("m:sPrePr")}}class _a extends w{constructor(e){if(super("m:deg"),e)for(const t of e)this.root.push(t)}}class Ta extends y{constructor(){super(...arguments),p(this,"xmlKeys",{hide:"m:val"})}}class Aa extends w{constructor(){super("m:degHide"),this.root.push(new Ta({hide:1}))}}class Sa extends w{constructor(e){super("m:radPr"),e||this.root.push(new Aa)}}class Ia extends w{constructor(e){super("m:fName");for(const t of e)this.root.push(t)}}class ka extends w{constructor(){super("m:funcPr")}}class Ra extends y{constructor(){super(...arguments),p(this,"xmlKeys",{character:"m:val"})}}class Na extends w{constructor(e){super("m:begChr"),this.root.push(new Ra({character:e}))}}class Oa extends y{constructor(){super(...arguments),p(this,"xmlKeys",{character:"m:val"})}}class Ca extends w{constructor(e){super("m:endChr"),this.root.push(new Oa({character:e}))}}class Da extends w{constructor(e){super("m:dPr"),e&&(this.root.push(new Na(e.beginningCharacter)),this.root.push(new Ca(e.endingCharacter)))}}class La extends w{constructor(e){super("w:tblGrid");for(const t of e)this.root.push(new Pa(t))}}class Pa extends w{constructor(e){super("w:gridCol"),void 0!==e&&this.root.push(new b({width:{key:"w:w",value:dn(e)}}))}}class Ba extends g{constructor(e,{marginUnitType:t=Fa.DXA,top:r,left:n,bottom:o,right:i}){super(e),void 0!==r&&this.root.push(new Ua("w:top",{type:t,size:r})),void 0!==n&&this.root.push(new Ua("w:left",{type:t,size:n})),void 0!==o&&this.root.push(new Ua("w:bottom",{type:t,size:o})),void 0!==i&&this.root.push(new Ua("w:right",{type:t,size:i}))}}const Fa={AUTO:"auto",DXA:"dxa",NIL:"nil",PERCENTAGE:"pct"};class Ua extends w{constructor(e,{type:t=Fa.AUTO,size:r}){super(e);let n=r;t===Fa.PERCENTAGE&&"number"==typeof r&&(n=`${r}%`),this.root.push(new b({type:{key:"w:type",value:t},size:{key:"w:w",value:wn(n)}}))}}class Ma extends g{constructor(e){super("w:tcBorders"),e.top&&this.root.push(new Cn("w:top",e.top)),e.start&&this.root.push(new Cn("w:start",e.start)),e.left&&this.root.push(new Cn("w:left",e.left)),e.bottom&&this.root.push(new Cn("w:bottom",e.bottom)),e.end&&this.root.push(new Cn("w:end",e.end)),e.right&&this.root.push(new Cn("w:right",e.right))}}class ja extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class Ha extends w{constructor(e){super("w:gridSpan"),this.root.push(new ja({val:nn(e)}))}}const za={CONTINUE:"continue",RESTART:"restart"};class Wa extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class Ga extends w{constructor(e){super("w:vMerge"),this.root.push(new Wa({val:e}))}}class Ka extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class Va extends w{constructor(e){super("w:textDirection"),this.root.push(new Ka({val:e}))}}class $a extends g{constructor(e){super("w:tcPr"),e.width&&this.root.push(new Ua("w:tcW",e.width)),e.columnSpan&&this.root.push(new Ha(e.columnSpan)),e.verticalMerge?this.root.push(new Ga(e.verticalMerge)):e.rowSpan&&e.rowSpan>1&&this.root.push(new Ga(za.RESTART)),e.borders&&this.root.push(new Ma(e.borders)),e.shading&&this.root.push(new Zn(e.shading)),e.margins&&this.root.push(new Ba("w:tcMar",e.margins)),e.textDirection&&this.root.push(new Va(e.textDirection)),e.verticalAlign&&this.root.push(new Es(e.verticalAlign))}}class Xa extends w{constructor(e){super("w:tc"),this.options=e,this.root.push(new $a(e));for(const t of e.children)this.root.push(t)}prepForXml(e){return this.root[this.root.length-1]instanceof na||this.root.push(new na({})),super.prepForXml(e)}}const qa={style:Ln.NONE,size:0,color:"auto"},Za={style:Ln.SINGLE,size:4,color:"auto"};class Ya extends w{constructor(e){super("w:tblBorders"),e.top?this.root.push(new Cn("w:top",e.top)):this.root.push(new Cn("w:top",Za)),e.left?this.root.push(new Cn("w:left",e.left)):this.root.push(new Cn("w:left",Za)),e.bottom?this.root.push(new Cn("w:bottom",e.bottom)):this.root.push(new Cn("w:bottom",Za)),e.right?this.root.push(new Cn("w:right",e.right)):this.root.push(new Cn("w:right",Za)),e.insideHorizontal?this.root.push(new Cn("w:insideH",e.insideHorizontal)):this.root.push(new Cn("w:insideH",Za)),e.insideVertical?this.root.push(new Cn("w:insideV",e.insideVertical)):this.root.push(new Cn("w:insideV",Za))}}p(Ya,"NONE",{top:qa,bottom:qa,left:qa,right:qa,insideHorizontal:qa,insideVertical:qa});class Ja extends w{constructor({horizontalAnchor:e,verticalAnchor:t,absoluteHorizontalPosition:r,relativeHorizontalPosition:n,absoluteVerticalPosition:o,relativeVerticalPosition:i,bottomFromText:s,topFromText:a,leftFromText:u,rightFromText:c,overlap:l}){super("w:tblpPr"),this.root.push(new b({leftFromText:{key:"w:leftFromText",value:void 0===u?void 0:dn(u)},rightFromText:{key:"w:rightFromText",value:void 0===c?void 0:dn(c)},topFromText:{key:"w:topFromText",value:void 0===a?void 0:dn(a)},bottomFromText:{key:"w:bottomFromText",value:void 0===s?void 0:dn(s)},absoluteHorizontalPosition:{key:"w:tblpX",value:void 0===r?void 0:pn(r)},absoluteVerticalPosition:{key:"w:tblpY",value:void 0===o?void 0:pn(o)},horizontalAnchor:{key:"w:horzAnchor",value:void 0===e?void 0:e},relativeHorizontalPosition:{key:"w:tblpXSpec",value:n},relativeVerticalPosition:{key:"w:tblpYSpec",value:i},verticalAnchor:{key:"w:vertAnchor",value:t}})),l&&this.root.push(new Sn("w:tblOverlap",l))}}class Qa extends y{constructor(){super(...arguments),p(this,"xmlKeys",{type:"w:type"})}}class eu extends w{constructor(e){super("w:tblLayout"),this.root.push(new Qa({type:e}))}}class tu extends g{constructor(e){super("w:tblPr"),e.style&&this.root.push(new _n("w:tblStyle",e.style)),e.float&&this.root.push(new Ja(e.float)),void 0!==e.visuallyRightToLeft&&this.root.push(new vn("w:bidiVisual",e.visuallyRightToLeft)),e.width&&this.root.push(new Ua("w:tblW",e.width)),e.alignment&&this.root.push(new On(e.alignment)),e.indent&&this.root.push(new Ua("w:tblInd",e.indent)),e.borders&&this.root.push(new Ya(e.borders)),e.shading&&this.root.push(new Zn(e.shading)),e.layout&&this.root.push(new eu(e.layout)),e.cellMargin&&this.root.push(new Ba("w:tblCellMar",e.cellMargin))}}class ru extends y{constructor(){super(...arguments),p(this,"xmlKeys",{value:"w:val",rule:"w:hRule"})}}class nu extends w{constructor(e,t){super("w:trHeight"),this.root.push(new ru({value:dn(e),rule:t}))}}class ou extends g{constructor(e){super("w:trPr"),void 0!==e.cantSplit&&this.root.push(new vn("w:cantSplit",e.cantSplit)),void 0!==e.tableHeader&&this.root.push(new vn("w:tblHeader",e.tableHeader)),e.height&&this.root.push(new nu(e.height.value,e.height.rule))}}class iu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{xmlns:"xmlns",vt:"xmlns:vt"})}}class su extends w{constructor(){super("Properties"),this.root.push(new iu({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"}))}}class au extends y{constructor(){super(...arguments),p(this,"xmlKeys",{xmlns:"xmlns"})}}class uu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{contentType:"ContentType",extension:"Extension"})}}class cu extends w{constructor(e,t){super("Default"),this.root.push(new uu({contentType:e,extension:t}))}}class lu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{contentType:"ContentType",partName:"PartName"})}}class hu extends w{constructor(e,t){super("Override"),this.root.push(new lu({contentType:e,partName:t}))}}class pu extends w{constructor(){super("Types"),this.root.push(new au({xmlns:"http://schemas.openxmlformats.org/package/2006/content-types"})),this.root.push(new cu("image/png","png")),this.root.push(new cu("image/jpeg","jpeg")),this.root.push(new cu("image/jpeg","jpg")),this.root.push(new cu("image/bmp","bmp")),this.root.push(new cu("image/gif","gif")),this.root.push(new cu("application/vnd.openxmlformats-package.relationships+xml","rels")),this.root.push(new cu("application/xml","xml")),this.root.push(new cu("application/vnd.openxmlformats-officedocument.obfuscatedFont","odttf")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml","/word/document.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml","/word/styles.xml")),this.root.push(new hu("application/vnd.openxmlformats-package.core-properties+xml","/docProps/core.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.custom-properties+xml","/docProps/custom.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.extended-properties+xml","/docProps/app.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml","/word/numbering.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml","/word/footnotes.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml","/word/settings.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml","/word/comments.xml")),this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml","/word/fontTable.xml"))}addFooter(e){this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml",`/word/footer${e}.xml`))}addHeader(e){this.root.push(new hu("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml",`/word/header${e}.xml`))}}class fu extends w{constructor(e){super("cp:coreProperties"),this.root.push(new Vs({cp:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",xsi:"http://www.w3.org/2001/XMLSchema-instance"})),e.title&&this.root.push(new In("dc:title",e.title)),e.subject&&this.root.push(new In("dc:subject",e.subject)),e.creator&&this.root.push(new In("dc:creator",e.creator)),e.keywords&&this.root.push(new In("cp:keywords",e.keywords)),e.description&&this.root.push(new In("dc:description",e.description)),e.lastModifiedBy&&this.root.push(new In("cp:lastModifiedBy",e.lastModifiedBy)),e.revision&&this.root.push(new In("cp:revision",String(e.revision))),this.root.push(new du("dcterms:created")),this.root.push(new du("dcterms:modified"))}}class du extends w{constructor(e){super(e),this.root.push(new Vs({type:"dcterms:W3CDTF"})),this.root.push(bn(new Date))}}class mu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{xmlns:"xmlns",vt:"xmlns:vt"})}}class wu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{fmtid:"fmtid",pid:"pid",name:"name"})}}class gu extends w{constructor(e,t){super("property"),this.root.push(new wu({fmtid:"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",pid:e.toString(),name:t.name})),this.root.push(new yu(t.value))}}class yu extends w{constructor(e){super("vt:lpwstr"),this.root.push(e)}}class bu extends w{constructor(e){super("Properties"),p(this,"nextId"),p(this,"properties",[]),this.root.push(new mu({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"})),this.nextId=2;for(const t of e)this.addCustomProperty(t)}prepForXml(e){return this.properties.forEach((e=>this.root.push(e))),super.prepForXml(e)}addCustomProperty(e){this.properties.push(new gu(this.nextId++,e))}}class vu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"})}}let xu=class extends rn{constructor(e,t){super("w:ftr",t),p(this,"refId"),this.refId=e,t||this.root.push(new vu({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}};class Eu{constructor(e,t,r){p(this,"footer"),p(this,"relationships"),this.media=e,this.footer=new xu(t,r),this.relationships=new Ys}add(e){this.footer.add(e)}addChildElement(e){this.footer.addChildElement(e)}get View(){return this.footer}get Relationships(){return this.relationships}get Media(){return this.media}}class _u extends y{constructor(){super(...arguments),p(this,"xmlKeys",{type:"w:type",id:"w:id"})}}class Tu extends w{constructor(){super("w:footnoteRef")}}class Au extends go{constructor(){super({style:"FootnoteReference"}),this.root.push(new Tu)}}class Su extends w{constructor(e){super("w:footnote"),this.root.push(new _u({type:e.type,id:e.id}));for(let t=0;t<e.children.length;t++){const r=e.children[t];0===t&&r.addRunToFront(new Au),this.root.push(r)}}}class Iu extends w{constructor(){super("w:continuationSeparator")}}class ku extends go{constructor(){super({}),this.root.push(new Iu)}}class Ru extends w{constructor(){super("w:separator")}}class Nu extends go{constructor(){super({}),this.root.push(new Ru)}}class Ou extends y{constructor(){super(...arguments),p(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"})}}class Cu extends w{constructor(){super("w:footnotes"),this.root.push(new Ou({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const e=new Su({id:-1,type:"separator",children:[new na({spacing:{after:0,line:240,lineRule:Zi.AUTO},children:[new Nu]})]});this.root.push(e);const t=new Su({id:0,type:"continuationSeparator",children:[new na({spacing:{after:0,line:240,lineRule:Zi.AUTO},children:[new ku]})]});this.root.push(t)}createFootNote(e,t){const r=new Su({id:e,children:t});this.root.push(r)}}class Du{constructor(){p(this,"footnotess"),p(this,"relationships"),this.footnotess=new Cu,this.relationships=new Ys}get View(){return this.footnotess}get Relationships(){return this.relationships}}class Lu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",w16cid:"xmlns:w16cid",w16se:"xmlns:w16se"})}}let Pu=class extends rn{constructor(e,t){super("w:hdr",t),p(this,"refId"),this.refId=e,t||this.root.push(new Lu({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex"}))}get ReferenceId(){return this.refId}add(e){this.root.push(e)}};class Bu{constructor(e,t,r){p(this,"header"),p(this,"relationships"),this.media=e,this.header=new Pu(t,r),this.relationships=new Ys}add(e){return this.header.add(e),this}addChildElement(e){this.header.addChildElement(e)}get View(){return this.header}get Relationships(){return this.relationships}get Media(){return this.media}}class Fu{constructor(){p(this,"map"),this.map=new Map}addImage(e,t){this.map.set(e,t)}get Array(){return Array.from(this.map.values())}}const Uu={DECIMAL:"decimal",UPPER_ROMAN:"upperRoman",LOWER_ROMAN:"lowerRoman",UPPER_LETTER:"upperLetter",LOWER_LETTER:"lowerLetter",ORDINAL:"ordinal",CARDINAL_TEXT:"cardinalText",ORDINAL_TEXT:"ordinalText",HEX:"hex",CHICAGO:"chicago",IDEOGRAPH__DIGITAL:"ideographDigital",JAPANESE_COUNTING:"japaneseCounting",AIUEO:"aiueo",IROHA:"iroha",DECIMAL_FULL_WIDTH:"decimalFullWidth",DECIMAL_HALF_WIDTH:"decimalHalfWidth",JAPANESE_LEGAL:"japaneseLegal",JAPANESE_DIGITAL_TEN_THOUSAND:"japaneseDigitalTenThousand",DECIMAL_ENCLOSED_CIRCLE:"decimalEnclosedCircle",DECIMAL_FULL_WIDTH2:"decimalFullWidth2",AIUEO_FULL_WIDTH:"aiueoFullWidth",IROHA_FULL_WIDTH:"irohaFullWidth",DECIMAL_ZERO:"decimalZero",BULLET:"bullet",GANADA:"ganada",CHOSUNG:"chosung",DECIMAL_ENCLOSED_FULLSTOP:"decimalEnclosedFullstop",DECIMAL_ENCLOSED_PARENTHESES:"decimalEnclosedParen",DECIMAL_ENCLOSED_CIRCLE_CHINESE:"decimalEnclosedCircleChinese",IDEOGRAPH_ENCLOSED_CIRCLE:"ideographEnclosedCircle",IDEOGRAPH_TRADITIONAL:"ideographTraditional",IDEOGRAPH_ZODIAC:"ideographZodiac",IDEOGRAPH_ZODIAC_TRADITIONAL:"ideographZodiacTraditional",TAIWANESE_COUNTING:"taiwaneseCounting",IDEOGRAPH_LEGAL_TRADITIONAL:"ideographLegalTraditional",TAIWANESE_COUNTING_THOUSAND:"taiwaneseCountingThousand",TAIWANESE_DIGITAL:"taiwaneseDigital",CHINESE_COUNTING:"chineseCounting",CHINESE_LEGAL_SIMPLIFIED:"chineseLegalSimplified",CHINESE_COUNTING_THOUSAND:"chineseCountingThousand",KOREAN_DIGITAL:"koreanDigital",KOREAN_COUNTING:"koreanCounting",KOREAN_LEGAL:"koreanLegal",KOREAN_DIGITAL2:"koreanDigital2",VIETNAMESE_COUNTING:"vietnameseCounting",RUSSIAN_LOWER:"russianLower",RUSSIAN_UPPER:"russianUpper",NONE:"none",NUMBER_IN_DASH:"numberInDash",HEBREW1:"hebrew1",HEBREW2:"hebrew2",ARABIC_ALPHA:"arabicAlpha",ARABIC_ABJAD:"arabicAbjad",HINDI_VOWELS:"hindiVowels",HINDI_CONSONANTS:"hindiConsonants",HINDI_NUMBERS:"hindiNumbers",HINDI_COUNTING:"hindiCounting",THAI_LETTERS:"thaiLetters",THAI_NUMBERS:"thaiNumbers",THAI_COUNTING:"thaiCounting",BAHT_TEXT:"bahtText",DOLLAR_TEXT:"dollarText",CUSTOM:"custom"};class Mu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{ilvl:"w:ilvl",tentative:"w15:tentative"})}}class ju extends w{constructor(e){super("w:numFmt"),this.root.push(new v({val:e}))}}class Hu extends w{constructor(e){super("w:lvlText"),this.root.push(new v({val:e}))}}class zu extends w{constructor(e){super("w:lvlJc"),this.root.push(new v({val:e}))}}class Wu extends w{constructor(e){super("w:suff"),this.root.push(new v({val:e}))}}class Gu extends w{constructor(){super("w:isLgl")}}class Ku extends w{constructor({level:e,format:t,text:r,alignment:n=Rn.START,start:o=1,style:i,suffix:s,isLegalNumberingStyle:a}){if(super("w:lvl"),p(this,"paragraphProperties"),p(this,"runProperties"),this.root.push(new An("w:start",nn(o))),t&&this.root.push(new ju(t)),s&&this.root.push(new Wu(s)),a&&this.root.push(new Gu),r&&this.root.push(new Hu(r)),this.root.push(new zu(n)),this.paragraphProperties=new ra(i&&i.paragraph),this.runProperties=new po(i&&i.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),e>9)throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");this.root.push(new Mu({ilvl:nn(e),tentative:1}))}}class Vu extends Ku{}class $u extends w{constructor(e){super("w:multiLevelType"),this.root.push(new v({val:e}))}}class Xu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{abstractNumId:"w:abstractNumId",restartNumberingAfterBreak:"w15:restartNumberingAfterBreak"})}}class qu extends w{constructor(e,t){super("w:abstractNum"),p(this,"id"),this.root.push(new Xu({abstractNumId:nn(e),restartNumberingAfterBreak:0})),this.root.push(new $u("hybridMultilevel")),this.id=e;for(const e of t)this.root.push(new Vu(e))}}class Zu extends w{constructor(e){super("w:abstractNumId"),this.root.push(new v({val:e}))}}class Yu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{numId:"w:numId"})}}class Ju extends w{constructor(e){if(super("w:num"),p(this,"numId"),p(this,"reference"),p(this,"instance"),this.numId=e.numId,this.reference=e.reference,this.instance=e.instance,this.root.push(new Yu({numId:nn(e.numId)})),this.root.push(new Zu(nn(e.abstractNumId))),e.overrideLevels&&e.overrideLevels.length)for(const t of e.overrideLevels)this.root.push(new ec(t.num,t.start))}}class Qu extends y{constructor(){super(...arguments),p(this,"xmlKeys",{ilvl:"w:ilvl"})}}class ec extends w{constructor(e,t){super("w:lvlOverride"),this.root.push(new Qu({ilvl:e})),void 0!==t&&this.root.push(new rc(t))}}class tc extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class rc extends w{constructor(e){super("w:startOverride"),this.root.push(new tc({val:e}))}}class nc extends w{constructor(e){super("w:numbering"),p(this,"abstractNumberingMap",new Map),p(this,"concreteNumberingMap",new Map),p(this,"referenceConfigMap",new Map),p(this,"abstractNumUniqueNumericId",To()),p(this,"concreteNumUniqueNumericId",Ao()),this.root.push(new Vs({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const t=new qu(this.abstractNumUniqueNumericId(),[{level:0,format:Uu.BULLET,text:"●",alignment:Rn.LEFT,style:{paragraph:{indent:{left:Eo(.5),hanging:Eo(.25)}}}},{level:1,format:Uu.BULLET,text:"○",alignment:Rn.LEFT,style:{paragraph:{indent:{left:Eo(1),hanging:Eo(.25)}}}},{level:2,format:Uu.BULLET,text:"■",alignment:Rn.LEFT,style:{paragraph:{indent:{left:2160,hanging:Eo(.25)}}}},{level:3,format:Uu.BULLET,text:"●",alignment:Rn.LEFT,style:{paragraph:{indent:{left:2880,hanging:Eo(.25)}}}},{level:4,format:Uu.BULLET,text:"○",alignment:Rn.LEFT,style:{paragraph:{indent:{left:3600,hanging:Eo(.25)}}}},{level:5,format:Uu.BULLET,text:"■",alignment:Rn.LEFT,style:{paragraph:{indent:{left:4320,hanging:Eo(.25)}}}},{level:6,format:Uu.BULLET,text:"●",alignment:Rn.LEFT,style:{paragraph:{indent:{left:5040,hanging:Eo(.25)}}}},{level:7,format:Uu.BULLET,text:"●",alignment:Rn.LEFT,style:{paragraph:{indent:{left:5760,hanging:Eo(.25)}}}},{level:8,format:Uu.BULLET,text:"●",alignment:Rn.LEFT,style:{paragraph:{indent:{left:6480,hanging:Eo(.25)}}}}]);this.concreteNumberingMap.set("default-bullet-numbering",new Ju({numId:1,abstractNumId:t.id,reference:"default-bullet-numbering",instance:0,overrideLevels:[{num:0,start:1}]})),this.abstractNumberingMap.set("default-bullet-numbering",t);for(const t of e.config)this.abstractNumberingMap.set(t.reference,new qu(this.abstractNumUniqueNumericId(),t.levels)),this.referenceConfigMap.set(t.reference,t.levels)}prepForXml(e){for(const e of this.abstractNumberingMap.values())this.root.push(e);for(const e of this.concreteNumberingMap.values())this.root.push(e);return super.prepForXml(e)}createConcreteNumberingInstance(e,t){const r=this.abstractNumberingMap.get(e);if(!r)return;const n=`${e}-${t}`;if(this.concreteNumberingMap.has(n))return;const o=this.referenceConfigMap.get(e),i=o&&o[0].start,s={numId:this.concreteNumUniqueNumericId(),abstractNumId:r.id,reference:e,instance:t,overrideLevels:[i&&Number.isInteger(i)?{num:0,start:i}:{num:0,start:1}]};this.concreteNumberingMap.set(n,new Ju(s))}get ConcreteNumbering(){return Array.from(this.concreteNumberingMap.values())}get ReferenceConfig(){return Array.from(this.referenceConfigMap.values())}}class oc extends y{constructor(){super(...arguments),p(this,"xmlKeys",{version:"w:val",name:"w:name",uri:"w:uri"})}}class ic extends w{constructor(e){super("w:compatSetting"),this.root.push(new oc({version:e,uri:"http://schemas.microsoft.com/office/word",name:"compatibilityMode"}))}}class sc extends w{constructor(e){super("w:compat"),e.version&&this.root.push(new ic(e.version)),e.useSingleBorderforContiguousCells&&this.root.push(new vn("w:useSingleBorderforContiguousCells",e.useSingleBorderforContiguousCells)),e.wordPerfectJustification&&this.root.push(new vn("w:wpJustification",e.wordPerfectJustification)),e.noTabStopForHangingIndent&&this.root.push(new vn("w:noTabHangInd",e.noTabStopForHangingIndent)),e.noLeading&&this.root.push(new vn("w:noLeading",e.noLeading)),e.spaceForUnderline&&this.root.push(new vn("w:spaceForUL",e.spaceForUnderline)),e.noColumnBalance&&this.root.push(new vn("w:noColumnBalance",e.noColumnBalance)),e.balanceSingleByteDoubleByteWidth&&this.root.push(new vn("w:balanceSingleByteDoubleByteWidth",e.balanceSingleByteDoubleByteWidth)),e.noExtraLineSpacing&&this.root.push(new vn("w:noExtraLineSpacing",e.noExtraLineSpacing)),e.doNotLeaveBackslashAlone&&this.root.push(new vn("w:doNotLeaveBackslashAlone",e.doNotLeaveBackslashAlone)),e.underlineTrailingSpaces&&this.root.push(new vn("w:ulTrailSpace",e.underlineTrailingSpaces)),e.doNotExpandShiftReturn&&this.root.push(new vn("w:doNotExpandShiftReturn",e.doNotExpandShiftReturn)),e.spacingInWholePoints&&this.root.push(new vn("w:spacingInWholePoints",e.spacingInWholePoints)),e.lineWrapLikeWord6&&this.root.push(new vn("w:lineWrapLikeWord6",e.lineWrapLikeWord6)),e.printBodyTextBeforeHeader&&this.root.push(new vn("w:printBodyTextBeforeHeader",e.printBodyTextBeforeHeader)),e.printColorsBlack&&this.root.push(new vn("w:printColBlack",e.printColorsBlack)),e.spaceWidth&&this.root.push(new vn("w:wpSpaceWidth",e.spaceWidth)),e.showBreaksInFrames&&this.root.push(new vn("w:showBreaksInFrames",e.showBreaksInFrames)),e.subFontBySize&&this.root.push(new vn("w:subFontBySize",e.subFontBySize)),e.suppressBottomSpacing&&this.root.push(new vn("w:suppressBottomSpacing",e.suppressBottomSpacing)),e.suppressTopSpacing&&this.root.push(new vn("w:suppressTopSpacing",e.suppressTopSpacing)),e.suppressSpacingAtTopOfPage&&this.root.push(new vn("w:suppressSpacingAtTopOfPage",e.suppressSpacingAtTopOfPage)),e.suppressTopSpacingWP&&this.root.push(new vn("w:suppressTopSpacingWP",e.suppressTopSpacingWP)),e.suppressSpBfAfterPgBrk&&this.root.push(new vn("w:suppressSpBfAfterPgBrk",e.suppressSpBfAfterPgBrk)),e.swapBordersFacingPages&&this.root.push(new vn("w:swapBordersFacingPages",e.swapBordersFacingPages)),e.convertMailMergeEsc&&this.root.push(new vn("w:convMailMergeEsc",e.convertMailMergeEsc)),e.truncateFontHeightsLikeWP6&&this.root.push(new vn("w:truncateFontHeightsLikeWP6",e.truncateFontHeightsLikeWP6)),e.macWordSmallCaps&&this.root.push(new vn("w:mwSmallCaps",e.macWordSmallCaps)),e.usePrinterMetrics&&this.root.push(new vn("w:usePrinterMetrics",e.usePrinterMetrics)),e.doNotSuppressParagraphBorders&&this.root.push(new vn("w:doNotSuppressParagraphBorders",e.doNotSuppressParagraphBorders)),e.wrapTrailSpaces&&this.root.push(new vn("w:wrapTrailSpaces",e.wrapTrailSpaces)),e.footnoteLayoutLikeWW8&&this.root.push(new vn("w:footnoteLayoutLikeWW8",e.footnoteLayoutLikeWW8)),e.shapeLayoutLikeWW8&&this.root.push(new vn("w:shapeLayoutLikeWW8",e.shapeLayoutLikeWW8)),e.alignTablesRowByRow&&this.root.push(new vn("w:alignTablesRowByRow",e.alignTablesRowByRow)),e.forgetLastTabAlignment&&this.root.push(new vn("w:forgetLastTabAlignment",e.forgetLastTabAlignment)),e.adjustLineHeightInTable&&this.root.push(new vn("w:adjustLineHeightInTable",e.adjustLineHeightInTable)),e.autoSpaceLikeWord95&&this.root.push(new vn("w:autoSpaceLikeWord95",e.autoSpaceLikeWord95)),e.noSpaceRaiseLower&&this.root.push(new vn("w:noSpaceRaiseLower",e.noSpaceRaiseLower)),e.doNotUseHTMLParagraphAutoSpacing&&this.root.push(new vn("w:doNotUseHTMLParagraphAutoSpacing",e.doNotUseHTMLParagraphAutoSpacing)),e.layoutRawTableWidth&&this.root.push(new vn("w:layoutRawTableWidth",e.layoutRawTableWidth)),e.layoutTableRowsApart&&this.root.push(new vn("w:layoutTableRowsApart",e.layoutTableRowsApart)),e.useWord97LineBreakRules&&this.root.push(new vn("w:useWord97LineBreakRules",e.useWord97LineBreakRules)),e.doNotBreakWrappedTables&&this.root.push(new vn("w:doNotBreakWrappedTables",e.doNotBreakWrappedTables)),e.doNotSnapToGridInCell&&this.root.push(new vn("w:doNotSnapToGridInCell",e.doNotSnapToGridInCell)),e.selectFieldWithFirstOrLastCharacter&&this.root.push(new vn("w:selectFldWithFirstOrLastChar",e.selectFieldWithFirstOrLastCharacter)),e.applyBreakingRules&&this.root.push(new vn("w:applyBreakingRules",e.applyBreakingRules)),e.doNotWrapTextWithPunctuation&&this.root.push(new vn("w:doNotWrapTextWithPunct",e.doNotWrapTextWithPunctuation)),e.doNotUseEastAsianBreakRules&&this.root.push(new vn("w:doNotUseEastAsianBreakRules",e.doNotUseEastAsianBreakRules)),e.useWord2002TableStyleRules&&this.root.push(new vn("w:useWord2002TableStyleRules",e.useWord2002TableStyleRules)),e.growAutofit&&this.root.push(new vn("w:growAutofit",e.growAutofit)),e.useFELayout&&this.root.push(new vn("w:useFELayout",e.useFELayout)),e.useNormalStyleForList&&this.root.push(new vn("w:useNormalStyleForList",e.useNormalStyleForList)),e.doNotUseIndentAsNumberingTabStop&&this.root.push(new vn("w:doNotUseIndentAsNumberingTabStop",e.doNotUseIndentAsNumberingTabStop)),e.useAlternateEastAsianLineBreakRules&&this.root.push(new vn("w:useAltKinsokuLineBreakRules",e.useAlternateEastAsianLineBreakRules)),e.allowSpaceOfSameStyleInTable&&this.root.push(new vn("w:allowSpaceOfSameStyleInTable",e.allowSpaceOfSameStyleInTable)),e.doNotSuppressIndentation&&this.root.push(new vn("w:doNotSuppressIndentation",e.doNotSuppressIndentation)),e.doNotAutofitConstrainedTables&&this.root.push(new vn("w:doNotAutofitConstrainedTables",e.doNotAutofitConstrainedTables)),e.autofitToFirstFixedWidthCell&&this.root.push(new vn("w:autofitToFirstFixedWidthCell",e.autofitToFirstFixedWidthCell)),e.underlineTabInNumberingList&&this.root.push(new vn("w:underlineTabInNumList",e.underlineTabInNumberingList)),e.displayHangulFixedWidth&&this.root.push(new vn("w:displayHangulFixedWidth",e.displayHangulFixedWidth)),e.splitPgBreakAndParaMark&&this.root.push(new vn("w:splitPgBreakAndParaMark",e.splitPgBreakAndParaMark)),e.doNotVerticallyAlignCellWithSp&&this.root.push(new vn("w:doNotVertAlignCellWithSp",e.doNotVerticallyAlignCellWithSp)),e.doNotBreakConstrainedForcedTable&&this.root.push(new vn("w:doNotBreakConstrainedForcedTable",e.doNotBreakConstrainedForcedTable)),e.ignoreVerticalAlignmentInTextboxes&&this.root.push(new vn("w:doNotVertAlignInTxbx",e.ignoreVerticalAlignmentInTextboxes)),e.useAnsiKerningPairs&&this.root.push(new vn("w:useAnsiKerningPairs",e.useAnsiKerningPairs)),e.cachedColumnBalance&&this.root.push(new vn("w:cachedColBalance",e.cachedColumnBalance))}}class ac extends y{constructor(){super(...arguments),p(this,"xmlKeys",{wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"})}}class uc extends w{constructor(e){var t,r,n,o;super("w:settings"),this.root.push(new ac({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.root.push(new vn("w:displayBackgroundShape",!0)),void 0!==e.trackRevisions&&this.root.push(new vn("w:trackRevisions",e.trackRevisions)),void 0!==e.evenAndOddHeaders&&this.root.push(new vn("w:evenAndOddHeaders",e.evenAndOddHeaders)),void 0!==e.updateFields&&this.root.push(new vn("w:updateFields",e.updateFields)),void 0!==e.defaultTabStop&&this.root.push(new An("w:defaultTabStop",e.defaultTabStop)),this.root.push(new sc(h(l({},null!=(t=e.compatibility)?t:{}),{version:null!=(o=null!=(n=null==(r=e.compatibility)?void 0:r.version)?n:e.compatibilityModeVersion)?o:15})))}}class cc extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w:val"})}}class lc extends w{constructor(e){super("w:name"),this.root.push(new cc({val:e}))}}class hc extends w{constructor(e){super("w:uiPriority"),this.root.push(new cc({val:nn(e)}))}}class pc extends y{constructor(){super(...arguments),p(this,"xmlKeys",{type:"w:type",styleId:"w:styleId",default:"w:default",customStyle:"w:customStyle"})}}class fc extends w{constructor(e,t){super("w:style"),this.root.push(new pc(e)),t.name&&this.root.push(new lc(t.name)),t.basedOn&&this.root.push(new _n("w:basedOn",t.basedOn)),t.next&&this.root.push(new _n("w:next",t.next)),t.link&&this.root.push(new _n("w:link",t.link)),void 0!==t.uiPriority&&this.root.push(new hc(t.uiPriority)),void 0!==t.semiHidden&&this.root.push(new vn("w:semiHidden",t.semiHidden)),void 0!==t.unhideWhenUsed&&this.root.push(new vn("w:unhideWhenUsed",t.unhideWhenUsed)),void 0!==t.quickFormat&&this.root.push(new vn("w:qFormat",t.quickFormat))}}class dc extends fc{constructor(e){super({type:"paragraph",styleId:e.id},e),p(this,"paragraphProperties"),p(this,"runProperties"),this.paragraphProperties=new ra(e.paragraph),this.runProperties=new po(e.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties)}}class mc extends fc{constructor(e){super({type:"character",styleId:e.id},l({uiPriority:99,unhideWhenUsed:!0},e)),p(this,"runProperties"),this.runProperties=new po(e.run),this.root.push(this.runProperties)}}class wc extends dc{constructor(e){super(l({basedOn:"Normal",next:"Normal",quickFormat:!0},e))}}class gc extends wc{constructor(e){super(l({id:"Title",name:"Title"},e))}}class yc extends wc{constructor(e){super(l({id:"Heading1",name:"Heading 1"},e))}}class bc extends wc{constructor(e){super(l({id:"Heading2",name:"Heading 2"},e))}}class vc extends wc{constructor(e){super(l({id:"Heading3",name:"Heading 3"},e))}}class xc extends wc{constructor(e){super(l({id:"Heading4",name:"Heading 4"},e))}}class Ec extends wc{constructor(e){super(l({id:"Heading5",name:"Heading 5"},e))}}class _c extends wc{constructor(e){super(l({id:"Heading6",name:"Heading 6"},e))}}class Tc extends wc{constructor(e){super(l({id:"Strong",name:"Strong"},e))}}class Ac extends dc{constructor(e){super(l({id:"ListParagraph",name:"List Paragraph",basedOn:"Normal",quickFormat:!0},e))}}class Sc extends dc{constructor(e){super(l({id:"FootnoteText",name:"footnote text",link:"FootnoteTextChar",basedOn:"Normal",uiPriority:99,semiHidden:!0,unhideWhenUsed:!0,paragraph:{spacing:{after:0,line:240,lineRule:Zi.AUTO}},run:{size:20}},e))}}class Ic extends mc{constructor(e){super(l({id:"FootnoteReference",name:"footnote reference",basedOn:"DefaultParagraphFont",semiHidden:!0,run:{superScript:!0}},e))}}class kc extends mc{constructor(e){super(l({id:"FootnoteTextChar",name:"Footnote Text Char",basedOn:"DefaultParagraphFont",link:"FootnoteText",semiHidden:!0,run:{size:20}},e))}}class Rc extends mc{constructor(e){super(l({id:"Hyperlink",name:"Hyperlink",basedOn:"DefaultParagraphFont",run:{color:"0563C1",underline:{type:lo.SINGLE}}},e))}}class Nc extends w{constructor(e){if(super("w:styles"),e.initialStyles&&this.root.push(e.initialStyles),e.importedStyles)for(const t of e.importedStyles)this.root.push(t);if(e.paragraphStyles)for(const t of e.paragraphStyles)this.root.push(new dc(t));if(e.characterStyles)for(const t of e.characterStyles)this.root.push(new mc(t))}}class Oc extends w{constructor(e){super("w:pPrDefault"),this.root.push(new ra(e))}}class Cc extends w{constructor(e){super("w:rPrDefault"),this.root.push(new po(e))}}class Dc extends w{constructor(e){super("w:docDefaults"),p(this,"runPropertiesDefaults"),p(this,"paragraphPropertiesDefaults"),this.runPropertiesDefaults=new Cc(e.run),this.paragraphPropertiesDefaults=new Oc(e.paragraph),this.root.push(this.runPropertiesDefaults),this.root.push(this.paragraphPropertiesDefaults)}}class Lc{newInstance(e){const t=Zr(e,{compact:!1});let r;for(const e of t.elements||[])"w:styles"===e.name&&(r=e);if(void 0===r)throw new Error("can not find styles element");const n=r.elements||[];return new Nc({initialStyles:new tn(r.attributes),importedStyles:n.map((e=>Jr(e)))})}}class Pc{newInstance(e={}){var t;return{initialStyles:new Vs({mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",Ignorable:"w14 w15"}),importedStyles:[new Dc(null!=(t=e.document)?t:{}),new gc(l({run:{size:56}},e.title)),new yc(l({run:{color:"2E74B5",size:32}},e.heading1)),new bc(l({run:{color:"2E74B5",size:26}},e.heading2)),new vc(l({run:{color:"1F4D78",size:24}},e.heading3)),new xc(l({run:{color:"2E74B5",italics:!0}},e.heading4)),new Ec(l({run:{color:"2E74B5"}},e.heading5)),new _c(l({run:{color:"1F4D78"}},e.heading6)),new Tc(l({run:{bold:!0}},e.strong)),new Ac(e.listParagraph||{}),new Rc(e.hyperlink||{}),new Ic(e.footnoteReference||{}),new Sc(e.footnoteText||{}),new kc(e.footnoteTextChar||{})]}}}const Bc=({id:e,fontKey:t,subsetted:r},n)=>new kn({name:n,attributes:l({id:{key:"r:id",value:e}},t?{fontKey:{key:"w:fontKey",value:`{${t}}`}}:{}),children:[...r?[new vn("w:subsetted",r)]:[]]});class Fc{constructor(e){var t;p(this,"fontTable"),p(this,"relationships"),p(this,"fontOptionsWithKey",[]),this.options=e,this.fontOptionsWithKey=e.map((e=>h(l({},e),{fontKey:No()}))),this.fontTable=(t=this.fontOptionsWithKey,new kn({name:"w:fonts",attributes:{mc:{key:"xmlns:mc",value:"http://schemas.openxmlformats.org/markup-compatibility/2006"},r:{key:"xmlns:r",value:"http://schemas.openxmlformats.org/officeDocument/2006/relationships"},w:{key:"xmlns:w",value:"http://schemas.openxmlformats.org/wordprocessingml/2006/main"},w14:{key:"xmlns:w14",value:"http://schemas.microsoft.com/office/word/2010/wordml"},w15:{key:"xmlns:w15",value:"http://schemas.microsoft.com/office/word/2012/wordml"},w16cex:{key:"xmlns:w16cex",value:"http://schemas.microsoft.com/office/word/2018/wordml/cex"},w16cid:{key:"xmlns:w16cid",value:"http://schemas.microsoft.com/office/word/2016/wordml/cid"},w16:{key:"xmlns:w16",value:"http://schemas.microsoft.com/office/word/2018/wordml"},w16sdtdh:{key:"xmlns:w16sdtdh",value:"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash"},w16se:{key:"xmlns:w16se",value:"http://schemas.microsoft.com/office/word/2015/wordml/symex"},Ignorable:{key:"mc:Ignorable",value:"w14 w15 w16se w16cid w16 w16cex w16sdtdh"}},children:t.map(((e,t)=>(({name:e,index:t,fontKey:r,characterSet:n})=>(({name:e,altName:t,panose1:r,charset:n,family:o,notTrueType:i,pitch:s,sig:a,embedRegular:u,embedBold:c,embedItalic:l,embedBoldItalic:h})=>new kn({name:"w:font",attributes:{name:{key:"w:name",value:e}},children:[...t?[Tn("w:altName",t)]:[],...r?[Tn("w:panose1",r)]:[],...n?[Tn("w:charset",n)]:[],...o?[Tn("w:family",o)]:[],...i?[new vn("w:notTrueType",i)]:[],...s?[Tn("w:pitch",s)]:[],...a?[new kn({name:"w:sig",attributes:{usb0:{key:"w:usb0",value:a.usb0},usb1:{key:"w:usb1",value:a.usb1},usb2:{key:"w:usb2",value:a.usb2},usb3:{key:"w:usb3",value:a.usb3},csb0:{key:"w:csb0",value:a.csb0},csb1:{key:"w:csb1",value:a.csb1}}})]:[],...u?[Bc(u,"w:embedRegular")]:[],...c?[Bc(c,"w:embedBold")]:[],...l?[Bc(l,"w:embedItalic")]:[],...h?[Bc(h,"w:embedBoldItalic")]:[]]}))({name:e,sig:{usb0:"E0002AFF",usb1:"C000247B",usb2:"00000009",usb3:"00000000",csb0:"000001FF",csb1:"00000000"},charset:n,family:"auto",pitch:"variable",embedRegular:{fontKey:r,id:`rId${t}`}}))({name:e.name,index:t+1,fontKey:e.fontKey})))})),this.relationships=new Ys;for(let t=0;t<e.length;t++)this.relationships.createRelationship(t+1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/font",`fonts/${e[t].name}.odttf`)}get View(){return this.fontTable}get Relationships(){return this.relationships}}class Uc{constructor(e){var t,r,n,o,i,s,a,u;if(p(this,"currentRelationshipId",1),p(this,"documentWrapper"),p(this,"headers",[]),p(this,"footers",[]),p(this,"coreProperties"),p(this,"numbering"),p(this,"media"),p(this,"fileRelationships"),p(this,"footnotesWrapper"),p(this,"settings"),p(this,"contentTypes"),p(this,"customProperties"),p(this,"appProperties"),p(this,"styles"),p(this,"comments"),p(this,"fontWrapper"),this.coreProperties=new fu(h(l({},e),{creator:null!=(t=e.creator)?t:"Un-named",revision:null!=(r=e.revision)?r:1,lastModifiedBy:null!=(n=e.lastModifiedBy)?n:"Un-named"})),this.numbering=new nc(e.numbering?e.numbering:{config:[]}),this.comments=new $i(null!=(o=e.comments)?o:{children:[]}),this.fileRelationships=new Ys,this.customProperties=new bu(null!=(i=e.customProperties)?i:[]),this.appProperties=new su,this.footnotesWrapper=new Du,this.contentTypes=new pu,this.documentWrapper=new Js({background:e.background}),this.settings=new uc({compatibilityModeVersion:e.compatabilityModeVersion,compatibility:e.compatibility,evenAndOddHeaders:!!e.evenAndOddHeaderAndFooters,trackRevisions:null==(s=e.features)?void 0:s.trackRevisions,updateFields:null==(a=e.features)?void 0:a.updateFields,defaultTabStop:e.defaultTabStop}),this.media=new Fu,e.externalStyles){const t=new Lc;this.styles=t.newInstance(e.externalStyles)}else if(e.styles){const t=(new Pc).newInstance(e.styles.default);this.styles=new Nc(l(l({},t),e.styles))}else{const e=new Pc;this.styles=new Nc(e.newInstance())}this.addDefaultRelationships();for(const t of e.sections)this.addSection(t);if(e.footnotes)for(const t in e.footnotes)this.footnotesWrapper.View.createFootNote(parseFloat(t),e.footnotes[t].children);this.fontWrapper=new Fc(null!=(u=e.fonts)?u:[])}addSection({headers:e={},footers:t={},children:r,properties:n}){this.documentWrapper.View.Body.addSection(h(l({},n),{headerWrapperGroup:{default:e.default?this.createHeader(e.default):void 0,first:e.first?this.createHeader(e.first):void 0,even:e.even?this.createHeader(e.even):void 0},footerWrapperGroup:{default:t.default?this.createFooter(t.default):void 0,first:t.first?this.createFooter(t.first):void 0,even:t.even?this.createFooter(t.even):void 0}}));for(const e of r)this.documentWrapper.View.add(e)}createHeader(e){const t=new Bu(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addHeaderToDocument(t),t}createFooter(e){const t=new Eu(this.media,this.currentRelationshipId++);for(const r of e.options.children)t.add(r);return this.addFooterToDocument(t),t}addHeaderToDocument(e,t=_s.DEFAULT){this.headers.push({header:e,type:t}),this.documentWrapper.Relationships.createRelationship(e.View.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header",`header${this.headers.length}.xml`),this.contentTypes.addHeader(this.headers.length)}addFooterToDocument(e,t=_s.DEFAULT){this.footers.push({footer:e,type:t}),this.documentWrapper.Relationships.createRelationship(e.View.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer",`footer${this.footers.length}.xml`),this.contentTypes.addFooter(this.footers.length)}addDefaultRelationships(){this.fileRelationships.createRelationship(1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument","word/document.xml"),this.fileRelationships.createRelationship(2,"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties","docProps/core.xml"),this.fileRelationships.createRelationship(3,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties","docProps/app.xml"),this.fileRelationships.createRelationship(4,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties","docProps/custom.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles","styles.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering","numbering.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes","footnotes.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings","settings.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments","comments.xml")}get Document(){return this.documentWrapper}get Styles(){return this.styles}get CoreProperties(){return this.coreProperties}get Numbering(){return this.numbering}get Media(){return this.media}get FileRelationships(){return this.fileRelationships}get Headers(){return this.headers.map((e=>e.header))}get Footers(){return this.footers.map((e=>e.footer))}get ContentTypes(){return this.contentTypes}get CustomProperties(){return this.customProperties}get AppProperties(){return this.appProperties}get FootNotes(){return this.footnotesWrapper}get Settings(){return this.settings}get Comments(){return this.comments}get FontTable(){return this.fontWrapper}}class Mc extends w{constructor(e={}){super("w:instrText"),p(this,"properties"),this.properties=e,this.root.push(new Gn({space:Wn.PRESERVE}));let t="TOC";this.properties.captionLabel&&(t=`${t} \\a "${this.properties.captionLabel}"`),this.properties.entriesFromBookmark&&(t=`${t} \\b "${this.properties.entriesFromBookmark}"`),this.properties.captionLabelIncludingNumbers&&(t=`${t} \\c "${this.properties.captionLabelIncludingNumbers}"`),this.properties.sequenceAndPageNumbersSeparator&&(t=`${t} \\d "${this.properties.sequenceAndPageNumbersSeparator}"`),this.properties.tcFieldIdentifier&&(t=`${t} \\f "${this.properties.tcFieldIdentifier}"`),this.properties.hyperlink&&(t=`${t} \\h`),this.properties.tcFieldLevelRange&&(t=`${t} \\l "${this.properties.tcFieldLevelRange}"`),this.properties.pageNumbersEntryLevelsRange&&(t=`${t} \\n "${this.properties.pageNumbersEntryLevelsRange}"`),this.properties.headingStyleRange&&(t=`${t} \\o "${this.properties.headingStyleRange}"`),this.properties.entryAndPageNumberSeparator&&(t=`${t} \\p "${this.properties.entryAndPageNumberSeparator}"`),this.properties.seqFieldIdentifierForPrefix&&(t=`${t} \\s "${this.properties.seqFieldIdentifierForPrefix}"`),this.properties.stylesWithLevels&&this.properties.stylesWithLevels.length&&(t=`${t} \\t "${this.properties.stylesWithLevels.map((e=>`${e.styleName},${e.level}`)).join(",")}"`),this.properties.useAppliedParagraphOutlineLevel&&(t=`${t} \\u`),this.properties.preserveTabInEntries&&(t=`${t} \\w`),this.properties.preserveNewLineInEntries&&(t=`${t} \\x`),this.properties.hideTabAndPageNumbersInWebView&&(t=`${t} \\z`),this.root.push(t)}}class jc extends w{constructor(){super("w:sdtContent")}}class Hc extends w{constructor(e){super("w:sdtPr"),e&&this.root.push(new _n("w:alias",e))}}class zc extends y{constructor(){super(...arguments),p(this,"xmlKeys",{id:"w:id"})}}class Wc extends w{constructor(e){super("w:footnoteReference"),this.root.push(new zc({id:e}))}}class Gc extends w{constructor(){super("w:delInstrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("PAGE")}}class Kc extends w{constructor(){super("w:delInstrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("NUMPAGES")}}class Vc extends w{constructor(){super("w:delInstrText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push("SECTIONPAGES")}}class $c extends w{constructor(e){super("w:delText"),this.root.push(new Gn({space:Wn.PRESERVE})),this.root.push(e)}}class Xc extends w{constructor(e){if(super("w:r"),this.root.push(new po(e)),e.children)for(const t of e.children)if("string"!=typeof t)this.root.push(t);else switch(t){case wo.CURRENT:this.root.push(new jn),this.root.push(new Gc),this.root.push(new Hn),this.root.push(new zn);break;case wo.TOTAL_PAGES:this.root.push(new jn),this.root.push(new Kc),this.root.push(new Hn),this.root.push(new zn);break;case wo.TOTAL_PAGES_IN_SECTION:this.root.push(new jn),this.root.push(new Vc),this.root.push(new Hn),this.root.push(new zn);break;default:this.root.push(new $c(t))}else e.text&&this.root.push(new $c(e.text));if(e.break)for(let t=0;t<e.break;t++)this.root.splice(1,0,new Un)}}class qc extends y{constructor(){super(...arguments),p(this,"xmlKeys",{val:"w14:val",symbolfont:"w14:font"})}}class Zc extends w{constructor(e,t,r){super(e),r?this.root.push(new qc({val:an(t),symbolfont:r})):this.root.push(new qc({val:t}))}}class Yc extends w{constructor(e){var t,r,n,o,i,s,a,u;super("w14:checkbox"),p(this,"DEFAULT_UNCHECKED_SYMBOL","2610"),p(this,"DEFAULT_CHECKED_SYMBOL","2612"),p(this,"DEFAULT_FONT","MS Gothic");const c=(null==e?void 0:e.checked)?"1":"0";let l,h;this.root.push(new Zc("w14:checked",c)),l=(null==(t=null==e?void 0:e.checkedState)?void 0:t.value)?null==(r=null==e?void 0:e.checkedState)?void 0:r.value:this.DEFAULT_CHECKED_SYMBOL,h=(null==(n=null==e?void 0:e.checkedState)?void 0:n.font)?null==(o=null==e?void 0:e.checkedState)?void 0:o.font:this.DEFAULT_FONT,this.root.push(new Zc("w14:checkedState",l,h)),l=(null==(i=null==e?void 0:e.uncheckedState)?void 0:i.value)?null==(s=null==e?void 0:e.uncheckedState)?void 0:s.value:this.DEFAULT_UNCHECKED_SYMBOL,h=(null==(a=null==e?void 0:e.uncheckedState)?void 0:a.font)?null==(u=null==e?void 0:e.uncheckedState)?void 0:u.font:this.DEFAULT_FONT,this.root.push(new Zc("w14:uncheckedState",l,h))}}function Jc(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Qc={exports:{}};Qc.exports=function e(t,r,n){function o(s,a){if(!r[s]){if(!t[s]){if(!a&&Jc)return Jc(s);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[s]={exports:{}};t[s][0].call(c.exports,(function(e){return o(t[s][1][e]||e)}),c,c.exports,e,t,r,n)}return r[s].exports}for(var i=Jc,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,r){var n=e("./utils"),o=e("./support"),i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,o,s,a,u,c,l=[],h=0,p=e.length,f=p,d="string"!==n.getTypeOf(e);h<e.length;)f=p-h,o=d?(t=e[h++],r=h<p?e[h++]:0,h<p?e[h++]:0):(t=e.charCodeAt(h++),r=h<p?e.charCodeAt(h++):0,h<p?e.charCodeAt(h++):0),s=t>>2,a=(3&t)<<4|r>>4,u=1<f?(15&r)<<2|o>>6:64,c=2<f?63&o:64,l.push(i.charAt(s)+i.charAt(a)+i.charAt(u)+i.charAt(c));return l.join("")},r.decode=function(e){var t,r,n,s,a,u,c=0,l=0,h="data:";if(e.substr(0,5)===h)throw new Error("Invalid base64 input, it looks like a data url.");var p,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===i.charAt(64)&&f--,e.charAt(e.length-2)===i.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(p=o.uint8array?new Uint8Array(0|f):new Array(0|f);c<e.length;)t=i.indexOf(e.charAt(c++))<<2|(s=i.indexOf(e.charAt(c++)))>>4,r=(15&s)<<4|(a=i.indexOf(e.charAt(c++)))>>2,n=(3&a)<<6|(u=i.indexOf(e.charAt(c++))),p[l++]=t,64!==a&&(p[l++]=r),64!==u&&(p[l++]=n);return p}},{"./support":30,"./utils":32}],2:[function(e,t,r){var n=e("./external"),o=e("./stream/DataWorker"),i=e("./stream/Crc32Probe"),s=e("./stream/DataLengthProbe");function a(e,t,r,n,o){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=o}a.prototype={getContentWorker:function(){var e=new o(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new s("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new o(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(e,t,r){return e.pipe(new i).pipe(new s("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new s("compressedSize")).withStreamInfo("compression",t)},t.exports=a},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){var n=e("./utils"),o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=o,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t[s])];return~e}(0|t,e,e.length):function(e,t,r){var n=o,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t.charCodeAt(s))];return~e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,o=e("pako"),i=e("./utils"),s=e("./stream/GenericWorker"),a=n?"uint8array":"array";function u(e,t){s.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",i.inherits(u,s),u.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(i.transformTo(a,e.data),!1)},u.prototype.flush=function(){s.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new o[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(e){return new u("Deflate",e)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){function n(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function o(e,t,r,o,s,l){var h,p,f=e.file,d=e.compression,m=l!==a.utf8encode,w=i.transformTo("string",l(f.name)),g=i.transformTo("string",a.utf8encode(f.name)),y=f.comment,b=i.transformTo("string",l(y)),v=i.transformTo("string",a.utf8encode(y)),x=g.length!==f.name.length,E=v.length!==y.length,_="",T="",A="",S=f.dir,I=f.date,k={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(k.crc32=e.crc32,k.compressedSize=e.compressedSize,k.uncompressedSize=e.uncompressedSize);var R=0;t&&(R|=8),m||!x&&!E||(R|=2048);var N,O,C=0,D=0;S&&(C|=16),"UNIX"===s?(D=798,C|=(O=N=f.unixPermissions,N||(O=S?16893:33204),(65535&O)<<16)):(D=20,C|=function(e){return 63&(e||0)}(f.dosPermissions)),h=I.getUTCHours(),h<<=6,h|=I.getUTCMinutes(),h<<=5,h|=I.getUTCSeconds()/2,p=I.getUTCFullYear()-1980,p<<=4,p|=I.getUTCMonth()+1,p<<=5,p|=I.getUTCDate(),x&&(T=n(1,1)+n(u(w),4)+g,_+="up"+n(T.length,2)+T),E&&(A=n(1,1)+n(u(b),4)+v,_+="uc"+n(A.length,2)+A);var L="";return L+="\n\0",L+=n(R,2),L+=d.magic,L+=n(h,2),L+=n(p,2),L+=n(k.crc32,4),L+=n(k.compressedSize,4),L+=n(k.uncompressedSize,4),L+=n(w.length,2),L+=n(_.length,2),{fileRecord:c.LOCAL_FILE_HEADER+L+w+_,dirRecord:c.CENTRAL_FILE_HEADER+n(D,2)+L+n(b.length,2)+"\0\0\0\0"+n(C,4)+n(o,4)+w+_+b}}var i=e("../utils"),s=e("../stream/GenericWorker"),a=e("../utf8"),u=e("../crc32"),c=e("../signature");function l(e,t,r,n){s.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}i.inherits(l,s),l.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,s.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},l.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=o(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},l.prototype.closedSource=function(e){this.accumulate=!1;var t,r=this.streamFiles&&!e.file.dir,i=o(e,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(i.dirRecord),r)this.push({data:(t=e,c.DATA_DESCRIPTOR+n(t.crc32,4)+n(t.compressedSize,4)+n(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:i.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},l.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r,o,s,a,u,l,h=this.bytesWritten-e,p=(r=this.dirRecords.length,o=h,s=e,a=this.zipComment,u=this.encodeFileName,l=i.transformTo("string",u(a)),c.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(r,2)+n(r,2)+n(o,4)+n(s,4)+n(l.length,2)+l);this.push({data:p,meta:{percent:100}})},l.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},l.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},l.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},l.prototype.error=function(e){var t=this._sources;if(!s.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},l.prototype.lock=function(){s.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=l},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){var n=e("../compressions"),o=e("./ZipFileWorker");r.generateWorker=function(e,t,r){var i=new o(t.streamFiles,r,t.platform,t.encodeFileName),s=0;try{e.forEach((function(e,r){s++;var o=function(e,t){var r=e||t,o=n[r];if(!o)throw new Error(r+" is not a valid compression method !");return o}(r.options.compression,t.compression),a=r.options.compressionOptions||t.compressionOptions||{},u=r.dir,c=r.date;r._compressWorker(o,a).withStreamInfo("file",{name:e,dir:u,date:c,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(i)})),i.entriesCount=s}catch(e){i.error(e)}return i}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){var n=e("./utils"),o=e("./external"),i=e("./utf8"),s=e("./zipEntries"),a=e("./stream/Crc32Probe"),u=e("./nodejsUtils");function c(e){return new o.Promise((function(t,r){var n=e.decompressed.getContentWorker().pipe(new a);n.on("error",(function(e){r(e)})).on("end",(function(){n.streamInfo.crc32!==e.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var r=this;return t=n.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode}),u.isNode&&u.isStream(e)?o.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var r=new s(t);return r.load(e),r})).then((function(e){var r=[o.Promise.resolve(e)],n=e.files;if(t.checkCRC32)for(var i=0;i<n.length;i++)r.push(c(n[i]));return o.Promise.all(r)})).then((function(e){for(var o=e.shift(),i=o.files,s=0;s<i.length;s++){var a=i[s],u=a.fileNameStr,c=n.resolve(a.fileNameStr);r.file(c,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:t.createFolders}),a.dir||(r.file(c).unsafeOriginalName=u)}return o.zipComment.length&&(r.comment=o.zipComment),r}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){var n=e("../utils"),o=e("../stream/GenericWorker");function i(e,t){o.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(i,o),i.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},i.prototype.pause=function(){return!!o.prototype.pause.call(this)&&(this._stream.pause(),!0)},i.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=i},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){var n=e("readable-stream").Readable;function o(e,t,r){n.call(this,t),this._helper=e;var o=this;e.on("data",(function(e,t){o.push(e)||o._helper.pause(),r&&r(t)})).on("error",(function(e){o.emit("error",e)})).on("end",(function(){o.push(null)}))}e("../utils").inherits(o,n),o.prototype._read=function(){this._helper.resume()},t.exports=o},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){function n(e,t,r){var n,o=i.getTypeOf(t),a=i.extend(r||{},u);a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(e=m(e)),a.createFolders&&(n=d(e))&&w.call(this,n,!0);var h="string"===o&&!1===a.binary&&!1===a.base64;r&&void 0!==r.binary||(a.binary=!h),(t instanceof c&&0===t.uncompressedSize||a.dir||!t||0===t.length)&&(a.base64=!1,a.binary=!0,t="",a.compression="STORE",o="string");var g;g=t instanceof c||t instanceof s?t:p.isNode&&p.isStream(t)?new f(e,t):i.prepareContent(e,t,a.binary,a.optimizedBinaryString,a.base64);var y=new l(e,g,a);this.files[e]=y}var o=e("./utf8"),i=e("./utils"),s=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),u=e("./defaults"),c=e("./compressedObject"),l=e("./zipObject"),h=e("./generate"),p=e("./nodejsUtils"),f=e("./nodejs/NodejsStreamInputAdapter"),d=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},w=function(e,t){return t=void 0!==t?t:u.createFolders,e=m(e),this.files[e]||n.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function g(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(e){var t=[];return this.forEach((function(r,n){e(r,n)&&t.push(n)})),t},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,n.call(this,e,t,r),this;if(g(e)){var o=e;return this.filter((function(e,t){return!t.dir&&o.test(e)}))}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(e){if(!e)return this;if(g(e))return this.filter((function(t,r){return r.dir&&e.test(t)}));var t=this.root+e,r=w.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter((function(t,r){return r.name.slice(0,e.length)===e})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=i.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:o.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");i.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=h.generateWorker(this,r,n)}catch(e){(t=new s("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){var n=e("./DataReader");function o(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(o,n),o.prototype.byteAt=function(e){return this.data[this.zero+e]},o.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),o=e.charCodeAt(3),i=this.length-4;0<=i;--i)if(this.data[i]===t&&this.data[i+1]===r&&this.data[i+2]===n&&this.data[i+3]===o)return i-this.zero;return-1},o.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),o=e.charCodeAt(3),i=this.readData(4);return t===i[0]&&r===i[1]&&n===i[2]&&o===i[3]},o.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){var n=e("../utils");function o(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}o.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=o},{"../utils":32}],19:[function(e,t,r){var n=e("./Uint8ArrayReader");function o(e){n.call(this,e)}e("../utils").inherits(o,n),o.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){var n=e("./DataReader");function o(e){n.call(this,e)}e("../utils").inherits(o,n),o.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},o.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},o.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},o.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){var n=e("./ArrayReader");function o(e){n.call(this,e)}e("../utils").inherits(o,n),o.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=o},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){var n=e("../utils"),o=e("../support"),i=e("./ArrayReader"),s=e("./StringReader"),a=e("./NodeBufferReader"),u=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||o.uint8array?"nodebuffer"===t?new a(e):o.uint8array?new u(n.transformTo("uint8array",e)):new i(n.transformTo("array",e)):new s(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){var n=e("./GenericWorker"),o=e("../utils");function i(e){n.call(this,"ConvertWorker to "+e),this.destType=e}o.inherits(i,n),i.prototype.processChunk=function(e){this.push({data:o.transformTo(this.destType,e.data),meta:e.meta})},t.exports=i},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){var n=e("./GenericWorker"),o=e("../crc32");function i(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(i,n),i.prototype.processChunk=function(e){this.streamInfo.crc32=o(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=i},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){var n=e("../utils"),o=e("./GenericWorker");function i(e){o.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(i,o),i.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}o.prototype.processChunk.call(this,e)},t.exports=i},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){var n=e("../utils"),o=e("./GenericWorker");function i(e){o.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}n.inherits(i,o),i.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this.data=null},i.prototype.resume=function(){return!!o.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},i.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},i.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=i},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){var n=e("../utils"),o=e("./ConvertWorker"),i=e("./GenericWorker"),s=e("../base64"),a=e("../support"),u=e("../external"),c=null;if(a.nodestream)try{c=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function l(e,t,r){var s=t;switch(t){case"blob":case"arraybuffer":s="uint8array";break;case"base64":s="string"}try{this._internalType=s,this._outputType=t,this._mimeType=r,n.checkSupport(s),this._worker=e.pipe(new o(s)),e.lock()}catch(e){this._worker=new i("error"),this._worker.error(e)}}l.prototype={accumulate:function(e){return function(e,t){return new u.Promise((function(r,o){var i=[],a=e._internalType,u=e._outputType,c=e._mimeType;e.on("data",(function(e,r){i.push(e),t&&t(r)})).on("error",(function(e){i=[],o(e)})).on("end",(function(){try{var e=function(e,t,r){switch(e){case"blob":return n.newBlob(n.transformTo("arraybuffer",t),r);case"base64":return s.encode(t);default:return n.transformTo(e,t)}}(u,function(e,t){var r,n=0,o=null,i=0;for(r=0;r<t.length;r++)i+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(o=new Uint8Array(i),r=0;r<t.length;r++)o.set(t[r],n),n+=t[r].length;return o;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(a,i),c);r(e)}catch(e){o(e)}i=[]})).resume()}))}(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,(function(e){t.call(r,e.data,e.meta)})):this._worker.on(e,(function(){n.delay(t,arguments,r)})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new c(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=l},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(n),r.blob=0===o.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,r){for(var n=e("./utils"),o=e("./support"),i=e("./nodejsUtils"),s=e("./stream/GenericWorker"),a=new Array(256),u=0;u<256;u++)a[u]=252<=u?6:248<=u?5:240<=u?4:224<=u?3:192<=u?2:1;function c(){s.call(this,"utf-8 decode"),this.leftOver=null}function l(){s.call(this,"utf-8 encode")}a[254]=a[254]=1,r.utf8encode=function(e){return o.nodebuffer?i.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,u=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=o.uint8array?new Uint8Array(u):new Array(u),i=s=0;s<u;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},r.utf8decode=function(e){return o.nodebuffer?n.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,o,i,s=e.length,u=new Array(2*s);for(t=r=0;t<s;)if((o=e[t++])<128)u[r++]=o;else if(4<(i=a[o]))u[r++]=65533,t+=i-1;else{for(o&=2===i?31:3===i?15:7;1<i&&t<s;)o=o<<6|63&e[t++],i--;1<i?u[r++]=65533:o<65536?u[r++]=o:(o-=65536,u[r++]=55296|o>>10&1023,u[r++]=56320|1023&o)}return u.length!==r&&(u.subarray?u=u.subarray(0,r):u.length=r),n.applyFromCharCode(u)}(e=n.transformTo(o.uint8array?"uint8array":"array",e))},n.inherits(c,s),c.prototype.processChunk=function(e){var t=n.transformTo(o.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(o.uint8array){var i=t;(t=new Uint8Array(i.length+this.leftOver.length)).set(this.leftOver,0),t.set(i,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var s=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+a[e[r]]>t?r:t}(t),u=t;s!==t.length&&(o.uint8array?(u=t.subarray(0,s),this.leftOver=t.subarray(s,t.length)):(u=t.slice(0,s),this.leftOver=t.slice(s,t.length))),this.push({data:r.utf8decode(u),meta:e.meta})},c.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},r.Utf8DecodeWorker=c,n.inherits(l,s),l.prototype.processChunk=function(e){this.push({data:r.utf8encode(e.data),meta:e.meta})},r.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,r){var n=e("./support"),o=e("./base64"),i=e("./nodejsUtils"),s=e("./external");function a(e){return e}function u(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),r.newBlob=function(e,t){r.checkSupport("blob");try{return new Blob([e],{type:t})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(e),n.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(e,t,r){var n=[],o=0,i=e.length;if(i<=r)return String.fromCharCode.apply(null,e);for(;o<i;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(o,Math.min(o+r,i)))):n.push(String.fromCharCode.apply(null,e.subarray(o,Math.min(o+r,i)))),o+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,i.allocBuffer(1)).length}catch(e){return!1}}()}};function l(e){var t=65536,n=r.getTypeOf(e),o=!0;if("uint8array"===n?o=c.applyCanBeUsed.uint8array:"nodebuffer"===n&&(o=c.applyCanBeUsed.nodebuffer),o)for(;1<t;)try{return c.stringifyByChunk(e,n,t)}catch(e){t=Math.floor(t/2)}return c.stringifyByChar(e)}function h(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}r.applyFromCharCode=l;var p={};p.string={string:a,array:function(e){return u(e,new Array(e.length))},arraybuffer:function(e){return p.string.uint8array(e).buffer},uint8array:function(e){return u(e,new Uint8Array(e.length))},nodebuffer:function(e){return u(e,i.allocBuffer(e.length))}},p.array={string:l,array:a,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return i.newBufferFrom(e)}},p.arraybuffer={string:function(e){return l(new Uint8Array(e))},array:function(e){return h(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:a,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return i.newBufferFrom(new Uint8Array(e))}},p.uint8array={string:l,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:a,nodebuffer:function(e){return i.newBufferFrom(e)}},p.nodebuffer={string:l,array:function(e){return h(e,new Array(e.length))},arraybuffer:function(e){return p.nodebuffer.uint8array(e).buffer},uint8array:function(e){return h(e,new Uint8Array(e.length))},nodebuffer:a},r.transformTo=function(e,t){if(t=t||"",!e)return t;r.checkSupport(e);var n=r.getTypeOf(t);return p[n][e](t)},r.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var o=t[n];"."===o||""===o&&0!==n&&n!==t.length-1||(".."===o?r.pop():r.push(o))}return r.join("/")},r.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&i.isBuffer(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},r.delay=function(e,t,r){setImmediate((function(){e.apply(r||null,t||[])}))},r.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},r.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},r.prepareContent=function(e,t,i,a,c){return s.Promise.resolve(t).then((function(e){return n.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new s.Promise((function(t,r){var n=new FileReader;n.onload=function(e){t(e.target.result)},n.onerror=function(e){r(e.target.error)},n.readAsArrayBuffer(e)})):e})).then((function(t){var l,h=r.getTypeOf(t);return h?("arraybuffer"===h?t=r.transformTo("uint8array",t):"string"===h&&(c?t=o.decode(t):i&&!0!==a&&(t=u(l=t,n.uint8array?new Uint8Array(l.length):new Array(l.length)))),t):s.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){var n=e("./reader/readerFor"),o=e("./utils"),i=e("./signature"),s=e("./zipEntry"),a=e("./support");function u(e){this.files=[],this.loadOptions=e}u.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+o.pretty(t)+", expected "+o.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=a.uint8array?"uint8array":"array",r=o.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(i.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(i.CENTRAL_FILE_HEADER);)(e=new s({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(i.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,i.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(i.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===o.MAX_VALUE_16BITS||this.diskWithCentralDirStart===o.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===o.MAX_VALUE_16BITS||this.centralDirRecords===o.MAX_VALUE_16BITS||this.centralDirSize===o.MAX_VALUE_32BITS||this.centralDirOffset===o.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,i.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,i.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){var n=e("./reader/readerFor"),o=e("./utils"),i=e("./compressedObject"),s=e("./crc32"),a=e("./utf8"),u=e("./compressions"),c=e("./support");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return!(1&~this.bitFlag)},useUTF8:function(){return!(2048&~this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in u)if(Object.prototype.hasOwnProperty.call(u,t)&&u[t].magic===e)return u[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+o.pretty(this.compressionMethod)+" unknown (inner file : "+o.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===o.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===o.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===o.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===o.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,o=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<o;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(o)},handleUTF8:function(){var e=c.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=o.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=o.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)||s(this.fileName)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)||s(this.fileComment)!==t.readInt(4)?null:a.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var o=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),s=e("./utf8"),a=e("./compressedObject"),u=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new s.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new s.Utf8DecodeWorker))}catch(e){(t=new u("error")).error(e)}return new o(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof a&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new s.Utf8EncodeWorker)),a.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof u?this._data:new i(this._data)}};for(var c=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<c.length;h++)n.prototype[c[h]]=l;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(e){var r,n,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,s=new o(l),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){l(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(l,0)};else{var u=new e.MessageChannel;u.port1.onmessage=l,r=function(){u.port2.postMessage(0)}}var c=[];function l(){var e,t;n=!0;for(var r=c.length;r;){for(t=c,c=[],e=-1;++e<r;)t[e]();r=c.length}n=!1}t.exports=function(e){1!==c.push(e)||n||r()}}).call(this,void 0!==x?x:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){var n=e("immediate");function o(){}var i={},s=["REJECTED"],a=["FULFILLED"],u=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==o&&f(this,e)}function l(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function h(e,t,r){n((function(){var n;try{n=t(r)}catch(t){return i.reject(e,t)}n===e?i.reject(e,new TypeError("Cannot resolve promise with itself")):i.resolve(e,n)}))}function p(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function f(e,t){var r=!1;function n(t){r||(r=!0,i.reject(e,t))}function o(t){r||(r=!0,i.resolve(e,t))}var s=d((function(){t(o,n)}));"error"===s.status&&n(s.value)}function d(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=c).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(r){return t.resolve(e()).then((function(){return r}))}),(function(r){return t.resolve(e()).then((function(){throw r}))}))},c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(o);return this.state!==u?h(r,this.state===a?e:t,this.outcome):this.queue.push(new l(r,e,t)),r},l.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},l.prototype.otherCallFulfilled=function(e){h(this.promise,this.onFulfilled,e)},l.prototype.callRejected=function(e){i.reject(this.promise,e)},l.prototype.otherCallRejected=function(e){h(this.promise,this.onRejected,e)},i.resolve=function(e,t){var r=d(p,t);if("error"===r.status)return i.reject(e,r.value);var n=r.value;if(n)f(e,n);else{e.state=a,e.outcome=t;for(var o=-1,s=e.queue.length;++o<s;)e.queue[o].callFulfilled(t)}return e},i.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},c.reject=function(e){var t=new this(o);return i.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);for(var s=new Array(r),a=0,u=-1,c=new this(o);++u<r;)l(e[u],u);return c;function l(e,o){t.resolve(e).then((function(e){s[o]=e,++a!==r||n||(n=!0,i.resolve(c,s))}),(function(e){n||(n=!0,i.reject(c,e))}))}},c.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,s=-1,a=new this(o);++s<t;)n=e[s],this.resolve(n).then((function(e){r||(r=!0,i.resolve(a,e))}),(function(e){r||(r=!0,i.reject(a,e))}));return a}},{immediate:36}],38:[function(e,t,r){var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){var n=e("./zlib/deflate"),o=e("./utils/common"),i=e("./utils/strings"),s=e("./zlib/messages"),a=e("./zlib/zstream"),u=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=o.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==r)throw new Error(s[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var l;if(l="string"==typeof t.dictionary?i.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(s[r]);this._dict_set=!0}}function l(e,t){var r=new c(t);if(r.push(e,!0),r.err)throw r.msg||s[r.err];return r.result}c.prototype.push=function(e,t){var r,s,a=this.strm,c=this.options.chunkSize;if(this.ended)return!1;s=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=i.string2buf(e):"[object ArrayBuffer]"===u.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new o.Buf8(c),a.next_out=0,a.avail_out=c),1!==(r=n.deflate(a,s))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==a.avail_out&&(0!==a.avail_in||4!==s&&2!==s)||("string"===this.options.to?this.onData(i.buf2binstring(o.shrinkBuf(a.output,a.next_out))):this.onData(o.shrinkBuf(a.output,a.next_out)))}while((0<a.avail_in||0===a.avail_out)&&1!==r);return 4===s?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==s||(this.onEnd(0),!(a.avail_out=0))},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=c,r.deflate=l,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,l(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,l(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){var n=e("./zlib/inflate"),o=e("./utils/common"),i=e("./utils/strings"),s=e("./zlib/constants"),a=e("./zlib/messages"),u=e("./zlib/zstream"),c=e("./zlib/gzheader"),l=Object.prototype.toString;function h(e){if(!(this instanceof h))return new h(e);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&!(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==s.Z_OK)throw new Error(a[r]);this.header=new c,n.inflateGetHeader(this.strm,this.header)}function p(e,t){var r=new h(t);if(r.push(e,!0),r.err)throw r.msg||a[r.err];return r.result}h.prototype.push=function(e,t){var r,a,u,c,h,p,f=this.strm,d=this.options.chunkSize,m=this.options.dictionary,w=!1;if(this.ended)return!1;a=t===~~t?t:!0===t?s.Z_FINISH:s.Z_NO_FLUSH,"string"==typeof e?f.input=i.binstring2buf(e):"[object ArrayBuffer]"===l.call(e)?f.input=new Uint8Array(e):f.input=e,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new o.Buf8(d),f.next_out=0,f.avail_out=d),(r=n.inflate(f,s.Z_NO_FLUSH))===s.Z_NEED_DICT&&m&&(p="string"==typeof m?i.string2buf(m):"[object ArrayBuffer]"===l.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,p)),r===s.Z_BUF_ERROR&&!0===w&&(r=s.Z_OK,w=!1),r!==s.Z_STREAM_END&&r!==s.Z_OK)return this.onEnd(r),!(this.ended=!0);f.next_out&&(0!==f.avail_out&&r!==s.Z_STREAM_END&&(0!==f.avail_in||a!==s.Z_FINISH&&a!==s.Z_SYNC_FLUSH)||("string"===this.options.to?(u=i.utf8border(f.output,f.next_out),c=f.next_out-u,h=i.buf2string(f.output,u),f.next_out=c,f.avail_out=d-c,c&&o.arraySet(f.output,f.output,u,c,0),this.onData(h)):this.onData(o.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(w=!0)}while((0<f.avail_in||0===f.avail_out)&&r!==s.Z_STREAM_END);return r===s.Z_STREAM_END&&(a=s.Z_FINISH),a===s.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===s.Z_OK):a!==s.Z_SYNC_FLUSH||(this.onEnd(s.Z_OK),!(f.avail_out=0))},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===s.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=h,r.inflate=p,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},r.ungzip=p},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,r,n,o){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),o);else for(var i=0;i<n;i++)e[o+i]=t[r+i]},flattenChunks:function(e){var t,r,n,o,i,s;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(s=new Uint8Array(n),t=o=0,r=e.length;t<r;t++)i=e[t],s.set(i,o),o+=i.length;return s}},i={arraySet:function(e,t,r,n,o){for(var i=0;i<n;i++)e[o+i]=t[r+i]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,o)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,i))},r.setTyped(n)},{}],42:[function(e,t,r){var n=e("./common"),o=!0,i=!0;try{String.fromCharCode.apply(null,[0])}catch(e){o=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){i=!1}for(var s=new n.Buf8(256),a=0;a<256;a++)s[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function u(e,t){if(t<65537&&(e.subarray&&i||!e.subarray&&o))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",s=0;s<t;s++)r+=String.fromCharCode(e[s]);return r}s[254]=s[254]=1,r.string2buf=function(e){var t,r,o,i,s,a=e.length,u=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(o=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(u),i=s=0;s<u;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(o=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(o-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return u(e,e.length)},r.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,o=t.length;r<o;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,o,i,a=t||e.length,c=new Array(2*a);for(r=n=0;r<a;)if((o=e[r++])<128)c[n++]=o;else if(4<(i=s[o]))c[n++]=65533,r+=i-1;else{for(o&=2===i?31:3===i?15:7;1<i&&r<a;)o=o<<6|63&e[r++],i--;1<i?c[n++]=65533:o<65536?c[n++]=o:(o-=65536,c[n++]=55296|o>>10&1023,c[n++]=56320|1023&o)}return u(c,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0||0===r?t:r+s[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){t.exports=function(e,t,r,n){for(var o=65535&e,i=e>>>16&65535,s=0;0!==r;){for(r-=s=2e3<r?2e3:r;i=i+(o=o+t[n++]|0)|0,--s;);o%=65521,i%=65521}return o|i<<16}},{}],44:[function(e,t,r){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,o){var i=n,s=o+r;e^=-1;for(var a=o;a<s;a++)e=e>>>8^i[255&(e^t[a])];return~e}},{}],46:[function(e,t,r){var n,o=e("../utils/common"),i=e("./trees"),s=e("./adler32"),a=e("./crc32"),u=e("./messages"),c=-2,l=258,h=262,p=113;function f(e,t){return e.msg=u[t],t}function d(e){return(e<<1)-(4<e?9:0)}function m(e){for(var t=e.length;0<=--t;)e[t]=0}function w(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(o.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function g(e,t){i._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,w(e.strm)}function y(e,t){e.pending_buf[e.pending++]=t}function b(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function v(e,t){var r,n,o=e.max_chain_length,i=e.strstart,s=e.prev_length,a=e.nice_match,u=e.strstart>e.w_size-h?e.strstart-(e.w_size-h):0,c=e.window,p=e.w_mask,f=e.prev,d=e.strstart+l,m=c[i+s-1],w=c[i+s];e.prev_length>=e.good_match&&(o>>=2),a>e.lookahead&&(a=e.lookahead);do{if(c[(r=t)+s]===w&&c[r+s-1]===m&&c[r]===c[i]&&c[++r]===c[i+1]){i+=2,r++;do{}while(c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&c[++i]===c[++r]&&i<d);if(n=l-(d-i),i=d-l,s<n){if(e.match_start=t,a<=(s=n))break;m=c[i+s-1],w=c[i+s]}}}while((t=f[t&p])>u&&0!=--o);return s<=e.lookahead?s:e.lookahead}function x(e){var t,r,n,i,u,c,l,p,f,d,m=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-h)){for(o.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=r=e.hash_size;n=e.head[--t],e.head[t]=m<=n?n-m:0,--r;);for(t=r=m;n=e.prev[--t],e.prev[t]=m<=n?n-m:0,--r;);i+=m}if(0===e.strm.avail_in)break;if(c=e.strm,l=e.window,p=e.strstart+e.lookahead,d=void 0,(f=i)<(d=c.avail_in)&&(d=f),r=0===d?0:(c.avail_in-=d,o.arraySet(l,c.input,c.next_in,d,p),1===c.state.wrap?c.adler=s(c.adler,l,d,p):2===c.state.wrap&&(c.adler=a(c.adler,l,d,p)),c.next_in+=d,c.total_in+=d,d),e.lookahead+=r,e.lookahead+e.insert>=3)for(u=e.strstart-e.insert,e.ins_h=e.window[u],e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[u+3-1])&e.hash_mask,e.prev[u&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=u,u++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<h&&0!==e.strm.avail_in)}function E(e,t){for(var r,n;;){if(e.lookahead<h){if(x(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-h&&(e.match_length=v(e,r)),e.match_length>=3)if(n=i._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}function _(e,t){for(var r,n,o;;){if(e.lookahead<h){if(x(e),e.lookahead<h&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-h&&(e.match_length=v(e,r),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(o=e.strstart+e.lookahead-3,n=i._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(g(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=i._tr_tally(e,0,e.window[e.strstart-1]))&&g(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=i._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}function T(e,t,r,n,o){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=o}function A(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new o.Buf16(1146),this.dyn_dtree=new o.Buf16(122),this.bl_tree=new o.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new o.Buf16(16),this.heap=new o.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new o.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function S(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:p,e.adler=2===t.wrap?0:1,t.last_flush=0,i._tr_init(t),0):f(e,c)}function I(e){var t,r=S(e);return 0===r&&((t=e.state).window_size=2*t.w_size,m(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0),r}function k(e,t,r,n,i,s){if(!e)return c;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||9<i||8!==r||n<8||15<n||t<0||9<t||s<0||4<s)return f(e,c);8===n&&(n=9);var u=new A;return(e.state=u).strm=e,u.wrap=a,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=i+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+3-1)/3),u.window=new o.Buf8(2*u.w_size),u.head=new o.Buf16(u.hash_size),u.prev=new o.Buf16(u.w_size),u.lit_bufsize=1<<i+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new o.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=t,u.strategy=s,u.method=r,I(e)}n=[new T(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(x(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,g(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-h&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(g(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(g(e,!1),e.strm.avail_out),1)})),new T(4,4,8,4,E),new T(4,5,16,8,E),new T(4,6,32,32,E),new T(4,4,16,16,_),new T(8,16,32,32,_),new T(8,16,128,128,_),new T(8,32,128,256,_),new T(32,128,258,1024,_),new T(32,258,258,4096,_)],r.deflateInit=function(e,t){return k(e,t,8,15,8,0)},r.deflateInit2=k,r.deflateReset=I,r.deflateResetKeep=S,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?c:(e.state.gzhead=t,0):c},r.deflate=function(e,t){var r,o,s,u;if(!e||!e.state||5<t||t<0)return e?f(e,c):c;if(o=e.state,!e.output||!e.input&&0!==e.avail_in||666===o.status&&4!==t)return f(e,0===e.avail_out?-5:c);if(o.strm=e,r=o.last_flush,o.last_flush=t,42===o.status)if(2===o.wrap)e.adler=0,y(o,31),y(o,139),y(o,8),o.gzhead?(y(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),y(o,255&o.gzhead.time),y(o,o.gzhead.time>>8&255),y(o,o.gzhead.time>>16&255),y(o,o.gzhead.time>>24&255),y(o,9===o.level?2:2<=o.strategy||o.level<2?4:0),y(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(y(o,255&o.gzhead.extra.length),y(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(e.adler=a(e.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=69):(y(o,0),y(o,0),y(o,0),y(o,0),y(o,0),y(o,9===o.level?2:2<=o.strategy||o.level<2?4:0),y(o,3),o.status=p);else{var h=8+(o.w_bits-8<<4)<<8;h|=(2<=o.strategy||o.level<2?0:o.level<6?1:6===o.level?2:3)<<6,0!==o.strstart&&(h|=32),h+=31-h%31,o.status=p,b(o,h),0!==o.strstart&&(b(o,e.adler>>>16),b(o,65535&e.adler)),e.adler=1}if(69===o.status)if(o.gzhead.extra){for(s=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),w(e),s=o.pending,o.pending!==o.pending_buf_size));)y(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=73)}else o.status=73;if(73===o.status)if(o.gzhead.name){s=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),w(e),s=o.pending,o.pending===o.pending_buf_size)){u=1;break}u=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,y(o,u)}while(0!==u);o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),0===u&&(o.gzindex=0,o.status=91)}else o.status=91;if(91===o.status)if(o.gzhead.comment){s=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),w(e),s=o.pending,o.pending===o.pending_buf_size)){u=1;break}u=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,y(o,u)}while(0!==u);o.gzhead.hcrc&&o.pending>s&&(e.adler=a(e.adler,o.pending_buf,o.pending-s,s)),0===u&&(o.status=103)}else o.status=103;if(103===o.status&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&w(e),o.pending+2<=o.pending_buf_size&&(y(o,255&e.adler),y(o,e.adler>>8&255),e.adler=0,o.status=p)):o.status=p),0!==o.pending){if(w(e),0===e.avail_out)return o.last_flush=-1,0}else if(0===e.avail_in&&d(t)<=d(r)&&4!==t)return f(e,-5);if(666===o.status&&0!==e.avail_in)return f(e,-5);if(0!==e.avail_in||0!==o.lookahead||0!==t&&666!==o.status){var v=2===o.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(x(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}(o,t):3===o.strategy?function(e,t){for(var r,n,o,s,a=e.window;;){if(e.lookahead<=l){if(x(e),e.lookahead<=l&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(n=a[o=e.strstart-1])===a[++o]&&n===a[++o]&&n===a[++o]){s=e.strstart+l;do{}while(n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&n===a[++o]&&o<s);e.match_length=l-(s-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(r=i._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=i._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(g(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(g(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(g(e,!1),0===e.strm.avail_out)?1:2}(o,t):n[o.level].func(o,t);if(3!==v&&4!==v||(o.status=666),1===v||3===v)return 0===e.avail_out&&(o.last_flush=-1),0;if(2===v&&(1===t?i._tr_align(o):5!==t&&(i._tr_stored_block(o,0,0,!1),3===t&&(m(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),w(e),0===e.avail_out))return o.last_flush=-1,0}return 4!==t?0:o.wrap<=0?1:(2===o.wrap?(y(o,255&e.adler),y(o,e.adler>>8&255),y(o,e.adler>>16&255),y(o,e.adler>>24&255),y(o,255&e.total_in),y(o,e.total_in>>8&255),y(o,e.total_in>>16&255),y(o,e.total_in>>24&255)):(b(o,e.adler>>>16),b(o,65535&e.adler)),w(e),0<o.wrap&&(o.wrap=-o.wrap),0!==o.pending?0:1)},r.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==p&&666!==t?f(e,c):(e.state=null,t===p?f(e,-3):0):c},r.deflateSetDictionary=function(e,t){var r,n,i,a,u,l,h,p,f=t.length;if(!e||!e.state)return c;if(2===(a=(r=e.state).wrap)||1===a&&42!==r.status||r.lookahead)return c;for(1===a&&(e.adler=s(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===a&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new o.Buf8(r.w_size),o.arraySet(p,t,f-r.w_size,r.w_size,0),t=p,f=r.w_size),u=e.avail_in,l=e.next_in,h=e.input,e.avail_in=f,e.next_in=0,e.input=t,x(r);r.lookahead>=3;){for(n=r.strstart,i=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=2,x(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,e.next_in=l,e.input=h,e.avail_in=u,r.wrap=a,0},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){t.exports=function(e,t){var r,n,o,i,s,a,u,c,l,h,p,f,d,m,w,g,y,b,v,x,E,_,T,A,S;r=e.state,n=e.next_in,A=e.input,o=n+(e.avail_in-5),i=e.next_out,S=e.output,s=i-(t-e.avail_out),a=i+(e.avail_out-257),u=r.dmax,c=r.wsize,l=r.whave,h=r.wnext,p=r.window,f=r.hold,d=r.bits,m=r.lencode,w=r.distcode,g=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;e:do{d<15&&(f+=A[n++]<<d,d+=8,f+=A[n++]<<d,d+=8),b=m[f&g];t:for(;;){if(f>>>=v=b>>>24,d-=v,0==(v=b>>>16&255))S[i++]=65535&b;else{if(!(16&v)){if(!(64&v)){b=m[(65535&b)+(f&(1<<v)-1)];continue t}if(32&v){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}x=65535&b,(v&=15)&&(d<v&&(f+=A[n++]<<d,d+=8),x+=f&(1<<v)-1,f>>>=v,d-=v),d<15&&(f+=A[n++]<<d,d+=8,f+=A[n++]<<d,d+=8),b=w[f&y];r:for(;;){if(f>>>=v=b>>>24,d-=v,!(16&(v=b>>>16&255))){if(!(64&v)){b=w[(65535&b)+(f&(1<<v)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(E=65535&b,d<(v&=15)&&(f+=A[n++]<<d,(d+=8)<v&&(f+=A[n++]<<d,d+=8)),u<(E+=f&(1<<v)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(f>>>=v,d-=v,(v=i-s)<E){if(l<(v=E-v)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(T=p,(_=0)===h){if(_+=c-v,v<x){for(x-=v;S[i++]=p[_++],--v;);_=i-E,T=S}}else if(h<v){if(_+=c+h-v,(v-=h)<x){for(x-=v;S[i++]=p[_++],--v;);if(_=0,h<x){for(x-=v=h;S[i++]=p[_++],--v;);_=i-E,T=S}}}else if(_+=h-v,v<x){for(x-=v;S[i++]=p[_++],--v;);_=i-E,T=S}for(;2<x;)S[i++]=T[_++],S[i++]=T[_++],S[i++]=T[_++],x-=3;x&&(S[i++]=T[_++],1<x&&(S[i++]=T[_++]))}else{for(_=i-E;S[i++]=S[_++],S[i++]=S[_++],S[i++]=S[_++],2<(x-=3););x&&(S[i++]=S[_++],1<x&&(S[i++]=S[_++]))}break}}break}}while(n<o&&i<a);n-=x=d>>3,f&=(1<<(d-=x<<3))-1,e.next_in=n,e.next_out=i,e.avail_in=n<o?o-n+5:5-(n-o),e.avail_out=i<a?a-i+257:257-(i-a),r.hold=f,r.bits=d}},{}],49:[function(e,t,r){var n=e("../utils/common"),o=e("./adler32"),i=e("./crc32"),s=e("./inffast"),a=e("./inftrees"),u=-2;function c(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function h(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(852),t.distcode=t.distdyn=new n.Buf32(592),t.sane=1,t.back=-1,0):u}function p(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,h(e)):u}function f(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?u:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,p(e))):u}function d(e,t){var r,n;return e?(n=new l,(e.state=n).window=null,0!==(r=f(e,t))&&(e.state=null),r):u}var m,w,g=!0;function y(e){if(g){var t;for(m=new n.Buf32(512),w=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(a(1,e.lens,0,288,m,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;a(2,e.lens,0,32,w,0,e.work,{bits:5}),g=!1}e.lencode=m,e.lenbits=9,e.distcode=w,e.distbits=5}function b(e,t,r,o){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new n.Buf8(s.wsize)),o>=s.wsize?(n.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(o<(i=s.wsize-s.wnext)&&(i=o),n.arraySet(s.window,t,r-o,i,s.wnext),(o-=i)?(n.arraySet(s.window,t,r-o,o,0),s.wnext=o,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=p,r.inflateReset2=f,r.inflateResetKeep=h,r.inflateInit=function(e){return d(e,15)},r.inflateInit2=d,r.inflate=function(e,t){var r,l,h,p,f,d,m,w,g,v,x,E,_,T,A,S,I,k,R,N,O,C,D,L,P=0,B=new n.Buf8(4),F=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return u;12===(r=e.state).mode&&(r.mode=13),f=e.next_out,h=e.output,m=e.avail_out,p=e.next_in,l=e.input,d=e.avail_in,w=r.hold,g=r.bits,v=d,x=m,C=0;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;g<16;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(2&r.wrap&&35615===w){B[r.check=0]=255&w,B[1]=w>>>8&255,r.check=i(r.check,B,2,0),g=w=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&w)<<8)+(w>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&w)){e.msg="unknown compression method",r.mode=30;break}if(g-=4,O=8+(15&(w>>>=4)),0===r.wbits)r.wbits=O;else if(O>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<O,e.adler=r.check=1,r.mode=512&w?10:12,g=w=0;break;case 2:for(;g<16;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(r.flags=w,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=w>>8&1),512&r.flags&&(B[0]=255&w,B[1]=w>>>8&255,r.check=i(r.check,B,2,0)),g=w=0,r.mode=3;case 3:for(;g<32;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}r.head&&(r.head.time=w),512&r.flags&&(B[0]=255&w,B[1]=w>>>8&255,B[2]=w>>>16&255,B[3]=w>>>24&255,r.check=i(r.check,B,4,0)),g=w=0,r.mode=4;case 4:for(;g<16;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}r.head&&(r.head.xflags=255&w,r.head.os=w>>8),512&r.flags&&(B[0]=255&w,B[1]=w>>>8&255,r.check=i(r.check,B,2,0)),g=w=0,r.mode=5;case 5:if(1024&r.flags){for(;g<16;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}r.length=w,r.head&&(r.head.extra_len=w),512&r.flags&&(B[0]=255&w,B[1]=w>>>8&255,r.check=i(r.check,B,2,0)),g=w=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(d<(E=r.length)&&(E=d),E&&(r.head&&(O=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,l,p,E,O)),512&r.flags&&(r.check=i(r.check,l,E,p)),d-=E,p+=E,r.length-=E),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===d)break e;for(E=0;O=l[p+E++],r.head&&O&&r.length<65536&&(r.head.name+=String.fromCharCode(O)),O&&E<d;);if(512&r.flags&&(r.check=i(r.check,l,E,p)),d-=E,p+=E,O)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===d)break e;for(E=0;O=l[p+E++],r.head&&O&&r.length<65536&&(r.head.comment+=String.fromCharCode(O)),O&&E<d;);if(512&r.flags&&(r.check=i(r.check,l,E,p)),d-=E,p+=E,O)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;g<16;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(w!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}g=w=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;g<32;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}e.adler=r.check=c(w),g=w=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=f,e.avail_out=m,e.next_in=p,e.avail_in=d,r.hold=w,r.bits=g,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){w>>>=7&g,g-=7&g,r.mode=27;break}for(;g<3;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}switch(r.last=1&w,g-=1,3&(w>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==t)break;w>>>=2,g-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}w>>>=2,g-=2;break;case 14:for(w>>>=7&g,g-=7&g;g<32;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if((65535&w)!=(w>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&w,g=w=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(E=r.length){if(d<E&&(E=d),m<E&&(E=m),0===E)break e;n.arraySet(h,l,p,E,f),d-=E,p+=E,m-=E,f+=E,r.length-=E;break}r.mode=12;break;case 17:for(;g<14;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(r.nlen=257+(31&w),w>>>=5,g-=5,r.ndist=1+(31&w),w>>>=5,g-=5,r.ncode=4+(15&w),w>>>=4,g-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;g<3;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}r.lens[F[r.have++]]=7&w,w>>>=3,g-=3}for(;r.have<19;)r.lens[F[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,D={bits:r.lenbits},C=a(0,r.lens,0,19,r.lencode,0,r.work,D),r.lenbits=D.bits,C){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;S=(P=r.lencode[w&(1<<r.lenbits)-1])>>>16&255,I=65535&P,!((A=P>>>24)<=g);){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(I<16)w>>>=A,g-=A,r.lens[r.have++]=I;else{if(16===I){for(L=A+2;g<L;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(w>>>=A,g-=A,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}O=r.lens[r.have-1],E=3+(3&w),w>>>=2,g-=2}else if(17===I){for(L=A+3;g<L;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}g-=A,O=0,E=3+(7&(w>>>=A)),w>>>=3,g-=3}else{for(L=A+7;g<L;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}g-=A,O=0,E=11+(127&(w>>>=A)),w>>>=7,g-=7}if(r.have+E>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;E--;)r.lens[r.have++]=O}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,D={bits:r.lenbits},C=a(1,r.lens,0,r.nlen,r.lencode,0,r.work,D),r.lenbits=D.bits,C){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,D={bits:r.distbits},C=a(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,D),r.distbits=D.bits,C){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=d&&258<=m){e.next_out=f,e.avail_out=m,e.next_in=p,e.avail_in=d,r.hold=w,r.bits=g,s(e,x),f=e.next_out,h=e.output,m=e.avail_out,p=e.next_in,l=e.input,d=e.avail_in,w=r.hold,g=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;S=(P=r.lencode[w&(1<<r.lenbits)-1])>>>16&255,I=65535&P,!((A=P>>>24)<=g);){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(S&&!(240&S)){for(k=A,R=S,N=I;S=(P=r.lencode[N+((w&(1<<k+R)-1)>>k)])>>>16&255,I=65535&P,!(k+(A=P>>>24)<=g);){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}w>>>=k,g-=k,r.back+=k}if(w>>>=A,g-=A,r.back+=A,r.length=I,0===S){r.mode=26;break}if(32&S){r.back=-1,r.mode=12;break}if(64&S){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&S,r.mode=22;case 22:if(r.extra){for(L=r.extra;g<L;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}r.length+=w&(1<<r.extra)-1,w>>>=r.extra,g-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;S=(P=r.distcode[w&(1<<r.distbits)-1])>>>16&255,I=65535&P,!((A=P>>>24)<=g);){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(!(240&S)){for(k=A,R=S,N=I;S=(P=r.distcode[N+((w&(1<<k+R)-1)>>k)])>>>16&255,I=65535&P,!(k+(A=P>>>24)<=g);){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}w>>>=k,g-=k,r.back+=k}if(w>>>=A,g-=A,r.back+=A,64&S){e.msg="invalid distance code",r.mode=30;break}r.offset=I,r.extra=15&S,r.mode=24;case 24:if(r.extra){for(L=r.extra;g<L;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}r.offset+=w&(1<<r.extra)-1,w>>>=r.extra,g-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===m)break e;if(E=x-m,r.offset>E){if((E=r.offset-E)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}_=E>r.wnext?(E-=r.wnext,r.wsize-E):r.wnext-E,E>r.length&&(E=r.length),T=r.window}else T=h,_=f-r.offset,E=r.length;for(m<E&&(E=m),m-=E,r.length-=E;h[f++]=T[_++],--E;);0===r.length&&(r.mode=21);break;case 26:if(0===m)break e;h[f++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;g<32;){if(0===d)break e;d--,w|=l[p++]<<g,g+=8}if(x-=m,e.total_out+=x,r.total+=x,x&&(e.adler=r.check=r.flags?i(r.check,h,x,f-x):o(r.check,h,x,f-x)),x=m,(r.flags?w:c(w))!==r.check){e.msg="incorrect data check",r.mode=30;break}g=w=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;g<32;){if(0===d)break e;d--,w+=l[p++]<<g,g+=8}if(w!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}g=w=0}r.mode=29;case 29:C=1;break e;case 30:C=-3;break e;case 31:return-4;default:return u}return e.next_out=f,e.avail_out=m,e.next_in=p,e.avail_in=d,r.hold=w,r.bits=g,(r.wsize||x!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&b(e,e.output,e.next_out,x-e.avail_out)?(r.mode=31,-4):(v-=e.avail_in,x-=e.avail_out,e.total_in+=v,e.total_out+=x,r.total+=x,r.wrap&&x&&(e.adler=r.check=r.flags?i(r.check,h,x,e.next_out-x):o(r.check,h,x,e.next_out-x)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==v&&0===x||4===t)&&0===C&&(C=-5),C)},r.inflateEnd=function(e){if(!e||!e.state)return u;var t=e.state;return t.window&&(t.window=null),e.state=null,0},r.inflateGetHeader=function(e,t){var r;return e&&e.state&&2&(r=e.state).wrap?((r.head=t).done=!1,0):u},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?u:11===r.mode&&o(1,t,n,0)!==r.check?-3:b(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,0):u},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){var n=e("../utils/common"),o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],i=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,u,c,l,h,p){var f,d,m,w,g,y,b,v,x,E=p.bits,_=0,T=0,A=0,S=0,I=0,k=0,R=0,N=0,O=0,C=0,D=null,L=0,P=new n.Buf16(16),B=new n.Buf16(16),F=null,U=0;for(_=0;_<=15;_++)P[_]=0;for(T=0;T<u;T++)P[t[r+T]]++;for(I=E,S=15;1<=S&&0===P[S];S--);if(S<I&&(I=S),0===S)return c[l++]=20971520,c[l++]=20971520,p.bits=1,0;for(A=1;A<S&&0===P[A];A++);for(I<A&&(I=A),_=N=1;_<=15;_++)if(N<<=1,(N-=P[_])<0)return-1;if(0<N&&(0===e||1!==S))return-1;for(B[1]=0,_=1;_<15;_++)B[_+1]=B[_]+P[_];for(T=0;T<u;T++)0!==t[r+T]&&(h[B[t[r+T]]++]=T);if(y=0===e?(D=F=h,19):1===e?(D=o,L-=257,F=i,U-=257,256):(D=s,F=a,-1),_=A,g=l,R=T=C=0,m=-1,w=(O=1<<(k=I))-1,1===e&&852<O||2===e&&592<O)return 1;for(;;){for(b=_-R,x=h[T]<y?(v=0,h[T]):h[T]>y?(v=F[U+h[T]],D[L+h[T]]):(v=96,0),f=1<<_-R,A=d=1<<k;c[g+(C>>R)+(d-=f)]=b<<24|v<<16|x,0!==d;);for(f=1<<_-1;C&f;)f>>=1;if(0!==f?(C&=f-1,C+=f):C=0,T++,0==--P[_]){if(_===S)break;_=t[r+h[T]]}if(I<_&&(C&w)!==m){for(0===R&&(R=I),g+=A,N=1<<(k=_-R);k+R<S&&!((N-=P[k+R])<=0);)k++,N<<=1;if(O+=1<<k,1===e&&852<O||2===e&&592<O)return 1;c[m=C&w]=I<<24|k<<16|g-l}}return 0!==C&&(c[g+C]=_-R<<24|64<<16),p.bits=I,0}},{"../utils/common":41}],51:[function(e,t,r){t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){var n=e("../utils/common");function o(e){for(var t=e.length;0<=--t;)e[t]=0}var i=256,s=286,a=30,u=15,c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],p=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],f=new Array(576);o(f);var d=new Array(60);o(d);var m=new Array(512);o(m);var w=new Array(256);o(w);var g=new Array(29);o(g);var y,b,v,x=new Array(a);function E(e,t,r,n,o){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=o,this.has_stree=e&&e.length}function _(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function T(e){return e<256?m[e]:m[256+(e>>>7)]}function A(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function S(e,t,r){e.bi_valid>16-r?(e.bi_buf|=t<<e.bi_valid&65535,A(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=r-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function I(e,t,r){S(e,r[2*t],r[2*t+1])}function k(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function R(e,t,r){var n,o,i=new Array(16),s=0;for(n=1;n<=u;n++)i[n]=s=s+r[n-1]<<1;for(o=0;o<=t;o++){var a=e[2*o+1];0!==a&&(e[2*o]=k(i[a]++,a))}}function N(e){var t;for(t=0;t<s;t++)e.dyn_ltree[2*t]=0;for(t=0;t<a;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function O(e){8<e.bi_valid?A(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function C(e,t,r,n){var o=2*t,i=2*r;return e[o]<e[i]||e[o]===e[i]&&n[t]<=n[r]}function D(e,t,r){for(var n=e.heap[r],o=r<<1;o<=e.heap_len&&(o<e.heap_len&&C(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!C(t,n,e.heap[o],e.depth));)e.heap[r]=e.heap[o],r=o,o<<=1;e.heap[r]=n}function L(e,t,r){var n,o,s,a,u=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*u]<<8|e.pending_buf[e.d_buf+2*u+1],o=e.pending_buf[e.l_buf+u],u++,0===n?I(e,o,t):(I(e,(s=w[o])+i+1,t),0!==(a=c[s])&&S(e,o-=g[s],a),I(e,s=T(--n),r),0!==(a=l[s])&&S(e,n-=x[s],a)),u<e.last_lit;);I(e,256,t)}function P(e,t){var r,n,o,i=t.dyn_tree,s=t.stat_desc.static_tree,a=t.stat_desc.has_stree,c=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<c;r++)0!==i[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):i[2*r+1]=0;for(;e.heap_len<2;)i[2*(o=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[o]=0,e.opt_len--,a&&(e.static_len-=s[2*o+1]);for(t.max_code=l,r=e.heap_len>>1;1<=r;r--)D(e,i,r);for(o=c;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],D(e,i,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,i[2*o]=i[2*r]+i[2*n],e.depth[o]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,i[2*r+1]=i[2*n+1]=o,e.heap[1]=o++,D(e,i,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,o,i,s,a,c=t.dyn_tree,l=t.max_code,h=t.stat_desc.static_tree,p=t.stat_desc.has_stree,f=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,m=t.stat_desc.max_length,w=0;for(i=0;i<=u;i++)e.bl_count[i]=0;for(c[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)m<(i=c[2*c[2*(n=e.heap[r])+1]+1]+1)&&(i=m,w++),c[2*n+1]=i,l<n||(e.bl_count[i]++,s=0,d<=n&&(s=f[n-d]),a=c[2*n],e.opt_len+=a*(i+s),p&&(e.static_len+=a*(h[2*n+1]+s)));if(0!==w){do{for(i=m-1;0===e.bl_count[i];)i--;e.bl_count[i]--,e.bl_count[i+1]+=2,e.bl_count[m]--,w-=2}while(0<w);for(i=m;0!==i;i--)for(n=e.bl_count[i];0!==n;)l<(o=e.heap[--r])||(c[2*o+1]!==i&&(e.opt_len+=(i-c[2*o+1])*c[2*o],c[2*o+1]=i),n--)}}(e,t),R(i,l,e.bl_count)}function B(e,t,r){var n,o,i=-1,s=t[1],a=0,u=7,c=4;for(0===s&&(u=138,c=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)o=s,s=t[2*(n+1)+1],++a<u&&o===s||(a<c?e.bl_tree[2*o]+=a:0!==o?(o!==i&&e.bl_tree[2*o]++,e.bl_tree[32]++):a<=10?e.bl_tree[34]++:e.bl_tree[36]++,i=o,c=(a=0)===s?(u=138,3):o===s?(u=6,3):(u=7,4))}function F(e,t,r){var n,o,i=-1,s=t[1],a=0,u=7,c=4;for(0===s&&(u=138,c=3),n=0;n<=r;n++)if(o=s,s=t[2*(n+1)+1],!(++a<u&&o===s)){if(a<c)for(;I(e,o,e.bl_tree),0!=--a;);else 0!==o?(o!==i&&(I(e,o,e.bl_tree),a--),I(e,16,e.bl_tree),S(e,a-3,2)):a<=10?(I(e,17,e.bl_tree),S(e,a-3,3)):(I(e,18,e.bl_tree),S(e,a-11,7));i=o,c=(a=0)===s?(u=138,3):o===s?(u=6,3):(u=7,4)}}o(x);var U=!1;function M(e,t,r,o){var i,s,a;S(e,0+(o?1:0),3),s=t,a=r,O(i=e),A(i,a),A(i,~a),n.arraySet(i.pending_buf,i.window,s,a,i.pending),i.pending+=a}r._tr_init=function(e){U||(function(){var e,t,r,n,o,i=new Array(16);for(n=r=0;n<28;n++)for(g[n]=r,e=0;e<1<<c[n];e++)w[r++]=n;for(w[r-1]=n,n=o=0;n<16;n++)for(x[n]=o,e=0;e<1<<l[n];e++)m[o++]=n;for(o>>=7;n<a;n++)for(x[n]=o<<7,e=0;e<1<<l[n]-7;e++)m[256+o++]=n;for(t=0;t<=u;t++)i[t]=0;for(e=0;e<=143;)f[2*e+1]=8,e++,i[8]++;for(;e<=255;)f[2*e+1]=9,e++,i[9]++;for(;e<=279;)f[2*e+1]=7,e++,i[7]++;for(;e<=287;)f[2*e+1]=8,e++,i[8]++;for(R(f,287,i),e=0;e<a;e++)d[2*e+1]=5,d[2*e]=k(e,5);y=new E(f,c,257,s,u),b=new E(d,l,0,a,u),v=new E(new Array(0),h,0,19,7)}(),U=!0),e.l_desc=new _(e.dyn_ltree,y),e.d_desc=new _(e.dyn_dtree,b),e.bl_desc=new _(e.bl_tree,v),e.bi_buf=0,e.bi_valid=0,N(e)},r._tr_stored_block=M,r._tr_flush_block=function(e,t,r,n){var o,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<i;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),P(e,e.l_desc),P(e,e.d_desc),a=function(e){var t;for(B(e,e.dyn_ltree,e.l_desc.max_code),B(e,e.dyn_dtree,e.d_desc.max_code),P(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*p[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),o=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=o&&(o=s)):o=s=r+5,r+4<=o&&-1!==t?M(e,t,r,n):4===e.strategy||s===o?(S(e,2+(n?1:0),3),L(e,f,d)):(S(e,4+(n?1:0),3),function(e,t,r,n){var o;for(S(e,t-257,5),S(e,r-1,5),S(e,n-4,4),o=0;o<n;o++)S(e,e.bl_tree[2*p[o]+1],3);F(e,e.dyn_ltree,t-1),F(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),L(e,e.dyn_ltree,e.dyn_dtree)),N(e),n&&O(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(w[r]+i+1)]++,e.dyn_dtree[2*T(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){var t;S(e,2,3),I(e,256,f),16===(t=e).bi_valid?(A(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}},{"../utils/common":41}],53:[function(e,t,r){t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(e){if(!e.setImmediate){var t,r,n,o,i=1,s={},a=!1,u=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,t="[object process]"==={}.toString.call(e.process)?function(e){ie.nextTick((function(){h(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?(o="setImmediate$"+Math.random()+"$",e.addEventListener?e.addEventListener("message",p,!1):e.attachEvent("onmessage",p),function(t){e.postMessage(o+t,"*")}):e.MessageChannel?((n=new MessageChannel).port1.onmessage=function(e){h(e.data)},function(e){n.port2.postMessage(e)}):u&&"onreadystatechange"in u.createElement("script")?(r=u.documentElement,function(e){var t=u.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):function(e){setTimeout(h,0,e)},c.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var r=new Array(arguments.length-1),n=0;n<r.length;n++)r[n]=arguments[n+1];var o={callback:e,args:r};return s[i]=o,t(i),i++},c.clearImmediate=l}function l(e){delete s[e]}function h(e){if(a)setTimeout(h,0,e);else{var t=s[e];if(t){a=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(undefined,r)}}(t)}finally{l(e),a=!1}}}}function p(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&h(+t.data.slice(o.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,void 0!==x?x:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10);const el=E(Qc.exports);var tl={exports:{}},rl={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"},nl=function(e){return e&&e.replace?e.replace(/([&"<>'])/g,(function(e,t){return rl[t]})):e},ol=lr.Stream;function il(e,t,r){r=r||0;var n,o,i=(n=t,new Array(r||0).join(n||"")),s=e;if("object"==typeof e&&(s=e[o=Object.keys(e)[0]])&&s._elem)return s._elem.name=o,s._elem.icount=r,s._elem.indent=t,s._elem.indents=i,s._elem.interrupt=s,s._elem;var a,u=[],c=[];function l(e){Object.keys(e).forEach((function(t){u.push(function(e,t){return e+'="'+nl(t)+'"'}(t,e[t]))}))}switch(typeof s){case"object":if(null===s)break;s._attr&&l(s._attr),s._cdata&&c.push(("<![CDATA["+s._cdata).replace(/\]\]>/g,"]]]]><![CDATA[>")+"]]>"),s.forEach&&(a=!1,c.push(""),s.forEach((function(e){"object"==typeof e?"_attr"==Object.keys(e)[0]?l(e._attr):c.push(il(e,t,r+1)):(c.pop(),a=!0,c.push(nl(e)))})),a||c.push(""));break;default:c.push(nl(s))}return{name:o,interrupt:!1,attributes:u,content:c,icount:r,indents:i,indent:t}}function sl(e,t,r){if("object"!=typeof t)return e(!1,t);var n=t.interrupt?1:t.content.length;function o(){for(;t.content.length;){var o=t.content.shift();if(void 0!==o){if(i(o))return;sl(e,o)}}e(!1,(n>1?t.indents:"")+(t.name?"</"+t.name+">":"")+(t.indent&&!r?"\n":"")),r&&r()}function i(t){return!!t.interrupt&&(t.interrupt.append=e,t.interrupt.end=o,t.interrupt=!1,e(!0),!0)}if(e(!1,t.indents+(t.name?"<"+t.name:"")+(t.attributes.length?" "+t.attributes.join(" "):"")+(n?t.name?">":"":t.name?"/>":"")+(t.indent&&n>1?"\n":"")),!n)return e(!1,t.indent?"\n":"");i(t)||o()}tl.exports=function(e,t){"object"!=typeof t&&(t={indent:t});var r,n,o=t.stream?new ol:null,i="",s=!1,a=t.indent?!0===t.indent?"    ":t.indent:"",u=!0;function c(e){u?ie.nextTick(e):e()}function l(e,t){if(void 0!==t&&(i+=t),e&&!s&&(o=o||new ol,s=!0),e&&s){var r=i;c((function(){o.emit("data",r)})),i=""}}function h(e,t){sl(l,il(e,a,a?1:0),t)}function p(){if(o){var e=i;c((function(){o.emit("data",e),o.emit("end"),o.readable=!1,o.emit("close")}))}}return c((function(){u=!1})),t.declaration&&(n={version:"1.0",encoding:(r=t.declaration).encoding||"UTF-8"},r.standalone&&(n.standalone=r.standalone),h({"?xml":{_attr:n}}),i=i.replace("/>","?>")),e&&e.forEach?e.forEach((function(t,r){var n;r+1===e.length&&(n=p),h(t,n)})):h(e,p),o?(o.readable=!0,o):i},tl.exports.element=tl.exports.Element=function(){return{_elem:il(Array.prototype.slice.call(arguments)),push:function(e){if(!this.append)throw new Error("not assigned to a parent!");var t=this,r=this._elem.indent;sl(this.append,il(e,r,this._elem.icount+(r?1:0)),(function(){t.append(!0)}))},close:function(e){void 0!==e&&this.push(e),this.end&&this.end()}}};const al=E(tl.exports),ul=(e,t)=>{const r=t.replace(/-/g,"");if(32!==r.length)throw new Error(`Error: Cannot extract GUID from font filename: ${t}`);const n=r.replace(/(..)/g,"$1 ").trim().split(" ").map((e=>parseInt(e,16)));n.reverse();const o=e.slice(0,32).map(((e,t)=>e^n[t%n.length]));return Buffer.concat([e.slice(0,0),o,e.slice(32)])};class cl{format(e,t={stack:[]}){const r=e.prepForXml(t);if(r)return r;throw Error("XMLComponent did not format correctly")}}class ll{replace(e,t,r){let n=e;return t.forEach(((e,t)=>{n=n.replace(new RegExp(`{${e.fileName}}`,"g"),(r+t).toString())})),n}getMediaData(e,t){return t.Array.filter((t=>e.search(`{${t.fileName}}`)>0))}}class hl{replace(e,t){let r=e;for(const e of t)r=r.replace(new RegExp(`{${e.reference}-${e.instance}}`,"g"),e.numId.toString());return r}}const pl={NONE:"",WITH_2_BLANKS:"  ",WITH_4_BLANKS:"    ",WITH_TAB:"\t"},fl=e=>!0===e?pl.WITH_2_BLANKS:!1===e?void 0:e;class dl{static toString(e,t){return f(this,null,(function*(){const r=this.compiler.compile(e,fl(t));return yield r.generateAsync({type:"string",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBuffer(e,t){return f(this,null,(function*(){const r=this.compiler.compile(e,fl(t));return yield r.generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBase64String(e,t){return f(this,null,(function*(){const r=this.compiler.compile(e,fl(t));return yield r.generateAsync({type:"base64",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBlob(e,t){return f(this,null,(function*(){const r=this.compiler.compile(e,fl(t));return yield r.generateAsync({type:"blob",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toStream(e,t){const r=new lr.Stream;return this.compiler.compile(e,fl(t)).generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"}).then((e=>{r.emit("data",e),r.emit("end")})),r}}p(dl,"compiler",new class{constructor(){p(this,"formatter"),p(this,"imageReplacer"),p(this,"numberingReplacer"),this.formatter=new cl,this.imageReplacer=new ll,this.numberingReplacer=new hl}compile(e,t){const r=new el,n=this.xmlifyFile(e,t),o=new Map(Object.entries(n));for(const[,e]of o)if(Array.isArray(e))for(const t of e)r.file(t.path,t.data);else r.file(e.path,e.data);for(const{stream:t,fileName:n}of e.Media.Array)r.file(`word/media/${n}`,t);for(const{data:t,name:n,fontKey:o}of e.FontTable.fontOptionsWithKey){const[e]=n.split(".");r.file(`word/fonts/${e}.odttf`,ul(t,o))}return r}xmlifyFile(e,t){const r=e.Document.Relationships.RelationshipCount+1,n=al(this.formatter.format(e.Document.View,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),o=this.imageReplacer.getMediaData(n,e.Media);return{Relationships:{data:(()=>(o.forEach(((t,n)=>{e.Document.Relationships.createRelationship(r+n,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t.fileName}`)})),al(this.formatter.format(e.Document.Relationships,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}})))(),path:"word/_rels/document.xml.rels"},Document:{data:(()=>{const t=this.imageReplacer.replace(n,o,r);return this.numberingReplacer.replace(t,e.Numbering.ConcreteNumbering)})(),path:"word/document.xml"},Styles:{data:(()=>{const r=al(this.formatter.format(e.Styles,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}});return this.numberingReplacer.replace(r,e.Numbering.ConcreteNumbering)})(),path:"word/styles.xml"},Properties:{data:al(this.formatter.format(e.CoreProperties,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/core.xml"},Numbering:{data:al(this.formatter.format(e.Numbering,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/numbering.xml"},FileRelationships:{data:al(this.formatter.format(e.FileRelationships,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"_rels/.rels"},HeaderRelationships:e.Headers.map(((r,n)=>{const o=al(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}});return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:al(this.formatter.format(r.Relationships,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:`word/_rels/header${n+1}.xml.rels`}})),FooterRelationships:e.Footers.map(((r,n)=>{const o=al(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}});return this.imageReplacer.getMediaData(o,e.Media).forEach(((e,t)=>{r.Relationships.createRelationship(t,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`)})),{data:al(this.formatter.format(r.Relationships,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:`word/_rels/footer${n+1}.xml.rels`}})),Headers:e.Headers.map(((r,n)=>{const o=al(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),i=this.imageReplacer.getMediaData(o,e.Media),s=this.imageReplacer.replace(o,i,0);return{data:this.numberingReplacer.replace(s,e.Numbering.ConcreteNumbering),path:`word/header${n+1}.xml`}})),Footers:e.Footers.map(((r,n)=>{const o=al(this.formatter.format(r.View,{viewWrapper:r,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),i=this.imageReplacer.getMediaData(o,e.Media),s=this.imageReplacer.replace(o,i,0);return{data:this.numberingReplacer.replace(s,e.Numbering.ConcreteNumbering),path:`word/footer${n+1}.xml`}})),ContentTypes:{data:al(this.formatter.format(e.ContentTypes,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"[Content_Types].xml"},CustomProperties:{data:al(this.formatter.format(e.CustomProperties,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/custom.xml"},AppProperties:{data:al(this.formatter.format(e.AppProperties,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/app.xml"},FootNotes:{data:al(this.formatter.format(e.FootNotes.View,{viewWrapper:e.FootNotes,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"word/footnotes.xml"},FootNotesRelationships:{data:al(this.formatter.format(e.FootNotes.Relationships,{viewWrapper:e.FootNotes,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}),path:"word/_rels/footnotes.xml.rels"},Settings:{data:al(this.formatter.format(e.Settings,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/settings.xml"},Comments:{data:al(this.formatter.format(e.Comments,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/comments.xml"},FontTable:{data:al(this.formatter.format(e.FontTable.View,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/fontTable.xml"},FontTableRelationships:{data:(()=>al(this.formatter.format(e.FontTable.Relationships,{viewWrapper:e.Document,file:e,stack:[]}),{indent:t,declaration:{encoding:"UTF-8"}}))(),path:"word/_rels/fontTable.xml.rels"}}}});const ml=new cl,wl=e=>Zr(e,{compact:!1,captureSpacesBetweenElements:!0}),gl=e=>{var t;return null!=(t=wl(al(ml.format(new mo({text:e})))).elements[0].elements)?t:[]},yl=e=>h(l({},e),{attributes:{"xml:space":"preserve"}}),bl=(e,t)=>{var r,n;return null!=(n=null==(r=e.elements)?void 0:r.filter((e=>e.name===t))[0].elements)?n:[]},vl=({paragraphElement:e,renderedParagraph:t,originalText:r,replacementText:n})=>{const o=t.text.indexOf(r),i=o+r.length-1;let s=0;for(const r of t.runs)for(const{text:t,index:a,start:u,end:c}of r.parts)switch(s){case 0:if(o>=u){const l=o-u,h=Math.min(i,c)-u,p=r.text.substring(l,h+1);if(""===p)continue;const f=t.replace(p,n);xl(e.elements[r.index].elements[a],f),s=1;continue}break;case 1:if(i<=c){const n=t.substring(i-u+1);xl(e.elements[r.index].elements[a],n);const o=e.elements[r.index].elements[a];e.elements[r.index].elements[a]=yl(o),s=2}else xl(e.elements[r.index].elements[a],"")}return e},xl=(e,t)=>(e.elements=gl(t),e),El=(e,t)=>{var r,n,o,i;for(let s=0;s<(null!=(r=e.elements)?r:[]).length;s++){const r=e.elements[s];if("element"===r.type&&"w:r"===r.name){const e=(null!=(n=r.elements)?n:[]).filter((e=>"element"===e.type&&"w:t"===e.name));for(const r of e)if((null==(o=r.elements)?void 0:o[0])&&(null==(i=r.elements[0].text)?void 0:i.includes(t)))return s}}throw new Error("Token not found")},_l=(e,t)=>{var r,n;let o=0;const i=null!=(n=null==(r=e.elements)?void 0:r.map(((e,r)=>{var n,i;if("element"===e.type&&"w:t"===e.name){const s=(null!=(i=null==(n=e.elements)?void 0:n[0].text)?i:"").split(t).map((t=>h(l(l({},e),yl(e)),{elements:gl(t)})));return o=r,s}return e})).flat())?n:[];return{left:h(l({},JSON.parse(JSON.stringify(e))),{elements:i.slice(0,o+1)}),right:h(l({},JSON.parse(JSON.stringify(e))),{elements:i.slice(o+1)})}},Tl=new cl,Al=(e,t,r,n,o,i=!1)=>{for(const s of n){const n=t.children.map((e=>wl(al(Tl.format(e,o))))).map((e=>e.elements[0]));switch(t.type){case Bl.DOCUMENT:{const t=Il(e,s.path),r=kl(s.path);t.elements.splice(r,1,...n);break}case Bl.PARAGRAPH:default:{const t=Sl(e,s.path);vl({paragraphElement:t,renderedParagraph:s,originalText:r,replacementText:"ɵ"});const o=El(t,"ɵ"),a=t.elements[o],{left:u,right:c}=_l(a,"ɵ");let p=n,f=c;if(i){const e=a.elements.filter((e=>"element"===e.type&&"w:t"!==e.name));p=n.map((t=>h(l({},t),{elements:[...e,...t.elements]}))),f=h(l({},c),{elements:[...e,...c.elements]})}t.elements.splice(o,1,u,...p,f);break}}}return e},Sl=(e,t)=>{let r=e;for(let e=1;e<t.length;e++){const n=t[e],o=r.elements;if(!o)throw new Error("Could not find element");r=o[n]}return r},Il=(e,t)=>Sl(e,t.slice(0,t.length-1)),kl=e=>e[e.length-1],Rl=e=>{if("w:p"!==e.element.name)throw new Error(`Invalid node type: ${e.element.name}`);if(!e.element.elements)return{text:"",runs:[],index:-1,path:[]};let t=0;const r=e.element.elements.map(((e,t)=>({element:e,i:t}))).filter((({element:e})=>"w:r"===e.name)).map((({element:e,i:r})=>{const n=Nl(e,r,t);return t+=n.text.length,n})).filter((e=>!!e)).map((e=>e));return{text:r.reduce(((e,t)=>e+t.text),""),runs:r,index:e.index,path:Ol(e)}},Nl=(e,t,r)=>{if(!e.elements)return{text:"",parts:[],index:-1,start:r,end:r};let n=r;const o=e.elements.map(((e,t)=>{var r,o,i,s;return"w:t"===e.name&&e.elements&&e.elements.length>0?{text:null!=(o=null==(r=e.elements[0].text)?void 0:r.toString())?o:"",index:t,start:n,end:(n+=(null!=(s=null==(i=e.elements[0].text)?void 0:i.toString())?s:"").length-1,n)}:void 0})).filter((e=>!!e)).map((e=>e));return{text:o.reduce(((e,t)=>e+t.text),""),parts:o,index:t,start:r,end:n}},Ol=e=>e.parent?[...Ol(e.parent),e.index]:[e.index],Cl=e=>{var t,r;return null!=(r=null==(t=e.element.elements)?void 0:t.map(((t,r)=>({element:t,index:r,parent:e}))))?r:[]},Dl=(e,t)=>{let r=[];const n=[...Cl({element:e,index:0,parent:void 0})];let o;for(;n.length>0;)o=n.shift(),"w:p"===o.element.name?r=[...r,Rl(o)]:n.push(...Cl(o));return r.filter((e=>e.text.includes(t)))},Ll=(e,t,r,n,o)=>{const i=bl(e,"Relationships");return i.push({attributes:{Id:`rId${t}`,Type:r,Target:n,TargetMode:o},name:"Relationship",type:"element"}),i},Pl=(e,t,r)=>{const n=bl(e,"Types");n.some((e=>{var n,o;return"element"===e.type&&"Default"===e.name&&(null==(n=null==e?void 0:e.attributes)?void 0:n.ContentType)===t&&(null==(o=null==e?void 0:e.attributes)?void 0:o.Extension)===r}))||n.push({attributes:{ContentType:t,Extension:r},name:"Default",type:"element"})},Bl={DOCUMENT:"file",PARAGRAPH:"paragraph"},Fl=new ll;t.AbstractNumbering=qu,t.Alignment=On,t.AlignmentAttributes=Nn,t.AlignmentType=Rn,t.AnnotationReference=class extends En{constructor(){super("w:annotationRef")}},t.Attributes=v,t.BaseEmphasisMark=Qn,t.BaseXmlComponent=d,t.Body=Ks,t.Bookmark=ws,t.BookmarkEnd=ys,t.BookmarkStart=gs,t.Border=Pn,t.BorderElement=Cn,t.BorderStyle=Ln,t.BuilderElement=kn,t.CarriageReturn=class extends En{constructor(){super("w:cr")}},t.CharacterSet={ANSI:"00",DEFAULT:"01",SYMBOL:"02",MAC:"4D",JIS:"80",HANGUL:"81",JOHAB:"82",GB_2312:"86",CHINESEBIG5:"88",GREEK:"A1",TURKISH:"A2",VIETNAMESE:"A3",HEBREW:"B1",ARABIC:"B2",BALTIC:"BA",RUSSIAN:"CC",THAI:"DE",EASTEUROPE:"EE",OEM:"FF"},t.CheckBox=class extends w{constructor(e){var t,r,n,o;super("w:sdt"),p(this,"DEFAULT_UNCHECKED_SYMBOL","2610"),p(this,"DEFAULT_CHECKED_SYMBOL","2612"),p(this,"DEFAULT_FONT","MS Gothic");const i=new Hc(null==e?void 0:e.alias);i.addChildElement(new Yc(e)),this.root.push(i);const s=new jc,a=null==(t=null==e?void 0:e.checkedState)?void 0:t.font,u=null==(r=null==e?void 0:e.checkedState)?void 0:r.value,c=null==(n=null==e?void 0:e.uncheckedState)?void 0:n.font,l=null==(o=null==e?void 0:e.uncheckedState)?void 0:o.value;let h,f;(null==e?void 0:e.checked)?(h=a||this.DEFAULT_FONT,f=u||this.DEFAULT_CHECKED_SYMBOL):(h=c||this.DEFAULT_FONT,f=l||this.DEFAULT_UNCHECKED_SYMBOL);const d=new xo({char:f,symbolfont:h});s.addChildElement(d),this.root.push(s)}},t.CheckBoxSymbolElement=Zc,t.CheckBoxUtil=Yc,t.Column=class extends w{constructor({width:e,space:t}){super("w:col"),this.root.push(new b({width:{key:"w:w",value:dn(e)},space:{key:"w:space",value:void 0===t?void 0:dn(t)}}))}},t.ColumnBreak=class extends go{constructor(){super({}),this.root.push(new Xi("column"))}},t.Columns=Is,t.Comment=Vi,t.CommentRangeEnd=class extends w{constructor(e){super("w:commentRangeEnd"),this.root.push(new Gi({id:e}))}},t.CommentRangeStart=class extends w{constructor(e){super("w:commentRangeStart"),this.root.push(new Gi({id:e}))}},t.CommentReference=class extends w{constructor(e){super("w:commentReference"),this.root.push(new Gi({id:e}))}},t.Comments=$i,t.ConcreteHyperlink=ps,t.ConcreteNumbering=Ju,t.ContinuationSeparator=class extends En{constructor(){super("w:continuationSeparator")}},t.DayLong=class extends En{constructor(){super("w:dayLong")}},t.DayShort=class extends En{constructor(){super("w:dayShort")}},t.DeletedTextRun=class extends w{constructor(e){super("w:del"),p(this,"deletedTextRunWrapper"),this.root.push(new Yn({id:e.id,author:e.author,date:e.date})),this.deletedTextRunWrapper=new Xc(e),this.addChildElement(this.deletedTextRunWrapper)}},t.DocGridAttributes=ks,t.Document=Uc,t.DocumentAttributes=Vs,t.DocumentBackground=Xs,t.DocumentBackgroundAttributes=$s,t.DocumentDefaults=Dc,t.DocumentGrid=Rs,t.DocumentGridType={DEFAULT:"default",LINES:"lines",LINES_AND_CHARS:"linesAndChars",SNAP_TO_CHARS:"snapToChars"},t.DotEmphasisMark=class extends Qn{constructor(){super(Jn.DOT)}},t.Drawing=Mi,t.DropCapType={NONE:"none",DROP:"drop",MARGIN:"margin"},t.EMPTY_OBJECT=m,t.EmphasisMark=eo,t.EmphasisMarkType=Jn,t.EmptyElement=En,t.EndnoteReference=class extends En{constructor(){super("w:endnoteRef")}},t.ExternalHyperlink=fs,t.File=Uc,t.FootNoteReferenceRunAttributes=zc,t.FootNotes=Cu,t.Footer=class{constructor(e={children:[]}){p(this,"options"),this.options=e}},t.FooterWrapper=Eu,t.FootnoteReference=Wc,t.FootnoteReferenceElement=class extends En{constructor(){super("w:footnoteRef")}},t.FootnoteReferenceRun=class extends go{constructor(e){super({style:"FootnoteReference"}),this.root.push(new Wc(e))}},t.FrameAnchorType={MARGIN:"margin",PAGE:"page",TEXT:"text"},t.FrameWrap={AROUND:"around",AUTO:"auto",NONE:"none",NOT_BESIDE:"notBeside",THROUGH:"through",TIGHT:"tight"},t.GridSpan=Ha,t.Header=class{constructor(e={children:[]}){p(this,"options"),this.options=e}},t.HeaderFooterReference=Ss,t.HeaderFooterReferenceType=_s,t.HeaderFooterType=As,t.HeaderWrapper=Bu,t.HeadingLevel={HEADING_1:"Heading1",HEADING_2:"Heading2",HEADING_3:"Heading3",HEADING_4:"Heading4",HEADING_5:"Heading5",HEADING_6:"Heading6",TITLE:"Title"},t.HeightRule={AUTO:"auto",ATLEAST:"atLeast",EXACT:"exact"},t.HorizontalPosition=Uo,t.HorizontalPositionAlign={CENTER:"center",INSIDE:"inside",LEFT:"left",OUTSIDE:"outside",RIGHT:"right"},t.HorizontalPositionRelativeFrom=Oo,t.HpsMeasureElement=xn,t.HyperlinkType={INTERNAL:"INTERNAL",EXTERNAL:"EXTERNAL"},t.IgnoreIfEmptyXmlComponent=g,t.ImageRun=class extends go{constructor(e){super({}),p(this,"key",`${ko()}.png`),p(this,"imageData");const t="string"==typeof e.data?this.convertDataURIToBinary(e.data):e.data;this.imageData={stream:t,fileName:this.key,transformation:{pixels:{x:Math.round(e.transformation.width),y:Math.round(e.transformation.height)},emus:{x:Math.round(9525*e.transformation.width),y:Math.round(9525*e.transformation.height)},flip:e.transformation.flip,rotation:e.transformation.rotation?6e4*e.transformation.rotation:void 0}};const r=new Mi(this.imageData,{floating:e.floating,docProperties:e.altText,outline:e.outline});this.root.push(r)}prepForXml(e){return e.file.Media.addImage(this.key,this.imageData),super.prepForXml(e)}convertDataURIToBinary(e){if("function"==typeof atob){const t=";base64,",r=e.indexOf(t),n=-1===r?0:r+t.length;return new Uint8Array(atob(e.substring(n)).split("").map((e=>e.charCodeAt(0))))}return new(r(287).Buffer)(e,"base64")}},t.ImportedRootElementAttributes=tn,t.ImportedXmlComponent=en,t.Indent=Fn,t.InitializableXmlComponent=rn,t.InsertedTextRun=class extends w{constructor(e){super("w:ins"),this.root.push(new Yn({id:e.id,author:e.author,date:e.date})),this.addChildElement(new yo(e))}},t.InternalHyperlink=class extends ps{constructor(e){super(e.children,ko(),e.anchor)}},t.LastRenderedPageBreak=class extends En{constructor(){super("w:lastRenderedPageBreak")}},t.LeaderType={DOT:"dot",HYPHEN:"hyphen",MIDDLE_DOT:"middleDot",NONE:"none",UNDERSCORE:"underscore"},t.Level=Vu,t.LevelBase=Ku,t.LevelForOverride=class extends Ku{},t.LevelFormat=Uu,t.LevelOverride=ec,t.LevelSuffix={NOTHING:"nothing",SPACE:"space",TAB:"tab"},t.LineNumberRestartFormat={NEW_PAGE:"newPage",NEW_SECTION:"newSection",CONTINUOUS:"continuous"},t.LineRuleType=Zi,t.Math=class extends w{constructor(e){super("m:oMath");for(const t of e.children)this.root.push(t)}},t.MathAccentCharacter=ua,t.MathAngledBrackets=class extends w{constructor(e){super("m:d"),this.root.push(new Da({beginningCharacter:"〈",endingCharacter:"〉"})),this.root.push(new ca(e.children))}},t.MathBase=ca,t.MathCurlyBrackets=class extends w{constructor(e){super("m:d"),this.root.push(new Da({beginningCharacter:"{",endingCharacter:"}"})),this.root.push(new ca(e.children))}},t.MathDegree=_a,t.MathDenominator=ia,t.MathFraction=class extends w{constructor(e){super("m:f"),this.root.push(new sa(e.numerator)),this.root.push(new ia(e.denominator))}},t.MathFunction=class extends w{constructor(e){super("m:func"),this.root.push(new ka),this.root.push(new Ia(e.name)),this.root.push(new ca(e.children))}},t.MathFunctionName=Ia,t.MathFunctionProperties=ka,t.MathIntegral=class extends w{constructor(e){super("m:nary"),this.root.push(new wa("",!!e.superScript,!!e.subScript)),e.subScript&&this.root.push(new ga(e.subScript)),e.superScript&&this.root.push(new ya(e.superScript)),this.root.push(new ca(e.children))}},t.MathLimitLocation=ha,t.MathNAryProperties=wa,t.MathNumerator=sa,t.MathPreSubSuperScript=class extends w{constructor(e){super("m:sPre"),this.root.push(new Ea),this.root.push(new ca(e.children)),this.root.push(new ga(e.subScript)),this.root.push(new ya(e.superScript))}},t.MathPreSubSuperScriptProperties=Ea,t.MathRadical=class extends w{constructor(e){super("m:rad"),this.root.push(new Sa(!!e.degree)),this.root.push(new _a(e.degree)),this.root.push(new ca(e.children))}},t.MathRadicalProperties=Sa,t.MathRoundBrackets=class extends w{constructor(e){super("m:d"),this.root.push(new Da),this.root.push(new ca(e.children))}},t.MathRun=class extends w{constructor(e){super("m:r"),this.root.push(new oa(e))}},t.MathSquareBrackets=class extends w{constructor(e){super("m:d"),this.root.push(new Da({beginningCharacter:"[",endingCharacter:"]"})),this.root.push(new ca(e.children))}},t.MathSubScript=class extends w{constructor(e){super("m:sSub"),this.root.push(new va),this.root.push(new ca(e.children)),this.root.push(new ga(e.subScript))}},t.MathSubScriptElement=ga,t.MathSubScriptProperties=va,t.MathSubSuperScript=class extends w{constructor(e){super("m:sSubSup"),this.root.push(new xa),this.root.push(new ca(e.children)),this.root.push(new ga(e.subScript)),this.root.push(new ya(e.superScript))}},t.MathSubSuperScriptProperties=xa,t.MathSum=class extends w{constructor(e){super("m:nary"),this.root.push(new wa("∑",!!e.superScript,!!e.subScript)),e.subScript&&this.root.push(new ga(e.subScript)),e.superScript&&this.root.push(new ya(e.superScript)),this.root.push(new ca(e.children))}},t.MathSuperScript=class extends w{constructor(e){super("m:sSup"),this.root.push(new ba),this.root.push(new ca(e.children)),this.root.push(new ya(e.superScript))}},t.MathSuperScriptElement=ya,t.MathSuperScriptProperties=ba,t.Media=Fu,t.MonthLong=class extends En{constructor(){super("w:monthLong")}},t.MonthShort=class extends En{constructor(){super("w:monthShort")}},t.NextAttributeComponent=b,t.NoBreakHyphen=class extends En{constructor(){super("w:noBreakHyphen")}},t.NumberFormat={DECIMAL:"decimal",UPPER_ROMAN:"upperRoman",LOWER_ROMAN:"lowerRoman",UPPER_LETTER:"upperLetter",LOWER_LETTER:"lowerLetter",ORDINAL:"ordinal",CARDINAL_TEXT:"cardinalText",ORDINAL_TEXT:"ordinalText",HEX:"hex",CHICAGO:"chicago",IDEOGRAPH_DIGITAL:"ideographDigital",JAPANESE_COUNTING:"japaneseCounting",AIUEO:"aiueo",IROHA:"iroha",DECIMAL_FULL_WIDTH:"decimalFullWidth",DECIMAL_HALF_WIDTH:"decimalHalfWidth",JAPANESE_LEGAL:"japaneseLegal",JAPANESE_DIGITAL_TEN_THOUSAND:"japaneseDigitalTenThousand",DECIMAL_ENCLOSED_CIRCLE:"decimalEnclosedCircle",DECIMAL_FULL_WIDTH_2:"decimalFullWidth2",AIUEO_FULL_WIDTH:"aiueoFullWidth",IROHA_FULL_WIDTH:"irohaFullWidth",DECIMAL_ZERO:"decimalZero",BULLET:"bullet",GANADA:"ganada",CHOSUNG:"chosung",DECIMAL_ENCLOSED_FULL_STOP:"decimalEnclosedFullstop",DECIMAL_ENCLOSED_PAREN:"decimalEnclosedParen",DECIMAL_ENCLOSED_CIRCLE_CHINESE:"decimalEnclosedCircleChinese",IDEOGRAPH_ENCLOSED_CIRCLE:"ideographEnclosedCircle",IDEOGRAPH_TRADITIONAL:"ideographTraditional",IDEOGRAPH_ZODIAC:"ideographZodiac",IDEOGRAPH_ZODIAC_TRADITIONAL:"ideographZodiacTraditional",TAIWANESE_COUNTING:"taiwaneseCounting",IDEOGRAPH_LEGAL_TRADITIONAL:"ideographLegalTraditional",TAIWANESE_COUNTING_THOUSAND:"taiwaneseCountingThousand",TAIWANESE_DIGITAL:"taiwaneseDigital",CHINESE_COUNTING:"chineseCounting",CHINESE_LEGAL_SIMPLIFIED:"chineseLegalSimplified",CHINESE_COUNTING_TEN_THOUSAND:"chineseCountingThousand",KOREAN_DIGITAL:"koreanDigital",KOREAN_COUNTING:"koreanCounting",KOREAN_LEGAL:"koreanLegal",KOREAN_DIGITAL_2:"koreanDigital2",VIETNAMESE_COUNTING:"vietnameseCounting",RUSSIAN_LOWER:"russianLower",RUSSIAN_UPPER:"russianUpper",NONE:"none",NUMBER_IN_DASH:"numberInDash",HEBREW_1:"hebrew1",HEBREW_2:"hebrew2",ARABIC_ALPHA:"arabicAlpha",ARABIC_ABJAD:"arabicAbjad",HINDI_VOWELS:"hindiVowels",HINDI_CONSONANTS:"hindiConsonants",HINDI_NUMBERS:"hindiNumbers",HINDI_COUNTING:"hindiCounting",THAI_LETTERS:"thaiLetters",THAI_NUMBERS:"thaiNumbers",THAI_COUNTING:"thaiCounting",BAHT_TEXT:"bahtText",DOLLAR_TEXT:"dollarText"},t.NumberProperties=os,t.NumberValueElement=An,t.Numbering=nc,t.OnOffElement=vn,t.OutlineLevel=bs,t.OverlapType={NEVER:"never",OVERLAP:"overlap"},t.Packer=dl,t.PageBorderDisplay={ALL_PAGES:"allPages",FIRST_PAGE:"firstPage",NOT_FIRST_PAGE:"notFirstPage"},t.PageBorderOffsetFrom={PAGE:"page",TEXT:"text"},t.PageBorderZOrder={BACK:"back",FRONT:"front"},t.PageBorders=Cs,t.PageBreak=class extends go{constructor(){super({}),this.root.push(new Xi("page"))}},t.PageBreakBefore=qi,t.PageMargin=Ds,t.PageNumber=wo,t.PageNumberElement=class extends En{constructor(){super("w:pgNum")}},t.PageNumberSeparator={HYPHEN:"hyphen",PERIOD:"period",COLON:"colon",EM_DASH:"emDash",EN_DASH:"endash"},t.PageNumberType=Ps,t.PageNumberTypeAttributes=Ls,t.PageOrientation=Bs,t.PageReference=class extends go{constructor(e,t={}){super({children:[new jn(!0),new vs(e,t),new zn]})}},t.PageSize=Fs,t.PageTextDirection=Ms,t.PageTextDirectionType={LEFT_TO_RIGHT_TOP_TO_BOTTOM:"lrTb",TOP_TO_BOTTOM_RIGHT_TO_LEFT:"tbRl"},t.Paragraph=na,t.ParagraphProperties=ra,t.ParagraphPropertiesDefaults=Oc,t.PatchType=Bl,t.PositionalTab=class extends w{constructor(e){super("w:ptab"),this.root.push(new b({alignment:{key:"w:alignment",value:e.alignment},relativeTo:{key:"w:relativeTo",value:e.relativeTo},leader:{key:"w:leader",value:e.leader}}))}},t.PositionalTabAlignment={LEFT:"left",CENTER:"center",RIGHT:"right"},t.PositionalTabLeader={NONE:"none",DOT:"dot",HYPHEN:"hyphen",UNDERSCORE:"underscore",MIDDLE_DOT:"middleDot"},t.PositionalTabRelativeTo={MARGIN:"margin",INDENT:"indent"},t.PrettifyType=pl,t.RelativeHorizontalPosition={CENTER:"center",INSIDE:"inside",LEFT:"left",OUTSIDE:"outside",RIGHT:"right"},t.RelativeVerticalPosition={CENTER:"center",INSIDE:"inside",BOTTOM:"bottom",OUTSIDE:"outside",INLINE:"inline",TOP:"top"},t.Run=go,t.RunFonts=so,t.RunProperties=po,t.RunPropertiesChange=fo,t.RunPropertiesDefaults=Cc,t.SectionProperties=Gs,t.SectionType={NEXT_PAGE:"nextPage",NEXT_COLUMN:"nextColumn",CONTINUOUS:"continuous",EVEN_PAGE:"evenPage",ODD_PAGE:"oddPage"},t.SectionTypeAttributes=js,t.Separator=class extends En{constructor(){super("w:separator")}},t.SequentialIdentifier=class extends go{constructor(e){super({}),this.root.push(new jn(!0)),this.root.push(new ji(e)),this.root.push(new Hn),this.root.push(new zn)}},t.Shading=Zn,t.ShadingType={CLEAR:"clear",DIAGONAL_CROSS:"diagCross",DIAGONAL_STRIPE:"diagStripe",HORIZONTAL_CROSS:"horzCross",HORIZONTAL_STRIPE:"horzStripe",NIL:"nil",PERCENT_5:"pct5",PERCENT_10:"pct10",PERCENT_12:"pct12",PERCENT_15:"pct15",PERCENT_20:"pct20",PERCENT_25:"pct25",PERCENT_30:"pct30",PERCENT_35:"pct35",PERCENT_37:"pct37",PERCENT_40:"pct40",PERCENT_45:"pct45",PERCENT_50:"pct50",PERCENT_55:"pct55",PERCENT_60:"pct60",PERCENT_62:"pct62",PERCENT_65:"pct65",PERCENT_70:"pct70",PERCENT_75:"pct75",PERCENT_80:"pct80",PERCENT_85:"pct85",PERCENT_87:"pct87",PERCENT_90:"pct90",PERCENT_95:"pct95",REVERSE_DIAGONAL_STRIPE:"reverseDiagStripe",SOLID:"solid",THIN_DIAGONAL_CROSS:"thinDiagCross",THIN_DIAGONAL_STRIPE:"thinDiagStripe",THIN_HORIZONTAL_CROSS:"thinHorzCross",THIN_REVERSE_DIAGONAL_STRIPE:"thinReverseDiagStripe",THIN_VERTICAL_STRIPE:"thinVertStripe",VERTICAL_STRIPE:"vertStripe"},t.SimpleField=zi,t.SimpleMailMergeField=class extends zi{constructor(e){super(` MERGEFIELD ${e} `,`«${e}»`)}},t.SimplePos=Lo,t.SoftHyphen=class extends En{constructor(){super("w:softHyphen")}},t.SpaceType=Wn,t.Spacing=Ji,t.StringContainer=In,t.StringEnumValueElement=Sn,t.StringValueElement=_n,t.Style=Qi,t.StyleForCharacter=mc,t.StyleForParagraph=dc,t.StyleLevel=class{constructor(e,t){p(this,"styleName"),p(this,"level"),this.styleName=e,this.level=t}},t.Styles=Nc,t.SymbolRun=xo,t.TDirection=Va,t.Tab=class extends En{constructor(){super("w:tab")}},t.TabAttributes=rs,t.TabStop=es,t.TabStopItem=ns,t.TabStopPosition={MAX:9026},t.TabStopType=ts,t.Table=class extends as{constructor({rows:e,width:t,columnWidths:r=Array(Math.max(...e.map((e=>e.CellCount)))).fill(100),margins:n,indent:o,float:i,layout:s,style:a,borders:u,alignment:c,visuallyRightToLeft:l}){super("w:tbl"),this.root.push(new tu({borders:null!=u?u:{},width:null!=t?t:{size:100},indent:o,float:i,layout:s,style:a,alignment:c,cellMargin:n,visuallyRightToLeft:l})),this.root.push(new La(r));for(const t of e)this.root.push(t);e.forEach(((t,r)=>{if(r===e.length-1)return;let n=0;t.cells.forEach((t=>{if(t.options.rowSpan&&t.options.rowSpan>1){const o=new Xa({rowSpan:t.options.rowSpan-1,columnSpan:t.options.columnSpan,borders:t.options.borders,children:[],verticalMerge:za.CONTINUE});e[r+1].addCellToColumnIndex(o,n)}n+=t.options.columnSpan||1}))}))}},t.TableAnchorType={MARGIN:"margin",PAGE:"page",TEXT:"text"},t.TableBorders=Ya,t.TableCell=Xa,t.TableCellBorders=Ma,t.TableFloatProperties=Ja,t.TableLayout=eu,t.TableLayoutType={AUTOFIT:"autofit",FIXED:"fixed"},t.TableOfContents=class extends as{constructor(e="Table of Contents",t){super("w:sdt"),this.root.push(new Hc(e));const r=new jc,n=new na({children:[new go({children:[new jn(!0),new Mc(t),new Hn]})]});r.addChildElement(n);const o=new na({children:[new go({children:[new zn]})]});r.addChildElement(o),this.root.push(r)}},t.TableProperties=tu,t.TableRow=class extends w{constructor(e){super("w:tr"),this.options=e,this.root.push(new ou(e));for(const t of e.children)this.root.push(t)}get CellCount(){return this.options.children.length}get cells(){return this.root.filter((e=>e instanceof Xa))}addCellToIndex(e,t){this.root.splice(t+1,0,e)}addCellToColumnIndex(e,t){const r=this.columnIndexToRootIndex(t,!0);this.addCellToIndex(e,r-1)}rootIndexToColumnIndex(e){if(e<1||e>=this.root.length)throw new Error("cell 'rootIndex' should between 1 to "+(this.root.length-1));let t=0;for(let r=1;r<e;r++)t+=this.root[r].options.columnSpan||1;return t}columnIndexToRootIndex(e,t=!1){if(e<0)throw new Error("cell 'columnIndex' should not less than zero");let r=0,n=1;for(;r<=e;){if(n>=this.root.length){if(t)return this.root.length;throw new Error("cell 'columnIndex' should not great than "+(r-1))}const e=this.root[n];n+=1,r+=e&&e.options.columnSpan||1}return n-1}},t.TableRowHeight=nu,t.TableRowHeightAttributes=ru,t.TableRowProperties=ou,t.TableWidthElement=Ua,t.TextDirection={BOTTOM_TO_TOP_LEFT_TO_RIGHT:"btLr",LEFT_TO_RIGHT_TOP_TO_BOTTOM:"lrTb",TOP_TO_BOTTOM_RIGHT_TO_LEFT:"tbRl"},t.TextEffect={BLINK_BACKGROUND:"blinkBackground",LIGHTS:"lights",ANTS_BLACK:"antsBlack",ANTS_RED:"antsRed",SHIMMER:"shimmer",SPARKLE:"sparkle",NONE:"none"},t.TextRun=yo,t.TextWrappingSide=Ei,t.TextWrappingType=xi,t.ThematicBreak=Bn,t.Type=Hs,t.Underline=ho,t.UnderlineType=lo,t.VerticalAlign={BOTTOM:"bottom",CENTER:"center",TOP:"top"},t.VerticalAlignAttributes=xs,t.VerticalAlignElement=Es,t.VerticalMerge=Ga,t.VerticalMergeType=za,t.VerticalPosition=jo,t.VerticalPositionAlign={BOTTOM:"bottom",CENTER:"center",INSIDE:"inside",OUTSIDE:"outside",TOP:"top"},t.VerticalPositionRelativeFrom=Co,t.WORKAROUND2="",t.WORKAROUND3="",t.WORKAROUND4="",t.WidthType=Fa,t.WrapNone=_i,t.WrapSquare=Ai,t.WrapTight=Ii,t.WrapTopAndBottom=Ri,t.XmlAttributeComponent=y,t.XmlComponent=w,t.YearLong=class extends En{constructor(){super("w:yearLong")}},t.YearShort=class extends En{constructor(){super("w:yearShort")}},t.abstractNumUniqueNumericIdGen=To,t.bookmarkUniqueNumericIdGen=Io,t.concreteNumUniqueNumericIdGen=Ao,t.convertInchesToTwip=Eo,t.convertMillimetersToTwip=e=>Math.floor(e/25.4*72*20),t.convertToXmlComponent=Jr,t.createFrameProperties=ta,t.createLineNumberType=Ns,t.createStringElement=Tn,t.dateTimeValue=bn,t.decimalNumber=nn,t.docPropertiesUniqueNumericIdGen=So,t.eighthPointMeasureValue=gn,t.hexColorValue=hn,t.hpsMeasureValue=fn,t.longHexNumber=e=>sn(e,4),t.measurementOrPercentValue=wn,t.patchDocument=(e,r)=>f(t,null,(function*(){var t,n;const o=yield el.loadAsync(e),i=new Map,s={Media:new Fu},a=new Map,u=[],c=[];let p=!1;const f=new Map;for(const[e,t]of Object.entries(o.files)){if(!e.endsWith(".xml")&&!e.endsWith(".rels")){f.set(e,yield t.async("uint8array"));continue}const n=wl(yield t.async("text"));if(e.startsWith("word/")&&!e.endsWith(".xml.rels")){const t={file:s,viewWrapper:{Relationships:{createRelationship:(t,r,n,o)=>{c.push({key:e,hyperlink:{id:t,link:n}})}}},stack:[]};i.set(e,t);for(const[o,i]of Object.entries(r.patches)){const s=`{{${o}}}`,a=Dl(n,s);Al(n,h(l({},i),{children:i.children.map((t=>{if(t instanceof fs){const r=new ps(t.options.children,ko());return c.push({key:e,hyperlink:{id:r.linkId,link:t.options.link}}),r}return t}))}),s,a,t,r.keepOriginalStyles)}const o=Fl.getMediaData(JSON.stringify(n),t.file.Media);o.length>0&&(p=!0,u.push({key:e,mediaDatas:o}))}a.set(e,n)}for(const{key:e,mediaDatas:r}of u){const n=`word/_rels/${e.split("/").pop()}.rels`,o=null!=(t=a.get(n))?t:{declaration:{attributes:{version:"1.0",encoding:"UTF-8",standalone:"yes"}},elements:[{type:"element",name:"Relationships",attributes:{xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"},elements:[]}]};a.set(n,o);const i=bl(o,"Relationships").map((e=>{var t,r,n;return(e=>{const t=parseInt(e.substring(3),10);return isNaN(t)?0:t})(null!=(n=null==(r=null==(t=e.attributes)?void 0:t.Id)?void 0:r.toString())?n:"")})).reduce(((e,t)=>Math.max(e,t)),0)+1,s=Fl.replace(JSON.stringify(a.get(e)),r,i);a.set(e,JSON.parse(s));for(let e=0;e<r.length;e++){const{fileName:t}=r[e];Ll(o,i+e,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t}`)}}for(const{key:e,hyperlink:t}of c){const r=`word/_rels/${e.split("/").pop()}.rels`,o=null!=(n=a.get(r))?n:{declaration:{attributes:{version:"1.0",encoding:"UTF-8",standalone:"yes"}},elements:[{type:"element",name:"Relationships",attributes:{xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"},elements:[]}]};a.set(r,o),Ll(o,t.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",t.link,cs)}if(p){const e=a.get("[Content_Types].xml");if(!e)throw new Error("Could not find content types file");Pl(e,"image/png","png"),Pl(e,"image/jpeg","jpeg"),Pl(e,"image/jpeg","jpg"),Pl(e,"image/bmp","bmp"),Pl(e,"image/gif","gif")}const d=new el;for(const[e,t]of a){const r=Yr(t);d.file(e,r)}for(const[e,t]of f)d.file(e,t);for(const{stream:e,fileName:t}of s.Media.Array)d.file(`word/media/${t}`,e);return d.generateAsync({type:"uint8array",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})})),t.percentageValue=mn,t.pointMeasureValue=yn,t.positiveUniversalMeasureValue=ln,t.sectionMarginDefaults=zs,t.sectionPageSizeDefaults=Ws,t.shortHexNumber=an,t.signedHpsMeasureValue=e=>"string"==typeof e?cn(e):nn(e),t.signedTwipsMeasureValue=pn,t.twipsMeasureValue=dn,t.uCharHexNumber=un,t.uniqueId=ko,t.uniqueNumericIdCreator=_o,t.uniqueUuid=No,t.universalMeasureValue=cn,t.unsignedDecimalNumber=on}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";r(692);var e=document.getElementById("app");e&&(e.innerHTML="Hello, TypeScript with Webpack!")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBZSxDQUNsQixJQUFPLElBQ1AsR0FBTSxJQUNOLEdBQU0sSUFDTixLQUFRLElBQ1IsS0FBUSxLQUVWdkIsRUFBS3NCLFNBQVcsQ0FDZCxJQUFPLElBQ1AsR0FBTSxJQUNOLEdBQU0sSUFDTixLQUFRLElBQ1IsS0FBUSxJQUNSLE1BQVMsSUFDVCxPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLEtBQVEsSUFDUixPQUFVLElBQ1YsSUFBTyxJQUNQLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLEtBQVEsSUFDUixPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixLQUFRLElBQ1IsT0FBVSxJQUNWLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLE9BQVUsSUFDVixPQUFVLElBQ1YsS0FBUSxJQUNSLE1BQVMsSUFDVCxPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixLQUFRLElBQ1IsT0FBVSxJQUNWLE9BQVUsSUFDVixNQUFTLElBQ1QsTUFBUyxJQUNULE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLEtBQVEsSUFDUixPQUFVLElBQ1YsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsSUFBTyxJQUNQLEtBQVEsSUFDUixPQUFVLElBQ1YsTUFBUyxJQUNULE9BQVUsSUFDVixLQUFRLElBQ1IsT0FBVSxJQUNWLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLE9BQVUsSUFDVixPQUFVLElBQ1YsS0FBUSxJQUNSLE1BQVMsSUFDVCxNQUFTLElBQ1QsT0FBVSxJQUNWLE1BQVMsSUFDVCxPQUFVLElBQ1YsS0FBUSxJQUNSLE9BQVUsSUFDVixLQUFRLElBQ1IsS0FBUSxJQUNSLElBQU8sSUFDUCxLQUFRLElBQ1IsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsT0FBVSxJQUNWLElBQU8sSUFDUCxPQUFVLElBQ1YsS0FBUSxJQUNSLElBQU8sSUFDUCxLQUFRLElBQ1IsTUFBUyxJQUNULElBQU8sSUFDUCxJQUFPLElBQ1AsS0FBUSxJQUNSLElBQU8sSUFDUCxPQUFVLElBQ1YsS0FBUSxJQUNSLEtBQVEsSUFDUixLQUFRLElBQ1IsTUFBUyxJQUNULE1BQVMsSUFDVCxLQUFRLElBQ1IsT0FBVSxJQUNWLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixPQUFVLElBQ1YsT0FBVSxJQUNWLE9BQVUsSUFDVixNQUFTLElBQ1QsT0FBVSxJQUNWLE1BQVMsSUFDVCxNQUFTLElBQ1QsT0FBVSxJQUNWLE9BQVUsSUFDVixLQUFRLElBQ1IsS0FBUSxJQUNSLEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULFFBQVcsSUFDWCxLQUFRLElBQ1IsSUFBTyxJQUNQLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixHQUFNLElBQ04sR0FBTSxJQUNOLEdBQU0sSUFDTixRQUFXLElBQ1gsR0FBTSxJQUNOLElBQU8sSUFDUCxNQUFTLElBQ1QsSUFBTyxJQUNQLFFBQVcsSUFDWCxJQUFPLElBQ1AsSUFBTyxJQUNQLElBQU8sSUFDUCxNQUFTLElBQ1QsTUFBUyxJQUNULEtBQVEsSUFDUixNQUFTLElBQ1QsTUFBUyxJQUNULFFBQVcsSUFDWCxLQUFRLElBQ1IsSUFBTyxJQUNQLE1BQVMsSUFDVCxLQUFRLElBQ1IsTUFBUyxJQUNULE9BQVUsSUFDVixHQUFNLElBQ04sR0FBTSxJQUNOLEdBQU0sSUFDTixRQUFXLElBQ1gsR0FBTSxJQUNOLElBQU8sSUFDUCxPQUFVLElBQ1YsTUFBUyxJQUNULElBQU8sSUFDUCxRQUFXLElBQ1gsSUFBTyxJQUNQLElBQU8sSUFDUCxJQUFPLElBQ1AsTUFBUyxJQUNULFNBQVksSUFDWixNQUFTLElBQ1QsSUFBTyxJQUNQLEtBQVEsS0FDUixLQUFRLEtBQ1IsT0FBVSxLQUNWLEtBQVEsS0FDUixJQUFPLEtBQ1AsSUFBTyxLQUNQLElBQU8sS0FDUCxNQUFTLEtBQ1QsTUFBUyxLQUNULE1BQVMsS0FDVCxNQUFTLEtBQ1Qs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QXkvRyxFQUFvQnJsRyxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmRixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU8vVCxNQUFRLElBQUk2VSxTQUFTLGNBQWIsRUFDaEIsQ0FBRSxNQUFPNVEsR0FDUixHQUFzQixpQkFBWCtQLE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsc0JDQ2IsRUFBUSxLQUFuQixJQUNJMmxHLEVBQU0xdkYsU0FBUzJ2RixlQUFlLE9BQzlCRCxJQUNBQSxFQUFJRSxVQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdHlwZXNjcmlwdC13ZWJwYWNrLWFwcC8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktdHlwZXNjcmlwdC13ZWJwYWNrLWFwcC8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXktdHlwZXNjcmlwdC13ZWJwYWNrLWFwcC8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL215LXR5cGVzY3JpcHQtd2VicGFjay1hcHAvLi9ub2RlX21vZHVsZXMvZG9jeC9idWlsZC9pbmRleC5janMiLCJ3ZWJwYWNrOi8vbXktdHlwZXNjcmlwdC13ZWJwYWNrLWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9teS10eXBlc2NyaXB0LXdlYnBhY2stYXBwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbXktdHlwZXNjcmlwdC13ZWJwYWNrLWFwcC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG5jb25zdCBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG5jb25zdCBjdXN0b21JbnNwZWN0U3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgPyBTeW1ib2xbJ2ZvciddKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgOiBudWxsXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuY29uc3QgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBjb25zdCBwcm90byA9IHsgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcnIsIHByb3RvKVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG4gIHJldHVybiBidWZcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG5mdW5jdGlvbiBmcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlWaWV3KHZhbHVlKVxuICB9XG5cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAoaXNJbnN0YW5jZSh2YWx1ZSwgU2hhcmVkQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIFNoYXJlZEFycmF5QnVmZmVyKSkpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHZhbHVlT2YgPSB2YWx1ZS52YWx1ZU9mICYmIHZhbHVlLnZhbHVlT2YoKVxuICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlT2YsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGNvbnN0IGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0oJ3N0cmluZycpLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gIClcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBOb3RlOiBDaGFuZ2UgcHJvdG90eXBlICphZnRlciogQnVmZmVyLmZyb20gaXMgZGVmaW5lZCB0byB3b3JrYXJvdW5kIENocm9tZSBidWc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzE0OFxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlci5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKEJ1ZmZlciwgVWludDhBcnJheSlcblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgY29uc3QgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgbGV0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgY29uc3QgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlWaWV3IChhcnJheVZpZXcpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYXJyYXlWaWV3LCBVaW50OEFycmF5KSkge1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgVWludDhBcnJheShhcnJheVZpZXcpXG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpXG4gIH1cbiAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgbGV0IGJ1ZlxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICBjb25zdCBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICBsZXQgeCA9IGEubGVuZ3RoXG4gIGxldCB5ID0gYi5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIGxldCBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgbGV0IHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgYnVmID0gbGlzdFtpXVxuICAgIGlmIChpc0luc3RhbmNlKGJ1ZiwgVWludDhBcnJheSkpIHtcbiAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIGJ1ZixcbiAgICAgICAgICBwb3NcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICB9XG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgaXNJbnN0YW5jZShzdHJpbmcsIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICApXG4gIH1cblxuICBjb25zdCBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGNvbnN0IG11c3RNYXRjaCA9IChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gPT09IHRydWUpXG4gIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkge1xuICAgICAgICAgIHJldHVybiBtdXN0TWF0Y2ggPyAtMSA6IHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2VyY2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIGNvbnN0IGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIGxldCBzdHIgPSAnJ1xuICBjb25zdCBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csICckMSAnKS50cmltKClcbiAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuaWYgKGN1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgQnVmZmVyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGFyZ2V0ID0gQnVmZmVyLmZyb20odGFyZ2V0LCB0YXJnZXQub2Zmc2V0LCB0YXJnZXQuYnl0ZUxlbmd0aClcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHRhcmdldClcbiAgICApXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICBsZXQgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgbGV0IHkgPSBlbmQgLSBzdGFydFxuICBjb25zdCBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIGNvbnN0IHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIGNvbnN0IHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0IC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICBsZXQgaW5kZXhTaXplID0gMVxuICBsZXQgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICBsZXQgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICBsZXQgaVxuICBpZiAoZGlyKSB7XG4gICAgbGV0IGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICBjb25zdCByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIGNvbnN0IHJlcyA9IFtdXG5cbiAgbGV0IGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIGNvbnN0IGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIGxldCBjb2RlUG9pbnQgPSBudWxsXG4gICAgbGV0IGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRilcbiAgICAgID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERilcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKVxuICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICBsZXQgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG5jb25zdCBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgY29uc3QgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgbGV0IG91dCA9ICcnXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgbGV0IHJlcyA9ICcnXG4gIC8vIElmIGJ5dGVzLmxlbmd0aCBpcyBvZGQsIHRoZSBsYXN0IDggYml0cyBtdXN0IGJlIGlnbm9yZWQgKHNhbWUgYXMgbm9kZS5qcylcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgY29uc3QgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICBsZXQgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGxvID0gZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNFxuXG4gIGNvbnN0IGhpID0gdGhpc1srK29mZnNldF0gK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIGxhc3QgKiAyICoqIDI0XG5cbiAgcmV0dXJuIEJpZ0ludChsbykgKyAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgaGkgPSBmaXJzdCAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgY29uc3QgbG8gPSB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3RcblxuICByZXR1cm4gKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSkgKyBCaWdJbnQobG8pXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoXG4gIGxldCBtdWwgPSAxXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDRdICtcbiAgICB0aGlzW29mZnNldCArIDVdICogMiAqKiA4ICtcbiAgICB0aGlzW29mZnNldCArIDZdICogMiAqKiAxNiArXG4gICAgKGxhc3QgPDwgMjQpIC8vIE92ZXJmbG93XG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NEJFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gKGZpcnN0IDw8IDI0KSArIC8vIE92ZXJmbG93XG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQodGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRMRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICByZXR1cm4gb2Zmc2V0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NEJFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyA3XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNl0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDVdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA0XSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgM10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDJdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAxXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0XSA9IGhpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gMFxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgY29uc3QgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIHdoZW4gYXZhaWxhYmxlLCBtaXNzaW5nIGZyb20gSUUxMVxuICAgIHRoaXMuY29weVdpdGhpbih0YXJnZXRTdGFydCwgc3RhcnQsIGVuZClcbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgdmFsID0gTnVtYmVyKHZhbClcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICBsZXQgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBDVVNUT00gRVJST1JTXG4vLyA9PT09PT09PT09PT09XG5cbi8vIFNpbXBsaWZpZWQgdmVyc2lvbnMgZnJvbSBOb2RlLCBjaGFuZ2VkIGZvciBCdWZmZXItb25seSB1c2FnZVxuY29uc3QgZXJyb3JzID0ge31cbmZ1bmN0aW9uIEUgKHN5bSwgZ2V0TWVzc2FnZSwgQmFzZSkge1xuICBlcnJvcnNbc3ltXSA9IGNsYXNzIE5vZGVFcnJvciBleHRlbmRzIEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgIHN1cGVyKClcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywge1xuICAgICAgICB2YWx1ZTogZ2V0TWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KVxuXG4gICAgICAvLyBBZGQgdGhlIGVycm9yIGNvZGUgdG8gdGhlIG5hbWUgdG8gaW5jbHVkZSBpdCBpbiB0aGUgc3RhY2sgdHJhY2UuXG4gICAgICB0aGlzLm5hbWUgPSBgJHt0aGlzLm5hbWV9IFske3N5bX1dYFxuICAgICAgLy8gQWNjZXNzIHRoZSBzdGFjayB0byBnZW5lcmF0ZSB0aGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGVcbiAgICAgIC8vIGZyb20gdGhlIG5hbWUuXG4gICAgICB0aGlzLnN0YWNrIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAvLyBSZXNldCB0aGUgbmFtZSB0byB0aGUgYWN0dWFsIG5hbWUuXG4gICAgICBkZWxldGUgdGhpcy5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IGNvZGUgKCkge1xuICAgICAgcmV0dXJuIHN5bVxuICAgIH1cblxuICAgIHNldCBjb2RlICh2YWx1ZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2RlJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5uYW1lfSBbJHtzeW19XTogJHt0aGlzLm1lc3NhZ2V9YFxuICAgIH1cbiAgfVxufVxuXG5FKCdFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMnLFxuICBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gYCR7bmFtZX0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYFxuICAgIH1cblxuICAgIHJldHVybiAnQXR0ZW1wdCB0byBhY2Nlc3MgbWVtb3J5IG91dHNpZGUgYnVmZmVyIGJvdW5kcydcbiAgfSwgUmFuZ2VFcnJvcilcbkUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJyxcbiAgZnVuY3Rpb24gKG5hbWUsIGFjdHVhbCkge1xuICAgIHJldHVybiBgVGhlIFwiJHtuYW1lfVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgYWN0dWFsfWBcbiAgfSwgVHlwZUVycm9yKVxuRSgnRVJSX09VVF9PRl9SQU5HRScsXG4gIGZ1bmN0aW9uIChzdHIsIHJhbmdlLCBpbnB1dCkge1xuICAgIGxldCBtc2cgPSBgVGhlIHZhbHVlIG9mIFwiJHtzdHJ9XCIgaXMgb3V0IG9mIHJhbmdlLmBcbiAgICBsZXQgcmVjZWl2ZWQgPSBpbnB1dFxuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGlucHV0KSAmJiBNYXRoLmFicyhpbnB1dCkgPiAyICoqIDMyKSB7XG4gICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihTdHJpbmcoaW5wdXQpKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnYmlnaW50Jykge1xuICAgICAgcmVjZWl2ZWQgPSBTdHJpbmcoaW5wdXQpXG4gICAgICBpZiAoaW5wdXQgPiBCaWdJbnQoMikgKiogQmlnSW50KDMyKSB8fCBpbnB1dCA8IC0oQmlnSW50KDIpICoqIEJpZ0ludCgzMikpKSB7XG4gICAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKHJlY2VpdmVkKVxuICAgICAgfVxuICAgICAgcmVjZWl2ZWQgKz0gJ24nXG4gICAgfVxuICAgIG1zZyArPSBgIEl0IG11c3QgYmUgJHtyYW5nZX0uIFJlY2VpdmVkICR7cmVjZWl2ZWR9YFxuICAgIHJldHVybiBtc2dcbiAgfSwgUmFuZ2VFcnJvcilcblxuZnVuY3Rpb24gYWRkTnVtZXJpY2FsU2VwYXJhdG9yICh2YWwpIHtcbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gdmFsLmxlbmd0aFxuICBjb25zdCBzdGFydCA9IHZhbFswXSA9PT0gJy0nID8gMSA6IDBcbiAgZm9yICg7IGkgPj0gc3RhcnQgKyA0OyBpIC09IDMpIHtcbiAgICByZXMgPSBgXyR7dmFsLnNsaWNlKGkgLSAzLCBpKX0ke3Jlc31gXG4gIH1cbiAgcmV0dXJuIGAke3ZhbC5zbGljZSgwLCBpKX0ke3Jlc31gXG59XG5cbi8vIENIRUNLIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGNoZWNrQm91bmRzIChidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBpZiAoYnVmW29mZnNldF0gPT09IHVuZGVmaW5lZCB8fCBidWZbb2Zmc2V0ICsgYnl0ZUxlbmd0aF0gPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgYnVmLmxlbmd0aCAtIChieXRlTGVuZ3RoICsgMSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbnRCSSAodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHtcbiAgICBjb25zdCBuID0gdHlwZW9mIG1pbiA9PT0gJ2JpZ2ludCcgPyAnbicgOiAnJ1xuICAgIGxldCByYW5nZVxuICAgIGlmIChieXRlTGVuZ3RoID4gMykge1xuICAgICAgaWYgKG1pbiA9PT0gMCB8fCBtaW4gPT09IEJpZ0ludCgwKSkge1xuICAgICAgICByYW5nZSA9IGA+PSAwJHtufSBhbmQgPCAyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4fSR7bn1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9IGA+PSAtKDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn0pIGFuZCA8IDIgKiogYCArXG4gICAgICAgICAgICAgICAgYCR7KGJ5dGVMZW5ndGggKyAxKSAqIDggLSAxfSR7bn1gXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlID0gYD49ICR7bWlufSR7bn0gYW5kIDw9ICR7bWF4fSR7bn1gXG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSgndmFsdWUnLCByYW5nZSwgdmFsdWUpXG4gIH1cbiAgY2hlY2tCb3VuZHMoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyICh2YWx1ZSwgbmFtZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0Vycm9yICh2YWx1ZSwgbGVuZ3RoLCB0eXBlKSB7XG4gIGlmIChNYXRoLmZsb29yKHZhbHVlKSAhPT0gdmFsdWUpIHtcbiAgICB2YWxpZGF0ZU51bWJlcih2YWx1ZSwgdHlwZSlcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JywgJ2FuIGludGVnZXInLCB2YWx1ZSlcbiAgfVxuXG4gIGlmIChsZW5ndGggPCAwKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfQlVGRkVSX09VVF9PRl9CT1VORFMoKVxuICB9XG5cbiAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgPj0gJHt0eXBlID8gMSA6IDB9IGFuZCA8PSAke2xlbmd0aH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUpXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxuY29uc3QgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIGxldCBjb2RlUG9pbnRcbiAgY29uc3QgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICBsZXQgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgY29uc3QgYnl0ZXMgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIGxldCBjLCBoaSwgbG9cbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXIgb3IgVWludDhBcnJheSBvYmplY3RzIGZyb20gb3RoZXIgY29udGV4dHMgKGkuZS4gaWZyYW1lcykgZG8gbm90IHBhc3Ncbi8vIHRoZSBgaW5zdGFuY2VvZmAgY2hlY2sgYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgb2YgdGhhdCB0eXBlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0luc3RhbmNlIChvYmosIHR5cGUpIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHxcbiAgICAob2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZSlcbn1cbmZ1bmN0aW9uIG51bWJlcklzTmFOIChvYmopIHtcbiAgLy8gRm9yIElFMTEgc3VwcG9ydFxuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuLy8gQ3JlYXRlIGxvb2t1cCB0YWJsZSBmb3IgYHRvU3RyaW5nKCdoZXgnKWBcbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzIxOVxuY29uc3QgaGV4U2xpY2VMb29rdXBUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGFscGhhYmV0ID0gJzAxMjM0NTY3ODlhYmNkZWYnXG4gIGNvbnN0IHRhYmxlID0gbmV3IEFycmF5KDI1NilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgY29uc3QgaTE2ID0gaSAqIDE2XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICB0YWJsZVtpMTYgKyBqXSA9IGFscGhhYmV0W2ldICsgYWxwaGFiZXRbal1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhYmxlXG59KSgpXG5cbi8vIFJldHVybiBub3QgZnVuY3Rpb24gd2l0aCBFcnJvciBpZiBCaWdJbnQgbm90IHN1cHBvcnRlZFxuZnVuY3Rpb24gZGVmaW5lQmlnSW50TWV0aG9kIChmbikge1xuICByZXR1cm4gdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyBCdWZmZXJCaWdJbnROb3REZWZpbmVkIDogZm5cbn1cblxuZnVuY3Rpb24gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignQmlnSW50IG5vdCBzdXBwb3J0ZWQnKVxufVxuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUyLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZTIoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSk7XG5jbGFzcyBCYXNlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iocm9vdEtleSkge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyb290S2V5XCIpO1xuICAgIHRoaXMucm9vdEtleSA9IHJvb3RLZXk7XG4gIH1cbn1cbmNvbnN0IEVNUFRZX09CSkVDVCA9IE9iamVjdC5zZWFsKHt9KTtcbmNsYXNzIFhtbENvbXBvbmVudCBleHRlbmRzIEJhc2VYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihyb290S2V5KSB7XG4gICAgc3VwZXIocm9vdEtleSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvcHJlZmVyLXJlYWRvbmx5LXR5cGUsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicm9vdFwiKTtcbiAgICB0aGlzLnJvb3QgPSBuZXcgQXJyYXkoKTtcbiAgfVxuICAvLyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIGZvcm1hdHRlciB0byBnZXQgdGhlIFhNTCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbXBvbmVudC5cbiAgLy8gSXQgaXMgY2FsbGVkIHJlY3Vyc2l2ZWx5IGZvciBhbGwgY2hpbGQgY29tcG9uZW50cy5cbiAgLy8gSXQgaXMgYSBzZXJpYWxpemVyIHRvIGJlIHVzZWQgaW4gdGhlIHhtbCBsaWJyYXJ5LlxuICAvLyBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS94bWxcbiAgLy8gQ2hpbGQgY29tcG9uZW50cyBjYW4gb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY3VzdG9taXplIHRoZSBYTUwgcmVwcmVzZW50YXRpb24sIG9yIGV4ZWN1dGUgc2lkZSBlZmZlY3RzLlxuICBwcmVwRm9yWG1sKGNvbnRleHQpIHtcbiAgICB2YXIgX2E7XG4gICAgY29udGV4dC5zdGFjay5wdXNoKHRoaXMpO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5yb290Lm1hcCgoY29tcCkgPT4ge1xuICAgICAgaWYgKGNvbXAgaW5zdGFuY2VvZiBCYXNlWG1sQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBjb21wLnByZXBGb3JYbWwoY29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29tcDtcbiAgICB9KS5maWx0ZXIoKGNvbXApID0+IGNvbXAgIT09IHZvaWQgMCk7XG4gICAgY29udGV4dC5zdGFjay5wb3AoKTtcbiAgICByZXR1cm4ge1xuICAgICAgW3RoaXMucm9vdEtleV06IGNoaWxkcmVuLmxlbmd0aCA/IGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiAoKF9hID0gY2hpbGRyZW5bMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5fYXR0cikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuIDogRU1QVFlfT0JKRUNUXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgRG8gbm90IHVzZSB0aGlzIG1ldGhvZC4gSXQgaXMgb25seSB1c2VkIGludGVybmFsbHkgYnkgdGhlIGxpYnJhcnkuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLlxuICAgKi9cbiAgYWRkQ2hpbGRFbGVtZW50KGNoaWxkKSB7XG4gICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5jbGFzcyBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgICBpZiAocmVzdWx0ICYmICh0eXBlb2YgcmVzdWx0W3RoaXMucm9vdEtleV0gIT09IFwib2JqZWN0XCIgfHwgT2JqZWN0LmtleXMocmVzdWx0W3RoaXMucm9vdEtleV0pLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbn1cbmNsYXNzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCBleHRlbmRzIEJhc2VYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihyb290KSB7XG4gICAgc3VwZXIoXCJfYXR0clwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiKTtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICB9XG4gIHByZXBGb3JYbWwoXykge1xuICAgIGNvbnN0IGF0dHJzID0ge307XG4gICAgT2JqZWN0LmtleXModGhpcy5yb290KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5yb290W2tleV07XG4gICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICBjb25zdCBuZXdLZXkgPSB0aGlzLnhtbEtleXMgJiYgdGhpcy54bWxLZXlzW2tleV0gfHwga2V5O1xuICAgICAgICBhdHRyc1tuZXdLZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgX2F0dHI6IGF0dHJzIH07XG4gIH1cbn1cbmNsYXNzIE5leHRBdHRyaWJ1dGVDb21wb25lbnQgZXh0ZW5kcyBCYXNlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iocm9vdCkge1xuICAgIHN1cGVyKFwiX2F0dHJcIik7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgfVxuICBwcmVwRm9yWG1sKF8pIHtcbiAgICBjb25zdCBhdHRycyA9IE9iamVjdC52YWx1ZXModGhpcy5yb290KS5maWx0ZXIoKHsgdmFsdWUgfSkgPT4gdmFsdWUgIT09IHZvaWQgMCkucmVkdWNlKChhY2MsIHsga2V5LCB2YWx1ZSB9KSA9PiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBhY2MpLCB7IFtrZXldOiB2YWx1ZSB9KSwge30pO1xuICAgIHJldHVybiB7IF9hdHRyOiBhdHRycyB9O1xuICB9XG59XG5jbGFzcyBBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB2YWw6IFwidzp2YWxcIixcbiAgICAgIGNvbG9yOiBcInc6Y29sb3JcIixcbiAgICAgIGZpbGw6IFwidzpmaWxsXCIsXG4gICAgICBzcGFjZTogXCJ3OnNwYWNlXCIsXG4gICAgICBzejogXCJ3OnN6XCIsXG4gICAgICB0eXBlOiBcInc6dHlwZVwiLFxuICAgICAgcnNpZFI6IFwidzpyc2lkUlwiLFxuICAgICAgcnNpZFJQcjogXCJ3OnJzaWRSUHJcIixcbiAgICAgIHJzaWRTZWN0OiBcInc6cnNpZFNlY3RcIixcbiAgICAgIHc6IFwidzp3XCIsXG4gICAgICBoOiBcInc6aFwiLFxuICAgICAgdG9wOiBcInc6dG9wXCIsXG4gICAgICByaWdodDogXCJ3OnJpZ2h0XCIsXG4gICAgICBib3R0b206IFwidzpib3R0b21cIixcbiAgICAgIGxlZnQ6IFwidzpsZWZ0XCIsXG4gICAgICBoZWFkZXI6IFwidzpoZWFkZXJcIixcbiAgICAgIGZvb3RlcjogXCJ3OmZvb3RlclwiLFxuICAgICAgZ3V0dGVyOiBcInc6Z3V0dGVyXCIsXG4gICAgICBsaW5lUGl0Y2g6IFwidzpsaW5lUGl0Y2hcIixcbiAgICAgIHBvczogXCJ3OnBvc1wiXG4gICAgfSk7XG4gIH1cbn1cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDoge307XG5mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxKHgpIHtcbiAgcmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCBcImRlZmF1bHRcIikgPyB4W1wiZGVmYXVsdFwiXSA6IHg7XG59XG52YXIgc2F4JDEgPSB7fTtcbnZhciBldmVudHMgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiID8gUmVmbGVjdCA6IG51bGw7XG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gXCJmdW5jdGlvblwiID8gUi5hcHBseSA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseTIodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG59O1xudmFyIFJlZmxlY3RPd25LZXlzO1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzO1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXMyKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5czIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pXG4gICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOMih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbmV2ZW50cy5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuZXZlbnRzLmV4cG9ydHMub25jZSA9IG9uY2UyO1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHZvaWQgMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHZvaWQgMDtcbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSBcIm51bWJlclwiIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgXCIuXCIpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHZvaWQgMCB8fCB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB2b2lkIDA7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09IFwibnVtYmVyXCIgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgXCIuXCIpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcbmZ1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB2b2lkIDApXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSB0eXBlID09PSBcImVycm9yXCI7XG4gIHZhciBldmVudHMyID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzMiAhPT0gdm9pZCAwKVxuICAgIGRvRXJyb3IgPSBkb0Vycm9yICYmIGV2ZW50czIuZXJyb3IgPT09IHZvaWQgMDtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBlcjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIiArIChlciA/IFwiIChcIiArIGVyLm1lc3NhZ2UgKyBcIilcIiA6IFwiXCIpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjtcbiAgfVxuICB2YXIgaGFuZGxlciA9IGV2ZW50czJbdHlwZV07XG4gIGlmIChoYW5kbGVyID09PSB2b2lkIDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVyczIgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnMyW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50czI7XG4gIHZhciBleGlzdGluZztcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGV2ZW50czIgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50czIgPT09IHZvaWQgMCkge1xuICAgIGV2ZW50czIgPSB0YXJnZXQuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGlmIChldmVudHMyLm5ld0xpc3RlbmVyICE9PSB2b2lkIDApIHtcbiAgICAgIHRhcmdldC5lbWl0KFxuICAgICAgICBcIm5ld0xpc3RlbmVyXCIsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lclxuICAgICAgKTtcbiAgICAgIGV2ZW50czIgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHMyW3R5cGVdO1xuICB9XG4gIGlmIChleGlzdGluZyA9PT0gdm9pZCAwKSB7XG4gICAgZXhpc3RpbmcgPSBldmVudHMyW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZXhpc3RpbmcgPSBldmVudHMyW3R5cGVdID0gcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICAgIG0gPSBfZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKFwiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIiArIGV4aXN0aW5nLmxlbmd0aCArIFwiIFwiICsgU3RyaW5nKHR5cGUpICsgXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTtcbiAgICAgIHcubmFtZSA9IFwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCI7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbn07XG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlMiA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHZvaWQgMCwgdGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUyKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZTIud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBldmVudHMyLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIGV2ZW50czIgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMyID09PSB2b2lkIDApXG4gICAgcmV0dXJuIHRoaXM7XG4gIGxpc3QgPSBldmVudHMyW3R5cGVdO1xuICBpZiAobGlzdCA9PT0gdm9pZCAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGVsc2Uge1xuICAgICAgZGVsZXRlIGV2ZW50czJbdHlwZV07XG4gICAgICBpZiAoZXZlbnRzMi5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIiwgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBwb3NpdGlvbiA9IC0xO1xuICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICBlbHNlIHtcbiAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgfVxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgIGV2ZW50czJbdHlwZV0gPSBsaXN0WzBdO1xuICAgIGlmIChldmVudHMyLnJlbW92ZUxpc3RlbmVyICE9PSB2b2lkIDApXG4gICAgICB0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gIHZhciBsaXN0ZW5lcnMyLCBldmVudHMyLCBpO1xuICBldmVudHMyID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzMiA9PT0gdm9pZCAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAoZXZlbnRzMi5yZW1vdmVMaXN0ZW5lciA9PT0gdm9pZCAwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRzMlt0eXBlXSAhPT0gdm9pZCAwKSB7XG4gICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBlbHNlXG4gICAgICAgIGRlbGV0ZSBldmVudHMyW3R5cGVdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzMik7XG4gICAgdmFyIGtleTtcbiAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChrZXkgPT09IFwicmVtb3ZlTGlzdGVuZXJcIilcbiAgICAgICAgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpO1xuICAgIHRoaXMuX2V2ZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBsaXN0ZW5lcnMyID0gZXZlbnRzMlt0eXBlXTtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyczIpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVyczIgIT09IHZvaWQgMCkge1xuICAgIGZvciAoaSA9IGxpc3RlbmVyczIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzMltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50czIgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50czIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gW107XG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzMlt0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHZvaWQgMClcbiAgICByZXR1cm4gW107XG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcbiAgcmV0dXJuIHVud3JhcCA/IHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50czIgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMyICE9PSB2b2lkIDApIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50czJbdHlwZV07XG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIG9uY2UyKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUyLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgZXJyb3JMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICByZXNvbHZlMihbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH1cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gXCJlcnJvclwiKSB7XG4gICAgICBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBlcnJvckxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIFwiZXJyb3JcIiwgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5mdW5jdGlvbiBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgbGlzdGVuZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gd3JhcExpc3RlbmVyKGFyZykge1xuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbnZhciBldmVudHNFeHBvcnRzID0gZXZlbnRzLmV4cG9ydHM7XG52YXIgaW5oZXJpdHNfYnJvd3NlciA9IHsgZXhwb3J0czoge30gfTtcbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIGluaGVyaXRzX2Jyb3dzZXIuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzMihjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIGluaGVyaXRzX2Jyb3dzZXIuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzMihjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgfTtcbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICAgIH1cbiAgfTtcbn1cbnZhciBpbmhlcml0c19icm93c2VyRXhwb3J0cyA9IGluaGVyaXRzX2Jyb3dzZXIuZXhwb3J0cztcbmZ1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzKHgpIHtcbiAgcmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCBcImRlZmF1bHRcIikgPyB4W1wiZGVmYXVsdFwiXSA6IHg7XG59XG52YXIgYnJvd3NlciQxID0geyBleHBvcnRzOiB7fSB9O1xudmFyIHByb2Nlc3MgPSBicm93c2VyJDEuZXhwb3J0cyA9IHt9O1xudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKTtcbn1cbihmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gIH1cbn0pKCk7XG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gIH1cbiAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgfVxuICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICB9XG4gIH1cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRyYWluaW5nID0gZmFsc2U7XG4gIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZUluZGV4ID0gLTE7XG4gIH1cbiAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgIGRyYWluUXVldWUoKTtcbiAgfVxufVxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgaWYgKGRyYWluaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICBkcmFpbmluZyA9IHRydWU7XG4gIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChsZW4pIHtcbiAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9IFtdO1xuICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICB9XG4gIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gIGRyYWluaW5nID0gZmFsc2U7XG4gIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbihmdW4pIHtcbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICB9XG4gIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICB0aGlzLmZ1biA9IGZ1bjtcbiAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSBcImJyb3dzZXJcIjtcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSBcIlwiO1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHtcbn1cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gW107XG59O1xucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24obmFtZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKTtcbn07XG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gXCIvXCI7XG59O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uKGRpcikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gMDtcbn07XG52YXIgYnJvd3NlckV4cG9ydHMgPSBicm93c2VyJDEuZXhwb3J0cztcbmNvbnN0IHByb2Nlc3MkMSA9IC8qIEBfX1BVUkVfXyAqLyBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyhicm93c2VyRXhwb3J0cyk7XG52YXIgc3RyZWFtQnJvd3NlcjtcbnZhciBoYXNSZXF1aXJlZFN0cmVhbUJyb3dzZXI7XG5mdW5jdGlvbiByZXF1aXJlU3RyZWFtQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkU3RyZWFtQnJvd3NlcilcbiAgICByZXR1cm4gc3RyZWFtQnJvd3NlcjtcbiAgaGFzUmVxdWlyZWRTdHJlYW1Ccm93c2VyID0gMTtcbiAgc3RyZWFtQnJvd3NlciA9IGV2ZW50c0V4cG9ydHMuRXZlbnRFbWl0dGVyO1xuICByZXR1cm4gc3RyZWFtQnJvd3Nlcjtcbn1cbnZhciBidWZmZXIgPSB7fTtcbnZhciBiYXNlNjRKcyA9IHt9O1xudmFyIGhhc1JlcXVpcmVkQmFzZTY0SnM7XG5mdW5jdGlvbiByZXF1aXJlQmFzZTY0SnMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEJhc2U2NEpzKVxuICAgIHJldHVybiBiYXNlNjRKcztcbiAgaGFzUmVxdWlyZWRCYXNlNjRKcyA9IDE7XG4gIGJhc2U2NEpzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICBiYXNlNjRKcy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5O1xuICBiYXNlNjRKcy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheTtcbiAgdmFyIGxvb2t1cCA9IFtdO1xuICB2YXIgcmV2TG9va3VwID0gW107XG4gIHZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiA/IFVpbnQ4QXJyYXkgOiBBcnJheTtcbiAgdmFyIGNvZGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBsb29rdXBbaV0gPSBjb2RlW2ldO1xuICAgIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaTtcbiAgfVxuICByZXZMb29rdXBbXCItXCIuY2hhckNvZGVBdCgwKV0gPSA2MjtcbiAgcmV2TG9va3VwW1wiX1wiLmNoYXJDb2RlQXQoMCldID0gNjM7XG4gIGZ1bmN0aW9uIGdldExlbnMoYjY0KSB7XG4gICAgdmFyIGxlbjIgPSBiNjQubGVuZ3RoO1xuICAgIGlmIChsZW4yICUgNCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDRcIik7XG4gICAgfVxuICAgIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKFwiPVwiKTtcbiAgICBpZiAodmFsaWRMZW4gPT09IC0xKVxuICAgICAgdmFsaWRMZW4gPSBsZW4yO1xuICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuMiA/IDAgOiA0IC0gdmFsaWRMZW4gJSA0O1xuICAgIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl07XG4gIH1cbiAgZnVuY3Rpb24gYnl0ZUxlbmd0aChiNjQpIHtcbiAgICB2YXIgbGVucyA9IGdldExlbnMoYjY0KTtcbiAgICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdO1xuICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdO1xuICAgIHJldHVybiAodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQgLSBwbGFjZUhvbGRlcnNMZW47XG4gIH1cbiAgZnVuY3Rpb24gX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gICAgcmV0dXJuICh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0xlbjtcbiAgfVxuICBmdW5jdGlvbiB0b0J5dGVBcnJheShiNjQpIHtcbiAgICB2YXIgdG1wO1xuICAgIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpO1xuICAgIHZhciB2YWxpZExlbiA9IGxlbnNbMF07XG4gICAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV07XG4gICAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSk7XG4gICAgdmFyIGN1ckJ5dGUgPSAwO1xuICAgIHZhciBsZW4yID0gcGxhY2VIb2xkZXJzTGVuID4gMCA/IHZhbGlkTGVuIC0gNCA6IHZhbGlkTGVuO1xuICAgIHZhciBpMjtcbiAgICBmb3IgKGkyID0gMDsgaTIgPCBsZW4yOyBpMiArPSA0KSB7XG4gICAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTIpXSA8PCAxOCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMiArIDEpXSA8PCAxMiB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMiArIDIpXSA8PCA2IHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkyICsgMyldO1xuICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgPj4gMTYgJiAyNTU7XG4gICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCA+PiA4ICYgMjU1O1xuICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAyNTU7XG4gICAgfVxuICAgIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICAgIHRtcCA9IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMildIDw8IDIgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTIgKyAxKV0gPj4gNDtcbiAgICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMjU1O1xuICAgIH1cbiAgICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTIpXSA8PCAxMCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpMiArIDEpXSA8PCA0IHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkyICsgMildID4+IDI7XG4gICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCA+PiA4ICYgMjU1O1xuICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAyNTU7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cbiAgZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0KG51bSkge1xuICAgIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgNjNdICsgbG9va3VwW251bSA+PiAxMiAmIDYzXSArIGxvb2t1cFtudW0gPj4gNiAmIDYzXSArIGxvb2t1cFtudW0gJiA2M107XG4gIH1cbiAgZnVuY3Rpb24gZW5jb2RlQ2h1bmsodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgdG1wO1xuICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICBmb3IgKHZhciBpMiA9IHN0YXJ0OyBpMiA8IGVuZDsgaTIgKz0gMykge1xuICAgICAgdG1wID0gKHVpbnQ4W2kyXSA8PCAxNiAmIDE2NzExNjgwKSArICh1aW50OFtpMiArIDFdIDw8IDggJiA2NTI4MCkgKyAodWludDhbaTIgKyAyXSAmIDI1NSk7XG4gICAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQuam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBmcm9tQnl0ZUFycmF5KHVpbnQ4KSB7XG4gICAgdmFyIHRtcDtcbiAgICB2YXIgbGVuMiA9IHVpbnQ4Lmxlbmd0aDtcbiAgICB2YXIgZXh0cmFCeXRlcyA9IGxlbjIgJSAzO1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzO1xuICAgIGZvciAodmFyIGkyID0gMCwgbGVuMjIgPSBsZW4yIC0gZXh0cmFCeXRlczsgaTIgPCBsZW4yMjsgaTIgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGkyLCBpMiArIG1heENodW5rTGVuZ3RoID4gbGVuMjIgPyBsZW4yMiA6IGkyICsgbWF4Q2h1bmtMZW5ndGgpKTtcbiAgICB9XG4gICAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICAgIHRtcCA9IHVpbnQ4W2xlbjIgLSAxXTtcbiAgICAgIHBhcnRzLnB1c2goXG4gICAgICAgIGxvb2t1cFt0bXAgPj4gMl0gKyBsb29rdXBbdG1wIDw8IDQgJiA2M10gKyBcIj09XCJcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgICB0bXAgPSAodWludDhbbGVuMiAtIDJdIDw8IDgpICsgdWludDhbbGVuMiAtIDFdO1xuICAgICAgcGFydHMucHVzaChcbiAgICAgICAgbG9va3VwW3RtcCA+PiAxMF0gKyBsb29rdXBbdG1wID4+IDQgJiA2M10gKyBsb29rdXBbdG1wIDw8IDIgJiA2M10gKyBcIj1cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XG4gIH1cbiAgcmV0dXJuIGJhc2U2NEpzO1xufVxudmFyIGllZWU3NTQgPSB7fTtcbi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG52YXIgaGFzUmVxdWlyZWRJZWVlNzU0O1xuZnVuY3Rpb24gcmVxdWlyZUllZWU3NTQoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEllZWU3NTQpXG4gICAgcmV0dXJuIGllZWU3NTQ7XG4gIGhhc1JlcXVpcmVkSWVlZTc1NCA9IDE7XG4gIGllZWU3NTQucmVhZCA9IGZ1bmN0aW9uKGJ1ZmZlcjIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gICAgdmFyIGUsIG07XG4gICAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gICAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gICAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICAgIHZhciBuQml0cyA9IC03O1xuICAgIHZhciBpID0gaXNMRSA/IG5CeXRlcyAtIDEgOiAwO1xuICAgIHZhciBkID0gaXNMRSA/IC0xIDogMTtcbiAgICB2YXIgcyA9IGJ1ZmZlcjJbb2Zmc2V0ICsgaV07XG4gICAgaSArPSBkO1xuICAgIGUgPSBzICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gICAgcyA+Pj0gLW5CaXRzO1xuICAgIG5CaXRzICs9IGVMZW47XG4gICAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXIyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHtcbiAgICB9XG4gICAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgICBlID4+PSAtbkJpdHM7XG4gICAgbkJpdHMgKz0gbUxlbjtcbiAgICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcjJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge1xuICAgIH1cbiAgICBpZiAoZSA9PT0gMCkge1xuICAgICAgZSA9IDEgLSBlQmlhcztcbiAgICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICAgIHJldHVybiBtID8gTmFOIDogKHMgPyAtMSA6IDEpICogSW5maW5pdHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gZSAtIGVCaWFzO1xuICAgIH1cbiAgICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTtcbiAgfTtcbiAgaWVlZTc1NC53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcjIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICAgIHZhciBlLCBtLCBjO1xuICAgIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICAgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICAgIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMDtcbiAgICB2YXIgaSA9IGlzTEUgPyAwIDogbkJ5dGVzIC0gMTtcbiAgICB2YXIgZCA9IGlzTEUgPyAxIDogLTE7XG4gICAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICAgIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuICAgIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xuICAgICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgICBlLS07XG4gICAgICAgIGMgKj0gMjtcbiAgICAgIH1cbiAgICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgICAgZSsrO1xuICAgICAgICBjIC89IDI7XG4gICAgICB9XG4gICAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgICAgbSA9IDA7XG4gICAgICAgIGUgPSBlTWF4O1xuICAgICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICAgIGUgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXIyW29mZnNldCArIGldID0gbSAmIDI1NSwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7XG4gICAgfVxuICAgIGUgPSBlIDw8IG1MZW4gfCBtO1xuICAgIGVMZW4gKz0gbUxlbjtcbiAgICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcjJbb2Zmc2V0ICsgaV0gPSBlICYgMjU1LCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHtcbiAgICB9XG4gICAgYnVmZmVyMltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyODtcbiAgfTtcbiAgcmV0dXJuIGllZWU3NTQ7XG59XG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbnZhciBoYXNSZXF1aXJlZEJ1ZmZlcjtcbmZ1bmN0aW9uIHJlcXVpcmVCdWZmZXIoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEJ1ZmZlcilcbiAgICByZXR1cm4gYnVmZmVyO1xuICBoYXNSZXF1aXJlZEJ1ZmZlciA9IDE7XG4gIChmdW5jdGlvbihleHBvcnRzMikge1xuICAgIHZhciBiYXNlNjQgPSByZXF1aXJlQmFzZTY0SnMoKTtcbiAgICB2YXIgaWVlZTc1NDIgPSByZXF1aXJlSWVlZTc1NCgpO1xuICAgIHZhciBjdXN0b21JbnNwZWN0U3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2xbXCJmb3JcIl0gPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbFtcImZvclwiXShcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpIDogbnVsbDtcbiAgICBleHBvcnRzMi5CdWZmZXIgPSBCdWZmZXIyO1xuICAgIGV4cG9ydHMyLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyO1xuICAgIGV4cG9ydHMyLklOU1BFQ1RfTUFYX0JZVEVTID0gNTA7XG4gICAgdmFyIEtfTUFYX0xFTkdUSCA9IDIxNDc0ODM2NDc7XG4gICAgZXhwb3J0czIua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSDtcbiAgICBCdWZmZXIyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpO1xuICAgIGlmICghQnVmZmVyMi5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFwiVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5IGBidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0KCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgICB2YXIgcHJvdG8gPSB7IGZvbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIDQyO1xuICAgICAgICB9IH07XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYXJyLCBwcm90byk7XG4gICAgICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIyLnByb3RvdHlwZSwgXCJwYXJlbnRcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghQnVmZmVyMi5pc0J1ZmZlcih0aGlzKSlcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXI7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlcjIucHJvdG90eXBlLCBcIm9mZnNldFwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFCdWZmZXIyLmlzQnVmZmVyKHRoaXMpKVxuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKTtcbiAgICAgIH1cbiAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyMi5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gQnVmZmVyMihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxvY1Vuc2FmZShhcmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb20oYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpO1xuICAgIH1cbiAgICBCdWZmZXIyLnBvb2xTaXplID0gODE5MjtcbiAgICBmdW5jdGlvbiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiICsgdHlwZW9mIHZhbHVlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8IHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fCB2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgICBpZiAodmFsdWVPZiAhPSBudWxsICYmIHZhbHVlT2YgIT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHZhciBiID0gZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoYilcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIyLmZyb20oXG4gICAgICAgICAgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXShcInN0cmluZ1wiKSxcbiAgICAgICAgICBlbmNvZGluZ09yT2Zmc2V0LFxuICAgICAgICAgIGxlbmd0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgXCJUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIiArIHR5cGVvZiB2YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgQnVmZmVyMi5mcm9tID0gZnVuY3Rpb24odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7XG4gICAgfTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyMi5wcm90b3R5cGUsIFVpbnQ4QXJyYXkucHJvdG90eXBlKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyMiwgVWludDhBcnJheSk7XG4gICAgZnVuY3Rpb24gYXNzZXJ0U2l6ZShzaXplKSB7XG4gICAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlcicpO1xuICAgICAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIHNpemUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gICAgICBhc3NlcnRTaXplKHNpemUpO1xuICAgICAgaWYgKHNpemUgPD0gMCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbGwgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpO1xuICAgIH1cbiAgICBCdWZmZXIyLmFsbG9jID0gZnVuY3Rpb24oc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICAgIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBhbGxvY1Vuc2FmZShzaXplKSB7XG4gICAgICBhc3NlcnRTaXplKHNpemUpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMCk7XG4gICAgfVxuICAgIEJ1ZmZlcjIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgfTtcbiAgICBCdWZmZXIyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcoc3RyaW5nLCBlbmNvZGluZykge1xuICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gXCJzdHJpbmdcIiB8fCBlbmNvZGluZyA9PT0gXCJcIikge1xuICAgICAgICBlbmNvZGluZyA9IFwidXRmOFwiO1xuICAgICAgfVxuICAgICAgaWYgKCFCdWZmZXIyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGVuY29kaW5nKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMDtcbiAgICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKTtcbiAgICAgIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZyk7XG4gICAgICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAgICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwO1xuICAgICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21BcnJheVZpZXcoYXJyYXlWaWV3KSB7XG4gICAgICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlWaWV3KTtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihjb3B5LmJ1ZmZlciwgY29weS5ieXRlT2Zmc2V0LCBjb3B5LmJ5dGVMZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoYXJyYXlWaWV3KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyKGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7XG4gICAgICB9XG4gICAgICB2YXIgYnVmO1xuICAgICAgaWYgKGJ5dGVPZmZzZXQgPT09IHZvaWQgMCAmJiBsZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSk7XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyMi5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbU9iamVjdChvYmopIHtcbiAgICAgIGlmIChCdWZmZXIyLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwO1xuICAgICAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbik7XG4gICAgICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgfVxuICAgICAgICBvYmouY29weShidWYsIDAsIDAsIGxlbik7XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgICB9XG4gICAgICBpZiAob2JqLmxlbmd0aCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gXCJudW1iZXJcIiB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKTtcbiAgICAgIH1cbiAgICAgIGlmIChvYmoudHlwZSA9PT0gXCJCdWZmZXJcIiAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrZWQobGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIiArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyBcIiBieXRlc1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW5ndGggfCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBTbG93QnVmZmVyKGxlbmd0aCkge1xuICAgICAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gQnVmZmVyMi5hbGxvYygrbGVuZ3RoKTtcbiAgICB9XG4gICAgQnVmZmVyMi5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgICAgIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiYgYiAhPT0gQnVmZmVyMi5wcm90b3R5cGU7XG4gICAgfTtcbiAgICBCdWZmZXIyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKVxuICAgICAgICBhID0gQnVmZmVyMi5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpO1xuICAgICAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpXG4gICAgICAgIGIgPSBCdWZmZXIyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aCk7XG4gICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlcjIuaXNCdWZmZXIoYikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIHZhciB4ID0gYS5sZW5ndGg7XG4gICAgICB2YXIgeSA9IGIubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgICB4ID0gYVtpXTtcbiAgICAgICAgICB5ID0gYltpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHggPCB5KVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICBpZiAoeSA8IHgpXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBCdWZmZXIyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgIGNhc2UgXCJ1dGY4XCI6XG4gICAgICAgIGNhc2UgXCJ1dGYtOFwiOlxuICAgICAgICBjYXNlIFwiYXNjaWlcIjpcbiAgICAgICAgY2FzZSBcImxhdGluMVwiOlxuICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XG4gICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgY2FzZSBcInVjczJcIjpcbiAgICAgICAgY2FzZSBcInVjcy0yXCI6XG4gICAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG4gICAgICAgIGNhc2UgXCJ1dGYtMTZsZVwiOlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlcjIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KGxpc3QsIGxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO1xuICAgICAgfVxuICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIyLmFsbG9jKDApO1xuICAgICAgfVxuICAgICAgdmFyIGk7XG4gICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHtcbiAgICAgICAgbGVuZ3RoID0gMDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBidWZmZXIyID0gQnVmZmVyMi5hbGxvY1Vuc2FmZShsZW5ndGgpO1xuICAgICAgdmFyIHBvcyA9IDA7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYnVmID0gbGlzdFtpXTtcbiAgICAgICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgICAgIGlmIChwb3MgKyBidWYubGVuZ3RoID4gYnVmZmVyMi5sZW5ndGgpIHtcbiAgICAgICAgICAgIEJ1ZmZlcjIuZnJvbShidWYpLmNvcHkoYnVmZmVyMiwgcG9zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgICAgIGJ1ZmZlcjIsXG4gICAgICAgICAgICAgIGJ1ZixcbiAgICAgICAgICAgICAgcG9zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghQnVmZmVyMi5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmLmNvcHkoYnVmZmVyMiwgcG9zKTtcbiAgICAgICAgfVxuICAgICAgICBwb3MgKz0gYnVmLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWZmZXIyO1xuICAgIH07XG4gICAgZnVuY3Rpb24gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB7XG4gICAgICBpZiAoQnVmZmVyMi5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgdmFyIG11c3RNYXRjaCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZTtcbiAgICAgIGlmICghbXVzdE1hdGNoICYmIGxlbiA9PT0gMClcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZTtcbiAgICAgIGZvciAoOyA7ICkge1xuICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICAgICAgY2FzZSBcImFzY2lpXCI6XG4gICAgICAgICAgY2FzZSBcImxhdGluMVwiOlxuICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICAgIHJldHVybiBsZW47XG4gICAgICAgICAgY2FzZSBcInV0ZjhcIjpcbiAgICAgICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aDtcbiAgICAgICAgICBjYXNlIFwidWNzMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG4gICAgICAgICAgY2FzZSBcInV0Zi0xNmxlXCI6XG4gICAgICAgICAgICByZXR1cm4gbGVuICogMjtcbiAgICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgICAgICByZXR1cm4gbGVuID4+PiAxO1xuICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmNvZGluZyA9IChcIlwiICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgQnVmZmVyMi5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICBmdW5jdGlvbiBzbG93VG9TdHJpbmcoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlO1xuICAgICAgaWYgKHN0YXJ0ID09PSB2b2lkIDAgfHwgc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gdm9pZCAwIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgZW5kID4+Pj0gMDtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcbiAgICAgIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAoIWVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IFwidXRmOFwiO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgICAgIGNhc2UgXCJoZXhcIjpcbiAgICAgICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICBjYXNlIFwidXRmOFwiOlxuICAgICAgICAgIGNhc2UgXCJ1dGYtOFwiOlxuICAgICAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICBjYXNlIFwiYXNjaWlcIjpcbiAgICAgICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgIGNhc2UgXCJsYXRpbjFcIjpcbiAgICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XG4gICAgICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgIGNhc2UgXCJ1Y3MyXCI6XG4gICAgICAgICAgY2FzZSBcInVjcy0yXCI6XG4gICAgICAgICAgY2FzZSBcInV0ZjE2bGVcIjpcbiAgICAgICAgICBjYXNlIFwidXRmLTE2bGVcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChsb3dlcmVkQ2FzZSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiICsgZW5jb2RpbmcpO1xuICAgICAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWU7XG4gICAgZnVuY3Rpb24gc3dhcChiLCBuLCBtKSB7XG4gICAgICB2YXIgaSA9IGJbbl07XG4gICAgICBiW25dID0gYlttXTtcbiAgICAgIGJbbV0gPSBpO1xuICAgIH1cbiAgICBCdWZmZXIyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYoKSB7XG4gICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICBzd2FwKHRoaXMsIGksIGkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyKCkge1xuICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0c1wiKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgMyk7XG4gICAgICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0KCkge1xuICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgNyk7XG4gICAgICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KTtcbiAgICAgICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpO1xuICAgICAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aCk7XG4gICAgICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlcjIucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhiKSB7XG4gICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIoYikpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO1xuICAgICAgaWYgKHRoaXMgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIEJ1ZmZlcjIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICAgICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgICB2YXIgbWF4ID0gZXhwb3J0czIuSU5TUEVDVF9NQVhfQllURVM7XG4gICAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKFwiaGV4XCIsIDAsIG1heCkucmVwbGFjZSgvKC57Mn0pL2csIFwiJDEgXCIpLnRyaW0oKTtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heClcbiAgICAgICAgc3RyICs9IFwiIC4uLiBcIjtcbiAgICAgIHJldHVybiBcIjxCdWZmZXIgXCIgKyBzdHIgKyBcIj5cIjtcbiAgICB9O1xuICAgIGlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gICAgICBCdWZmZXIyLnByb3RvdHlwZVtjdXN0b21JbnNwZWN0U3ltYm9sXSA9IEJ1ZmZlcjIucHJvdG90eXBlLmluc3BlY3Q7XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gICAgICBpZiAoaXNJbnN0YW5jZSh0YXJnZXQsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgIHRhcmdldCA9IEJ1ZmZlcjIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmICghQnVmZmVyMi5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiB0YXJnZXRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgICAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzU3RhcnQgPT09IHZvaWQgMCkge1xuICAgICAgICB0aGlzU3RhcnQgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNFbmQgPT09IHZvaWQgMCkge1xuICAgICAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvdXQgb2YgcmFuZ2UgaW5kZXhcIik7XG4gICAgICB9XG4gICAgICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBzdGFydCA+Pj49IDA7XG4gICAgICBlbmQgPj4+PSAwO1xuICAgICAgdGhpc1N0YXJ0ID4+Pj0gMDtcbiAgICAgIHRoaXNFbmQgPj4+PSAwO1xuICAgICAgaWYgKHRoaXMgPT09IHRhcmdldClcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnQ7XG4gICAgICB2YXIgeSA9IGVuZCAtIHN0YXJ0O1xuICAgICAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpO1xuICAgICAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpO1xuICAgICAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgICAgIHggPSB0aGlzQ29weVtpXTtcbiAgICAgICAgICB5ID0gdGFyZ2V0Q29weVtpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHggPCB5KVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgICBpZiAoeSA8IHgpXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZihidWZmZXIyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgICAgIGlmIChidWZmZXIyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldDtcbiAgICAgICAgYnl0ZU9mZnNldCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAyMTQ3NDgzNjQ3KSB7XG4gICAgICAgIGJ5dGVPZmZzZXQgPSAyMTQ3NDgzNjQ3O1xuICAgICAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTIxNDc0ODM2NDgpIHtcbiAgICAgICAgYnl0ZU9mZnNldCA9IC0yMTQ3NDgzNjQ4O1xuICAgICAgfVxuICAgICAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0O1xuICAgICAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogYnVmZmVyMi5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgICAgaWYgKGJ5dGVPZmZzZXQgPCAwKVxuICAgICAgICBieXRlT2Zmc2V0ID0gYnVmZmVyMi5sZW5ndGggKyBieXRlT2Zmc2V0O1xuICAgICAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyMi5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGRpcilcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBieXRlT2Zmc2V0ID0gYnVmZmVyMi5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgICAgICBpZiAoZGlyKVxuICAgICAgICAgIGJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsID0gQnVmZmVyMi5mcm9tKHZhbCwgZW5jb2RpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKEJ1ZmZlcjIuaXNCdWZmZXIodmFsKSkge1xuICAgICAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlcjIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFsID0gdmFsICYgMjU1O1xuICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyMiwgdmFsLCBieXRlT2Zmc2V0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyMiwgdmFsLCBieXRlT2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcik7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcnJheUluZGV4T2YoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgICAgIHZhciBpbmRleFNpemUgPSAxO1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aDtcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwidWNzMlwiIHx8IGVuY29kaW5nID09PSBcInVjcy0yXCIgfHwgZW5jb2RpbmcgPT09IFwidXRmMTZsZVwiIHx8IGVuY29kaW5nID09PSBcInV0Zi0xNmxlXCIpIHtcbiAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXhTaXplID0gMjtcbiAgICAgICAgICBhcnJMZW5ndGggLz0gMjtcbiAgICAgICAgICB2YWxMZW5ndGggLz0gMjtcbiAgICAgICAgICBieXRlT2Zmc2V0IC89IDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHJlYWQoYnVmLCBpMikge1xuICAgICAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1ZltpMl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaTIgKiBpbmRleFNpemUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgaTtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgdmFyIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKVxuICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaTtcbiAgICAgICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aClcbiAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgaSAtPSBpIC0gZm91bmRJbmRleDtcbiAgICAgICAgICAgIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKVxuICAgICAgICAgIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdmFyIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgICAgIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZm91bmQpXG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBCdWZmZXIyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICAgICAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gICAgICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gaGV4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXQ7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSByZW1haW5pbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKTtcbiAgICAgICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgICAgIGxlbmd0aCA9IHJlbWFpbmluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgICAgICBsZW5ndGggPSBzdHJMZW4gLyAyO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KTtcbiAgICAgICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpXG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1dGY4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmFzZTY0V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1Y3MyV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZShzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAgICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGVuY29kaW5nID0gXCJ1dGY4XCI7XG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPT09IHZvaWQgMCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVuY29kaW5nID0gb2Zmc2V0O1xuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwO1xuICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gdm9pZCAwKVxuICAgICAgICAgICAgZW5jb2RpbmcgPSBcInV0ZjhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmNvZGluZyA9IGxlbmd0aDtcbiAgICAgICAgICBsZW5ndGggPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkJ1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldDtcbiAgICAgIGlmIChsZW5ndGggPT09IHZvaWQgMCB8fCBsZW5ndGggPiByZW1haW5pbmcpXG4gICAgICAgIGxlbmd0aCA9IHJlbWFpbmluZztcbiAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSBcInV0ZjhcIjtcbiAgICAgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlO1xuICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgICAgY2FzZSBcInV0ZjhcIjpcbiAgICAgICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICAgICAgY2FzZSBcImFzY2lpXCI6XG4gICAgICAgICAgY2FzZSBcImxhdGluMVwiOlxuICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgICAgICBjYXNlIFwidWNzMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG4gICAgICAgICAgY2FzZSBcInV0Zi0xNmxlXCI6XG4gICAgICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAobG93ZXJlZENhc2UpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGVuY29kaW5nKTtcbiAgICAgICAgICAgIGVuY29kaW5nID0gKFwiXCIgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJCdWZmZXJcIixcbiAgICAgICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gICAgICB9O1xuICAgIH07XG4gICAgZnVuY3Rpb24gYmFzZTY0U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gICAgICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHV0ZjhTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCk7XG4gICAgICB2YXIgcmVzID0gW107XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICAgICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXTtcbiAgICAgICAgdmFyIGNvZGVQb2ludCA9IG51bGw7XG4gICAgICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gZmlyc3RCeXRlID4gMjM5ID8gNCA6IGZpcnN0Qnl0ZSA+IDIyMyA/IDMgOiBmaXJzdEJ5dGUgPiAxOTEgPyAyIDogMTtcbiAgICAgICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAxOTIpID09PSAxMjgpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDMxKSA8PCA2IHwgc2Vjb25kQnl0ZSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMTI3KSB7XG4gICAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV07XG4gICAgICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl07XG4gICAgICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDE5MikgPT09IDEyOCAmJiAodGhpcmRCeXRlICYgMTkyKSA9PT0gMTI4KSB7XG4gICAgICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAxNSkgPDwgMTIgfCAoc2Vjb25kQnl0ZSAmIDYzKSA8PCA2IHwgdGhpcmRCeXRlICYgNjM7XG4gICAgICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAyMDQ3ICYmICh0ZW1wQ29kZVBvaW50IDwgNTUyOTYgfHwgdGVtcENvZGVQb2ludCA+IDU3MzQzKSkge1xuICAgICAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdO1xuICAgICAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdO1xuICAgICAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXTtcbiAgICAgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMTkyKSA9PT0gMTI4ICYmICh0aGlyZEJ5dGUgJiAxOTIpID09PSAxMjggJiYgKGZvdXJ0aEJ5dGUgJiAxOTIpID09PSAxMjgpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDE1KSA8PCAxOCB8IChzZWNvbmRCeXRlICYgNjMpIDw8IDEyIHwgKHRoaXJkQnl0ZSAmIDYzKSA8PCA2IHwgZm91cnRoQnl0ZSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gNjU1MzUgJiYgdGVtcENvZGVQb2ludCA8IDExMTQxMTIpIHtcbiAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBjb2RlUG9pbnQgPSA2NTUzMztcbiAgICAgICAgICBieXRlc1BlclNlcXVlbmNlID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiA2NTUzNSkge1xuICAgICAgICAgIGNvZGVQb2ludCAtPSA2NTUzNjtcbiAgICAgICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMTAyMyB8IDU1Mjk2KTtcbiAgICAgICAgICBjb2RlUG9pbnQgPSA1NjMyMCB8IGNvZGVQb2ludCAmIDEwMjM7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goY29kZVBvaW50KTtcbiAgICAgICAgaSArPSBieXRlc1BlclNlcXVlbmNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpO1xuICAgIH1cbiAgICB2YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSA0MDk2O1xuICAgIGZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheShjb2RlUG9pbnRzKSB7XG4gICAgICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzID0gXCJcIjtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgICAgIFN0cmluZyxcbiAgICAgICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMTI3KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxhdGluMVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHJldCA9IFwiXCI7XG4gICAgICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhleFNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG4gICAgICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMClcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pXG4gICAgICAgIGVuZCA9IGxlbjtcbiAgICAgIHZhciBvdXQgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHV0ZjE2bGVTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIHZhciByZXMgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7XG4gICAgICBzdGFydCA9IH5+c3RhcnQ7XG4gICAgICBlbmQgPSBlbmQgPT09IHZvaWQgMCA/IGxlbiA6IH5+ZW5kO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCArPSBsZW47XG4gICAgICAgIGlmIChzdGFydCA8IDApXG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgICAgICBzdGFydCA9IGxlbjtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW47XG4gICAgICAgIGlmIChlbmQgPCAwKVxuICAgICAgICAgIGVuZCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgICAgICBlbmQgPSBsZW47XG4gICAgICB9XG4gICAgICBpZiAoZW5kIDwgc3RhcnQpXG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgdmFyIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCk7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIyLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3QnVmO1xuICAgIH07XG4gICAgZnVuY3Rpb24gY2hlY2tPZmZzZXQob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICAgICAgaWYgKG9mZnNldCAlIDEgIT09IDAgfHwgb2Zmc2V0IDwgMClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvZmZzZXQgaXMgbm90IHVpbnRcIik7XG4gICAgICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGhcIik7XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVaW50TEUgPSBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRShvZmZzZXQsIGJ5dGVMZW5ndGgyLCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgYnl0ZUxlbmd0aDIgPSBieXRlTGVuZ3RoMiA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHZhciB2YWwgPSB0aGlzW29mZnNldF07XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoMiAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZFVpbnRCRSA9IEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFKG9mZnNldCwgYnl0ZUxlbmd0aDIsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBieXRlTGVuZ3RoMiA9IGJ5dGVMZW5ndGgyID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgyLCB0aGlzLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGgyXTtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgd2hpbGUgKGJ5dGVMZW5ndGgyID4gMCAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoMl0gKiBtdWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZFVpbnQ4ID0gQnVmZmVyMi5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4KG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHRoaXNbb2Zmc2V0XTtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVaW50MTZMRSA9IEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiB0aGlzW29mZnNldF0gfCB0aGlzW29mZnNldCArIDFdIDw8IDg7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVWludDE2QkUgPSBCdWZmZXIyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpc1tvZmZzZXRdIDw8IDggfCB0aGlzW29mZnNldCArIDFdO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZFVpbnQzMkxFID0gQnVmZmVyMi5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuICh0aGlzW29mZnNldF0gfCB0aGlzW29mZnNldCArIDFdIDw8IDggfCB0aGlzW29mZnNldCArIDJdIDw8IDE2KSArIHRoaXNbb2Zmc2V0ICsgM10gKiAxNjc3NzIxNjtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVaW50MzJCRSA9IEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiB0aGlzW29mZnNldF0gKiAxNjc3NzIxNiArICh0aGlzW29mZnNldCArIDFdIDw8IDE2IHwgdGhpc1tvZmZzZXQgKyAyXSA8PCA4IHwgdGhpc1tvZmZzZXQgKyAzXSk7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUob2Zmc2V0LCBieXRlTGVuZ3RoMiwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGJ5dGVMZW5ndGgyID0gYnl0ZUxlbmd0aDIgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgyLCB0aGlzLmxlbmd0aCk7XG4gICAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdO1xuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aDIgJiYgKG11bCAqPSAyNTYpKSB7XG4gICAgICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsO1xuICAgICAgfVxuICAgICAgbXVsICo9IDEyODtcbiAgICAgIGlmICh2YWwgPj0gbXVsKVxuICAgICAgICB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgyKTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUob2Zmc2V0LCBieXRlTGVuZ3RoMiwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGJ5dGVMZW5ndGgyID0gYnl0ZUxlbmd0aDIgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgyLCB0aGlzLmxlbmd0aCk7XG4gICAgICB2YXIgaSA9IGJ5dGVMZW5ndGgyO1xuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldO1xuICAgICAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMjU2KSkge1xuICAgICAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsO1xuICAgICAgfVxuICAgICAgbXVsICo9IDEyODtcbiAgICAgIGlmICh2YWwgPj0gbXVsKVxuICAgICAgICB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgyKTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4KG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpO1xuICAgICAgaWYgKCEodGhpc1tvZmZzZXRdICYgMTI4KSlcbiAgICAgICAgcmV0dXJuIHRoaXNbb2Zmc2V0XTtcbiAgICAgIHJldHVybiAoMjU1IC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMTtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7XG4gICAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgdGhpc1tvZmZzZXQgKyAxXSA8PCA4O1xuICAgICAgcmV0dXJuIHZhbCAmIDMyNzY4ID8gdmFsIHwgNDI5NDkwMTc2MCA6IHZhbDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCk7XG4gICAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8IHRoaXNbb2Zmc2V0XSA8PCA4O1xuICAgICAgcmV0dXJuIHZhbCAmIDMyNzY4ID8gdmFsIHwgNDI5NDkwMTc2MCA6IHZhbDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCk7XG4gICAgICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgdGhpc1tvZmZzZXQgKyAxXSA8PCA4IHwgdGhpc1tvZmZzZXQgKyAyXSA8PCAxNiB8IHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQ7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIHRoaXNbb2Zmc2V0XSA8PCAyNCB8IHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYgfCB0aGlzW29mZnNldCArIDJdIDw8IDggfCB0aGlzW29mZnNldCArIDNdO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiBpZWVlNzU0Mi5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiBpZWVlNzU0Mi5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KTtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKTtcbiAgICAgIHJldHVybiBpZWVlNzU0Mi5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIGllZWU3NTQyLnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gY2hlY2tJbnQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gICAgICBpZiAoIUJ1ZmZlcjIuaXNCdWZmZXIoYnVmKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7XG4gICAgICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO1xuICAgICAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO1xuICAgIH1cbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9IEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aDIsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGJ5dGVMZW5ndGgyID0gYnl0ZUxlbmd0aDIgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoMikgLSAxO1xuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbWF4Qnl0ZXMsIDApO1xuICAgICAgfVxuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoMiAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlIC8gbXVsICYgMjU1O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgyO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVaW50QkUgPSBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgyLCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBieXRlTGVuZ3RoMiA9IGJ5dGVMZW5ndGgyID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aDIpIC0gMTtcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aDIsIG1heEJ5dGVzLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gYnl0ZUxlbmd0aDIgLSAxO1xuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAyNTU7XG4gICAgICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAyNTYpKSB7XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAvIG11bCAmIDI1NTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoMjtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVWludDggPSBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAyNTUsIDApO1xuICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAyNTU7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgMTtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVWludDE2TEUgPSBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCA2NTUzNSwgMCk7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIHJldHVybiBvZmZzZXQgKyAyO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9IEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDY1NTM1LCAwKTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlID4+PiA4O1xuICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlICYgMjU1O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVpbnQzMkxFID0gQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgNDI5NDk2NzI5NSwgMCk7XG4gICAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgPj4+IDI0O1xuICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiAxNjtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMjU1O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDQ7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID0gQnVmZmVyMi5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgNDI5NDk2NzI5NSwgMCk7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiA4O1xuICAgICAgdGhpc1tvZmZzZXQgKyAzXSA9IHZhbHVlICYgMjU1O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDQ7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aDIgLSAxKTtcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aDIsIGxpbWl0IC0gMSwgLWxpbWl0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgdmFyIHN1YiA9IDA7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoMiAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgICAgICBzdWIgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwgPj4gMCkgLSBzdWIgJiAyNTU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoMiwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aDIgLSAxKTtcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aDIsIGxpbWl0IC0gMSwgLWxpbWl0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gYnl0ZUxlbmd0aDIgLSAxO1xuICAgICAgdmFyIG11bCA9IDE7XG4gICAgICB2YXIgc3ViID0gMDtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDI1NikpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgICAgICBzdWIgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwgPj4gMCkgLSBzdWIgJiAyNTU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDgodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMTI3LCAtMTI4KTtcbiAgICAgIGlmICh2YWx1ZSA8IDApXG4gICAgICAgIHZhbHVlID0gMjU1ICsgdmFsdWUgKyAxO1xuICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAyNTU7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgMTtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAzMjc2NywgLTMyNzY4KTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMjU1O1xuICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDI7XG4gICAgfTtcbiAgICBCdWZmZXIyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHZhbHVlID0gK3ZhbHVlO1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xuICAgICAgaWYgKCFub0Fzc2VydClcbiAgICAgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMzI3NjcsIC0zMjc2OCk7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSAmIDI1NTtcbiAgICAgIHJldHVybiBvZmZzZXQgKyAyO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpXG4gICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDIxNDc0ODM2NDcsIC0yMTQ3NDgzNjQ4KTtcbiAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMjU1O1xuICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xuICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiAxNjtcbiAgICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgICByZXR1cm4gb2Zmc2V0ICsgNDtcbiAgICB9O1xuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDA7XG4gICAgICBpZiAoIW5vQXNzZXJ0KVxuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAyMTQ3NDgzNjQ3LCAtMjE0NzQ4MzY0OCk7XG4gICAgICBpZiAodmFsdWUgPCAwKVxuICAgICAgICB2YWx1ZSA9IDQyOTQ5NjcyOTUgKyB2YWx1ZSArIDE7XG4gICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiA4O1xuICAgICAgdGhpc1tvZmZzZXQgKyAzXSA9IHZhbHVlICYgMjU1O1xuICAgICAgcmV0dXJuIG9mZnNldCArIDQ7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gICAgICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgICBpZiAob2Zmc2V0IDwgMClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIHtcbiAgICAgICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCk7XG4gICAgICB9XG4gICAgICBpZWVlNzU0Mi53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpO1xuICAgICAgcmV0dXJuIG9mZnNldCArIDQ7XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgICAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gd3JpdGVEb3VibGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gICAgICB2YWx1ZSA9ICt2YWx1ZTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMDtcbiAgICAgIGlmICghbm9Bc3NlcnQpIHtcbiAgICAgICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCk7XG4gICAgICB9XG4gICAgICBpZWVlNzU0Mi53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpO1xuICAgICAgcmV0dXJuIG9mZnNldCArIDg7XG4gICAgfVxuICAgIEJ1ZmZlcjIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICAgIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICAgICAgaWYgKCFCdWZmZXIyLmlzQnVmZmVyKHRhcmdldCkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXJcIik7XG4gICAgICBpZiAoIXN0YXJ0KVxuICAgICAgICBzdGFydCA9IDA7XG4gICAgICBpZiAoIWVuZCAmJiBlbmQgIT09IDApXG4gICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgICAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpXG4gICAgICAgIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIGlmICghdGFyZ2V0U3RhcnQpXG4gICAgICAgIHRhcmdldFN0YXJ0ID0gMDtcbiAgICAgIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KVxuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgIGlmIChlbmQgPT09IHN0YXJ0KVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7XG4gICAgICBpZiAoZW5kIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtcbiAgICAgIGlmIChlbmQgPiB0aGlzLmxlbmd0aClcbiAgICAgICAgZW5kID0gdGhpcy5sZW5ndGg7XG4gICAgICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICAgICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnQ7XG4gICAgICB9XG4gICAgICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gICAgICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpLFxuICAgICAgICAgIHRhcmdldFN0YXJ0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVuO1xuICAgIH07XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGVuY29kaW5nID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBlbmNvZGluZyA9IGVuZDtcbiAgICAgICAgICBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jb2RpbmcgIT09IHZvaWQgMCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiICYmICFCdWZmZXIyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiICsgZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwidXRmOFwiICYmIGNvZGUgPCAxMjggfHwgZW5jb2RpbmcgPT09IFwibGF0aW4xXCIpIHtcbiAgICAgICAgICAgIHZhbCA9IGNvZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFsID0gdmFsICYgMjU1O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICB2YWwgPSBOdW1iZXIodmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk91dCBvZiByYW5nZSBpbmRleFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID4+PiAwO1xuICAgICAgZW5kID0gZW5kID09PSB2b2lkIDAgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMDtcbiAgICAgIGlmICghdmFsKVxuICAgICAgICB2YWwgPSAwO1xuICAgICAgdmFyIGk7XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgdGhpc1tpXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJ5dGVzID0gQnVmZmVyMi5pc0J1ZmZlcih2YWwpID8gdmFsIDogQnVmZmVyMi5mcm9tKHZhbCwgZW5jb2RpbmcpO1xuICAgICAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2c7XG4gICAgZnVuY3Rpb24gYmFzZTY0Y2xlYW4oc3RyKSB7XG4gICAgICBzdHIgPSBzdHIuc3BsaXQoXCI9XCIpWzBdO1xuICAgICAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCBcIlwiKTtcbiAgICAgIGlmIChzdHIubGVuZ3RoIDwgMilcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICAgICAgc3RyID0gc3RyICsgXCI9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHJpbmcsIHVuaXRzKSB7XG4gICAgICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5O1xuICAgICAgdmFyIGNvZGVQb2ludDtcbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuICAgICAgdmFyIGJ5dGVzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZVBvaW50ID4gNTUyOTUgJiYgY29kZVBvaW50IDwgNTczNDQpIHtcbiAgICAgICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPiA1NjMxOSkge1xuICAgICAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpXG4gICAgICAgICAgICAgICAgYnl0ZXMucHVzaCgyMzksIDE5MSwgMTg5KTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKVxuICAgICAgICAgICAgICAgIGJ5dGVzLnB1c2goMjM5LCAxOTEsIDE4OSk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZVBvaW50IDwgNTYzMjApIHtcbiAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSlcbiAgICAgICAgICAgICAgYnl0ZXMucHVzaCgyMzksIDE5MSwgMTg5KTtcbiAgICAgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSA1NTI5NiA8PCAxMCB8IGNvZGVQb2ludCAtIDU2MzIwKSArIDY1NTM2O1xuICAgICAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpXG4gICAgICAgICAgICBieXRlcy5wdXNoKDIzOSwgMTkxLCAxODkpO1xuICAgICAgICB9XG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsO1xuICAgICAgICBpZiAoY29kZVBvaW50IDwgMTI4KSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBieXRlcy5wdXNoKGNvZGVQb2ludCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMjA0OCkge1xuICAgICAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgICAgIGNvZGVQb2ludCA+PiA2IHwgMTkyLFxuICAgICAgICAgICAgY29kZVBvaW50ICYgNjMgfCAxMjhcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDY1NTM2KSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBieXRlcy5wdXNoKFxuICAgICAgICAgICAgY29kZVBvaW50ID4+IDEyIHwgMjI0LFxuICAgICAgICAgICAgY29kZVBvaW50ID4+IDYgJiA2MyB8IDEyOCxcbiAgICAgICAgICAgIGNvZGVQb2ludCAmIDYzIHwgMTI4XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAxMTE0MTEyKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBieXRlcy5wdXNoKFxuICAgICAgICAgICAgY29kZVBvaW50ID4+IDE4IHwgMjQwLFxuICAgICAgICAgICAgY29kZVBvaW50ID4+IDEyICYgNjMgfCAxMjgsXG4gICAgICAgICAgICBjb2RlUG9pbnQgPj4gNiAmIDYzIHwgMTI4LFxuICAgICAgICAgICAgY29kZVBvaW50ICYgNjMgfCAxMjhcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29kZSBwb2ludFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc2NpaVRvQnl0ZXMoc3RyKSB7XG4gICAgICB2YXIgYnl0ZUFycmF5ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDI1NSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZUFycmF5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyhzdHIsIHVuaXRzKSB7XG4gICAgICB2YXIgYywgaGksIGxvO1xuICAgICAgdmFyIGJ5dGVBcnJheSA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaGkgPSBjID4+IDg7XG4gICAgICAgIGxvID0gYyAlIDI1NjtcbiAgICAgICAgYnl0ZUFycmF5LnB1c2gobG8pO1xuICAgICAgICBieXRlQXJyYXkucHVzaChoaSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnl0ZUFycmF5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBiYXNlNjRUb0J5dGVzKHN0cikge1xuICAgICAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmxpdEJ1ZmZlcihzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCB8fCBpID49IHNyYy5sZW5ndGgpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0luc3RhbmNlKG9iaiwgdHlwZSkge1xuICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIHR5cGUgfHwgb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBudW1iZXJJc05hTihvYmopIHtcbiAgICAgIHJldHVybiBvYmogIT09IG9iajtcbiAgICB9XG4gICAgdmFyIGhleFNsaWNlTG9va3VwVGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhbHBoYWJldCA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuICAgICAgdmFyIHRhYmxlID0gbmV3IEFycmF5KDI1Nik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgdmFyIGkxNiA9IGkgKiAxNjtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFibGU7XG4gICAgfSgpO1xuICB9KShidWZmZXIpO1xuICByZXR1cm4gYnVmZmVyO1xufVxudmFyIHV0aWwgPSB7fTtcbnZhciB0eXBlcyA9IHt9O1xudmFyIHNoYW1zJDE7XG52YXIgaGFzUmVxdWlyZWRTaGFtcyQxO1xuZnVuY3Rpb24gcmVxdWlyZVNoYW1zJDEoKSB7XG4gIGlmIChoYXNSZXF1aXJlZFNoYW1zJDEpXG4gICAgcmV0dXJuIHNoYW1zJDE7XG4gIGhhc1JlcXVpcmVkU2hhbXMkMSA9IDE7XG4gIHNoYW1zJDEgPSBmdW5jdGlvbiBoYXNTeW1ib2xzMigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIHN5bSA9IFN5bWJvbChcInRlc3RcIik7XG4gICAgdmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuICAgIGlmICh0eXBlb2Ygc3ltID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gXCJbb2JqZWN0IFN5bWJvbF1cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09IFwiW29iamVjdCBTeW1ib2xdXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHN5bVZhbCA9IDQyO1xuICAgIG9ialtzeW1dID0gc3ltVmFsO1xuICAgIGZvciAoc3ltIGluIG9iaikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gXCJmdW5jdGlvblwiICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuICAgIGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgcmV0dXJuIHNoYW1zJDE7XG59XG52YXIgc2hhbXM7XG52YXIgaGFzUmVxdWlyZWRTaGFtcztcbmZ1bmN0aW9uIHJlcXVpcmVTaGFtcygpIHtcbiAgaWYgKGhhc1JlcXVpcmVkU2hhbXMpXG4gICAgcmV0dXJuIHNoYW1zO1xuICBoYXNSZXF1aXJlZFNoYW1zID0gMTtcbiAgdmFyIGhhc1N5bWJvbHMyID0gcmVxdWlyZVNoYW1zJDEoKTtcbiAgc2hhbXMgPSBmdW5jdGlvbiBoYXNUb1N0cmluZ1RhZ1NoYW1zKCkge1xuICAgIHJldHVybiBoYXNTeW1ib2xzMigpICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnO1xuICB9O1xuICByZXR1cm4gc2hhbXM7XG59XG52YXIgaGFzU3ltYm9scztcbnZhciBoYXNSZXF1aXJlZEhhc1N5bWJvbHM7XG5mdW5jdGlvbiByZXF1aXJlSGFzU3ltYm9scygpIHtcbiAgaWYgKGhhc1JlcXVpcmVkSGFzU3ltYm9scylcbiAgICByZXR1cm4gaGFzU3ltYm9scztcbiAgaGFzUmVxdWlyZWRIYXNTeW1ib2xzID0gMTtcbiAgdmFyIG9yaWdTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbDtcbiAgdmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlU2hhbXMkMSgpO1xuICBoYXNTeW1ib2xzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcbiAgICBpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3JpZ1N5bWJvbChcImZvb1wiKSAhPT0gXCJzeW1ib2xcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFN5bWJvbChcImJhclwiKSAhPT0gXCJzeW1ib2xcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xuICB9O1xuICByZXR1cm4gaGFzU3ltYm9scztcbn1cbnZhciBoYXNQcm90bztcbnZhciBoYXNSZXF1aXJlZEhhc1Byb3RvO1xuZnVuY3Rpb24gcmVxdWlyZUhhc1Byb3RvKCkge1xuICBpZiAoaGFzUmVxdWlyZWRIYXNQcm90bylcbiAgICByZXR1cm4gaGFzUHJvdG87XG4gIGhhc1JlcXVpcmVkSGFzUHJvdG8gPSAxO1xuICB2YXIgdGVzdCA9IHtcbiAgICBmb286IHt9XG4gIH07XG4gIHZhciAkT2JqZWN0ID0gT2JqZWN0O1xuICBoYXNQcm90byA9IGZ1bmN0aW9uIGhhc1Byb3RvMigpIHtcbiAgICByZXR1cm4geyBfX3Byb3RvX186IHRlc3QgfS5mb28gPT09IHRlc3QuZm9vICYmICEoeyBfX3Byb3RvX186IG51bGwgfSBpbnN0YW5jZW9mICRPYmplY3QpO1xuICB9O1xuICByZXR1cm4gaGFzUHJvdG87XG59XG52YXIgaW1wbGVtZW50YXRpb247XG52YXIgaGFzUmVxdWlyZWRJbXBsZW1lbnRhdGlvbjtcbmZ1bmN0aW9uIHJlcXVpcmVJbXBsZW1lbnRhdGlvbigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkSW1wbGVtZW50YXRpb24pXG4gICAgcmV0dXJuIGltcGxlbWVudGF0aW9uO1xuICBoYXNSZXF1aXJlZEltcGxlbWVudGF0aW9uID0gMTtcbiAgdmFyIEVSUk9SX01FU1NBR0UgPSBcIkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgXCI7XG4gIHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBtYXggPSBNYXRoLm1heDtcbiAgdmFyIGZ1bmNUeXBlID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiO1xuICB2YXIgY29uY2F0dHkgPSBmdW5jdGlvbiBjb25jYXR0eTIoYSwgYikge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGFycltpXSA9IGFbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgYXJyW2ogKyBhLmxlbmd0aF0gPSBiW2pdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9O1xuICB2YXIgc2xpY3kgPSBmdW5jdGlvbiBzbGljeTIoYXJyTGlrZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQgfHwgMCwgaiA9IDA7IGkgPCBhcnJMaWtlLmxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcbiAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH07XG4gIHZhciBqb2lueSA9IGZ1bmN0aW9uKGFyciwgam9pbmVyKSB7XG4gICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHN0ciArPSBhcnJbaV07XG4gICAgICBpZiAoaSArIDEgPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgIHN0ciArPSBqb2luZXI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG4gIGltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwiZnVuY3Rpb25cIiB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljeShhcmd1bWVudHMsIDEpO1xuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgIHRoYXQsXG4gICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICk7XG4gICAgfTtcbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICBib3VuZEFyZ3NbaV0gPSBcIiRcIiArIGk7XG4gICAgfVxuICAgIGJvdW5kID0gRnVuY3Rpb24oXCJiaW5kZXJcIiwgXCJyZXR1cm4gZnVuY3Rpb24gKFwiICsgam9pbnkoYm91bmRBcmdzLCBcIixcIikgKyBcIil7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9XCIpKGJpbmRlcik7XG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5MigpIHtcbiAgICAgIH07XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG4gIHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn1cbnZhciBmdW5jdGlvbkJpbmQ7XG52YXIgaGFzUmVxdWlyZWRGdW5jdGlvbkJpbmQ7XG5mdW5jdGlvbiByZXF1aXJlRnVuY3Rpb25CaW5kKCkge1xuICBpZiAoaGFzUmVxdWlyZWRGdW5jdGlvbkJpbmQpXG4gICAgcmV0dXJuIGZ1bmN0aW9uQmluZDtcbiAgaGFzUmVxdWlyZWRGdW5jdGlvbkJpbmQgPSAxO1xuICB2YXIgaW1wbGVtZW50YXRpb24yID0gcmVxdWlyZUltcGxlbWVudGF0aW9uKCk7XG4gIGZ1bmN0aW9uQmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uMjtcbiAgcmV0dXJuIGZ1bmN0aW9uQmluZDtcbn1cbnZhciBoYXNvd247XG52YXIgaGFzUmVxdWlyZWRIYXNvd247XG5mdW5jdGlvbiByZXF1aXJlSGFzb3duKCkge1xuICBpZiAoaGFzUmVxdWlyZWRIYXNvd24pXG4gICAgcmV0dXJuIGhhc293bjtcbiAgaGFzUmVxdWlyZWRIYXNvd24gPSAxO1xuICB2YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuICB2YXIgJGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIHZhciBiaW5kID0gcmVxdWlyZUZ1bmN0aW9uQmluZCgpO1xuICBoYXNvd24gPSBiaW5kLmNhbGwoY2FsbCwgJGhhc093bik7XG4gIHJldHVybiBoYXNvd247XG59XG52YXIgZ2V0SW50cmluc2ljO1xudmFyIGhhc1JlcXVpcmVkR2V0SW50cmluc2ljO1xuZnVuY3Rpb24gcmVxdWlyZUdldEludHJpbnNpYygpIHtcbiAgaWYgKGhhc1JlcXVpcmVkR2V0SW50cmluc2ljKVxuICAgIHJldHVybiBnZXRJbnRyaW5zaWM7XG4gIGhhc1JlcXVpcmVkR2V0SW50cmluc2ljID0gMTtcbiAgdmFyIHVuZGVmaW5lZCQxO1xuICB2YXIgJFN5bnRheEVycm9yID0gU3ludGF4RXJyb3I7XG4gIHZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbiAgdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4gIHZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbihleHByZXNzaW9uU3ludGF4KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgXCIpLmNvbnN0cnVjdG9yO1wiKSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gIH07XG4gIHZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGlmICgkZ09QRCkge1xuICAgIHRyeSB7XG4gICAgICAkZ09QRCh7fSwgXCJcIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgJGdPUEQgPSBudWxsO1xuICAgIH1cbiAgfVxuICB2YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xuICB9O1xuICB2YXIgVGhyb3dUeXBlRXJyb3IgPSAkZ09QRCA/IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICBhcmd1bWVudHMuY2FsbGVlO1xuICAgICAgcmV0dXJuIHRocm93VHlwZUVycm9yO1xuICAgIH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICRnT1BEKGFyZ3VtZW50cywgXCJjYWxsZWVcIikuZ2V0O1xuICAgICAgfSBjYXRjaCAoZ09QRHRocm93cykge1xuICAgICAgICByZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9KCkgOiB0aHJvd1R5cGVFcnJvcjtcbiAgdmFyIGhhc1N5bWJvbHMyID0gcmVxdWlyZUhhc1N5bWJvbHMoKSgpO1xuICB2YXIgaGFzUHJvdG8yID0gcmVxdWlyZUhhc1Byb3RvKCkoKTtcbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IChoYXNQcm90bzIgPyBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguX19wcm90b19fO1xuICB9IDogbnVsbCk7XG4gIHZhciBuZWVkc0V2YWwgPSB7fTtcbiAgdmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQkMSA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuICB2YXIgSU5UUklOU0lDUyA9IHtcbiAgICBcIiVBZ2dyZWdhdGVFcnJvciVcIjogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBBZ2dyZWdhdGVFcnJvcixcbiAgICBcIiVBcnJheSVcIjogQXJyYXksXG4gICAgXCIlQXJyYXlCdWZmZXIlXCI6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogQXJyYXlCdWZmZXIsXG4gICAgXCIlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVcIjogaGFzU3ltYm9sczIgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkJDEsXG4gICAgXCIlQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJVwiOiB1bmRlZmluZWQkMSxcbiAgICBcIiVBc3luY0Z1bmN0aW9uJVwiOiBuZWVkc0V2YWwsXG4gICAgXCIlQXN5bmNHZW5lcmF0b3IlXCI6IG5lZWRzRXZhbCxcbiAgICBcIiVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJVwiOiBuZWVkc0V2YWwsXG4gICAgXCIlQXN5bmNJdGVyYXRvclByb3RvdHlwZSVcIjogbmVlZHNFdmFsLFxuICAgIFwiJUF0b21pY3MlXCI6IHR5cGVvZiBBdG9taWNzID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBBdG9taWNzLFxuICAgIFwiJUJpZ0ludCVcIjogdHlwZW9mIEJpZ0ludCA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogQmlnSW50LFxuICAgIFwiJUJpZ0ludDY0QXJyYXklXCI6IHR5cGVvZiBCaWdJbnQ2NEFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBCaWdJbnQ2NEFycmF5LFxuICAgIFwiJUJpZ1VpbnQ2NEFycmF5JVwiOiB0eXBlb2YgQmlnVWludDY0QXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEJpZ1VpbnQ2NEFycmF5LFxuICAgIFwiJUJvb2xlYW4lXCI6IEJvb2xlYW4sXG4gICAgXCIlRGF0YVZpZXclXCI6IHR5cGVvZiBEYXRhVmlldyA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogRGF0YVZpZXcsXG4gICAgXCIlRGF0ZSVcIjogRGF0ZSxcbiAgICBcIiVkZWNvZGVVUkklXCI6IGRlY29kZVVSSSxcbiAgICBcIiVkZWNvZGVVUklDb21wb25lbnQlXCI6IGRlY29kZVVSSUNvbXBvbmVudCxcbiAgICBcIiVlbmNvZGVVUkklXCI6IGVuY29kZVVSSSxcbiAgICBcIiVlbmNvZGVVUklDb21wb25lbnQlXCI6IGVuY29kZVVSSUNvbXBvbmVudCxcbiAgICBcIiVFcnJvciVcIjogRXJyb3IsXG4gICAgXCIlZXZhbCVcIjogZXZhbCxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcbiAgICBcIiVFdmFsRXJyb3IlXCI6IEV2YWxFcnJvcixcbiAgICBcIiVGbG9hdDMyQXJyYXklXCI6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEZsb2F0MzJBcnJheSxcbiAgICBcIiVGbG9hdDY0QXJyYXklXCI6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEZsb2F0NjRBcnJheSxcbiAgICBcIiVGaW5hbGl6YXRpb25SZWdpc3RyeSVcIjogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcbiAgICBcIiVGdW5jdGlvbiVcIjogJEZ1bmN0aW9uLFxuICAgIFwiJUdlbmVyYXRvckZ1bmN0aW9uJVwiOiBuZWVkc0V2YWwsXG4gICAgXCIlSW50OEFycmF5JVwiOiB0eXBlb2YgSW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBJbnQ4QXJyYXksXG4gICAgXCIlSW50MTZBcnJheSVcIjogdHlwZW9mIEludDE2QXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEludDE2QXJyYXksXG4gICAgXCIlSW50MzJBcnJheSVcIjogdHlwZW9mIEludDMyQXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IEludDMyQXJyYXksXG4gICAgXCIlaXNGaW5pdGUlXCI6IGlzRmluaXRlLFxuICAgIFwiJWlzTmFOJVwiOiBpc05hTixcbiAgICBcIiVJdGVyYXRvclByb3RvdHlwZSVcIjogaGFzU3ltYm9sczIgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCQxLFxuICAgIFwiJUpTT04lXCI6IHR5cGVvZiBKU09OID09PSBcIm9iamVjdFwiID8gSlNPTiA6IHVuZGVmaW5lZCQxLFxuICAgIFwiJU1hcCVcIjogdHlwZW9mIE1hcCA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogTWFwLFxuICAgIFwiJU1hcEl0ZXJhdG9yUHJvdG90eXBlJVwiOiB0eXBlb2YgTWFwID09PSBcInVuZGVmaW5lZFwiIHx8ICFoYXNTeW1ib2xzMiB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQkMSA6IGdldFByb3RvKCgvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuICAgIFwiJU1hdGglXCI6IE1hdGgsXG4gICAgXCIlTnVtYmVyJVwiOiBOdW1iZXIsXG4gICAgXCIlT2JqZWN0JVwiOiBPYmplY3QsXG4gICAgXCIlcGFyc2VGbG9hdCVcIjogcGFyc2VGbG9hdCxcbiAgICBcIiVwYXJzZUludCVcIjogcGFyc2VJbnQsXG4gICAgXCIlUHJvbWlzZSVcIjogdHlwZW9mIFByb21pc2UgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IFByb21pc2UsXG4gICAgXCIlUHJveHklXCI6IHR5cGVvZiBQcm94eSA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogUHJveHksXG4gICAgXCIlUmFuZ2VFcnJvciVcIjogUmFuZ2VFcnJvcixcbiAgICBcIiVSZWZlcmVuY2VFcnJvciVcIjogUmVmZXJlbmNlRXJyb3IsXG4gICAgXCIlUmVmbGVjdCVcIjogdHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IFJlZmxlY3QsXG4gICAgXCIlUmVnRXhwJVwiOiBSZWdFeHAsXG4gICAgXCIlU2V0JVwiOiB0eXBlb2YgU2V0ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBTZXQsXG4gICAgXCIlU2V0SXRlcmF0b3JQcm90b3R5cGUlXCI6IHR5cGVvZiBTZXQgPT09IFwidW5kZWZpbmVkXCIgfHwgIWhhc1N5bWJvbHMyIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCQxIDogZ2V0UHJvdG8oKC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG4gICAgXCIlU2hhcmVkQXJyYXlCdWZmZXIlXCI6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogU2hhcmVkQXJyYXlCdWZmZXIsXG4gICAgXCIlU3RyaW5nJVwiOiBTdHJpbmcsXG4gICAgXCIlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlXCI6IGhhc1N5bWJvbHMyICYmIGdldFByb3RvID8gZ2V0UHJvdG8oXCJcIltTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkJDEsXG4gICAgXCIlU3ltYm9sJVwiOiBoYXNTeW1ib2xzMiA/IFN5bWJvbCA6IHVuZGVmaW5lZCQxLFxuICAgIFwiJVN5bnRheEVycm9yJVwiOiAkU3ludGF4RXJyb3IsXG4gICAgXCIlVGhyb3dUeXBlRXJyb3IlXCI6IFRocm93VHlwZUVycm9yLFxuICAgIFwiJVR5cGVkQXJyYXklXCI6IFR5cGVkQXJyYXksXG4gICAgXCIlVHlwZUVycm9yJVwiOiAkVHlwZUVycm9yLFxuICAgIFwiJVVpbnQ4QXJyYXklXCI6IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkJDEgOiBVaW50OEFycmF5LFxuICAgIFwiJVVpbnQ4Q2xhbXBlZEFycmF5JVwiOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuICAgIFwiJVVpbnQxNkFycmF5JVwiOiB0eXBlb2YgVWludDE2QXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IFVpbnQxNkFycmF5LFxuICAgIFwiJVVpbnQzMkFycmF5JVwiOiB0eXBlb2YgVWludDMyQXJyYXkgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQkMSA6IFVpbnQzMkFycmF5LFxuICAgIFwiJVVSSUVycm9yJVwiOiBVUklFcnJvcixcbiAgICBcIiVXZWFrTWFwJVwiOiB0eXBlb2YgV2Vha01hcCA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogV2Vha01hcCxcbiAgICBcIiVXZWFrUmVmJVwiOiB0eXBlb2YgV2Vha1JlZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogV2Vha1JlZixcbiAgICBcIiVXZWFrU2V0JVwiOiB0eXBlb2YgV2Vha1NldCA9PT0gXCJ1bmRlZmluZWRcIiA/IHVuZGVmaW5lZCQxIDogV2Vha1NldFxuICB9O1xuICBpZiAoZ2V0UHJvdG8pIHtcbiAgICB0cnkge1xuICAgICAgbnVsbC5lcnJvcjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcbiAgICAgIElOVFJJTlNJQ1NbXCIlRXJyb3IucHJvdG90eXBlJVwiXSA9IGVycm9yUHJvdG87XG4gICAgfVxuICB9XG4gIHZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwyKG5hbWUpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgaWYgKG5hbWUgPT09IFwiJUFzeW5jRnVuY3Rpb24lXCIpIHtcbiAgICAgIHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKFwiYXN5bmMgZnVuY3Rpb24gKCkge31cIik7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIiVHZW5lcmF0b3JGdW5jdGlvbiVcIikge1xuICAgICAgdmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoXCJmdW5jdGlvbiogKCkge31cIik7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSBcIiVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJVwiKSB7XG4gICAgICB2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcihcImFzeW5jIGZ1bmN0aW9uKiAoKSB7fVwiKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwiJUFzeW5jR2VuZXJhdG9yJVwiKSB7XG4gICAgICB2YXIgZm4gPSBkb0V2YWwyKFwiJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lXCIpO1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHZhbHVlID0gZm4ucHJvdG90eXBlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCIlQXN5bmNJdGVyYXRvclByb3RvdHlwZSVcIikge1xuICAgICAgdmFyIGdlbiA9IGRvRXZhbDIoXCIlQXN5bmNHZW5lcmF0b3IlXCIpO1xuICAgICAgaWYgKGdlbiAmJiBnZXRQcm90bykge1xuICAgICAgICB2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBJTlRSSU5TSUNTW25hbWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICB2YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG4gICAgXCIlQXJyYXlCdWZmZXJQcm90b3R5cGUlXCI6IFtcIkFycmF5QnVmZmVyXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUFycmF5UHJvdG90eXBlJVwiOiBbXCJBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVBcnJheVByb3RvX2VudHJpZXMlXCI6IFtcIkFycmF5XCIsIFwicHJvdG90eXBlXCIsIFwiZW50cmllc1wiXSxcbiAgICBcIiVBcnJheVByb3RvX2ZvckVhY2glXCI6IFtcIkFycmF5XCIsIFwicHJvdG90eXBlXCIsIFwiZm9yRWFjaFwiXSxcbiAgICBcIiVBcnJheVByb3RvX2tleXMlXCI6IFtcIkFycmF5XCIsIFwicHJvdG90eXBlXCIsIFwia2V5c1wiXSxcbiAgICBcIiVBcnJheVByb3RvX3ZhbHVlcyVcIjogW1wiQXJyYXlcIiwgXCJwcm90b3R5cGVcIiwgXCJ2YWx1ZXNcIl0sXG4gICAgXCIlQXN5bmNGdW5jdGlvblByb3RvdHlwZSVcIjogW1wiQXN5bmNGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVBc3luY0dlbmVyYXRvciVcIjogW1wiQXN5bmNHZW5lcmF0b3JGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVBc3luY0dlbmVyYXRvclByb3RvdHlwZSVcIjogW1wiQXN5bmNHZW5lcmF0b3JGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVCb29sZWFuUHJvdG90eXBlJVwiOiBbXCJCb29sZWFuXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJURhdGFWaWV3UHJvdG90eXBlJVwiOiBbXCJEYXRhVmlld1wiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVEYXRlUHJvdG90eXBlJVwiOiBbXCJEYXRlXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUVycm9yUHJvdG90eXBlJVwiOiBbXCJFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVFdmFsRXJyb3JQcm90b3R5cGUlXCI6IFtcIkV2YWxFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVGbG9hdDMyQXJyYXlQcm90b3R5cGUlXCI6IFtcIkZsb2F0MzJBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVGbG9hdDY0QXJyYXlQcm90b3R5cGUlXCI6IFtcIkZsb2F0NjRBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVGdW5jdGlvblByb3RvdHlwZSVcIjogW1wiRnVuY3Rpb25cIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlR2VuZXJhdG9yJVwiOiBbXCJHZW5lcmF0b3JGdW5jdGlvblwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVHZW5lcmF0b3JQcm90b3R5cGUlXCI6IFtcIkdlbmVyYXRvckZ1bmN0aW9uXCIsIFwicHJvdG90eXBlXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUludDhBcnJheVByb3RvdHlwZSVcIjogW1wiSW50OEFycmF5XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJUludDE2QXJyYXlQcm90b3R5cGUlXCI6IFtcIkludDE2QXJyYXlcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlSW50MzJBcnJheVByb3RvdHlwZSVcIjogW1wiSW50MzJBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVKU09OUGFyc2UlXCI6IFtcIkpTT05cIiwgXCJwYXJzZVwiXSxcbiAgICBcIiVKU09OU3RyaW5naWZ5JVwiOiBbXCJKU09OXCIsIFwic3RyaW5naWZ5XCJdLFxuICAgIFwiJU1hcFByb3RvdHlwZSVcIjogW1wiTWFwXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJU51bWJlclByb3RvdHlwZSVcIjogW1wiTnVtYmVyXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJU9iamVjdFByb3RvdHlwZSVcIjogW1wiT2JqZWN0XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJU9ialByb3RvX3RvU3RyaW5nJVwiOiBbXCJPYmplY3RcIiwgXCJwcm90b3R5cGVcIiwgXCJ0b1N0cmluZ1wiXSxcbiAgICBcIiVPYmpQcm90b192YWx1ZU9mJVwiOiBbXCJPYmplY3RcIiwgXCJwcm90b3R5cGVcIiwgXCJ2YWx1ZU9mXCJdLFxuICAgIFwiJVByb21pc2VQcm90b3R5cGUlXCI6IFtcIlByb21pc2VcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlUHJvbWlzZVByb3RvX3RoZW4lXCI6IFtcIlByb21pc2VcIiwgXCJwcm90b3R5cGVcIiwgXCJ0aGVuXCJdLFxuICAgIFwiJVByb21pc2VfYWxsJVwiOiBbXCJQcm9taXNlXCIsIFwiYWxsXCJdLFxuICAgIFwiJVByb21pc2VfcmVqZWN0JVwiOiBbXCJQcm9taXNlXCIsIFwicmVqZWN0XCJdLFxuICAgIFwiJVByb21pc2VfcmVzb2x2ZSVcIjogW1wiUHJvbWlzZVwiLCBcInJlc29sdmVcIl0sXG4gICAgXCIlUmFuZ2VFcnJvclByb3RvdHlwZSVcIjogW1wiUmFuZ2VFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSVcIjogW1wiUmVmZXJlbmNlRXJyb3JcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlUmVnRXhwUHJvdG90eXBlJVwiOiBbXCJSZWdFeHBcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlU2V0UHJvdG90eXBlJVwiOiBbXCJTZXRcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlXCI6IFtcIlNoYXJlZEFycmF5QnVmZmVyXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVN0cmluZ1Byb3RvdHlwZSVcIjogW1wiU3RyaW5nXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVN5bWJvbFByb3RvdHlwZSVcIjogW1wiU3ltYm9sXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVN5bnRheEVycm9yUHJvdG90eXBlJVwiOiBbXCJTeW50YXhFcnJvclwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVUeXBlZEFycmF5UHJvdG90eXBlJVwiOiBbXCJUeXBlZEFycmF5XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVR5cGVFcnJvclByb3RvdHlwZSVcIjogW1wiVHlwZUVycm9yXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVVpbnQ4QXJyYXlQcm90b3R5cGUlXCI6IFtcIlVpbnQ4QXJyYXlcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlXCI6IFtcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVVpbnQxNkFycmF5UHJvdG90eXBlJVwiOiBbXCJVaW50MTZBcnJheVwiLCBcInByb3RvdHlwZVwiXSxcbiAgICBcIiVVaW50MzJBcnJheVByb3RvdHlwZSVcIjogW1wiVWludDMyQXJyYXlcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlVVJJRXJyb3JQcm90b3R5cGUlXCI6IFtcIlVSSUVycm9yXCIsIFwicHJvdG90eXBlXCJdLFxuICAgIFwiJVdlYWtNYXBQcm90b3R5cGUlXCI6IFtcIldlYWtNYXBcIiwgXCJwcm90b3R5cGVcIl0sXG4gICAgXCIlV2Vha1NldFByb3RvdHlwZSVcIjogW1wiV2Vha1NldFwiLCBcInByb3RvdHlwZVwiXVxuICB9O1xuICB2YXIgYmluZCA9IHJlcXVpcmVGdW5jdGlvbkJpbmQoKTtcbiAgdmFyIGhhc093biA9IHJlcXVpcmVIYXNvd24oKTtcbiAgdmFyICRjb25jYXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLmNvbmNhdCk7XG4gIHZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xuICB2YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbiAgdmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnNsaWNlKTtcbiAgdmFyICRleGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG4gIHZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcbiAgdmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aDIoc3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG4gICAgdmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG4gICAgaWYgKGZpcnN0ID09PSBcIiVcIiAmJiBsYXN0ICE9PSBcIiVcIikge1xuICAgICAgdGhyb3cgbmV3ICRTeW50YXhFcnJvcihcImludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWBcIik7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSBcIiVcIiAmJiBmaXJzdCAhPT0gXCIlXCIpIHtcbiAgICAgIHRocm93IG5ldyAkU3ludGF4RXJyb3IoXCJpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgJHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCBcIiQxXCIpIDogbnVtYmVyIHx8IG1hdGNoO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYzIobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG4gICAgdmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuICAgIHZhciBhbGlhcztcbiAgICBpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuICAgICAgYWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcbiAgICAgIGludHJpbnNpY05hbWUgPSBcIiVcIiArIGFsaWFzWzBdICsgXCIlXCI7XG4gICAgfVxuICAgIGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG4gICAgICBpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuICAgICAgICB2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgJiYgIWFsbG93TWlzc2luZykge1xuICAgICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImludHJpbnNpYyBcIiArIG5hbWUgKyBcIiBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSFcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbGlhcyxcbiAgICAgICAgbmFtZTogaW50cmluc2ljTmFtZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyAkU3ludGF4RXJyb3IoXCJpbnRyaW5zaWMgXCIgKyBuYW1lICsgXCIgZG9lcyBub3QgZXhpc3QhXCIpO1xuICB9O1xuICBnZXRJbnRyaW5zaWMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nXCIpO1xuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgfVxuICAgIGlmICgkZXhlYygvXiU/W14lXSolPyQvLCBuYW1lKSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3ICRTeW50YXhFcnJvcihcImAlYCBtYXkgbm90IGJlIHByZXNlbnQgYW55d2hlcmUgYnV0IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgaW50cmluc2ljIG5hbWVcIik7XG4gICAgfVxuICAgIHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcbiAgICB2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiBcIlwiO1xuICAgIHZhciBpbnRyaW5zaWMgPSBnZXRCYXNlSW50cmluc2ljKFwiJVwiICsgaW50cmluc2ljQmFzZU5hbWUgKyBcIiVcIiwgYWxsb3dNaXNzaW5nKTtcbiAgICB2YXIgaW50cmluc2ljUmVhbE5hbWUgPSBpbnRyaW5zaWMubmFtZTtcbiAgICB2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG4gICAgdmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuICAgIHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcbiAgICBpZiAoYWxpYXMpIHtcbiAgICAgIGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG4gICAgICAkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMSwgaXNPd24gPSB0cnVlOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICB2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG4gICAgICB2YXIgbGFzdCA9ICRzdHJTbGljZShwYXJ0LCAtMSk7XG4gICAgICBpZiAoKGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gXCJgXCIgfHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gXCJgXCIpKSAmJiBmaXJzdCAhPT0gbGFzdCkge1xuICAgICAgICB0aHJvdyBuZXcgJFN5bnRheEVycm9yKFwicHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3Rlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0ID09PSBcImNvbnN0cnVjdG9yXCIgfHwgIWlzT3duKSB7XG4gICAgICAgIHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpbnRyaW5zaWNCYXNlTmFtZSArPSBcIi5cIiArIHBhcnQ7XG4gICAgICBpbnRyaW5zaWNSZWFsTmFtZSA9IFwiJVwiICsgaW50cmluc2ljQmFzZU5hbWUgKyBcIiVcIjtcbiAgICAgIGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG4gICAgICAgIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoIWFsbG93TWlzc2luZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJiYXNlIGludHJpbnNpYyBmb3IgXCIgKyBuYW1lICsgXCIgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkZ09QRCAmJiBpICsgMSA+PSBwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcbiAgICAgICAgICBpc093biA9ICEhZGVzYztcbiAgICAgICAgICBpZiAoaXNPd24gJiYgXCJnZXRcIiBpbiBkZXNjICYmICEoXCJvcmlnaW5hbFZhbHVlXCIgaW4gZGVzYy5nZXQpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlc2MuZ2V0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZVtwYXJ0XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuICAgICAgICAgIElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4gZ2V0SW50cmluc2ljO1xufVxudmFyIGNhbGxCaW5kID0geyBleHBvcnRzOiB7fSB9O1xudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnNfMTtcbnZhciBoYXNSZXF1aXJlZEhhc1Byb3BlcnR5RGVzY3JpcHRvcnM7XG5mdW5jdGlvbiByZXF1aXJlSGFzUHJvcGVydHlEZXNjcmlwdG9ycygpIHtcbiAgaWYgKGhhc1JlcXVpcmVkSGFzUHJvcGVydHlEZXNjcmlwdG9ycylcbiAgICByZXR1cm4gaGFzUHJvcGVydHlEZXNjcmlwdG9yc18xO1xuICBoYXNSZXF1aXJlZEhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSAxO1xuICB2YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZUdldEludHJpbnNpYygpO1xuICB2YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKFwiJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSVcIiwgdHJ1ZSk7XG4gIHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gZnVuY3Rpb24gaGFzUHJvcGVydHlEZXNjcmlwdG9yczIoKSB7XG4gICAgaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgJGRlZmluZVByb3BlcnR5KHt9LCBcImFcIiwgeyB2YWx1ZTogMSB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnID0gZnVuY3Rpb24gaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcoKSB7XG4gICAgaWYgKCFoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShbXSwgXCJsZW5ndGhcIiwgeyB2YWx1ZTogMSB9KS5sZW5ndGggIT09IDE7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzXzEgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuICByZXR1cm4gaGFzUHJvcGVydHlEZXNjcmlwdG9yc18xO1xufVxudmFyIGdvcGQ7XG52YXIgaGFzUmVxdWlyZWRHb3BkO1xuZnVuY3Rpb24gcmVxdWlyZUdvcGQoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEdvcGQpXG4gICAgcmV0dXJuIGdvcGQ7XG4gIGhhc1JlcXVpcmVkR29wZCA9IDE7XG4gIHZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlR2V0SW50cmluc2ljKCk7XG4gIHZhciAkZ09QRCA9IEdldEludHJpbnNpYyhcIiVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJVwiLCB0cnVlKTtcbiAgaWYgKCRnT1BEKSB7XG4gICAgdHJ5IHtcbiAgICAgICRnT1BEKFtdLCBcImxlbmd0aFwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAkZ09QRCA9IG51bGw7XG4gICAgfVxuICB9XG4gIGdvcGQgPSAkZ09QRDtcbiAgcmV0dXJuIGdvcGQ7XG59XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5O1xudmFyIGhhc1JlcXVpcmVkRGVmaW5lRGF0YVByb3BlcnR5O1xuZnVuY3Rpb24gcmVxdWlyZURlZmluZURhdGFQcm9wZXJ0eSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRGVmaW5lRGF0YVByb3BlcnR5KVxuICAgIHJldHVybiBkZWZpbmVEYXRhUHJvcGVydHk7XG4gIGhhc1JlcXVpcmVkRGVmaW5lRGF0YVByb3BlcnR5ID0gMTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSByZXF1aXJlSGFzUHJvcGVydHlEZXNjcmlwdG9ycygpKCk7XG4gIHZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlR2V0SW50cmluc2ljKCk7XG4gIHZhciAkZGVmaW5lUHJvcGVydHkgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzICYmIEdldEludHJpbnNpYyhcIiVPYmplY3QuZGVmaW5lUHJvcGVydHklXCIsIHRydWUpO1xuICBpZiAoJGRlZmluZVByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgICRkZWZpbmVQcm9wZXJ0eSh7fSwgXCJhXCIsIHsgdmFsdWU6IDEgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgJGRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHZhciAkU3ludGF4RXJyb3IgPSBHZXRJbnRyaW5zaWMoXCIlU3ludGF4RXJyb3IlXCIpO1xuICB2YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYyhcIiVUeXBlRXJyb3IlXCIpO1xuICB2YXIgZ29wZDIgPSByZXF1aXJlR29wZCgpO1xuICBkZWZpbmVEYXRhUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVEYXRhUHJvcGVydHkyKG9iaiwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiYG9iamAgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbmBcIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSBcInN5bWJvbFwiKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcImBwcm9wZXJ0eWAgbXVzdCBiZSBhIHN0cmluZyBvciBhIHN5bWJvbGBcIik7XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdICE9PSBcImJvb2xlYW5cIiAmJiBhcmd1bWVudHNbM10gIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiYG5vbkVudW1lcmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbFwiKTtcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIHR5cGVvZiBhcmd1bWVudHNbNF0gIT09IFwiYm9vbGVhblwiICYmIGFyZ3VtZW50c1s0XSAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgbm9uV3JpdGFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbFwiKTtcbiAgICB9XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIHR5cGVvZiBhcmd1bWVudHNbNV0gIT09IFwiYm9vbGVhblwiICYmIGFyZ3VtZW50c1s1XSAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgbm9uQ29uZmlndXJhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGxcIik7XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNiAmJiB0eXBlb2YgYXJndW1lbnRzWzZdICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJgbG9vc2VgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW5cIik7XG4gICAgfVxuICAgIHZhciBub25FbnVtZXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICAgIHZhciBub25Xcml0YWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogbnVsbDtcbiAgICB2YXIgbm9uQ29uZmlndXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiBudWxsO1xuICAgIHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ID8gYXJndW1lbnRzWzZdIDogZmFsc2U7XG4gICAgdmFyIGRlc2MgPSAhIWdvcGQyICYmIGdvcGQyKG9iaiwgcHJvcGVydHkpO1xuICAgIGlmICgkZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICRkZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogbm9uQ29uZmlndXJhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLmNvbmZpZ3VyYWJsZSA6ICFub25Db25maWd1cmFibGUsXG4gICAgICAgIGVudW1lcmFibGU6IG5vbkVudW1lcmFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2MuZW51bWVyYWJsZSA6ICFub25FbnVtZXJhYmxlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgd3JpdGFibGU6IG5vbldyaXRhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLndyaXRhYmxlIDogIW5vbldyaXRhYmxlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGxvb3NlIHx8ICFub25FbnVtZXJhYmxlICYmICFub25Xcml0YWJsZSAmJiAhbm9uQ29uZmlndXJhYmxlKSB7XG4gICAgICBvYmpbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyAkU3ludGF4RXJyb3IoXCJUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZGVmaW5pbmcgYSBwcm9wZXJ0eSBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1lbnVtZXJhYmxlLlwiKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBkZWZpbmVEYXRhUHJvcGVydHk7XG59XG52YXIgc2V0RnVuY3Rpb25MZW5ndGg7XG52YXIgaGFzUmVxdWlyZWRTZXRGdW5jdGlvbkxlbmd0aDtcbmZ1bmN0aW9uIHJlcXVpcmVTZXRGdW5jdGlvbkxlbmd0aCgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkU2V0RnVuY3Rpb25MZW5ndGgpXG4gICAgcmV0dXJuIHNldEZ1bmN0aW9uTGVuZ3RoO1xuICBoYXNSZXF1aXJlZFNldEZ1bmN0aW9uTGVuZ3RoID0gMTtcbiAgdmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmVHZXRJbnRyaW5zaWMoKTtcbiAgdmFyIGRlZmluZSA9IHJlcXVpcmVEZWZpbmVEYXRhUHJvcGVydHkoKTtcbiAgdmFyIGhhc0Rlc2NyaXB0b3JzID0gcmVxdWlyZUhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSgpO1xuICB2YXIgZ09QRCA9IHJlcXVpcmVHb3BkKCk7XG4gIHZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKFwiJVR5cGVFcnJvciVcIik7XG4gIHZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoXCIlTWF0aC5mbG9vciVcIik7XG4gIHNldEZ1bmN0aW9uTGVuZ3RoID0gZnVuY3Rpb24gc2V0RnVuY3Rpb25MZW5ndGgyKGZuLCBsZW5ndGgpIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiYGZuYCBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsZW5ndGggIT09IFwibnVtYmVyXCIgfHwgbGVuZ3RoIDwgMCB8fCBsZW5ndGggPiA0Mjk0OTY3Mjk1IHx8ICRmbG9vcihsZW5ndGgpICE9PSBsZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiYGxlbmd0aGAgbXVzdCBiZSBhIHBvc2l0aXZlIDMyLWJpdCBpbnRlZ2VyXCIpO1xuICAgIH1cbiAgICB2YXIgbG9vc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAhIWFyZ3VtZW50c1syXTtcbiAgICB2YXIgZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgdmFyIGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IHRydWU7XG4gICAgaWYgKFwibGVuZ3RoXCIgaW4gZm4gJiYgZ09QRCkge1xuICAgICAgdmFyIGRlc2MgPSBnT1BEKGZuLCBcImxlbmd0aFwiKTtcbiAgICAgIGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICBmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZGVzYyAmJiAhZGVzYy53cml0YWJsZSkge1xuICAgICAgICBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgfHwgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIHx8ICFsb29zZSkge1xuICAgICAgaWYgKGhhc0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIGRlZmluZShmbiwgXCJsZW5ndGhcIiwgbGVuZ3RoLCB0cnVlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZShmbiwgXCJsZW5ndGhcIiwgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZuO1xuICB9O1xuICByZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGg7XG59XG52YXIgaGFzUmVxdWlyZWRDYWxsQmluZDtcbmZ1bmN0aW9uIHJlcXVpcmVDYWxsQmluZCgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkQ2FsbEJpbmQpXG4gICAgcmV0dXJuIGNhbGxCaW5kLmV4cG9ydHM7XG4gIGhhc1JlcXVpcmVkQ2FsbEJpbmQgPSAxO1xuICAoZnVuY3Rpb24obW9kdWxlMikge1xuICAgIHZhciBiaW5kID0gcmVxdWlyZUZ1bmN0aW9uQmluZCgpO1xuICAgIHZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlR2V0SW50cmluc2ljKCk7XG4gICAgdmFyIHNldEZ1bmN0aW9uTGVuZ3RoMiA9IHJlcXVpcmVTZXRGdW5jdGlvbkxlbmd0aCgpO1xuICAgIHZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKFwiJVR5cGVFcnJvciVcIik7XG4gICAgdmFyICRhcHBseSA9IEdldEludHJpbnNpYyhcIiVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklXCIpO1xuICAgIHZhciAkY2FsbCA9IEdldEludHJpbnNpYyhcIiVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCVcIik7XG4gICAgdmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoXCIlUmVmbGVjdC5hcHBseSVcIiwgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuICAgIHZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoXCIlT2JqZWN0LmRlZmluZVByb3BlcnR5JVwiLCB0cnVlKTtcbiAgICB2YXIgJG1heCA9IEdldEludHJpbnNpYyhcIiVNYXRoLm1heCVcIik7XG4gICAgaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgJGRlZmluZVByb3BlcnR5KHt9LCBcImFcIiwgeyB2YWx1ZTogMSB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgJGRlZmluZVByb3BlcnR5ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbW9kdWxlMi5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQyKG9yaWdpbmFsRnVuY3Rpb24pIHtcbiAgICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxGdW5jdGlvbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiYSBmdW5jdGlvbiBpcyByZXF1aXJlZFwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBzZXRGdW5jdGlvbkxlbmd0aDIoXG4gICAgICAgIGZ1bmMsXG4gICAgICAgIDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSksXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfTtcbiAgICB2YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kMigpIHtcbiAgICAgIHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIGlmICgkZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICRkZWZpbmVQcm9wZXJ0eShtb2R1bGUyLmV4cG9ydHMsIFwiYXBwbHlcIiwgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb2R1bGUyLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG4gICAgfVxuICB9KShjYWxsQmluZCk7XG4gIHJldHVybiBjYWxsQmluZC5leHBvcnRzO1xufVxudmFyIGNhbGxCb3VuZDtcbnZhciBoYXNSZXF1aXJlZENhbGxCb3VuZDtcbmZ1bmN0aW9uIHJlcXVpcmVDYWxsQm91bmQoKSB7XG4gIGlmIChoYXNSZXF1aXJlZENhbGxCb3VuZClcbiAgICByZXR1cm4gY2FsbEJvdW5kO1xuICBoYXNSZXF1aXJlZENhbGxCb3VuZCA9IDE7XG4gIHZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlR2V0SW50cmluc2ljKCk7XG4gIHZhciBjYWxsQmluZDIgPSByZXF1aXJlQ2FsbEJpbmQoKTtcbiAgdmFyICRpbmRleE9mID0gY2FsbEJpbmQyKEdldEludHJpbnNpYyhcIlN0cmluZy5wcm90b3R5cGUuaW5kZXhPZlwiKSk7XG4gIGNhbGxCb3VuZCA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcbiAgICB2YXIgaW50cmluc2ljID0gR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKTtcbiAgICBpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gXCJmdW5jdGlvblwiICYmICRpbmRleE9mKG5hbWUsIFwiLnByb3RvdHlwZS5cIikgPiAtMSkge1xuICAgICAgcmV0dXJuIGNhbGxCaW5kMihpbnRyaW5zaWMpO1xuICAgIH1cbiAgICByZXR1cm4gaW50cmluc2ljO1xuICB9O1xuICByZXR1cm4gY2FsbEJvdW5kO1xufVxudmFyIGlzQXJndW1lbnRzO1xudmFyIGhhc1JlcXVpcmVkSXNBcmd1bWVudHM7XG5mdW5jdGlvbiByZXF1aXJlSXNBcmd1bWVudHMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZElzQXJndW1lbnRzKVxuICAgIHJldHVybiBpc0FyZ3VtZW50cztcbiAgaGFzUmVxdWlyZWRJc0FyZ3VtZW50cyA9IDE7XG4gIHZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmVTaGFtcygpKCk7XG4gIHZhciBjYWxsQm91bmQyID0gcmVxdWlyZUNhbGxCb3VuZCgpO1xuICB2YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kMihcIk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcIik7XG4gIHZhciBpc1N0YW5kYXJkQXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHMyKHZhbHVlKSB7XG4gICAgaWYgKGhhc1RvU3RyaW5nVGFnICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCI7XG4gIH07XG4gIHZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzMih2YWx1ZSkge1xuICAgIGlmIChpc1N0YW5kYXJkQXJndW1lbnRzKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZS5sZW5ndGggPj0gMCAmJiAkdG9TdHJpbmcodmFsdWUpICE9PSBcIltvYmplY3QgQXJyYXldXCIgJiYgJHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09IFwiW29iamVjdCBGdW5jdGlvbl1cIjtcbiAgfTtcbiAgdmFyIHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpO1xuICB9KCk7XG4gIGlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50cztcbiAgaXNBcmd1bWVudHMgPSBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuICByZXR1cm4gaXNBcmd1bWVudHM7XG59XG52YXIgaXNHZW5lcmF0b3JGdW5jdGlvbjtcbnZhciBoYXNSZXF1aXJlZElzR2VuZXJhdG9yRnVuY3Rpb247XG5mdW5jdGlvbiByZXF1aXJlSXNHZW5lcmF0b3JGdW5jdGlvbigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkSXNHZW5lcmF0b3JGdW5jdGlvbilcbiAgICByZXR1cm4gaXNHZW5lcmF0b3JGdW5jdGlvbjtcbiAgaGFzUmVxdWlyZWRJc0dlbmVyYXRvckZ1bmN0aW9uID0gMTtcbiAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBpc0ZuUmVnZXggPSAvXlxccyooPzpmdW5jdGlvbik/XFwqLztcbiAgdmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZVNoYW1zKCkoKTtcbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgZ2V0R2VuZXJhdG9yRnVuYyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghaGFzVG9TdHJpbmdUYWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBGdW5jdGlvbihcInJldHVybiBmdW5jdGlvbiooKSB7fVwiKSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gIH07XG4gIHZhciBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzR2VuZXJhdG9yRnVuY3Rpb24yKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0ZuUmVnZXgudGVzdChmblRvU3RyLmNhbGwoZm4pKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghaGFzVG9TdHJpbmdUYWcpIHtcbiAgICAgIHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcbiAgICAgIHJldHVybiBzdHIgPT09IFwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIjtcbiAgICB9XG4gICAgaWYgKCFnZXRQcm90bykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIEdlbmVyYXRvckZ1bmN0aW9uID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB2YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcbiAgICAgIEdlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yRnVuYyA/IGdldFByb3RvKGdlbmVyYXRvckZ1bmMpIDogZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xuICB9O1xuICByZXR1cm4gaXNHZW5lcmF0b3JGdW5jdGlvbjtcbn1cbnZhciBpc0NhbGxhYmxlO1xudmFyIGhhc1JlcXVpcmVkSXNDYWxsYWJsZTtcbmZ1bmN0aW9uIHJlcXVpcmVJc0NhbGxhYmxlKCkge1xuICBpZiAoaGFzUmVxdWlyZWRJc0NhbGxhYmxlKVxuICAgIHJldHVybiBpc0NhbGxhYmxlO1xuICBoYXNSZXF1aXJlZElzQ2FsbGFibGUgPSAxO1xuICB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIHJlZmxlY3RBcHBseSA9IHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIFJlZmxlY3QgIT09IG51bGwgJiYgUmVmbGVjdC5hcHBseTtcbiAgdmFyIGJhZEFycmF5TGlrZTtcbiAgdmFyIGlzQ2FsbGFibGVNYXJrZXI7XG4gIGlmICh0eXBlb2YgcmVmbGVjdEFwcGx5ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJsZW5ndGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRocm93IGlzQ2FsbGFibGVNYXJrZXI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaXNDYWxsYWJsZU1hcmtlciA9IHt9O1xuICAgICAgcmVmbGVjdEFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyA0MjtcbiAgICAgIH0sIG51bGwsIGJhZEFycmF5TGlrZSk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgaWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcbiAgICAgICAgcmVmbGVjdEFwcGx5ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVmbGVjdEFwcGx5ID0gbnVsbDtcbiAgfVxuICB2YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbiAgdmFyIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGdW5jdGlvbih2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChmblN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmblRvU3RyLmNhbGwodmFsdWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIG9iamVjdENsYXNzID0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbiAgdmFyIGZuQ2xhc3MgPSBcIltvYmplY3QgRnVuY3Rpb25dXCI7XG4gIHZhciBnZW5DbGFzcyA9IFwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIjtcbiAgdmFyIGRkYUNsYXNzID0gXCJbb2JqZWN0IEhUTUxBbGxDb2xsZWN0aW9uXVwiO1xuICB2YXIgZGRhQ2xhc3MyID0gXCJbb2JqZWN0IEhUTUwgZG9jdW1lbnQuYWxsIGNsYXNzXVwiO1xuICB2YXIgZGRhQ2xhc3MzID0gXCJbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXVwiO1xuICB2YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7XG4gIHZhciBpc0lFNjggPSAhKDAgaW4gWyxdKTtcbiAgdmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIgYWxsID0gZG9jdW1lbnQuYWxsO1xuICAgIGlmICh0b1N0ci5jYWxsKGFsbCkgPT09IHRvU3RyLmNhbGwoZG9jdW1lbnQuYWxsKSkge1xuICAgICAgaXNEREEgPSBmdW5jdGlvbiBpc0RvY3VtZW50RG90QWxsKHZhbHVlKSB7XG4gICAgICAgIGlmICgoaXNJRTY4IHx8ICF2YWx1ZSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiAoc3RyID09PSBkZGFDbGFzcyB8fCBzdHIgPT09IGRkYUNsYXNzMiB8fCBzdHIgPT09IGRkYUNsYXNzMyB8fCBzdHIgPT09IG9iamVjdENsYXNzKSAmJiB2YWx1ZShcIlwiKSA9PSBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaXNDYWxsYWJsZSA9IHJlZmxlY3RBcHBseSA/IGZ1bmN0aW9uIGlzQ2FsbGFibGUyKHZhbHVlKSB7XG4gICAgaWYgKGlzRERBKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmVmbGVjdEFwcGx5KHZhbHVlLCBudWxsLCBiYWRBcnJheUxpa2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlICE9PSBpc0NhbGxhYmxlTWFya2VyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpICYmIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcbiAgfSA6IGZ1bmN0aW9uIGlzQ2FsbGFibGUyKHZhbHVlKSB7XG4gICAgaWYgKGlzRERBKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaGFzVG9TdHJpbmdUYWcpIHtcbiAgICAgIHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBzdHJDbGFzcyA9IHRvU3RyLmNhbGwodmFsdWUpO1xuICAgIGlmIChzdHJDbGFzcyAhPT0gZm5DbGFzcyAmJiBzdHJDbGFzcyAhPT0gZ2VuQ2xhc3MgJiYgIS9eXFxbb2JqZWN0IEhUTUwvLnRlc3Qoc3RyQ2xhc3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG4gIH07XG4gIHJldHVybiBpc0NhbGxhYmxlO1xufVxudmFyIGZvckVhY2hfMTtcbnZhciBoYXNSZXF1aXJlZEZvckVhY2g7XG5mdW5jdGlvbiByZXF1aXJlRm9yRWFjaCgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRm9yRWFjaClcbiAgICByZXR1cm4gZm9yRWFjaF8xO1xuICBoYXNSZXF1aXJlZEZvckVhY2ggPSAxO1xuICB2YXIgaXNDYWxsYWJsZTIgPSByZXF1aXJlSXNDYWxsYWJsZSgpO1xuICB2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgZm9yRWFjaEFycmF5ID0gZnVuY3Rpb24gZm9yRWFjaEFycmF5MihhcnJheSwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgaSkpIHtcbiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICBpdGVyYXRvcihhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBmb3JFYWNoU3RyaW5nID0gZnVuY3Rpb24gZm9yRWFjaFN0cmluZzIoc3RyaW5nLCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICBpdGVyYXRvcihzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBmb3JFYWNoT2JqZWN0ID0gZnVuY3Rpb24gZm9yRWFjaE9iamVjdDIob2JqZWN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBrIGluIG9iamVjdCkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkge1xuICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgIGl0ZXJhdG9yKG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBmb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaDIobGlzdCwgaXRlcmF0b3IsIHRoaXNBcmcpIHtcbiAgICBpZiAoIWlzQ2FsbGFibGUyKGl0ZXJhdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgdmFyIHJlY2VpdmVyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgIHJlY2VpdmVyID0gdGhpc0FyZztcbiAgICB9XG4gICAgaWYgKHRvU3RyLmNhbGwobGlzdCkgPT09IFwiW29iamVjdCBBcnJheV1cIikge1xuICAgICAgZm9yRWFjaEFycmF5KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZm9yRWFjaFN0cmluZyhsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoT2JqZWN0KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfVxuICB9O1xuICBmb3JFYWNoXzEgPSBmb3JFYWNoO1xuICByZXR1cm4gZm9yRWFjaF8xO1xufVxudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzO1xudmFyIGhhc1JlcXVpcmVkQXZhaWxhYmxlVHlwZWRBcnJheXM7XG5mdW5jdGlvbiByZXF1aXJlQXZhaWxhYmxlVHlwZWRBcnJheXMoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEF2YWlsYWJsZVR5cGVkQXJyYXlzKVxuICAgIHJldHVybiBhdmFpbGFibGVUeXBlZEFycmF5cztcbiAgaGFzUmVxdWlyZWRBdmFpbGFibGVUeXBlZEFycmF5cyA9IDE7XG4gIHZhciBwb3NzaWJsZU5hbWVzID0gW1xuICAgIFwiQmlnSW50NjRBcnJheVwiLFxuICAgIFwiQmlnVWludDY0QXJyYXlcIixcbiAgICBcIkZsb2F0MzJBcnJheVwiLFxuICAgIFwiRmxvYXQ2NEFycmF5XCIsXG4gICAgXCJJbnQxNkFycmF5XCIsXG4gICAgXCJJbnQzMkFycmF5XCIsXG4gICAgXCJJbnQ4QXJyYXlcIixcbiAgICBcIlVpbnQxNkFycmF5XCIsXG4gICAgXCJVaW50MzJBcnJheVwiLFxuICAgIFwiVWludDhBcnJheVwiLFxuICAgIFwiVWludDhDbGFtcGVkQXJyYXlcIlxuICBdO1xuICB2YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcInVuZGVmaW5lZFwiID8gY29tbW9uanNHbG9iYWwgOiBnbG9iYWxUaGlzO1xuICBhdmFpbGFibGVUeXBlZEFycmF5cyA9IGZ1bmN0aW9uIGF2YWlsYWJsZVR5cGVkQXJyYXlzMigpIHtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3NzaWJsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHlwZW9mIGdbcG9zc2libGVOYW1lc1tpXV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvdXRbb3V0Lmxlbmd0aF0gPSBwb3NzaWJsZU5hbWVzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuICByZXR1cm4gYXZhaWxhYmxlVHlwZWRBcnJheXM7XG59XG52YXIgd2hpY2hUeXBlZEFycmF5O1xudmFyIGhhc1JlcXVpcmVkV2hpY2hUeXBlZEFycmF5O1xuZnVuY3Rpb24gcmVxdWlyZVdoaWNoVHlwZWRBcnJheSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkV2hpY2hUeXBlZEFycmF5KVxuICAgIHJldHVybiB3aGljaFR5cGVkQXJyYXk7XG4gIGhhc1JlcXVpcmVkV2hpY2hUeXBlZEFycmF5ID0gMTtcbiAgdmFyIGZvckVhY2ggPSByZXF1aXJlRm9yRWFjaCgpO1xuICB2YXIgYXZhaWxhYmxlVHlwZWRBcnJheXMyID0gcmVxdWlyZUF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG4gIHZhciBjYWxsQmluZDIgPSByZXF1aXJlQ2FsbEJpbmQoKTtcbiAgdmFyIGNhbGxCb3VuZDIgPSByZXF1aXJlQ2FsbEJvdW5kKCk7XG4gIHZhciBnT1BEID0gcmVxdWlyZUdvcGQoKTtcbiAgdmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZDIoXCJPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXCIpO1xuICB2YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlU2hhbXMoKSgpO1xuICB2YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcInVuZGVmaW5lZFwiID8gY29tbW9uanNHbG9iYWwgOiBnbG9iYWxUaGlzO1xuICB2YXIgdHlwZWRBcnJheXMgPSBhdmFpbGFibGVUeXBlZEFycmF5czIoKTtcbiAgdmFyICRzbGljZSA9IGNhbGxCb3VuZDIoXCJTdHJpbmcucHJvdG90eXBlLnNsaWNlXCIpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciAkaW5kZXhPZiA9IGNhbGxCb3VuZDIoXCJBcnJheS5wcm90b3R5cGUuaW5kZXhPZlwiLCB0cnVlKSB8fCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfTtcbiAgdmFyIGNhY2hlID0geyBfX3Byb3RvX186IG51bGwgfTtcbiAgaWYgKGhhc1RvU3RyaW5nVGFnICYmIGdPUEQgJiYgZ2V0UHJvdG90eXBlT2YpIHtcbiAgICBmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbih0eXBlZEFycmF5KSB7XG4gICAgICB2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcbiAgICAgIGlmIChTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSB7XG4gICAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcbiAgICAgICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgdmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgICAgICAgZGVzY3JpcHRvciA9IGdPUEQoc3VwZXJQcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZVtcIiRcIiArIHR5cGVkQXJyYXldID0gY2FsbEJpbmQyKGRlc2NyaXB0b3IuZ2V0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbih0eXBlZEFycmF5KSB7XG4gICAgICB2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcbiAgICAgIHZhciBmbiA9IGFyci5zbGljZSB8fCBhcnIuc2V0O1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGNhY2hlW1wiJFwiICsgdHlwZWRBcnJheV0gPSBjYWxsQmluZDIoZm4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHZhciB0cnlUeXBlZEFycmF5cyA9IGZ1bmN0aW9uIHRyeUFsbFR5cGVkQXJyYXlzKHZhbHVlKSB7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgZm9yRWFjaChjYWNoZSwgZnVuY3Rpb24oZ2V0dGVyLCB0eXBlZEFycmF5KSB7XG4gICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFwiJFwiICsgZ2V0dGVyKHZhbHVlKSA9PT0gdHlwZWRBcnJheSkge1xuICAgICAgICAgICAgZm91bmQgPSAkc2xpY2UodHlwZWRBcnJheSwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm91bmQ7XG4gIH07XG4gIHZhciB0cnlTbGljZXMgPSBmdW5jdGlvbiB0cnlBbGxTbGljZXModmFsdWUpIHtcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICBmb3JFYWNoKGNhY2hlLCBmdW5jdGlvbihnZXR0ZXIsIG5hbWUpIHtcbiAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBnZXR0ZXIodmFsdWUpO1xuICAgICAgICAgIGZvdW5kID0gJHNsaWNlKG5hbWUsIDEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZm91bmQ7XG4gIH07XG4gIHdoaWNoVHlwZWRBcnJheSA9IGZ1bmN0aW9uIHdoaWNoVHlwZWRBcnJheTIodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG4gICAgICB2YXIgdGFnID0gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTtcbiAgICAgIGlmICgkaW5kZXhPZih0eXBlZEFycmF5cywgdGFnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0YWc7XG4gICAgICB9XG4gICAgICBpZiAodGFnICE9PSBcIk9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnlTbGljZXModmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWdPUEQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xuICB9O1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5O1xufVxudmFyIGlzVHlwZWRBcnJheTtcbnZhciBoYXNSZXF1aXJlZElzVHlwZWRBcnJheTtcbmZ1bmN0aW9uIHJlcXVpcmVJc1R5cGVkQXJyYXkoKSB7XG4gIGlmIChoYXNSZXF1aXJlZElzVHlwZWRBcnJheSlcbiAgICByZXR1cm4gaXNUeXBlZEFycmF5O1xuICBoYXNSZXF1aXJlZElzVHlwZWRBcnJheSA9IDE7XG4gIHZhciB3aGljaFR5cGVkQXJyYXkyID0gcmVxdWlyZVdoaWNoVHlwZWRBcnJheSgpO1xuICBpc1R5cGVkQXJyYXkgPSBmdW5jdGlvbiBpc1R5cGVkQXJyYXkyKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSk7XG4gIH07XG4gIHJldHVybiBpc1R5cGVkQXJyYXk7XG59XG52YXIgaGFzUmVxdWlyZWRUeXBlcztcbmZ1bmN0aW9uIHJlcXVpcmVUeXBlcygpIHtcbiAgaWYgKGhhc1JlcXVpcmVkVHlwZXMpXG4gICAgcmV0dXJuIHR5cGVzO1xuICBoYXNSZXF1aXJlZFR5cGVzID0gMTtcbiAgKGZ1bmN0aW9uKGV4cG9ydHMyKSB7XG4gICAgdmFyIGlzQXJndW1lbnRzT2JqZWN0ID0gcmVxdWlyZUlzQXJndW1lbnRzKCk7XG4gICAgdmFyIGlzR2VuZXJhdG9yRnVuY3Rpb24yID0gcmVxdWlyZUlzR2VuZXJhdG9yRnVuY3Rpb24oKTtcbiAgICB2YXIgd2hpY2hUeXBlZEFycmF5MiA9IHJlcXVpcmVXaGljaFR5cGVkQXJyYXkoKTtcbiAgICB2YXIgaXNUeXBlZEFycmF5MiA9IHJlcXVpcmVJc1R5cGVkQXJyYXkoKTtcbiAgICBmdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gICAgICByZXR1cm4gZi5jYWxsLmJpbmQoZik7XG4gICAgfVxuICAgIHZhciBCaWdJbnRTdXBwb3J0ZWQgPSB0eXBlb2YgQmlnSW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICAgIHZhciBTeW1ib2xTdXBwb3J0ZWQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiO1xuICAgIHZhciBPYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuICAgIHZhciBudW1iZXJWYWx1ZSA9IHVuY3VycnlUaGlzKE51bWJlci5wcm90b3R5cGUudmFsdWVPZik7XG4gICAgdmFyIHN0cmluZ1ZhbHVlID0gdW5jdXJyeVRoaXMoU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mKTtcbiAgICB2YXIgYm9vbGVhblZhbHVlID0gdW5jdXJyeVRoaXMoQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZik7XG4gICAgaWYgKEJpZ0ludFN1cHBvcnRlZCkge1xuICAgICAgdmFyIGJpZ0ludFZhbHVlID0gdW5jdXJyeVRoaXMoQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mKTtcbiAgICB9XG4gICAgaWYgKFN5bWJvbFN1cHBvcnRlZCkge1xuICAgICAgdmFyIHN5bWJvbFZhbHVlID0gdW5jdXJyeVRoaXMoU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgcHJvdG90eXBlVmFsdWVPZikge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBwcm90b3R5cGVWYWx1ZU9mKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0czIuaXNBcmd1bWVudHNPYmplY3QgPSBpc0FyZ3VtZW50c09iamVjdDtcbiAgICBleHBvcnRzMi5pc0dlbmVyYXRvckZ1bmN0aW9uID0gaXNHZW5lcmF0b3JGdW5jdGlvbjI7XG4gICAgZXhwb3J0czIuaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5MjtcbiAgICBmdW5jdGlvbiBpc1Byb21pc2UoaW5wdXQpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpbnB1dCBpbnN0YW5jZW9mIFByb21pc2UgfHwgaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBpbnB1dC50aGVuID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGlucHV0LmNhdGNoID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcbiAgICBmdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNUeXBlZEFycmF5Mih2YWx1ZSkgfHwgaXNEYXRhVmlldyh2YWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzQXJyYXlCdWZmZXJWaWV3ID0gaXNBcnJheUJ1ZmZlclZpZXc7XG4gICAgZnVuY3Rpb24gaXNVaW50OEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiVWludDhBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1VpbnQ4QXJyYXkgPSBpc1VpbnQ4QXJyYXk7XG4gICAgZnVuY3Rpb24gaXNVaW50OENsYW1wZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTIodmFsdWUpID09PSBcIlVpbnQ4Q2xhbXBlZEFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzVWludDhDbGFtcGVkQXJyYXkgPSBpc1VpbnQ4Q2xhbXBlZEFycmF5O1xuICAgIGZ1bmN0aW9uIGlzVWludDE2QXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiB3aGljaFR5cGVkQXJyYXkyKHZhbHVlKSA9PT0gXCJVaW50MTZBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1VpbnQxNkFycmF5ID0gaXNVaW50MTZBcnJheTtcbiAgICBmdW5jdGlvbiBpc1VpbnQzMkFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiVWludDMyQXJyYXlcIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNVaW50MzJBcnJheSA9IGlzVWludDMyQXJyYXk7XG4gICAgZnVuY3Rpb24gaXNJbnQ4QXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiB3aGljaFR5cGVkQXJyYXkyKHZhbHVlKSA9PT0gXCJJbnQ4QXJyYXlcIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNJbnQ4QXJyYXkgPSBpc0ludDhBcnJheTtcbiAgICBmdW5jdGlvbiBpc0ludDE2QXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiB3aGljaFR5cGVkQXJyYXkyKHZhbHVlKSA9PT0gXCJJbnQxNkFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzSW50MTZBcnJheSA9IGlzSW50MTZBcnJheTtcbiAgICBmdW5jdGlvbiBpc0ludDMyQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiB3aGljaFR5cGVkQXJyYXkyKHZhbHVlKSA9PT0gXCJJbnQzMkFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzSW50MzJBcnJheSA9IGlzSW50MzJBcnJheTtcbiAgICBmdW5jdGlvbiBpc0Zsb2F0MzJBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTIodmFsdWUpID09PSBcIkZsb2F0MzJBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0Zsb2F0MzJBcnJheSA9IGlzRmxvYXQzMkFycmF5O1xuICAgIGZ1bmN0aW9uIGlzRmxvYXQ2NEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiRmxvYXQ2NEFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzRmxvYXQ2NEFycmF5ID0gaXNGbG9hdDY0QXJyYXk7XG4gICAgZnVuY3Rpb24gaXNCaWdJbnQ2NEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gd2hpY2hUeXBlZEFycmF5Mih2YWx1ZSkgPT09IFwiQmlnSW50NjRBcnJheVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0JpZ0ludDY0QXJyYXkgPSBpc0JpZ0ludDY0QXJyYXk7XG4gICAgZnVuY3Rpb24gaXNCaWdVaW50NjRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheTIodmFsdWUpID09PSBcIkJpZ1VpbnQ2NEFycmF5XCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzQmlnVWludDY0QXJyYXkgPSBpc0JpZ1VpbnQ2NEFycmF5O1xuICAgIGZ1bmN0aW9uIGlzTWFwVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBNYXBdXCI7XG4gICAgfVxuICAgIGlzTWFwVG9TdHJpbmcud29ya2luZyA9IHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCIgJiYgaXNNYXBUb1N0cmluZygvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICBmdW5jdGlvbiBpc01hcCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBNYXAgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzTWFwVG9TdHJpbmcud29ya2luZyA/IGlzTWFwVG9TdHJpbmcodmFsdWUpIDogdmFsdWUgaW5zdGFuY2VvZiBNYXA7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzTWFwID0gaXNNYXA7XG4gICAgZnVuY3Rpb24gaXNTZXRUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFNldF1cIjtcbiAgICB9XG4gICAgaXNTZXRUb1N0cmluZy53b3JraW5nID0gdHlwZW9mIFNldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpc1NldFRvU3RyaW5nKC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIFNldCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTZXRUb1N0cmluZy53b3JraW5nID8gaXNTZXRUb1N0cmluZyh2YWx1ZSkgOiB2YWx1ZSBpbnN0YW5jZW9mIFNldDtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNTZXQgPSBpc1NldDtcbiAgICBmdW5jdGlvbiBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFdlYWtNYXBdXCI7XG4gICAgfVxuICAgIGlzV2Vha01hcFRvU3RyaW5nLndvcmtpbmcgPSB0eXBlb2YgV2Vha01hcCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpc1dlYWtNYXBUb1N0cmluZygvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSk7XG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIFdlYWtNYXAgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzV2Vha01hcFRvU3RyaW5nLndvcmtpbmcgPyBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSkgOiB2YWx1ZSBpbnN0YW5jZW9mIFdlYWtNYXA7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBmdW5jdGlvbiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFdlYWtTZXRdXCI7XG4gICAgfVxuICAgIGlzV2Vha1NldFRvU3RyaW5nLndvcmtpbmcgPSB0eXBlb2YgV2Vha1NldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpc1dlYWtTZXRUb1N0cmluZygvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSk7XG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNXZWFrU2V0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI7XG4gICAgfVxuICAgIGlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmIGlzQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgQXJyYXlCdWZmZXIoKSk7XG4gICAgZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPyBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIDogdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgZnVuY3Rpb24gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgRGF0YVZpZXddXCI7XG4gICAgfVxuICAgIGlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBEYXRhVmlldyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpc0RhdGFWaWV3VG9TdHJpbmcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSwgMCwgMSkpO1xuICAgIGZ1bmN0aW9uIGlzRGF0YVZpZXcodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgRGF0YVZpZXcgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nID8gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKSA6IHZhbHVlIGluc3RhbmNlb2YgRGF0YVZpZXc7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzRGF0YVZpZXcgPSBpc0RhdGFWaWV3O1xuICAgIHZhciBTaGFyZWRBcnJheUJ1ZmZlckNvcHkgPSB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgPyBTaGFyZWRBcnJheUJ1ZmZlciA6IHZvaWQgMDtcbiAgICBmdW5jdGlvbiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBTaGFyZWRBcnJheUJ1ZmZlcl1cIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlckNvcHkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZyA9IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgU2hhcmVkQXJyYXlCdWZmZXJDb3B5KCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID8gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSA6IHZhbHVlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5O1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1NoYXJlZEFycmF5QnVmZmVyID0gaXNTaGFyZWRBcnJheUJ1ZmZlcjtcbiAgICBmdW5jdGlvbiBpc0FzeW5jRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBBc3luY0Z1bmN0aW9uXVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0FzeW5jRnVuY3Rpb24gPSBpc0FzeW5jRnVuY3Rpb247XG4gICAgZnVuY3Rpb24gaXNNYXBJdGVyYXRvcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE1hcCBJdGVyYXRvcl1cIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNNYXBJdGVyYXRvciA9IGlzTWFwSXRlcmF0b3I7XG4gICAgZnVuY3Rpb24gaXNTZXRJdGVyYXRvcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFNldCBJdGVyYXRvcl1cIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNTZXRJdGVyYXRvciA9IGlzU2V0SXRlcmF0b3I7XG4gICAgZnVuY3Rpb24gaXNHZW5lcmF0b3JPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzR2VuZXJhdG9yT2JqZWN0ID0gaXNHZW5lcmF0b3JPYmplY3Q7XG4gICAgZnVuY3Rpb24gaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSBcIltvYmplY3QgV2ViQXNzZW1ibHkuTW9kdWxlXVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUgPSBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGU7XG4gICAgZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBudW1iZXJWYWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzTnVtYmVyT2JqZWN0ID0gaXNOdW1iZXJPYmplY3Q7XG4gICAgZnVuY3Rpb24gaXNTdHJpbmdPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzdHJpbmdWYWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzU3RyaW5nT2JqZWN0ID0gaXNTdHJpbmdPYmplY3Q7XG4gICAgZnVuY3Rpb24gaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYm9vbGVhblZhbHVlKTtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNCb29sZWFuT2JqZWN0ID0gaXNCb29sZWFuT2JqZWN0O1xuICAgIGZ1bmN0aW9uIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gQmlnSW50U3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIGJpZ0ludFZhbHVlKTtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNCaWdJbnRPYmplY3QgPSBpc0JpZ0ludE9iamVjdDtcbiAgICBmdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIFN5bWJvbFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBzeW1ib2xWYWx1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzU3ltYm9sT2JqZWN0ID0gaXNTeW1ib2xPYmplY3Q7XG4gICAgZnVuY3Rpb24gaXNCb3hlZFByaW1pdGl2ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB8fCBpc1N0cmluZ09iamVjdCh2YWx1ZSkgfHwgaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB8fCBpc0JpZ0ludE9iamVjdCh2YWx1ZSkgfHwgaXNTeW1ib2xPYmplY3QodmFsdWUpO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0JveGVkUHJpbWl0aXZlID0gaXNCb3hlZFByaW1pdGl2ZTtcbiAgICBmdW5jdGlvbiBpc0FueUFycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgJiYgKGlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IGlzU2hhcmVkQXJyYXlCdWZmZXIodmFsdWUpKTtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNBbnlBcnJheUJ1ZmZlciA9IGlzQW55QXJyYXlCdWZmZXI7XG4gICAgW1wiaXNQcm94eVwiLCBcImlzRXh0ZXJuYWxcIiwgXCJpc01vZHVsZU5hbWVzcGFjZU9iamVjdFwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMyLCBtZXRob2QsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIgaXMgbm90IHN1cHBvcnRlZCBpbiB1c2VybGFuZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pKHR5cGVzKTtcbiAgcmV0dXJuIHR5cGVzO1xufVxudmFyIGlzQnVmZmVyQnJvd3NlcjtcbnZhciBoYXNSZXF1aXJlZElzQnVmZmVyQnJvd3NlcjtcbmZ1bmN0aW9uIHJlcXVpcmVJc0J1ZmZlckJyb3dzZXIoKSB7XG4gIGlmIChoYXNSZXF1aXJlZElzQnVmZmVyQnJvd3NlcilcbiAgICByZXR1cm4gaXNCdWZmZXJCcm93c2VyO1xuICBoYXNSZXF1aXJlZElzQnVmZmVyQnJvd3NlciA9IDE7XG4gIGlzQnVmZmVyQnJvd3NlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICAgIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYXJnLmNvcHkgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYXJnLmZpbGwgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gXCJmdW5jdGlvblwiO1xuICB9O1xuICByZXR1cm4gaXNCdWZmZXJCcm93c2VyO1xufVxudmFyIGhhc1JlcXVpcmVkVXRpbDtcbmZ1bmN0aW9uIHJlcXVpcmVVdGlsKCkge1xuICBpZiAoaGFzUmVxdWlyZWRVdGlsKVxuICAgIHJldHVybiB1dGlsO1xuICBoYXNSZXF1aXJlZFV0aWwgPSAxO1xuICAoZnVuY3Rpb24oZXhwb3J0czIpIHtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMyKG9iaikge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgdmFyIGRlc2NyaXB0b3JzID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gICAgfTtcbiAgICB2YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbiAgICBleHBvcnRzMi5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgICAgIHZhciBvYmplY3RzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdHMuam9pbihcIiBcIik7XG4gICAgICB9XG4gICAgICB2YXIgaSA9IDE7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgyKSB7XG4gICAgICAgIGlmICh4MiA9PT0gXCIlJVwiKVxuICAgICAgICAgIHJldHVybiBcIiVcIjtcbiAgICAgICAgaWYgKGkgPj0gbGVuKVxuICAgICAgICAgIHJldHVybiB4MjtcbiAgICAgICAgc3dpdGNoICh4Mikge1xuICAgICAgICAgIGNhc2UgXCIlc1wiOlxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgICAgIGNhc2UgXCIlZFwiOlxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgICAgIGNhc2UgXCIlalwiOlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhcl1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHgyO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICAgICAgc3RyICs9IFwiIFwiICsgeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgKz0gXCIgXCIgKyBpbnNwZWN0KHgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH07XG4gICAgZXhwb3J0czIuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzJDEgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2VzcyQxLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBleHBvcnRzMi5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgICAgIGlmICghd2FybmVkKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MkMS50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MkMS50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZXByZWNhdGVkO1xuICAgIH07XG4gICAgdmFyIGRlYnVncyA9IHt9O1xuICAgIHZhciBkZWJ1Z0VudlJlZ2V4ID0gL14kLztcbiAgICBpZiAocHJvY2VzcyQxLmVudi5OT0RFX0RFQlVHKSB7XG4gICAgICB2YXIgZGVidWdFbnYgPSBwcm9jZXNzJDEuZW52Lk5PREVfREVCVUc7XG4gICAgICBkZWJ1Z0VudiA9IGRlYnVnRW52LnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrPy5dL2csIFwiXFxcXCQmXCIpLnJlcGxhY2UoL1xcKi9nLCBcIi4qXCIpLnJlcGxhY2UoLywvZywgXCIkfF5cIikudG9VcHBlckNhc2UoKTtcbiAgICAgIGRlYnVnRW52UmVnZXggPSBuZXcgUmVnRXhwKFwiXlwiICsgZGVidWdFbnYgKyBcIiRcIiwgXCJpXCIpO1xuICAgIH1cbiAgICBleHBvcnRzMi5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICAgICAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gICAgICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgICAgIGlmIChkZWJ1Z0VudlJlZ2V4LnRlc3Qoc2V0KSkge1xuICAgICAgICAgIHZhciBwaWQgPSBwcm9jZXNzJDEucGlkO1xuICAgICAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gZXhwb3J0czIuZm9ybWF0LmFwcGx5KGV4cG9ydHMyLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIiVzICVkOiAlc1wiLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYnVnc1tzZXRdO1xuICAgIH07XG4gICAgZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgICAgIHZhciBjdHggPSB7XG4gICAgICAgIHNlZW46IFtdLFxuICAgICAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICAgICAgfTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpXG4gICAgICAgIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpXG4gICAgICAgIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gICAgICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgICAgIH0gZWxzZSBpZiAob3B0cykge1xuICAgICAgICBleHBvcnRzMi5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKVxuICAgICAgICBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpXG4gICAgICAgIGN0eC5kZXB0aCA9IDI7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpXG4gICAgICAgIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpXG4gICAgICAgIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgICAgIGlmIChjdHguY29sb3JzKVxuICAgICAgICBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gICAgICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG4gICAgfVxuICAgIGV4cG9ydHMyLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIGluc3BlY3QuY29sb3JzID0ge1xuICAgICAgXCJib2xkXCI6IFsxLCAyMl0sXG4gICAgICBcIml0YWxpY1wiOiBbMywgMjNdLFxuICAgICAgXCJ1bmRlcmxpbmVcIjogWzQsIDI0XSxcbiAgICAgIFwiaW52ZXJzZVwiOiBbNywgMjddLFxuICAgICAgXCJ3aGl0ZVwiOiBbMzcsIDM5XSxcbiAgICAgIFwiZ3JleVwiOiBbOTAsIDM5XSxcbiAgICAgIFwiYmxhY2tcIjogWzMwLCAzOV0sXG4gICAgICBcImJsdWVcIjogWzM0LCAzOV0sXG4gICAgICBcImN5YW5cIjogWzM2LCAzOV0sXG4gICAgICBcImdyZWVuXCI6IFszMiwgMzldLFxuICAgICAgXCJtYWdlbnRhXCI6IFszNSwgMzldLFxuICAgICAgXCJyZWRcIjogWzMxLCAzOV0sXG4gICAgICBcInllbGxvd1wiOiBbMzMsIDM5XVxuICAgIH07XG4gICAgaW5zcGVjdC5zdHlsZXMgPSB7XG4gICAgICBcInNwZWNpYWxcIjogXCJjeWFuXCIsXG4gICAgICBcIm51bWJlclwiOiBcInllbGxvd1wiLFxuICAgICAgXCJib29sZWFuXCI6IFwieWVsbG93XCIsXG4gICAgICBcInVuZGVmaW5lZFwiOiBcImdyZXlcIixcbiAgICAgIFwibnVsbFwiOiBcImJvbGRcIixcbiAgICAgIFwic3RyaW5nXCI6IFwiZ3JlZW5cIixcbiAgICAgIFwiZGF0ZVwiOiBcIm1hZ2VudGFcIixcbiAgICAgIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICAgICBcInJlZ2V4cFwiOiBcInJlZFwiXG4gICAgfTtcbiAgICBmdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBcIlxceDFCW1wiICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgXCJtXCIgKyBzdHIgKyBcIlxceDFCW1wiICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgXCJtXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgICAgIHZhciBoYXNoID0ge307XG4gICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgICAgIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0czIuaW5zcGVjdCAmJiAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgICAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgICAgIGlmIChwcmltaXRpdmUpIHtcbiAgICAgICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG4gICAgICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Vycm9yKHZhbHVlKSAmJiAoa2V5cy5pbmRleE9mKFwibWVzc2FnZVwiKSA+PSAwIHx8IGtleXMuaW5kZXhPZihcImRlc2NyaXB0aW9uXCIpID49IDApKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gXCI6IFwiICsgdmFsdWUubmFtZSA6IFwiXCI7XG4gICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFwiW0Z1bmN0aW9uXCIgKyBuYW1lICsgXCJdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksIFwicmVnZXhwXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCBcImRhdGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGJhc2UgPSBcIlwiLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbXCJ7XCIsIFwifVwiXTtcbiAgICAgIGlmIChpc0FycmF5Mih2YWx1ZSkpIHtcbiAgICAgICAgYXJyYXkgPSB0cnVlO1xuICAgICAgICBicmFjZXMgPSBbXCJbXCIsIFwiXVwiXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyBcIjogXCIgKyB2YWx1ZS5uYW1lIDogXCJcIjtcbiAgICAgICAgYmFzZSA9IFwiIFtGdW5jdGlvblwiICsgbiArIFwiXVwiO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgICBiYXNlID0gXCIgXCIgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgYmFzZSA9IFwiIFwiICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgICAgYmFzZSA9IFwiIFwiICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICAgICAgfVxuICAgICAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICAgICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCBcInJlZ2V4cFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJbT2JqZWN0XVwiLCBcInNwZWNpYWxcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuICAgICAgdmFyIG91dHB1dDtcbiAgICAgIGlmIChhcnJheSkge1xuICAgICAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjdHguc2Vlbi5wb3AoKTtcbiAgICAgIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJ1bmRlZmluZWRcIiwgXCJ1bmRlZmluZWRcIik7XG4gICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHZhciBzaW1wbGUgPSBcIidcIiArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csIFwiXCIpLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKS5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyBcIidcIjtcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgXCJzdHJpbmdcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJcIiArIHZhbHVlLCBcIm51bWJlclwiKTtcbiAgICAgIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgICAgICByZXR1cm4gY3R4LnN0eWxpemUoXCJcIiArIHZhbHVlLCBcImJvb2xlYW5cIik7XG4gICAgICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFwibnVsbFwiLCBcIm51bGxcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gICAgICByZXR1cm4gXCJbXCIgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyBcIl1cIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHJlY3Vyc2VUaW1lcyxcbiAgICAgICAgICAgIHZpc2libGVLZXlzLFxuICAgICAgICAgICAgU3RyaW5nKGkpLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5wdXNoKFwiXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KFxuICAgICAgICAgICAgY3R4LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICByZWN1cnNlVGltZXMsXG4gICAgICAgICAgICB2aXNpYmxlS2V5cyxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gICAgICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKFwiW0dldHRlci9TZXR0ZXJdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZShcIltHZXR0ZXJdXCIsIFwic3BlY2lhbFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoXCJbU2V0dGVyXVwiLCBcInNwZWNpYWxcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICAgICAgbmFtZSA9IFwiW1wiICsga2V5ICsgXCJdXCI7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cikge1xuICAgICAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHIuaW5kZXhPZihcIlxcblwiKSA+IC0xKSB7XG4gICAgICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgc3RyID0gc3RyLnNwbGl0KFwiXFxuXCIpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiICBcIiArIGxpbmU7XG4gICAgICAgICAgICAgIH0pLmpvaW4oXCJcXG5cIikuc2xpY2UoMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHIgPSBcIlxcblwiICsgc3RyLnNwbGl0KFwiXFxuXCIpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiICAgXCIgKyBsaW5lO1xuICAgICAgICAgICAgICB9KS5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZShcIltDaXJjdWxhcl1cIiwgXCJzcGVjaWFsXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICAgICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeShcIlwiICsga2V5KTtcbiAgICAgICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCBcIm5hbWVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCBcInN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hbWUgKyBcIjogXCIgKyBzdHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICAgICAgaWYgKGN1ci5pbmRleE9mKFwiXFxuXCIpID49IDApXG4gICAgICAgICAgO1xuICAgICAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgXCJcIikubGVuZ3RoICsgMTtcbiAgICAgIH0sIDApO1xuICAgICAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgICAgIHJldHVybiBicmFjZXNbMF0gKyAoYmFzZSA9PT0gXCJcIiA/IFwiXCIgOiBiYXNlICsgXCJcXG4gXCIpICsgXCIgXCIgKyBvdXRwdXQuam9pbihcIixcXG4gIFwiKSArIFwiIFwiICsgYnJhY2VzWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBcIiBcIiArIG91dHB1dC5qb2luKFwiLCBcIikgKyBcIiBcIiArIGJyYWNlc1sxXTtcbiAgICB9XG4gICAgZXhwb3J0czIudHlwZXMgPSByZXF1aXJlVHlwZXMoKTtcbiAgICBmdW5jdGlvbiBpc0FycmF5Mihhcikge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0FycmF5ID0gaXNBcnJheTI7XG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwiYm9vbGVhblwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICAgICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNOdWxsID0gaXNOdWxsO1xuICAgIGZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICAgICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwibnVtYmVyXCI7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSBcInN5bWJvbFwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICAgICAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gXCJbb2JqZWN0IFJlZ0V4cF1cIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBleHBvcnRzMi50eXBlcy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09IFwib2JqZWN0XCIgJiYgYXJnICE9PSBudWxsO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09IFwiW29iamVjdCBEYXRlXVwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0RhdGUgPSBpc0RhdGU7XG4gICAgZXhwb3J0czIudHlwZXMuaXNEYXRlID0gaXNEYXRlO1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KGUpICYmIChvYmplY3RUb1N0cmluZyhlKSA9PT0gXCJbb2JqZWN0IEVycm9yXVwiIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG4gICAgfVxuICAgIGV4cG9ydHMyLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGV4cG9ydHMyLnR5cGVzLmlzTmF0aXZlRXJyb3IgPSBpc0Vycm9yO1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH1cbiAgICBleHBvcnRzMi5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBmdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgICAgIHJldHVybiBhcmcgPT09IG51bGwgfHwgdHlwZW9mIGFyZyA9PT0gXCJib29sZWFuXCIgfHwgdHlwZW9mIGFyZyA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBhcmcgPT09IFwic3ltYm9sXCIgfHwgLy8gRVM2IHN5bWJvbFxuICAgICAgdHlwZW9mIGFyZyA9PT0gXCJ1bmRlZmluZWRcIjtcbiAgICB9XG4gICAgZXhwb3J0czIuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcbiAgICBleHBvcnRzMi5pc0J1ZmZlciA9IHJlcXVpcmVJc0J1ZmZlckJyb3dzZXIoKTtcbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYWQobikge1xuICAgICAgcmV0dXJuIG4gPCAxMCA/IFwiMFwiICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbiAgICB9XG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgIFwiSmFuXCIsXG4gICAgICBcIkZlYlwiLFxuICAgICAgXCJNYXJcIixcbiAgICAgIFwiQXByXCIsXG4gICAgICBcIk1heVwiLFxuICAgICAgXCJKdW5cIixcbiAgICAgIFwiSnVsXCIsXG4gICAgICBcIkF1Z1wiLFxuICAgICAgXCJTZXBcIixcbiAgICAgIFwiT2N0XCIsXG4gICAgICBcIk5vdlwiLFxuICAgICAgXCJEZWNcIlxuICAgIF07XG4gICAgZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICAgICAgdmFyIGQgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICAgIHZhciB0aW1lID0gW1xuICAgICAgICBwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKVxuICAgICAgXS5qb2luKFwiOlwiKTtcbiAgICAgIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgZXhwb3J0czIubG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIiVzIC0gJXNcIiwgdGltZXN0YW1wKCksIGV4cG9ydHMyLmZvcm1hdC5hcHBseShleHBvcnRzMiwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgICBleHBvcnRzMi5pbmhlcml0cyA9IGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzO1xuICAgIGV4cG9ydHMyLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAgICAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpXG4gICAgICAgIHJldHVybiBvcmlnaW47XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gICAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ2luO1xuICAgIH07XG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG4gICAgfVxuICAgIHZhciBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sKFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIpIDogdm9pZCAwO1xuICAgIGV4cG9ydHMyLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgICAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInV0aWwucHJvbWlzaWZ5LmN1c3RvbVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICAgICAgdmFsdWU6IGZuLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGZuKCkge1xuICAgICAgICB2YXIgcHJvbWlzZVJlc29sdmUsIHByb21pc2VSZWplY3Q7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZTIsIHJlamVjdCkge1xuICAgICAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTI7XG4gICAgICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKGZ1bmN0aW9uKGVyciwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBwcm9taXNlUmVqZWN0KGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBwcm9taXNlUmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZm4sIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICAgICAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbClcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgICAgICB2YWx1ZTogZm4sXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICAgICAgZm4sXG4gICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICAgICApO1xuICAgIH07XG4gICAgZXhwb3J0czIucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbDtcbiAgICBmdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAgICAgaWYgKCFyZWFzb24pIHtcbiAgICAgICAgdmFyIG5ld1JlYXNvbiA9IG5ldyBFcnJvcihcIlByb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZVwiKTtcbiAgICAgICAgbmV3UmVhc29uLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgcmVhc29uID0gbmV3UmVhc29uO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNiKHJlYXNvbik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhbGxiYWNraWZ5KG9yaWdpbmFsKSB7XG4gICAgICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNraWZpZWQoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heWJlQ2IgPSBhcmdzLnBvcCgpO1xuICAgICAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGYyID0gdGhpcztcbiAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZjIsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24ocmV0KSB7XG4gICAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soY2IuYmluZChudWxsLCBudWxsLCByZXQpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uKHJlaikge1xuICAgICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZC5iaW5kKG51bGwsIHJlaiwgY2IpKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhcbiAgICAgICAgY2FsbGJhY2tpZmllZCxcbiAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgICAgICk7XG4gICAgICByZXR1cm4gY2FsbGJhY2tpZmllZDtcbiAgICB9XG4gICAgZXhwb3J0czIuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcbiAgfSkodXRpbCk7XG4gIHJldHVybiB1dGlsO1xufVxudmFyIGJ1ZmZlcl9saXN0O1xudmFyIGhhc1JlcXVpcmVkQnVmZmVyX2xpc3Q7XG5mdW5jdGlvbiByZXF1aXJlQnVmZmVyX2xpc3QoKSB7XG4gIGlmIChoYXNSZXF1aXJlZEJ1ZmZlcl9saXN0KVxuICAgIHJldHVybiBidWZmZXJfbGlzdDtcbiAgaGFzUmVxdWlyZWRCdWZmZXJfbGlzdCA9IDE7XG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgICBpZiAoZW51bWVyYWJsZU9ubHkpXG4gICAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbihzeW0pIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgICAgfSk7XG4gICAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9XG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcilcbiAgICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcylcbiAgICAgIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKVxuICAgICAgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cbiAgdmFyIF9yZXF1aXJlID0gcmVxdWlyZUJ1ZmZlcigpLCBCdWZmZXIyID0gX3JlcXVpcmUuQnVmZmVyO1xuICB2YXIgX3JlcXVpcmUyID0gcmVxdWlyZVV0aWwoKSwgaW5zcGVjdCA9IF9yZXF1aXJlMi5pbnNwZWN0O1xuICB2YXIgY3VzdG9tID0gaW5zcGVjdCAmJiBpbnNwZWN0LmN1c3RvbSB8fCBcImluc3BlY3RcIjtcbiAgZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gICAgQnVmZmVyMi5wcm90b3R5cGUuY29weS5jYWxsKHNyYywgdGFyZ2V0LCBvZmZzZXQpO1xuICB9XG4gIGJ1ZmZlcl9saXN0ID0gLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG4gICAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgX2NyZWF0ZUNsYXNzKEJ1ZmZlckxpc3QsIFt7XG4gICAgICBrZXk6IFwicHVzaFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2godikge1xuICAgICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgICAgZGF0YTogdixcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApXG4gICAgICAgICAgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICAgICAgKyt0aGlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidW5zaGlmdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgICAgICB2YXIgZW50cnkgPSB7XG4gICAgICAgICAgZGF0YTogdixcbiAgICAgICAgICBuZXh0OiB0aGlzLmhlYWRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICAgICAgKyt0aGlzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hpZnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgICAgICAtLXRoaXMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbGVhclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImpvaW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgICAgdmFyIHJldCA9IFwiXCIgKyBwLmRhdGE7XG4gICAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29uY2F0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgIHJldHVybiBCdWZmZXIyLmFsbG9jKDApO1xuICAgICAgICB2YXIgcmV0ID0gQnVmZmVyMi5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKHApIHtcbiAgICAgICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgcCA9IHAubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIG9yIGNoYXJhY3RlcnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY29uc3VtZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnN1bWUobiwgaGFzU3RyaW5ncykge1xuICAgICAgICB2YXIgcmV0O1xuICAgICAgICBpZiAobiA8IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IHRoaXMuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgICAgICAgIHRoaXMuaGVhZC5kYXRhID0gdGhpcy5oZWFkLmRhdGEuc2xpY2Uobik7XG4gICAgICAgIH0gZWxzZSBpZiAobiA9PT0gdGhpcy5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0ID0gdGhpcy5zaGlmdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IGhhc1N0cmluZ3MgPyB0aGlzLl9nZXRTdHJpbmcobikgOiB0aGlzLl9nZXRCdWZmZXIobik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZmlyc3RcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgICAgfVxuICAgICAgLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldFN0cmluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTdHJpbmcobikge1xuICAgICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgICAgdmFyIGMgPSAxO1xuICAgICAgICB2YXIgcmV0ID0gcC5kYXRhO1xuICAgICAgICBuIC09IHJldC5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICAgICAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgICAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgIHJldCArPSBzdHI7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICAgICAgICBuIC09IG5iO1xuICAgICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgKytjO1xuICAgICAgICAgICAgICBpZiAocC5uZXh0KVxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZCA9IHAubmV4dDtcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgICsrYztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCAtPSBjO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRCdWZmZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QnVmZmVyKG4pIHtcbiAgICAgICAgdmFyIHJldCA9IEJ1ZmZlcjIuYWxsb2NVbnNhZmUobik7XG4gICAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgICB2YXIgYyA9IDE7XG4gICAgICAgIHAuZGF0YS5jb3B5KHJldCk7XG4gICAgICAgIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgICAgICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgICAgICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgICAgICAgIG4gLT0gbmI7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICAgIGlmIChwLm5leHQpXG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkID0gcC5uZXh0O1xuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaGVhZCA9IHA7XG4gICAgICAgICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgKytjO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuZ3RoIC09IGM7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGxpbmtlZCBsaXN0IG9ubHkgc2hvd3MgdGhlIG1pbmltYWwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uLlxuICAgIH0sIHtcbiAgICAgIGtleTogY3VzdG9tLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKF8sIG9wdGlvbnMyKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0KHRoaXMsIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMyLCB7XG4gICAgICAgICAgLy8gT25seSBpbnNwZWN0IG9uZSBsZXZlbC5cbiAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAvLyBJdCBzaG91bGQgbm90IHJlY3Vyc2UuXG4gICAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQnVmZmVyTGlzdDtcbiAgfSgpO1xuICByZXR1cm4gYnVmZmVyX2xpc3Q7XG59XG52YXIgZGVzdHJveV8xO1xudmFyIGhhc1JlcXVpcmVkRGVzdHJveTtcbmZ1bmN0aW9uIHJlcXVpcmVEZXN0cm95KCkge1xuICBpZiAoaGFzUmVxdWlyZWREZXN0cm95KVxuICAgIHJldHVybiBkZXN0cm95XzE7XG4gIGhhc1JlcXVpcmVkRGVzdHJveSA9IDE7XG4gIGZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICAgIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIGNiKGVycik7XG4gICAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uKGVycjIpIHtcbiAgICAgIGlmICghY2IgJiYgZXJyMikge1xuICAgICAgICBpZiAoIV90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIyKTtcbiAgICAgICAgfSBlbHNlIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycjIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgICBjYihlcnIyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZjIsIGVycikge1xuICAgIGVtaXRFcnJvck5UKHNlbGYyLCBlcnIpO1xuICAgIGVtaXRDbG9zZU5UKHNlbGYyKTtcbiAgfVxuICBmdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmMikge1xuICAgIGlmIChzZWxmMi5fd3JpdGFibGVTdGF0ZSAmJiAhc2VsZjIuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChzZWxmMi5fcmVhZGFibGVTdGF0ZSAmJiAhc2VsZjIuX3JlYWRhYmxlU3RhdGUuZW1pdENsb3NlKVxuICAgICAgcmV0dXJuO1xuICAgIHNlbGYyLmVtaXQoXCJjbG9zZVwiKTtcbiAgfVxuICBmdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmMiwgZXJyKSB7XG4gICAgc2VsZjIuZW1pdChcImVycm9yXCIsIGVycik7XG4gIH1cbiAgZnVuY3Rpb24gZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcnIpIHtcbiAgICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICAgIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gICAgaWYgKHJTdGF0ZSAmJiByU3RhdGUuYXV0b0Rlc3Ryb3kgfHwgd1N0YXRlICYmIHdTdGF0ZS5hdXRvRGVzdHJveSlcbiAgICAgIHN0cmVhbS5kZXN0cm95KGVycik7XG4gICAgZWxzZVxuICAgICAgc3RyZWFtLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICB9XG4gIGRlc3Ryb3lfMSA9IHtcbiAgICBkZXN0cm95LFxuICAgIHVuZGVzdHJveSxcbiAgICBlcnJvck9yRGVzdHJveVxuICB9O1xuICByZXR1cm4gZGVzdHJveV8xO1xufVxudmFyIGVycm9yc0Jyb3dzZXIgPSB7fTtcbnZhciBoYXNSZXF1aXJlZEVycm9yc0Jyb3dzZXI7XG5mdW5jdGlvbiByZXF1aXJlRXJyb3JzQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkRXJyb3JzQnJvd3NlcilcbiAgICByZXR1cm4gZXJyb3JzQnJvd3NlcjtcbiAgaGFzUmVxdWlyZWRFcnJvcnNCcm93c2VyID0gMTtcbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG4gIHZhciBjb2RlcyA9IHt9O1xuICBmdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICAgIGlmICghQmFzZSkge1xuICAgICAgQmFzZSA9IEVycm9yO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgTm9kZUVycm9yID0gLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uKF9CYXNlKSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShOb2RlRXJyb3IyLCBfQmFzZSk7XG4gICAgICBmdW5jdGlvbiBOb2RlRXJyb3IyKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIF9CYXNlLmNhbGwodGhpcywgZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBOb2RlRXJyb3IyO1xuICAgIH0oQmFzZSk7XG4gICAgTm9kZUVycm9yLnByb3RvdHlwZS5uYW1lID0gQmFzZS5uYW1lO1xuICAgIE5vZGVFcnJvci5wcm90b3R5cGUuY29kZSA9IGNvZGU7XG4gICAgY29kZXNbY29kZV0gPSBOb2RlRXJyb3I7XG4gIH1cbiAgZnVuY3Rpb24gb25lT2YoZXhwZWN0ZWQsIHRoaW5nKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgICB2YXIgbGVuID0gZXhwZWN0ZWQubGVuZ3RoO1xuICAgICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGkpO1xuICAgICAgfSk7XG4gICAgICBpZiAobGVuID4gMikge1xuICAgICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oXCIsIFwiKSwgXCIsIG9yIFwiKSArIGV4cGVjdGVkW2xlbiAtIDFdO1xuICAgICAgfSBlbHNlIGlmIChsZW4gPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoU3RyaW5nKGV4cGVjdGVkKSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICAgIHJldHVybiBzdHIuc3Vic3RyKCFwb3MgfHwgcG9zIDwgMCA/IDAgOiArcG9zLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG4gIGZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICAgIGlmICh0aGlzX2xlbiA9PT0gdm9pZCAwIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xuICB9XG4gIGZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgICB9XG4gIH1cbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX0lOVkFMSURfT1BUX1ZBTFVFXCIsIGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuICdUaGUgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwiJyArIG5hbWUgKyAnXCInO1xuICB9LCBUeXBlRXJyb3IpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfSU5WQUxJRF9BUkdfVFlQRVwiLCBmdW5jdGlvbihuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gICAgdmFyIGRldGVybWluZXI7XG4gICAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gXCJzdHJpbmdcIiAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCBcIm5vdCBcIikpIHtcbiAgICAgIGRldGVybWluZXIgPSBcIm11c3Qgbm90IGJlXCI7XG4gICAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRldGVybWluZXIgPSBcIm11c3QgYmVcIjtcbiAgICB9XG4gICAgdmFyIG1zZztcbiAgICBpZiAoZW5kc1dpdGgobmFtZSwgXCIgYXJndW1lbnRcIikpIHtcbiAgICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsIFwidHlwZVwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgXCIuXCIpID8gXCJwcm9wZXJ0eVwiIDogXCJhcmd1bWVudFwiO1xuICAgICAgbXNnID0gJ1RoZSBcIicuY29uY2F0KG5hbWUsICdcIiAnKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCBcInR5cGVcIikpO1xuICAgIH1cbiAgICBtc2cgKz0gXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KHR5cGVvZiBhY3R1YWwpO1xuICAgIHJldHVybiBtc2c7XG4gIH0sIFR5cGVFcnJvcik7XG4gIGNyZWF0ZUVycm9yVHlwZShcIkVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0ZcIiwgXCJzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRlwiKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URURcIiwgZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIG5hbWUgKyBcIiBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkXCI7XG4gIH0pO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRVwiLCBcIlByZW1hdHVyZSBjbG9zZVwiKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9ERVNUUk9ZRURcIiwgZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBcIkNhbm5vdCBjYWxsIFwiICsgbmFtZSArIFwiIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWRcIjtcbiAgfSk7XG4gIGNyZWF0ZUVycm9yVHlwZShcIkVSUl9NVUxUSVBMRV9DQUxMQkFDS1wiLCBcIkNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lc1wiKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9DQU5OT1RfUElQRVwiLCBcIkNhbm5vdCBwaXBlLCBub3QgcmVhZGFibGVcIik7XG4gIGNyZWF0ZUVycm9yVHlwZShcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsIFwid3JpdGUgYWZ0ZXIgZW5kXCIpO1xuICBjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX05VTExfVkFMVUVTXCIsIFwiTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW1cIiwgVHlwZUVycm9yKTtcbiAgY3JlYXRlRXJyb3JUeXBlKFwiRVJSX1VOS05PV05fRU5DT0RJTkdcIiwgZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIFwiVW5rbm93biBlbmNvZGluZzogXCIgKyBhcmc7XG4gIH0sIFR5cGVFcnJvcik7XG4gIGNyZWF0ZUVycm9yVHlwZShcIkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlRcIiwgXCJzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudFwiKTtcbiAgZXJyb3JzQnJvd3Nlci5jb2RlcyA9IGNvZGVzO1xuICByZXR1cm4gZXJyb3JzQnJvd3Nlcjtcbn1cbnZhciBzdGF0ZTtcbnZhciBoYXNSZXF1aXJlZFN0YXRlO1xuZnVuY3Rpb24gcmVxdWlyZVN0YXRlKCkge1xuICBpZiAoaGFzUmVxdWlyZWRTdGF0ZSlcbiAgICByZXR1cm4gc3RhdGU7XG4gIGhhc1JlcXVpcmVkU3RhdGUgPSAxO1xuICB2YXIgRVJSX0lOVkFMSURfT1BUX1ZBTFVFID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2Rlcy5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7XG4gIGZ1bmN0aW9uIGhpZ2hXYXRlck1hcmtGcm9tKG9wdGlvbnMyLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gICAgcmV0dXJuIG9wdGlvbnMyLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMyLmhpZ2hXYXRlck1hcmsgOiBpc0R1cGxleCA/IG9wdGlvbnMyW2R1cGxleEtleV0gOiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGdldEhpZ2hXYXRlck1hcmsoc3RhdGUyLCBvcHRpb25zMiwgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICAgIHZhciBod20gPSBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zMiwgaXNEdXBsZXgsIGR1cGxleEtleSk7XG4gICAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgICBpZiAoIShpc0Zpbml0ZShod20pICYmIE1hdGguZmxvb3IoaHdtKSA9PT0gaHdtKSB8fCBod20gPCAwKSB7XG4gICAgICAgIHZhciBuYW1lID0gaXNEdXBsZXggPyBkdXBsZXhLZXkgOiBcImhpZ2hXYXRlck1hcmtcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX09QVF9WQUxVRShuYW1lLCBod20pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoaHdtKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlMi5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIH1cbiAgc3RhdGUgPSB7XG4gICAgZ2V0SGlnaFdhdGVyTWFya1xuICB9O1xuICByZXR1cm4gc3RhdGU7XG59XG52YXIgYnJvd3NlcjtcbnZhciBoYXNSZXF1aXJlZEJyb3dzZXI7XG5mdW5jdGlvbiByZXF1aXJlQnJvd3NlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkQnJvd3NlcilcbiAgICByZXR1cm4gYnJvd3NlcjtcbiAgaGFzUmVxdWlyZWRCcm93c2VyID0gMTtcbiAgYnJvd3NlciA9IGRlcHJlY2F0ZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBtc2cpIHtcbiAgICBpZiAoY29uZmlnKFwibm9EZXByZWNhdGlvblwiKSkge1xuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICB2YXIgd2FybmVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICAgIGlmICghd2FybmVkKSB7XG4gICAgICAgIGlmIChjb25maWcoXCJ0aHJvd0RlcHJlY2F0aW9uXCIpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnKFwidHJhY2VEZXByZWNhdGlvblwiKSkge1xuICAgICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgICAgfVxuICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBkZXByZWNhdGVkO1xuICB9XG4gIGZ1bmN0aW9uIGNvbmZpZyhuYW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghY29tbW9uanNHbG9iYWwubG9jYWxTdG9yYWdlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdmFsID0gY29tbW9uanNHbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICAgIGlmIChudWxsID09IHZhbClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCI7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG52YXIgX3N0cmVhbV93cml0YWJsZTtcbnZhciBoYXNSZXF1aXJlZF9zdHJlYW1fd3JpdGFibGU7XG5mdW5jdGlvbiByZXF1aXJlX3N0cmVhbV93cml0YWJsZSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkX3N0cmVhbV93cml0YWJsZSlcbiAgICByZXR1cm4gX3N0cmVhbV93cml0YWJsZTtcbiAgaGFzUmVxdWlyZWRfc3RyZWFtX3dyaXRhYmxlID0gMTtcbiAgX3N0cmVhbV93cml0YWJsZSA9IFdyaXRhYmxlO1xuICBmdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlMikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlMik7XG4gICAgfTtcbiAgfVxuICB2YXIgRHVwbGV4O1xuICBXcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcbiAgdmFyIGludGVybmFsVXRpbCA9IHtcbiAgICBkZXByZWNhdGU6IHJlcXVpcmVCcm93c2VyKClcbiAgfTtcbiAgdmFyIFN0cmVhbTIgPSByZXF1aXJlU3RyZWFtQnJvd3NlcigpO1xuICB2YXIgQnVmZmVyMiA9IHJlcXVpcmVCdWZmZXIoKS5CdWZmZXI7XG4gIHZhciBPdXJVaW50OEFycmF5ID0gY29tbW9uanNHbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbigpIHtcbiAgfTtcbiAgZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICAgIHJldHVybiBCdWZmZXIyLmZyb20oY2h1bmspO1xuICB9XG4gIGZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIEJ1ZmZlcjIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xuICB9XG4gIHZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmVEZXN0cm95KCk7XG4gIHZhciBfcmVxdWlyZSA9IHJlcXVpcmVTdGF0ZSgpLCBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyaztcbiAgdmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2RlcywgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSwgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCwgRVJSX01VTFRJUExFX0NBTExCQUNLID0gX3JlcXVpcmUkY29kZXMuRVJSX01VTFRJUExFX0NBTExCQUNLLCBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9DQU5OT1RfUElQRSwgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRCwgRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMsIEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQsIEVSUl9VTktOT1dOX0VOQ09ESU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1VOS05PV05fRU5DT0RJTkc7XG4gIHZhciBlcnJvck9yRGVzdHJveSA9IGRlc3Ryb3lJbXBsLmVycm9yT3JEZXN0cm95O1xuICBpbmhlcml0c19icm93c2VyRXhwb3J0cyhXcml0YWJsZSwgU3RyZWFtMik7XG4gIGZ1bmN0aW9uIG5vcCgpIHtcbiAgfVxuICBmdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMyLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gICAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmVfc3RyZWFtX2R1cGxleCgpO1xuICAgIG9wdGlvbnMyID0gb3B0aW9uczIgfHwge307XG4gICAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gXCJib29sZWFuXCIpXG4gICAgICBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcbiAgICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMyLm9iamVjdE1vZGU7XG4gICAgaWYgKGlzRHVwbGV4KVxuICAgICAgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9uczIud3JpdGFibGVPYmplY3RNb2RlO1xuICAgIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9uczIsIFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIsIGlzRHVwbGV4KTtcbiAgICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG4gICAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zMi5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG4gICAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zMi5kZWZhdWx0RW5jb2RpbmcgfHwgXCJ1dGY4XCI7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuY29ya2VkID0gMDtcbiAgICB0aGlzLnN5bmMgPSB0cnVlO1xuICAgIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uKGVyKSB7XG4gICAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICAgIH07XG4gICAgdGhpcy53cml0ZWNiID0gbnVsbDtcbiAgICB0aGlzLndyaXRlbGVuID0gMDtcbiAgICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICB0aGlzLnBlbmRpbmdjYiA9IDA7XG4gICAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0Q2xvc2UgPSBvcHRpb25zMi5lbWl0Q2xvc2UgIT09IGZhbHNlO1xuICAgIHRoaXMuYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMyLmF1dG9EZXN0cm95O1xuICAgIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICAgIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG4gIH1cbiAgV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG4gIChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCBcImJ1ZmZlclwiLCB7XG4gICAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiB3cml0YWJsZVN0YXRlQnVmZmVyR2V0dGVyKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgICB9LCBcIl93cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyIGluc3RlYWQuXCIsIFwiREVQMDAwM1wiKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgIH1cbiAgfSkoKTtcbiAgdmFyIHJlYWxIYXNJbnN0YW5jZTtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKG9iamVjdCkge1xuICAgICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSlcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIHJlYWxIYXNJbnN0YW5jZTIob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMyKSB7XG4gICAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmVfc3RyZWFtX2R1cGxleCgpO1xuICAgIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gICAgaWYgKCFpc0R1cGxleCAmJiAhcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpKVxuICAgICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zMik7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMyLCB0aGlzLCBpc0R1cGxleCk7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMyKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLndyaXRlID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMuX3dyaXRlID0gb3B0aW9uczIud3JpdGU7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLndyaXRldiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aGlzLl93cml0ZXYgPSBvcHRpb25zMi53cml0ZXY7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMyLmRlc3Ryb3k7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMyLmZpbmFsID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMuX2ZpbmFsID0gb3B0aW9uczIuZmluYWw7XG4gICAgfVxuICAgIFN0cmVhbTIuY2FsbCh0aGlzKTtcbiAgfVxuICBXcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKCkge1xuICAgIGVycm9yT3JEZXN0cm95KHRoaXMsIG5ldyBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFKCkpO1xuICB9O1xuICBmdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgICB2YXIgZXIgPSBuZXcgRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQoKTtcbiAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgICBwcm9jZXNzJDEubmV4dFRpY2soY2IsIGVyKTtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUyLCBjaHVuaywgY2IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICBlciA9IG5ldyBFUlJfU1RSRUFNX05VTExfVkFMVUVTKCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09IFwic3RyaW5nXCIgJiYgIXN0YXRlMi5vYmplY3RNb2RlKSB7XG4gICAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRShcImNodW5rXCIsIFtcInN0cmluZ1wiLCBcIkJ1ZmZlclwiXSwgY2h1bmspO1xuICAgIH1cbiAgICBpZiAoZXIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGNiLCBlcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIFdyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgICB2YXIgcmV0ID0gZmFsc2U7XG4gICAgdmFyIGlzQnVmID0gIXN0YXRlMi5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuICAgIGlmIChpc0J1ZiAmJiAhQnVmZmVyMi5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2IgPSBlbmNvZGluZztcbiAgICAgIGVuY29kaW5nID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQnVmKVxuICAgICAgZW5jb2RpbmcgPSBcImJ1ZmZlclwiO1xuICAgIGVsc2UgaWYgKCFlbmNvZGluZylcbiAgICAgIGVuY29kaW5nID0gc3RhdGUyLmRlZmF1bHRFbmNvZGluZztcbiAgICBpZiAodHlwZW9mIGNiICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICBjYiA9IG5vcDtcbiAgICBpZiAoc3RhdGUyLmVuZGluZylcbiAgICAgIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO1xuICAgIGVsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUyLCBjaHVuaywgY2IpKSB7XG4gICAgICBzdGF0ZTIucGVuZGluZ2NiKys7XG4gICAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlMiwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuICBXcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuY29ya2VkKys7XG4gIH07XG4gIFdyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgICBpZiAoc3RhdGUyLmNvcmtlZCkge1xuICAgICAgc3RhdGUyLmNvcmtlZC0tO1xuICAgICAgaWYgKCFzdGF0ZTIud3JpdGluZyAmJiAhc3RhdGUyLmNvcmtlZCAmJiAhc3RhdGUyLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdClcbiAgICAgICAgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUyKTtcbiAgICB9XG4gIH07XG4gIFdyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiKVxuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICghKFtcImhleFwiLCBcInV0ZjhcIiwgXCJ1dGYtOFwiLCBcImFzY2lpXCIsIFwiYmluYXJ5XCIsIFwiYmFzZTY0XCIsIFwidWNzMlwiLCBcInVjcy0yXCIsIFwidXRmMTZsZVwiLCBcInV0Zi0xNmxlXCIsIFwicmF3XCJdLmluZGV4T2YoKGVuY29kaW5nICsgXCJcIikudG9Mb3dlckNhc2UoKSkgPiAtMSkpXG4gICAgICB0aHJvdyBuZXcgRVJSX1VOS05PV05fRU5DT0RJTkcoZW5jb2RpbmcpO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsIFwid3JpdGFibGVCdWZmZXJcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlMiwgY2h1bmssIGVuY29kaW5nKSB7XG4gICAgaWYgKCFzdGF0ZTIub2JqZWN0TW9kZSAmJiBzdGF0ZTIuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjaHVuayA9IEJ1ZmZlcjIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2h1bms7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZTIsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gICAgaWYgKCFpc0J1Zikge1xuICAgICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUyLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICAgIGVuY29kaW5nID0gXCJidWZmZXJcIjtcbiAgICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxlbiA9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBzdGF0ZTIubGVuZ3RoICs9IGxlbjtcbiAgICB2YXIgcmV0ID0gc3RhdGUyLmxlbmd0aCA8IHN0YXRlMi5oaWdoV2F0ZXJNYXJrO1xuICAgIGlmICghcmV0KVxuICAgICAgc3RhdGUyLm5lZWREcmFpbiA9IHRydWU7XG4gICAgaWYgKHN0YXRlMi53cml0aW5nIHx8IHN0YXRlMi5jb3JrZWQpIHtcbiAgICAgIHZhciBsYXN0ID0gc3RhdGUyLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgICBzdGF0ZTIubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgICAgY2h1bmssXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBpc0J1ZixcbiAgICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgICBuZXh0OiBudWxsXG4gICAgICB9O1xuICAgICAgaWYgKGxhc3QpIHtcbiAgICAgICAgbGFzdC5uZXh0ID0gc3RhdGUyLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUyLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgICB9XG4gICAgICBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlMiwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlMiwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICBzdGF0ZTIud3JpdGVsZW4gPSBsZW47XG4gICAgc3RhdGUyLndyaXRlY2IgPSBjYjtcbiAgICBzdGF0ZTIud3JpdGluZyA9IHRydWU7XG4gICAgc3RhdGUyLnN5bmMgPSB0cnVlO1xuICAgIGlmIChzdGF0ZTIuZGVzdHJveWVkKVxuICAgICAgc3RhdGUyLm9ud3JpdGUobmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKFwid3JpdGVcIikpO1xuICAgIGVsc2UgaWYgKHdyaXRldilcbiAgICAgIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZTIub253cml0ZSk7XG4gICAgZWxzZVxuICAgICAgc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlMi5vbndyaXRlKTtcbiAgICBzdGF0ZTIuc3luYyA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlMiwgc3luYywgZXIsIGNiKSB7XG4gICAgLS1zdGF0ZTIucGVuZGluZ2NiO1xuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZTIpO1xuICAgICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoZXIpO1xuICAgICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlMikge1xuICAgIHN0YXRlMi53cml0aW5nID0gZmFsc2U7XG4gICAgc3RhdGUyLndyaXRlY2IgPSBudWxsO1xuICAgIHN0YXRlMi5sZW5ndGggLT0gc3RhdGUyLndyaXRlbGVuO1xuICAgIHN0YXRlMi53cml0ZWxlbiA9IDA7XG4gIH1cbiAgZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gICAgdmFyIHN0YXRlMiA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgICB2YXIgc3luYyA9IHN0YXRlMi5zeW5jO1xuICAgIHZhciBjYiA9IHN0YXRlMi53cml0ZWNiO1xuICAgIGlmICh0eXBlb2YgY2IgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHRocm93IG5ldyBFUlJfTVVMVElQTEVfQ0FMTEJBQ0soKTtcbiAgICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUyKTtcbiAgICBpZiAoZXIpXG4gICAgICBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZTIsIHN5bmMsIGVyLCBjYik7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlMikgfHwgc3RyZWFtLmRlc3Ryb3llZDtcbiAgICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlMi5jb3JrZWQgJiYgIXN0YXRlMi5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlMi5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZTIpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bmMpIHtcbiAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUyLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlMiwgZmluaXNoZWQsIGNiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlMiwgZmluaXNoZWQsIGNiKSB7XG4gICAgaWYgKCFmaW5pc2hlZClcbiAgICAgIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlMik7XG4gICAgc3RhdGUyLnBlbmRpbmdjYi0tO1xuICAgIGNiKCk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZTIpO1xuICB9XG4gIGZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlMikge1xuICAgIGlmIChzdGF0ZTIubGVuZ3RoID09PSAwICYmIHN0YXRlMi5uZWVkRHJhaW4pIHtcbiAgICAgIHN0YXRlMi5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZHJhaW5cIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgc3RhdGUyLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICAgIHZhciBlbnRyeSA9IHN0YXRlMi5idWZmZXJlZFJlcXVlc3Q7XG4gICAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAgIHZhciBsID0gc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgICAgdmFyIGJ1ZmZlcjIgPSBuZXcgQXJyYXkobCk7XG4gICAgICB2YXIgaG9sZGVyID0gc3RhdGUyLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICBidWZmZXIyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgICBpZiAoIWVudHJ5LmlzQnVmKVxuICAgICAgICAgIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgfVxuICAgICAgYnVmZmVyMi5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZTIsIHRydWUsIHN0YXRlMi5sZW5ndGgsIGJ1ZmZlcjIsIFwiXCIsIGhvbGRlci5maW5pc2gpO1xuICAgICAgc3RhdGUyLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUyLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICAgIHN0YXRlMi5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUyLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlMik7XG4gICAgICB9XG4gICAgICBzdGF0ZTIuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgICAgdmFyIGxlbiA9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlMiwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAgIGlmIChzdGF0ZTIud3JpdGluZykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZW50cnkgPT09IG51bGwpXG4gICAgICAgIHN0YXRlMi5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG4gICAgc3RhdGUyLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICAgIHN0YXRlMi5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG4gIH1cbiAgV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoXCJfd3JpdGUoKVwiKSk7XG4gIH07XG4gIFdyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcbiAgV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNiID0gY2h1bms7XG4gICAgICBjaHVuayA9IG51bGw7XG4gICAgICBlbmNvZGluZyA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2IgPSBlbmNvZGluZztcbiAgICAgIGVuY29kaW5nID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB2b2lkIDApXG4gICAgICB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKHN0YXRlMi5jb3JrZWQpIHtcbiAgICAgIHN0YXRlMi5jb3JrZWQgPSAxO1xuICAgICAgdGhpcy51bmNvcmsoKTtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZTIuZW5kaW5nKVxuICAgICAgZW5kV3JpdGFibGUodGhpcywgc3RhdGUyLCBjYik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsIFwid3JpdGFibGVMZW5ndGhcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZTIpIHtcbiAgICByZXR1cm4gc3RhdGUyLmVuZGluZyAmJiBzdGF0ZTIubGVuZ3RoID09PSAwICYmIHN0YXRlMi5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlMi5maW5pc2hlZCAmJiAhc3RhdGUyLndyaXRpbmc7XG4gIH1cbiAgZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgc3RyZWFtLl9maW5hbChmdW5jdGlvbihlcnIpIHtcbiAgICAgIHN0YXRlMi5wZW5kaW5nY2ItLTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcnIpO1xuICAgICAgfVxuICAgICAgc3RhdGUyLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KFwicHJlZmluaXNoXCIpO1xuICAgICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZTIpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlMikge1xuICAgIGlmICghc3RhdGUyLnByZWZpbmlzaGVkICYmICFzdGF0ZTIuZmluYWxDYWxsZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gXCJmdW5jdGlvblwiICYmICFzdGF0ZTIuZGVzdHJveWVkKSB7XG4gICAgICAgIHN0YXRlMi5wZW5kaW5nY2IrKztcbiAgICAgICAgc3RhdGUyLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZTIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUyLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgc3RyZWFtLmVtaXQoXCJwcmVmaW5pc2hcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlMik7XG4gICAgaWYgKG5lZWQpIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlMik7XG4gICAgICBpZiAoc3RhdGUyLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgICBzdGF0ZTIuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICBzdHJlYW0uZW1pdChcImZpbmlzaFwiKTtcbiAgICAgICAgaWYgKHN0YXRlMi5hdXRvRGVzdHJveSkge1xuICAgICAgICAgIHZhciByU3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gICAgICAgICAgaWYgKCFyU3RhdGUgfHwgclN0YXRlLmF1dG9EZXN0cm95ICYmIHJTdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmVlZDtcbiAgfVxuICBmdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlMiwgY2IpIHtcbiAgICBzdGF0ZTIuZW5kaW5nID0gdHJ1ZTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlMik7XG4gICAgaWYgKGNiKSB7XG4gICAgICBpZiAoc3RhdGUyLmZpbmlzaGVkKVxuICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soY2IpO1xuICAgICAgZWxzZVxuICAgICAgICBzdHJlYW0ub25jZShcImZpbmlzaFwiLCBjYik7XG4gICAgfVxuICAgIHN0YXRlMi5lbmRlZCA9IHRydWU7XG4gICAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUyLCBlcnIpIHtcbiAgICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICAgIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICBzdGF0ZTIucGVuZGluZ2NiLS07XG4gICAgICBjYihlcnIpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgIH1cbiAgICBzdGF0ZTIuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsIFwiZGVzdHJveWVkXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuICBXcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbiAgV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24oZXJyLCBjYikge1xuICAgIGNiKGVycik7XG4gIH07XG4gIHJldHVybiBfc3RyZWFtX3dyaXRhYmxlO1xufVxudmFyIF9zdHJlYW1fZHVwbGV4O1xudmFyIGhhc1JlcXVpcmVkX3N0cmVhbV9kdXBsZXg7XG5mdW5jdGlvbiByZXF1aXJlX3N0cmVhbV9kdXBsZXgoKSB7XG4gIGlmIChoYXNSZXF1aXJlZF9zdHJlYW1fZHVwbGV4KVxuICAgIHJldHVybiBfc3RyZWFtX2R1cGxleDtcbiAgaGFzUmVxdWlyZWRfc3RyZWFtX2R1cGxleCA9IDE7XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMyID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAga2V5czIucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5czI7XG4gIH07XG4gIF9zdHJlYW1fZHVwbGV4ID0gRHVwbGV4O1xuICB2YXIgUmVhZGFibGUgPSByZXF1aXJlX3N0cmVhbV9yZWFkYWJsZSgpO1xuICB2YXIgV3JpdGFibGUgPSByZXF1aXJlX3N0cmVhbV93cml0YWJsZSgpO1xuICBpbmhlcml0c19icm93c2VyRXhwb3J0cyhEdXBsZXgsIFJlYWRhYmxlKTtcbiAge1xuICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSlcbiAgICAgICAgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIER1cGxleChvcHRpb25zMikge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuICAgICAgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9uczIpO1xuICAgIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9uczIpO1xuICAgIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9uczIpO1xuICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMyKSB7XG4gICAgICBpZiAob3B0aW9uczIucmVhZGFibGUgPT09IGZhbHNlKVxuICAgICAgICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAob3B0aW9uczIud3JpdGFibGUgPT09IGZhbHNlKVxuICAgICAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAob3B0aW9uczIuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25jZShcImVuZFwiLCBvbmVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCBcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLCB7XG4gICAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsIFwid3JpdGFibGVCdWZmZXJcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCBcIndyaXRhYmxlTGVuZ3RoXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKVxuICAgICAgcmV0dXJuO1xuICAgIHByb2Nlc3MkMS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbiAgfVxuICBmdW5jdGlvbiBvbkVuZE5UKHNlbGYyKSB7XG4gICAgc2VsZjIuZW5kKCk7XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsIFwiZGVzdHJveWVkXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHZvaWQgMCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB2b2lkIDAgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBfc3RyZWFtX2R1cGxleDtcbn1cbnZhciBzdHJpbmdfZGVjb2RlciA9IHt9O1xudmFyIHNhZmVCdWZmZXIgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgaGFzUmVxdWlyZWRTYWZlQnVmZmVyO1xuZnVuY3Rpb24gcmVxdWlyZVNhZmVCdWZmZXIoKSB7XG4gIGlmIChoYXNSZXF1aXJlZFNhZmVCdWZmZXIpXG4gICAgcmV0dXJuIHNhZmVCdWZmZXIuZXhwb3J0cztcbiAgaGFzUmVxdWlyZWRTYWZlQnVmZmVyID0gMTtcbiAgKGZ1bmN0aW9uKG1vZHVsZTIsIGV4cG9ydHMyKSB7XG4gICAgdmFyIGJ1ZmZlcjIgPSByZXF1aXJlQnVmZmVyKCk7XG4gICAgdmFyIEJ1ZmZlcjIgPSBidWZmZXIyLkJ1ZmZlcjtcbiAgICBmdW5jdGlvbiBjb3B5UHJvcHMoc3JjLCBkc3QpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEJ1ZmZlcjIuZnJvbSAmJiBCdWZmZXIyLmFsbG9jICYmIEJ1ZmZlcjIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyMi5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgICAgIG1vZHVsZTIuZXhwb3J0cyA9IGJ1ZmZlcjI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlQcm9wcyhidWZmZXIyLCBleHBvcnRzMik7XG4gICAgICBleHBvcnRzMi5CdWZmZXIgPSBTYWZlQnVmZmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBTYWZlQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gQnVmZmVyMihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7XG4gICAgfVxuICAgIGNvcHlQcm9wcyhCdWZmZXIyLCBTYWZlQnVmZmVyKTtcbiAgICBTYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEJ1ZmZlcjIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpO1xuICAgIH07XG4gICAgU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gICAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgICB9XG4gICAgICB2YXIgYnVmID0gQnVmZmVyMihzaXplKTtcbiAgICAgIGlmIChmaWxsICE9PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWYuZmlsbChmaWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmLmZpbGwoMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmO1xuICAgIH07XG4gICAgU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBCdWZmZXIyKHNpemUpO1xuICAgIH07XG4gICAgU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmZmVyMi5TbG93QnVmZmVyKHNpemUpO1xuICAgIH07XG4gIH0pKHNhZmVCdWZmZXIsIHNhZmVCdWZmZXIuZXhwb3J0cyk7XG4gIHJldHVybiBzYWZlQnVmZmVyLmV4cG9ydHM7XG59XG52YXIgaGFzUmVxdWlyZWRTdHJpbmdfZGVjb2RlcjtcbmZ1bmN0aW9uIHJlcXVpcmVTdHJpbmdfZGVjb2RlcigpIHtcbiAgaWYgKGhhc1JlcXVpcmVkU3RyaW5nX2RlY29kZXIpXG4gICAgcmV0dXJuIHN0cmluZ19kZWNvZGVyO1xuICBoYXNSZXF1aXJlZFN0cmluZ19kZWNvZGVyID0gMTtcbiAgdmFyIEJ1ZmZlcjIgPSByZXF1aXJlU2FmZUJ1ZmZlcigpLkJ1ZmZlcjtcbiAgdmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgICBlbmNvZGluZyA9IFwiXCIgKyBlbmNvZGluZztcbiAgICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgXCJoZXhcIjpcbiAgICAgIGNhc2UgXCJ1dGY4XCI6XG4gICAgICBjYXNlIFwidXRmLThcIjpcbiAgICAgIGNhc2UgXCJhc2NpaVwiOlxuICAgICAgY2FzZSBcImJpbmFyeVwiOlxuICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgY2FzZSBcInVjczJcIjpcbiAgICAgIGNhc2UgXCJ1Y3MtMlwiOlxuICAgICAgY2FzZSBcInV0ZjE2bGVcIjpcbiAgICAgIGNhc2UgXCJ1dGYtMTZsZVwiOlxuICAgICAgY2FzZSBcInJhd1wiOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgICBpZiAoIWVuYylcbiAgICAgIHJldHVybiBcInV0ZjhcIjtcbiAgICB2YXIgcmV0cmllZDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgc3dpdGNoIChlbmMpIHtcbiAgICAgICAgY2FzZSBcInV0ZjhcIjpcbiAgICAgICAgY2FzZSBcInV0Zi04XCI6XG4gICAgICAgICAgcmV0dXJuIFwidXRmOFwiO1xuICAgICAgICBjYXNlIFwidWNzMlwiOlxuICAgICAgICBjYXNlIFwidWNzLTJcIjpcbiAgICAgICAgY2FzZSBcInV0ZjE2bGVcIjpcbiAgICAgICAgY2FzZSBcInV0Zi0xNmxlXCI6XG4gICAgICAgICAgcmV0dXJuIFwidXRmMTZsZVwiO1xuICAgICAgICBjYXNlIFwibGF0aW4xXCI6XG4gICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICByZXR1cm4gXCJsYXRpbjFcIjtcbiAgICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgICBjYXNlIFwiYXNjaWlcIjpcbiAgICAgICAgY2FzZSBcImhleFwiOlxuICAgICAgICAgIHJldHVybiBlbmM7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKHJldHJpZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgZW5jID0gKFwiXCIgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICAgIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gICAgaWYgKHR5cGVvZiBuZW5jICE9PSBcInN0cmluZ1wiICYmIChCdWZmZXIyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIiArIGVuYyk7XG4gICAgcmV0dXJuIG5lbmMgfHwgZW5jO1xuICB9XG4gIHN0cmluZ19kZWNvZGVyLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuICBmdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gICAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgICB2YXIgbmI7XG4gICAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgICBjYXNlIFwidXRmMTZsZVwiOlxuICAgICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICAgIG5iID0gNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidXRmOFwiOlxuICAgICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgICBuYiA9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImJhc2U2NFwiOlxuICAgICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgICAgbmIgPSAzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gICAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICAgIHRoaXMubGFzdENoYXIgPSBCdWZmZXIyLmFsbG9jVW5zYWZlKG5iKTtcbiAgfVxuICBTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1Zikge1xuICAgIGlmIChidWYubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgdmFyIHI7XG4gICAgdmFyIGk7XG4gICAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgICBpZiAociA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgPSAwO1xuICAgIH1cbiAgICBpZiAoaSA8IGJ1Zi5sZW5ndGgpXG4gICAgICByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICAgIHJldHVybiByIHx8IFwiXCI7XG4gIH07XG4gIFN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG4gIFN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcbiAgU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbihidWYpIHtcbiAgICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICAgIH1cbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICAgIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbiAgfTtcbiAgZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gICAgaWYgKGJ5dGUgPD0gMTI3KVxuICAgICAgcmV0dXJuIDA7XG4gICAgZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSA2KVxuICAgICAgcmV0dXJuIDI7XG4gICAgZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAxNClcbiAgICAgIHJldHVybiAzO1xuICAgIGVsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMzApXG4gICAgICByZXR1cm4gNDtcbiAgICByZXR1cm4gYnl0ZSA+PiA2ID09PSAyID8gLTEgOiAtMjtcbiAgfVxuICBmdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYyLCBidWYsIGkpIHtcbiAgICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICAgIGlmIChqIDwgaSlcbiAgICAgIHJldHVybiAwO1xuICAgIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgICBpZiAobmIgPj0gMCkge1xuICAgICAgaWYgKG5iID4gMClcbiAgICAgICAgc2VsZjIubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgICByZXR1cm4gbmI7XG4gICAgfVxuICAgIGlmICgtLWogPCBpIHx8IG5iID09PSAtMilcbiAgICAgIHJldHVybiAwO1xuICAgIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICAgIGlmIChuYiA+PSAwKSB7XG4gICAgICBpZiAobmIgPiAwKVxuICAgICAgICBzZWxmMi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICAgIHJldHVybiBuYjtcbiAgICB9XG4gICAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKVxuICAgICAgcmV0dXJuIDA7XG4gICAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gICAgaWYgKG5iID49IDApIHtcbiAgICAgIGlmIChuYiA+IDApIHtcbiAgICAgICAgaWYgKG5iID09PSAyKVxuICAgICAgICAgIG5iID0gMDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHNlbGYyLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5iO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBmdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYyLCBidWYsIHApIHtcbiAgICBpZiAoKGJ1ZlswXSAmIDE5MikgIT09IDEyOCkge1xuICAgICAgc2VsZjIubGFzdE5lZWQgPSAwO1xuICAgICAgcmV0dXJuIFwi77+9XCI7XG4gICAgfVxuICAgIGlmIChzZWxmMi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICAgIGlmICgoYnVmWzFdICYgMTkyKSAhPT0gMTI4KSB7XG4gICAgICAgIHNlbGYyLmxhc3ROZWVkID0gMTtcbiAgICAgICAgcmV0dXJuIFwi77+9XCI7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZjIubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICAgIGlmICgoYnVmWzJdICYgMTkyKSAhPT0gMTI4KSB7XG4gICAgICAgICAgc2VsZjIubGFzdE5lZWQgPSAyO1xuICAgICAgICAgIHJldHVybiBcIu+/vVwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmKTtcbiAgICBpZiAociAhPT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIHI7XG4gICAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gICAgfVxuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICAgIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gICAgaWYgKCF0aGlzLmxhc3ROZWVkKVxuICAgICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhcInV0ZjhcIiwgaSk7XG4gICAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhcInV0ZjhcIiwgaSwgZW5kKTtcbiAgfVxuICBmdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICAgIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiBcIlwiO1xuICAgIGlmICh0aGlzLmxhc3ROZWVkKVxuICAgICAgcmV0dXJuIHIgKyBcIu+/vVwiO1xuICAgIHJldHVybiByO1xuICB9XG4gIGZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICAgIHZhciByID0gYnVmLnRvU3RyaW5nKFwidXRmMTZsZVwiLCBpKTtcbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICAgIGlmIChjID49IDU1Mjk2ICYmIGMgPD0gNTYzMTkpIHtcbiAgICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gICAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoXCJ1dGYxNmxlXCIsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogXCJcIjtcbiAgICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZyhcInV0ZjE2bGVcIiwgMCwgZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICAgIGlmIChuID09PSAwKVxuICAgICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhcImJhc2U2NFwiLCBpKTtcbiAgICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gICAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICAgIGlmIChuID09PSAxKSB7XG4gICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhcImJhc2U2NFwiLCBpLCBidWYubGVuZ3RoIC0gbik7XG4gIH1cbiAgZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICAgIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiBcIlwiO1xuICAgIGlmICh0aGlzLmxhc3ROZWVkKVxuICAgICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKFwiYmFzZTY0XCIsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuICBmdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xuICB9XG4gIGZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiBcIlwiO1xuICB9XG4gIHJldHVybiBzdHJpbmdfZGVjb2Rlcjtcbn1cbnZhciBlbmRPZlN0cmVhbTtcbnZhciBoYXNSZXF1aXJlZEVuZE9mU3RyZWFtO1xuZnVuY3Rpb24gcmVxdWlyZUVuZE9mU3RyZWFtKCkge1xuICBpZiAoaGFzUmVxdWlyZWRFbmRPZlN0cmVhbSlcbiAgICByZXR1cm4gZW5kT2ZTdHJlYW07XG4gIGhhc1JlcXVpcmVkRW5kT2ZTdHJlYW0gPSAxO1xuICB2YXIgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UgPSByZXF1aXJlRXJyb3JzQnJvd3NlcigpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuICBmdW5jdGlvbiBvbmNlMyhjYWxsYmFjaykge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2FsbGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG5vb3AyKCkge1xuICB9XG4gIGZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSBcImZ1bmN0aW9uXCI7XG4gIH1cbiAgZnVuY3Rpb24gZW9zKHN0cmVhbSwgb3B0cywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHJldHVybiBlb3Moc3RyZWFtLCBudWxsLCBvcHRzKTtcbiAgICBpZiAoIW9wdHMpXG4gICAgICBvcHRzID0ge307XG4gICAgY2FsbGJhY2sgPSBvbmNlMyhjYWxsYmFjayB8fCBub29wMik7XG4gICAgdmFyIHJlYWRhYmxlID0gb3B0cy5yZWFkYWJsZSB8fCBvcHRzLnJlYWRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ucmVhZGFibGU7XG4gICAgdmFyIHdyaXRhYmxlID0gb3B0cy53cml0YWJsZSB8fCBvcHRzLndyaXRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ud3JpdGFibGU7XG4gICAgdmFyIG9ubGVnYWN5ZmluaXNoID0gZnVuY3Rpb24gb25sZWdhY3lmaW5pc2gyKCkge1xuICAgICAgaWYgKCFzdHJlYW0ud3JpdGFibGUpXG4gICAgICAgIG9uZmluaXNoKCk7XG4gICAgfTtcbiAgICB2YXIgd3JpdGFibGVFbmRlZCA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZSAmJiBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQ7XG4gICAgdmFyIG9uZmluaXNoID0gZnVuY3Rpb24gb25maW5pc2gyKCkge1xuICAgICAgd3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHdyaXRhYmxlRW5kZWQgPSB0cnVlO1xuICAgICAgaWYgKCFyZWFkYWJsZSlcbiAgICAgICAgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuICAgIH07XG4gICAgdmFyIHJlYWRhYmxlRW5kZWQgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGUgJiYgc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ7XG4gICAgdmFyIG9uZW5kID0gZnVuY3Rpb24gb25lbmQyKCkge1xuICAgICAgcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIHJlYWRhYmxlRW5kZWQgPSB0cnVlO1xuICAgICAgaWYgKCF3cml0YWJsZSlcbiAgICAgICAgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuICAgIH07XG4gICAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbiBvbmVycm9yMihlcnIpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH07XG4gICAgdmFyIG9uY2xvc2UgPSBmdW5jdGlvbiBvbmNsb3NlMigpIHtcbiAgICAgIHZhciBlcnI7XG4gICAgICBpZiAocmVhZGFibGUgJiYgIXJlYWRhYmxlRW5kZWQpIHtcbiAgICAgICAgaWYgKCFzdHJlYW0uX3JlYWRhYmxlU3RhdGUgfHwgIXN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRlZClcbiAgICAgICAgICBlcnIgPSBuZXcgRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UoKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKHdyaXRhYmxlICYmICF3cml0YWJsZUVuZGVkKSB7XG4gICAgICAgIGlmICghc3RyZWFtLl93cml0YWJsZVN0YXRlIHx8ICFzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpXG4gICAgICAgICAgZXJyID0gbmV3IEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFKCk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvbnJlcXVlc3QgPSBmdW5jdGlvbiBvbnJlcXVlc3QyKCkge1xuICAgICAgc3RyZWFtLnJlcS5vbihcImZpbmlzaFwiLCBvbmZpbmlzaCk7XG4gICAgfTtcbiAgICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcbiAgICAgIHN0cmVhbS5vbihcImNvbXBsZXRlXCIsIG9uZmluaXNoKTtcbiAgICAgIHN0cmVhbS5vbihcImFib3J0XCIsIG9uY2xvc2UpO1xuICAgICAgaWYgKHN0cmVhbS5yZXEpXG4gICAgICAgIG9ucmVxdWVzdCgpO1xuICAgICAgZWxzZVxuICAgICAgICBzdHJlYW0ub24oXCJyZXF1ZXN0XCIsIG9ucmVxdWVzdCk7XG4gICAgfSBlbHNlIGlmICh3cml0YWJsZSAmJiAhc3RyZWFtLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICBzdHJlYW0ub24oXCJlbmRcIiwgb25sZWdhY3lmaW5pc2gpO1xuICAgICAgc3RyZWFtLm9uKFwiY2xvc2VcIiwgb25sZWdhY3lmaW5pc2gpO1xuICAgIH1cbiAgICBzdHJlYW0ub24oXCJlbmRcIiwgb25lbmQpO1xuICAgIHN0cmVhbS5vbihcImZpbmlzaFwiLCBvbmZpbmlzaCk7XG4gICAgaWYgKG9wdHMuZXJyb3IgIT09IGZhbHNlKVxuICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgc3RyZWFtLm9uKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY29tcGxldGVcIiwgb25maW5pc2gpO1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiYWJvcnRcIiwgb25jbG9zZSk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJyZXF1ZXN0XCIsIG9ucmVxdWVzdCk7XG4gICAgICBpZiAoc3RyZWFtLnJlcSlcbiAgICAgICAgc3RyZWFtLnJlcS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLCBvbmZpbmlzaCk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgb25sZWdhY3lmaW5pc2gpO1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25sZWdhY3lmaW5pc2gpO1xuICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uZmluaXNoKTtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLCBvbmVuZCk7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIH07XG4gIH1cbiAgZW5kT2ZTdHJlYW0gPSBlb3M7XG4gIHJldHVybiBlbmRPZlN0cmVhbTtcbn1cbnZhciBhc3luY19pdGVyYXRvcjtcbnZhciBoYXNSZXF1aXJlZEFzeW5jX2l0ZXJhdG9yO1xuZnVuY3Rpb24gcmVxdWlyZUFzeW5jX2l0ZXJhdG9yKCkge1xuICBpZiAoaGFzUmVxdWlyZWRBc3luY19pdGVyYXRvcilcbiAgICByZXR1cm4gYXN5bmNfaXRlcmF0b3I7XG4gIGhhc1JlcXVpcmVkQXN5bmNfaXRlcmF0b3IgPSAxO1xuICB2YXIgX09iamVjdCRzZXRQcm90b3R5cGVPO1xuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICB2YXIgZmluaXNoZWQgPSByZXF1aXJlRW5kT2ZTdHJlYW0oKTtcbiAgdmFyIGtMYXN0UmVzb2x2ZSA9IFN5bWJvbChcImxhc3RSZXNvbHZlXCIpO1xuICB2YXIga0xhc3RSZWplY3QgPSBTeW1ib2woXCJsYXN0UmVqZWN0XCIpO1xuICB2YXIga0Vycm9yID0gU3ltYm9sKFwiZXJyb3JcIik7XG4gIHZhciBrRW5kZWQgPSBTeW1ib2woXCJlbmRlZFwiKTtcbiAgdmFyIGtMYXN0UHJvbWlzZSA9IFN5bWJvbChcImxhc3RQcm9taXNlXCIpO1xuICB2YXIga0hhbmRsZVByb21pc2UgPSBTeW1ib2woXCJoYW5kbGVQcm9taXNlXCIpO1xuICB2YXIga1N0cmVhbSA9IFN5bWJvbChcInN0cmVhbVwiKTtcbiAgZnVuY3Rpb24gY3JlYXRlSXRlclJlc3VsdCh2YWx1ZSwgZG9uZSkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGRvbmVcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHJlYWRBbmRSZXNvbHZlKGl0ZXIpIHtcbiAgICB2YXIgcmVzb2x2ZTIgPSBpdGVyW2tMYXN0UmVzb2x2ZV07XG4gICAgaWYgKHJlc29sdmUyICE9PSBudWxsKSB7XG4gICAgICB2YXIgZGF0YSA9IGl0ZXJba1N0cmVhbV0ucmVhZCgpO1xuICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgaXRlcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgICByZXNvbHZlMihjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uUmVhZGFibGUoaXRlcikge1xuICAgIHByb2Nlc3MkMS5uZXh0VGljayhyZWFkQW5kUmVzb2x2ZSwgaXRlcik7XG4gIH1cbiAgZnVuY3Rpb24gd3JhcEZvck5leHQobGFzdFByb21pc2UsIGl0ZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ocmVzb2x2ZTIsIHJlamVjdCkge1xuICAgICAgbGFzdFByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGl0ZXJba0VuZGVkXSkge1xuICAgICAgICAgIHJlc29sdmUyKGNyZWF0ZUl0ZXJSZXN1bHQodm9pZCAwLCB0cnVlKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGl0ZXJba0hhbmRsZVByb21pc2VdKHJlc29sdmUyLCByZWplY3QpO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9O1xuICB9XG4gIHZhciBBc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGZ1bmN0aW9uKCkge1xuICB9KTtcbiAgdmFyIFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZigoX09iamVjdCRzZXRQcm90b3R5cGVPID0ge1xuICAgIGdldCBzdHJlYW0oKSB7XG4gICAgICByZXR1cm4gdGhpc1trU3RyZWFtXTtcbiAgICB9LFxuICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIGVycm9yID0gdGhpc1trRXJyb3JdO1xuICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgICBpZiAodGhpc1trRW5kZWRdKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh2b2lkIDAsIHRydWUpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzW2tTdHJlYW1dLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZTIsIHJlamVjdCkge1xuICAgICAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChfdGhpc1trRXJyb3JdKSB7XG4gICAgICAgICAgICAgIHJlamVjdChfdGhpc1trRXJyb3JdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUyKGNyZWF0ZUl0ZXJSZXN1bHQodm9pZCAwLCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RQcm9taXNlID0gdGhpc1trTGFzdFByb21pc2VdO1xuICAgICAgdmFyIHByb21pc2U7XG4gICAgICBpZiAobGFzdFByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCB0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXNba1N0cmVhbV0ucmVhZCgpO1xuICAgICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh0aGlzW2tIYW5kbGVQcm9taXNlXSk7XG4gICAgICB9XG4gICAgICB0aGlzW2tMYXN0UHJvbWlzZV0gPSBwcm9taXNlO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICB9LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRzZXRQcm90b3R5cGVPLCBTeW1ib2wuYXN5bmNJdGVyYXRvciwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRzZXRQcm90b3R5cGVPLCBcInJldHVyblwiLCBmdW5jdGlvbiBfcmV0dXJuKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlMiwgcmVqZWN0KSB7XG4gICAgICBfdGhpczJba1N0cmVhbV0uZGVzdHJveShudWxsLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlMihjcmVhdGVJdGVyUmVzdWx0KHZvaWQgMCwgdHJ1ZSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pLCBfT2JqZWN0JHNldFByb3RvdHlwZU8pLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTtcbiAgdmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IGZ1bmN0aW9uIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjIoc3RyZWFtKSB7XG4gICAgdmFyIF9PYmplY3QkY3JlYXRlO1xuICAgIHZhciBpdGVyYXRvciA9IE9iamVjdC5jcmVhdGUoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlLCAoX09iamVjdCRjcmVhdGUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrU3RyZWFtLCB7XG4gICAgICB2YWx1ZTogc3RyZWFtLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlc29sdmUsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrTGFzdFJlamVjdCwge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFcnJvciwge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtFbmRlZCwge1xuICAgICAgdmFsdWU6IHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBrSGFuZGxlUHJvbWlzZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHJlc29sdmUyLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRvcltrU3RyZWFtXS5yZWFkKCk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgICByZXNvbHZlMihjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IHJlc29sdmUyO1xuICAgICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IHJlamVjdDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSksIF9PYmplY3QkY3JlYXRlKSk7XG4gICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgZmluaXNoZWQoc3RyZWFtLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIikge1xuICAgICAgICB2YXIgcmVqZWN0ID0gaXRlcmF0b3Jba0xhc3RSZWplY3RdO1xuICAgICAgICBpZiAocmVqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBpdGVyYXRvcltrRXJyb3JdID0gZXJyO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVzb2x2ZTIgPSBpdGVyYXRvcltrTGFzdFJlc29sdmVdO1xuICAgICAgaWYgKHJlc29sdmUyICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZTIoY3JlYXRlSXRlclJlc3VsdCh2b2lkIDAsIHRydWUpKTtcbiAgICAgIH1cbiAgICAgIGl0ZXJhdG9yW2tFbmRlZF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIHN0cmVhbS5vbihcInJlYWRhYmxlXCIsIG9uUmVhZGFibGUuYmluZChudWxsLCBpdGVyYXRvcikpO1xuICAgIHJldHVybiBpdGVyYXRvcjtcbiAgfTtcbiAgYXN5bmNfaXRlcmF0b3IgPSBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3I7XG4gIHJldHVybiBhc3luY19pdGVyYXRvcjtcbn1cbnZhciBmcm9tQnJvd3NlcjtcbnZhciBoYXNSZXF1aXJlZEZyb21Ccm93c2VyO1xuZnVuY3Rpb24gcmVxdWlyZUZyb21Ccm93c2VyKCkge1xuICBpZiAoaGFzUmVxdWlyZWRGcm9tQnJvd3NlcilcbiAgICByZXR1cm4gZnJvbUJyb3dzZXI7XG4gIGhhc1JlcXVpcmVkRnJvbUJyb3dzZXIgPSAxO1xuICBmcm9tQnJvd3NlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWRhYmxlLmZyb20gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnJvd3NlclwiKTtcbiAgfTtcbiAgcmV0dXJuIGZyb21Ccm93c2VyO1xufVxudmFyIF9zdHJlYW1fcmVhZGFibGU7XG52YXIgaGFzUmVxdWlyZWRfc3RyZWFtX3JlYWRhYmxlO1xuZnVuY3Rpb24gcmVxdWlyZV9zdHJlYW1fcmVhZGFibGUoKSB7XG4gIGlmIChoYXNSZXF1aXJlZF9zdHJlYW1fcmVhZGFibGUpXG4gICAgcmV0dXJuIF9zdHJlYW1fcmVhZGFibGU7XG4gIGhhc1JlcXVpcmVkX3N0cmVhbV9yZWFkYWJsZSA9IDE7XG4gIF9zdHJlYW1fcmVhZGFibGUgPSBSZWFkYWJsZTtcbiAgdmFyIER1cGxleDtcbiAgUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG4gIGV2ZW50c0V4cG9ydHMuRXZlbnRFbWl0dGVyO1xuICB2YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gRUVsaXN0ZW5lckNvdW50MihlbWl0dGVyLCB0eXBlKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbiAgfTtcbiAgdmFyIFN0cmVhbTIgPSByZXF1aXJlU3RyZWFtQnJvd3NlcigpO1xuICB2YXIgQnVmZmVyMiA9IHJlcXVpcmVCdWZmZXIoKS5CdWZmZXI7XG4gIHZhciBPdXJVaW50OEFycmF5ID0gY29tbW9uanNHbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbigpIHtcbiAgfTtcbiAgZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICAgIHJldHVybiBCdWZmZXIyLmZyb20oY2h1bmspO1xuICB9XG4gIGZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIEJ1ZmZlcjIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xuICB9XG4gIHZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlVXRpbCgpO1xuICB2YXIgZGVidWc7XG4gIGlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gICAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coXCJzdHJlYW1cIik7XG4gIH0gZWxzZSB7XG4gICAgZGVidWcgPSBmdW5jdGlvbiBkZWJ1ZzIoKSB7XG4gICAgfTtcbiAgfVxuICB2YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmVCdWZmZXJfbGlzdCgpO1xuICB2YXIgZGVzdHJveUltcGwgPSByZXF1aXJlRGVzdHJveSgpO1xuICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlU3RhdGUoKSwgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG4gIHZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmVFcnJvcnNCcm93c2VyKCkuY29kZXMsIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsIEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GLCBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELCBFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVDtcbiAgdmFyIFN0cmluZ0RlY29kZXI7XG4gIHZhciBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3I7XG4gIHZhciBmcm9tO1xuICBpbmhlcml0c19icm93c2VyRXhwb3J0cyhSZWFkYWJsZSwgU3RyZWFtMik7XG4gIHZhciBlcnJvck9yRGVzdHJveSA9IGRlc3Ryb3lJbXBsLmVycm9yT3JEZXN0cm95O1xuICB2YXIga1Byb3h5RXZlbnRzID0gW1wiZXJyb3JcIiwgXCJjbG9zZVwiLCBcImRlc3Ryb3lcIiwgXCJwYXVzZVwiLCBcInJlc3VtZVwiXTtcbiAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyMihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcbiAgICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSlcbiAgICAgIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKVxuICAgICAgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtcbiAgICBlbHNlXG4gICAgICBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbiAgfVxuICBmdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMyLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gICAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmVfc3RyZWFtX2R1cGxleCgpO1xuICAgIG9wdGlvbnMyID0gb3B0aW9uczIgfHwge307XG4gICAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gXCJib29sZWFuXCIpXG4gICAgICBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcbiAgICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMyLm9iamVjdE1vZGU7XG4gICAgaWYgKGlzRHVwbGV4KVxuICAgICAgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9uczIucmVhZGFibGVPYmplY3RNb2RlO1xuICAgIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9uczIsIFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIsIGlzRHVwbGV4KTtcbiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMucGlwZXMgPSBudWxsO1xuICAgIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gICAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gICAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5zeW5jID0gdHJ1ZTtcbiAgICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICAgIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuZW1pdENsb3NlID0gb3B0aW9uczIuZW1pdENsb3NlICE9PSBmYWxzZTtcbiAgICB0aGlzLmF1dG9EZXN0cm95ID0gISFvcHRpb25zMi5hdXRvRGVzdHJveTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9uczIuZGVmYXVsdEVuY29kaW5nIHx8IFwidXRmOFwiO1xuICAgIHRoaXMuYXdhaXREcmFpbiA9IDA7XG4gICAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICAgIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gICAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gICAgaWYgKG9wdGlvbnMyLmVuY29kaW5nKSB7XG4gICAgICBpZiAoIVN0cmluZ0RlY29kZXIpXG4gICAgICAgIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlU3RyaW5nX2RlY29kZXIoKS5TdHJpbmdEZWNvZGVyO1xuICAgICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9uczIuZW5jb2RpbmcpO1xuICAgICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMyLmVuY29kaW5nO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zMikge1xuICAgIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlX3N0cmVhbV9kdXBsZXgoKTtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKVxuICAgICAgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zMik7XG4gICAgdmFyIGlzRHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9uczIsIHRoaXMsIGlzRHVwbGV4KTtcbiAgICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAob3B0aW9uczIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uczIucmVhZCA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aGlzLl9yZWFkID0gb3B0aW9uczIucmVhZDtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uczIuZGVzdHJveSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aGlzLl9kZXN0cm95ID0gb3B0aW9uczIuZGVzdHJveTtcbiAgICB9XG4gICAgU3RyZWFtMi5jYWxsKHRoaXMpO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsIFwiZGVzdHJveWVkXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuICBSZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbiAgUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24oZXJyLCBjYikge1xuICAgIGNiKGVycik7XG4gIH07XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XG4gICAgdmFyIHN0YXRlMiA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgdmFyIHNraXBDaHVua0NoZWNrO1xuICAgIGlmICghc3RhdGUyLm9iamVjdE1vZGUpIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZTIuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlMi5lbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gQnVmZmVyMi5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgICAgZW5jb2RpbmcgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG4gIH07XG4gIFJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICB9O1xuICBmdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICAgIGRlYnVnKFwicmVhZGFibGVBZGRDaHVua1wiLCBjaHVuayk7XG4gICAgdmFyIHN0YXRlMiA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgIHN0YXRlMi5yZWFkaW5nID0gZmFsc2U7XG4gICAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVyO1xuICAgICAgaWYgKCFza2lwQ2h1bmtDaGVjaylcbiAgICAgICAgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUyLCBjaHVuayk7XG4gICAgICBpZiAoZXIpIHtcbiAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlMi5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gXCJzdHJpbmdcIiAmJiAhc3RhdGUyLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyMi5wcm90b3R5cGUpIHtcbiAgICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgICAgaWYgKHN0YXRlMi5lbmRFbWl0dGVkKVxuICAgICAgICAgICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBuZXcgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCgpKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlMiwgY2h1bmssIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlMi5lbmRlZCkge1xuICAgICAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgbmV3IEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUyLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZTIucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChzdGF0ZTIuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICAgIGNodW5rID0gc3RhdGUyLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgICAgaWYgKHN0YXRlMi5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMClcbiAgICAgICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZTIsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZTIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlMiwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgICAgc3RhdGUyLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlMik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAhc3RhdGUyLmVuZGVkICYmIChzdGF0ZTIubGVuZ3RoIDwgc3RhdGUyLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUyLmxlbmd0aCA9PT0gMCk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZTIsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gICAgaWYgKHN0YXRlMi5mbG93aW5nICYmIHN0YXRlMi5sZW5ndGggPT09IDAgJiYgIXN0YXRlMi5zeW5jKSB7XG4gICAgICBzdGF0ZTIuYXdhaXREcmFpbiA9IDA7XG4gICAgICBzdHJlYW0uZW1pdChcImRhdGFcIiwgY2h1bmspO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZTIubGVuZ3RoICs9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgIGlmIChhZGRUb0Zyb250KVxuICAgICAgICBzdGF0ZTIuYnVmZmVyLnVuc2hpZnQoY2h1bmspO1xuICAgICAgZWxzZVxuICAgICAgICBzdGF0ZTIuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgaWYgKHN0YXRlMi5uZWVkUmVhZGFibGUpXG4gICAgICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICAgIH1cbiAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUyKTtcbiAgfVxuICBmdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUyLCBjaHVuaykge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gXCJzdHJpbmdcIiAmJiBjaHVuayAhPT0gdm9pZCAwICYmICFzdGF0ZTIub2JqZWN0TW9kZSkge1xuICAgICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoXCJjaHVua1wiLCBbXCJzdHJpbmdcIiwgXCJCdWZmZXJcIiwgXCJVaW50OEFycmF5XCJdLCBjaHVuayk7XG4gICAgfVxuICAgIHJldHVybiBlcjtcbiAgfVxuICBSZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbiAgfTtcbiAgUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oZW5jKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKVxuICAgICAgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmVTdHJpbmdfZGVjb2RlcigpLlN0cmluZ0RlY29kZXI7XG4gICAgdmFyIGRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IGRlY29kZXI7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlci5lbmNvZGluZztcbiAgICB2YXIgcCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7XG4gICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgIHdoaWxlIChwICE9PSBudWxsKSB7XG4gICAgICBjb250ZW50ICs9IGRlY29kZXIud3JpdGUocC5kYXRhKTtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gICAgaWYgKGNvbnRlbnQgIT09IFwiXCIpXG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlci5wdXNoKGNvbnRlbnQpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHZhciBNQVhfSFdNID0gMTA3Mzc0MTgyNDtcbiAgZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICAgIGlmIChuID49IE1BWF9IV00pIHtcbiAgICAgIG4gPSBNQVhfSFdNO1xuICAgIH0gZWxzZSB7XG4gICAgICBuLS07XG4gICAgICBuIHw9IG4gPj4+IDE7XG4gICAgICBuIHw9IG4gPj4+IDI7XG4gICAgICBuIHw9IG4gPj4+IDQ7XG4gICAgICBuIHw9IG4gPj4+IDg7XG4gICAgICBuIHw9IG4gPj4+IDE2O1xuICAgICAgbisrO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfVxuICBmdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlMikge1xuICAgIGlmIChuIDw9IDAgfHwgc3RhdGUyLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZTIuZW5kZWQpXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAoc3RhdGUyLm9iamVjdE1vZGUpXG4gICAgICByZXR1cm4gMTtcbiAgICBpZiAobiAhPT0gbikge1xuICAgICAgaWYgKHN0YXRlMi5mbG93aW5nICYmIHN0YXRlMi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBzdGF0ZTIuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBzdGF0ZTIubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobiA+IHN0YXRlMi5oaWdoV2F0ZXJNYXJrKVxuICAgICAgc3RhdGUyLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgICBpZiAobiA8PSBzdGF0ZTIubGVuZ3RoKVxuICAgICAgcmV0dXJuIG47XG4gICAgaWYgKCFzdGF0ZTIuZW5kZWQpIHtcbiAgICAgIHN0YXRlMi5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTIubGVuZ3RoO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24obikge1xuICAgIGRlYnVnKFwicmVhZFwiLCBuKTtcbiAgICBuID0gcGFyc2VJbnQobiwgMTApO1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIHZhciBuT3JpZyA9IG47XG4gICAgaWYgKG4gIT09IDApXG4gICAgICBzdGF0ZTIuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgaWYgKG4gPT09IDAgJiYgc3RhdGUyLm5lZWRSZWFkYWJsZSAmJiAoKHN0YXRlMi5oaWdoV2F0ZXJNYXJrICE9PSAwID8gc3RhdGUyLmxlbmd0aCA+PSBzdGF0ZTIuaGlnaFdhdGVyTWFyayA6IHN0YXRlMi5sZW5ndGggPiAwKSB8fCBzdGF0ZTIuZW5kZWQpKSB7XG4gICAgICBkZWJ1ZyhcInJlYWQ6IGVtaXRSZWFkYWJsZVwiLCBzdGF0ZTIubGVuZ3RoLCBzdGF0ZTIuZW5kZWQpO1xuICAgICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDAgJiYgc3RhdGUyLmVuZGVkKVxuICAgICAgICBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIGVsc2VcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlMik7XG4gICAgaWYgKG4gPT09IDAgJiYgc3RhdGUyLmVuZGVkKSB7XG4gICAgICBpZiAoc3RhdGUyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGRvUmVhZCA9IHN0YXRlMi5uZWVkUmVhZGFibGU7XG4gICAgZGVidWcoXCJuZWVkIHJlYWRhYmxlXCIsIGRvUmVhZCk7XG4gICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDAgfHwgc3RhdGUyLmxlbmd0aCAtIG4gPCBzdGF0ZTIuaGlnaFdhdGVyTWFyaykge1xuICAgICAgZG9SZWFkID0gdHJ1ZTtcbiAgICAgIGRlYnVnKFwibGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmtcIiwgZG9SZWFkKTtcbiAgICB9XG4gICAgaWYgKHN0YXRlMi5lbmRlZCB8fCBzdGF0ZTIucmVhZGluZykge1xuICAgICAgZG9SZWFkID0gZmFsc2U7XG4gICAgICBkZWJ1ZyhcInJlYWRpbmcgb3IgZW5kZWRcIiwgZG9SZWFkKTtcbiAgICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgICAgZGVidWcoXCJkbyByZWFkXCIpO1xuICAgICAgc3RhdGUyLnJlYWRpbmcgPSB0cnVlO1xuICAgICAgc3RhdGUyLnN5bmMgPSB0cnVlO1xuICAgICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDApXG4gICAgICAgIHN0YXRlMi5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgdGhpcy5fcmVhZChzdGF0ZTIuaGlnaFdhdGVyTWFyayk7XG4gICAgICBzdGF0ZTIuc3luYyA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZTIucmVhZGluZylcbiAgICAgICAgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlMik7XG4gICAgfVxuICAgIHZhciByZXQ7XG4gICAgaWYgKG4gPiAwKVxuICAgICAgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUyKTtcbiAgICBlbHNlXG4gICAgICByZXQgPSBudWxsO1xuICAgIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICAgIHN0YXRlMi5uZWVkUmVhZGFibGUgPSBzdGF0ZTIubGVuZ3RoIDw9IHN0YXRlMi5oaWdoV2F0ZXJNYXJrO1xuICAgICAgbiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlMi5sZW5ndGggLT0gbjtcbiAgICAgIHN0YXRlMi5hd2FpdERyYWluID0gMDtcbiAgICB9XG4gICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICghc3RhdGUyLmVuZGVkKVxuICAgICAgICBzdGF0ZTIubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZTIuZW5kZWQpXG4gICAgICAgIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAocmV0ICE9PSBudWxsKVxuICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCByZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIGZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZTIpIHtcbiAgICBkZWJ1ZyhcIm9uRW9mQ2h1bmtcIik7XG4gICAgaWYgKHN0YXRlMi5lbmRlZClcbiAgICAgIHJldHVybjtcbiAgICBpZiAoc3RhdGUyLmRlY29kZXIpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlMi5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgICBzdGF0ZTIuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgICBzdGF0ZTIubGVuZ3RoICs9IHN0YXRlMi5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUyLmVuZGVkID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUyLnN5bmMpIHtcbiAgICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZTIubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlMi5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICAgIHZhciBzdGF0ZTIgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoXCJlbWl0UmVhZGFibGVcIiwgc3RhdGUyLm5lZWRSZWFkYWJsZSwgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSk7XG4gICAgc3RhdGUyLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgIGlmICghc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgICAgZGVidWcoXCJlbWl0UmVhZGFibGVcIiwgc3RhdGUyLmZsb3dpbmcpO1xuICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgICB2YXIgc3RhdGUyID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKFwiZW1pdFJlYWRhYmxlX1wiLCBzdGF0ZTIuZGVzdHJveWVkLCBzdGF0ZTIubGVuZ3RoLCBzdGF0ZTIuZW5kZWQpO1xuICAgIGlmICghc3RhdGUyLmRlc3Ryb3llZCAmJiAoc3RhdGUyLmxlbmd0aCB8fCBzdGF0ZTIuZW5kZWQpKSB7XG4gICAgICBzdHJlYW0uZW1pdChcInJlYWRhYmxlXCIpO1xuICAgICAgc3RhdGUyLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGF0ZTIubmVlZFJlYWRhYmxlID0gIXN0YXRlMi5mbG93aW5nICYmICFzdGF0ZTIuZW5kZWQgJiYgc3RhdGUyLmxlbmd0aCA8PSBzdGF0ZTIuaGlnaFdhdGVyTWFyaztcbiAgICBmbG93KHN0cmVhbSk7XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlMikge1xuICAgIGlmICghc3RhdGUyLnJlYWRpbmdNb3JlKSB7XG4gICAgICBzdGF0ZTIucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlMik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgd2hpbGUgKCFzdGF0ZTIucmVhZGluZyAmJiAhc3RhdGUyLmVuZGVkICYmIChzdGF0ZTIubGVuZ3RoIDwgc3RhdGUyLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUyLmZsb3dpbmcgJiYgc3RhdGUyLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgIHZhciBsZW4gPSBzdGF0ZTIubGVuZ3RoO1xuICAgICAgZGVidWcoXCJtYXliZVJlYWRNb3JlIHJlYWQgMFwiKTtcbiAgICAgIHN0cmVhbS5yZWFkKDApO1xuICAgICAgaWYgKGxlbiA9PT0gc3RhdGUyLmxlbmd0aClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN0YXRlMi5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoXCJfcmVhZCgpXCIpKTtcbiAgfTtcbiAgUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBwaXBlT3B0cykge1xuICAgIHZhciBzcmMgPSB0aGlzO1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIHN3aXRjaCAoc3RhdGUyLnBpcGVzQ291bnQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgc3RhdGUyLnBpcGVzID0gZGVzdDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHN0YXRlMi5waXBlcyA9IFtzdGF0ZTIucGlwZXMsIGRlc3RdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN0YXRlMi5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgc3RhdGUyLnBpcGVzQ291bnQgKz0gMTtcbiAgICBkZWJ1ZyhcInBpcGUgY291bnQ9JWQgb3B0cz0lalwiLCBzdGF0ZTIucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuICAgIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2VzcyQxLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzJDEuc3RkZXJyO1xuICAgIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gICAgaWYgKHN0YXRlMi5lbmRFbWl0dGVkKVxuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGVuZEZuKTtcbiAgICBlbHNlXG4gICAgICBzcmMub25jZShcImVuZFwiLCBlbmRGbik7XG4gICAgZGVzdC5vbihcInVucGlwZVwiLCBvbnVucGlwZSk7XG4gICAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICAgIGRlYnVnKFwib251bnBpcGVcIik7XG4gICAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgICBkZWJ1ZyhcIm9uZW5kXCIpO1xuICAgICAgZGVzdC5lbmQoKTtcbiAgICB9XG4gICAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICAgIGRlc3Qub24oXCJkcmFpblwiLCBvbmRyYWluKTtcbiAgICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIGRlYnVnKFwiY2xlYW51cFwiKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIiwgb25maW5pc2gpO1xuICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcihcImRyYWluXCIsIG9uZHJhaW4pO1xuICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcihcInVucGlwZVwiLCBvbnVucGlwZSk7XG4gICAgICBzcmMucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgb25lbmQpO1xuICAgICAgc3JjLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIHVucGlwZSk7XG4gICAgICBzcmMucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsIG9uZGF0YSk7XG4gICAgICBjbGVhbmVkVXAgPSB0cnVlO1xuICAgICAgaWYgKHN0YXRlMi5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpXG4gICAgICAgIG9uZHJhaW4oKTtcbiAgICB9XG4gICAgc3JjLm9uKFwiZGF0YVwiLCBvbmRhdGEpO1xuICAgIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgICAgZGVidWcoXCJvbmRhdGFcIik7XG4gICAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgICBkZWJ1ZyhcImRlc3Qud3JpdGVcIiwgcmV0KTtcbiAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmICgoc3RhdGUyLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUyLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlMi5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlMi5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgICAgZGVidWcoXCJmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2VcIiwgc3RhdGUyLmF3YWl0RHJhaW4pO1xuICAgICAgICAgIHN0YXRlMi5hd2FpdERyYWluKys7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICAgIGRlYnVnKFwib25lcnJvclwiLCBlcik7XG4gICAgICB1bnBpcGUoKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgXCJlcnJvclwiKSA9PT0gMClcbiAgICAgICAgZXJyb3JPckRlc3Ryb3koZGVzdCwgZXIpO1xuICAgIH1cbiAgICBwcmVwZW5kTGlzdGVuZXIyKGRlc3QsIFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIiwgb25maW5pc2gpO1xuICAgICAgdW5waXBlKCk7XG4gICAgfVxuICAgIGRlc3Qub25jZShcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgICAgZGVidWcoXCJvbmZpbmlzaFwiKTtcbiAgICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgIHVucGlwZSgpO1xuICAgIH1cbiAgICBkZXN0Lm9uY2UoXCJmaW5pc2hcIiwgb25maW5pc2gpO1xuICAgIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICAgIGRlYnVnKFwidW5waXBlXCIpO1xuICAgICAgc3JjLnVucGlwZShkZXN0KTtcbiAgICB9XG4gICAgZGVzdC5lbWl0KFwicGlwZVwiLCBzcmMpO1xuICAgIGlmICghc3RhdGUyLmZsb3dpbmcpIHtcbiAgICAgIGRlYnVnKFwicGlwZSByZXN1bWVcIik7XG4gICAgICBzcmMucmVzdW1lKCk7XG4gICAgfVxuICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBmdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZU9uRHJhaW5GdW5jdGlvblJlc3VsdCgpIHtcbiAgICAgIHZhciBzdGF0ZTIgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgICBkZWJ1ZyhcInBpcGVPbkRyYWluXCIsIHN0YXRlMi5hd2FpdERyYWluKTtcbiAgICAgIGlmIChzdGF0ZTIuYXdhaXREcmFpbilcbiAgICAgICAgc3RhdGUyLmF3YWl0RHJhaW4tLTtcbiAgICAgIGlmIChzdGF0ZTIuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCBcImRhdGFcIikpIHtcbiAgICAgICAgc3RhdGUyLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgICBmbG93KHNyYyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBSZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24oZGVzdCkge1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIHZhciB1bnBpcGVJbmZvID0ge1xuICAgICAgaGFzVW5waXBlZDogZmFsc2VcbiAgICB9O1xuICAgIGlmIChzdGF0ZTIucGlwZXNDb3VudCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGlmIChzdGF0ZTIucGlwZXNDb3VudCA9PT0gMSkge1xuICAgICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUyLnBpcGVzKVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIGlmICghZGVzdClcbiAgICAgICAgZGVzdCA9IHN0YXRlMi5waXBlcztcbiAgICAgIHN0YXRlMi5waXBlcyA9IG51bGw7XG4gICAgICBzdGF0ZTIucGlwZXNDb3VudCA9IDA7XG4gICAgICBzdGF0ZTIuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgaWYgKGRlc3QpXG4gICAgICAgIGRlc3QuZW1pdChcInVucGlwZVwiLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoIWRlc3QpIHtcbiAgICAgIHZhciBkZXN0cyA9IHN0YXRlMi5waXBlcztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZTIucGlwZXNDb3VudDtcbiAgICAgIHN0YXRlMi5waXBlcyA9IG51bGw7XG4gICAgICBzdGF0ZTIucGlwZXNDb3VudCA9IDA7XG4gICAgICBzdGF0ZTIuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBkZXN0c1tpXS5lbWl0KFwidW5waXBlXCIsIHRoaXMsIHtcbiAgICAgICAgICBoYXNVbnBpcGVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlMi5waXBlcywgZGVzdCk7XG4gICAgaWYgKGluZGV4ID09PSAtMSlcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIHN0YXRlMi5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHN0YXRlMi5waXBlc0NvdW50IC09IDE7XG4gICAgaWYgKHN0YXRlMi5waXBlc0NvdW50ID09PSAxKVxuICAgICAgc3RhdGUyLnBpcGVzID0gc3RhdGUyLnBpcGVzWzBdO1xuICAgIGRlc3QuZW1pdChcInVucGlwZVwiLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXYsIGZuKSB7XG4gICAgdmFyIHJlcyA9IFN0cmVhbTIucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoZXYgPT09IFwiZGF0YVwiKSB7XG4gICAgICBzdGF0ZTIucmVhZGFibGVMaXN0ZW5pbmcgPSB0aGlzLmxpc3RlbmVyQ291bnQoXCJyZWFkYWJsZVwiKSA+IDA7XG4gICAgICBpZiAoc3RhdGUyLmZsb3dpbmcgIT09IGZhbHNlKVxuICAgICAgICB0aGlzLnJlc3VtZSgpO1xuICAgIH0gZWxzZSBpZiAoZXYgPT09IFwicmVhZGFibGVcIikge1xuICAgICAgaWYgKCFzdGF0ZTIuZW5kRW1pdHRlZCAmJiAhc3RhdGUyLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICAgIHN0YXRlMi5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlMi5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgICBzdGF0ZTIuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgICBzdGF0ZTIuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICAgIGRlYnVnKFwib24gcmVhZGFibGVcIiwgc3RhdGUyLmxlbmd0aCwgc3RhdGUyLnJlYWRpbmcpO1xuICAgICAgICBpZiAoc3RhdGUyLmxlbmd0aCkge1xuICAgICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGUyLnJlYWRpbmcpIHtcbiAgICAgICAgICBwcm9jZXNzJDEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuICBSZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihldiwgZm4pIHtcbiAgICB2YXIgcmVzID0gU3RyZWFtMi5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIuY2FsbCh0aGlzLCBldiwgZm4pO1xuICAgIGlmIChldiA9PT0gXCJyZWFkYWJsZVwiKSB7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2sodXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcsIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuICBSZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24oZXYpIHtcbiAgICB2YXIgcmVzID0gU3RyZWFtMi5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGV2ID09PSBcInJlYWRhYmxlXCIgfHwgZXYgPT09IHZvaWQgMCkge1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgZnVuY3Rpb24gdXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcoc2VsZjIpIHtcbiAgICB2YXIgc3RhdGUyID0gc2VsZjIuX3JlYWRhYmxlU3RhdGU7XG4gICAgc3RhdGUyLnJlYWRhYmxlTGlzdGVuaW5nID0gc2VsZjIubGlzdGVuZXJDb3VudChcInJlYWRhYmxlXCIpID4gMDtcbiAgICBpZiAoc3RhdGUyLnJlc3VtZVNjaGVkdWxlZCAmJiAhc3RhdGUyLnBhdXNlZCkge1xuICAgICAgc3RhdGUyLmZsb3dpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2VsZjIubGlzdGVuZXJDb3VudChcImRhdGFcIikgPiAwKSB7XG4gICAgICBzZWxmMi5yZXN1bWUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmMikge1xuICAgIGRlYnVnKFwicmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwXCIpO1xuICAgIHNlbGYyLnJlYWQoMCk7XG4gIH1cbiAgUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGF0ZTIgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUyLmZsb3dpbmcpIHtcbiAgICAgIGRlYnVnKFwicmVzdW1lXCIpO1xuICAgICAgc3RhdGUyLmZsb3dpbmcgPSAhc3RhdGUyLnJlYWRhYmxlTGlzdGVuaW5nO1xuICAgICAgcmVzdW1lKHRoaXMsIHN0YXRlMik7XG4gICAgfVxuICAgIHN0YXRlMi5wYXVzZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUyKSB7XG4gICAgaWYgKCFzdGF0ZTIucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgICBzdGF0ZTIucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHByb2Nlc3MkMS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlMik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZTIpIHtcbiAgICBkZWJ1ZyhcInJlc3VtZVwiLCBzdGF0ZTIucmVhZGluZyk7XG4gICAgaWYgKCFzdGF0ZTIucmVhZGluZykge1xuICAgICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgfVxuICAgIHN0YXRlMi5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdChcInJlc3VtZVwiKTtcbiAgICBmbG93KHN0cmVhbSk7XG4gICAgaWYgKHN0YXRlMi5mbG93aW5nICYmICFzdGF0ZTIucmVhZGluZylcbiAgICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKFwiY2FsbCBwYXVzZSBmbG93aW5nPSVqXCIsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHtcbiAgICAgIGRlYnVnKFwicGF1c2VcIik7XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW1pdChcInBhdXNlXCIpO1xuICAgIH1cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gICAgdmFyIHN0YXRlMiA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZyhcImZsb3dcIiwgc3RhdGUyLmZsb3dpbmcpO1xuICAgIHdoaWxlIChzdGF0ZTIuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7XG4gICAgfVxuICB9XG4gIFJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgc3RhdGUyID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICB2YXIgcGF1c2VkID0gZmFsc2U7XG4gICAgc3RyZWFtLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoXCJ3cmFwcGVkIGVuZFwiKTtcbiAgICAgIGlmIChzdGF0ZTIuZGVjb2RlciAmJiAhc3RhdGUyLmVuZGVkKSB7XG4gICAgICAgIHZhciBjaHVuayA9IHN0YXRlMi5kZWNvZGVyLmVuZCgpO1xuICAgICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKVxuICAgICAgICAgIF90aGlzLnB1c2goY2h1bmspO1xuICAgICAgfVxuICAgICAgX3RoaXMucHVzaChudWxsKTtcbiAgICB9KTtcbiAgICBzdHJlYW0ub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICBkZWJ1ZyhcIndyYXBwZWQgZGF0YVwiKTtcbiAgICAgIGlmIChzdGF0ZTIuZGVjb2RlcilcbiAgICAgICAgY2h1bmsgPSBzdGF0ZTIuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICBpZiAoc3RhdGUyLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB2b2lkIDApKVxuICAgICAgICByZXR1cm47XG4gICAgICBlbHNlIGlmICghc3RhdGUyLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgICAgaWYgKCFyZXQpIHtcbiAgICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICAgIGlmICh0aGlzW2ldID09PSB2b2lkIDAgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXNbaV0gPSAvKiBAX19QVVJFX18gKi8gZnVuY3Rpb24gbWV0aG9kV3JhcChtZXRob2QpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWV0aG9kV3JhcFJldHVybkZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KGkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gICAgfVxuICAgIHRoaXMuX3JlYWQgPSBmdW5jdGlvbihuMikge1xuICAgICAgZGVidWcoXCJ3cmFwcGVkIF9yZWFkXCIsIG4yKTtcbiAgICAgIGlmIChwYXVzZWQpIHtcbiAgICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgUmVhZGFibGUucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IHJlcXVpcmVBc3luY19pdGVyYXRvcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsIFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCBcInJlYWRhYmxlQnVmZmVyXCIsIHtcbiAgICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAgIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgXCJyZWFkYWJsZUZsb3dpbmdcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUyKSB7XG4gICAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBzdGF0ZTI7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsIFwicmVhZGFibGVMZW5ndGhcIiwge1xuICAgIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gICAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5sZW5ndGg7XG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUyKSB7XG4gICAgaWYgKHN0YXRlMi5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB2YXIgcmV0O1xuICAgIGlmIChzdGF0ZTIub2JqZWN0TW9kZSlcbiAgICAgIHJldCA9IHN0YXRlMi5idWZmZXIuc2hpZnQoKTtcbiAgICBlbHNlIGlmICghbiB8fCBuID49IHN0YXRlMi5sZW5ndGgpIHtcbiAgICAgIGlmIChzdGF0ZTIuZGVjb2RlcilcbiAgICAgICAgcmV0ID0gc3RhdGUyLmJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgZWxzZSBpZiAoc3RhdGUyLmJ1ZmZlci5sZW5ndGggPT09IDEpXG4gICAgICAgIHJldCA9IHN0YXRlMi5idWZmZXIuZmlyc3QoKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0ID0gc3RhdGUyLmJ1ZmZlci5jb25jYXQoc3RhdGUyLmxlbmd0aCk7XG4gICAgICBzdGF0ZTIuYnVmZmVyLmNsZWFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCA9IHN0YXRlMi5idWZmZXIuY29uc3VtZShuLCBzdGF0ZTIuZGVjb2Rlcik7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gICAgdmFyIHN0YXRlMiA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZyhcImVuZFJlYWRhYmxlXCIsIHN0YXRlMi5lbmRFbWl0dGVkKTtcbiAgICBpZiAoIXN0YXRlMi5lbmRFbWl0dGVkKSB7XG4gICAgICBzdGF0ZTIuZW5kZWQgPSB0cnVlO1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlMiwgc3RyZWFtKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZTIsIHN0cmVhbSkge1xuICAgIGRlYnVnKFwiZW5kUmVhZGFibGVOVFwiLCBzdGF0ZTIuZW5kRW1pdHRlZCwgc3RhdGUyLmxlbmd0aCk7XG4gICAgaWYgKCFzdGF0ZTIuZW5kRW1pdHRlZCAmJiBzdGF0ZTIubGVuZ3RoID09PSAwKSB7XG4gICAgICBzdGF0ZTIuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZW5kXCIpO1xuICAgICAgaWYgKHN0YXRlMi5hdXRvRGVzdHJveSkge1xuICAgICAgICB2YXIgd1N0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICAgICAgICBpZiAoIXdTdGF0ZSB8fCB3U3RhdGUuYXV0b0Rlc3Ryb3kgJiYgd1N0YXRlLmZpbmlzaGVkKSB7XG4gICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgUmVhZGFibGUuZnJvbSA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBvcHRzKSB7XG4gICAgICBpZiAoZnJvbSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGZyb20gPSByZXF1aXJlRnJvbUJyb3dzZXIoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tKFJlYWRhYmxlLCBpdGVyYWJsZSwgb3B0cyk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh4c1tpXSA9PT0geClcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gX3N0cmVhbV9yZWFkYWJsZTtcbn1cbnZhciBfc3RyZWFtX3RyYW5zZm9ybTtcbnZhciBoYXNSZXF1aXJlZF9zdHJlYW1fdHJhbnNmb3JtO1xuZnVuY3Rpb24gcmVxdWlyZV9zdHJlYW1fdHJhbnNmb3JtKCkge1xuICBpZiAoaGFzUmVxdWlyZWRfc3RyZWFtX3RyYW5zZm9ybSlcbiAgICByZXR1cm4gX3N0cmVhbV90cmFuc2Zvcm07XG4gIGhhc1JlcXVpcmVkX3N0cmVhbV90cmFuc2Zvcm0gPSAxO1xuICBfc3RyZWFtX3RyYW5zZm9ybSA9IFRyYW5zZm9ybTtcbiAgdmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2RlcywgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCwgRVJSX01VTFRJUExFX0NBTExCQUNLID0gX3JlcXVpcmUkY29kZXMuRVJSX01VTFRJUExFX0NBTExCQUNLLCBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORywgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wO1xuICB2YXIgRHVwbGV4ID0gcmVxdWlyZV9zdHJlYW1fZHVwbGV4KCk7XG4gIGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcbiAgZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcbiAgICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuICAgIGlmIChjYiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIG5ldyBFUlJfTVVMVElQTEVfQ0FMTEJBQ0soKSk7XG4gICAgfVxuICAgIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICAgIHRzLndyaXRlY2IgPSBudWxsO1xuICAgIGlmIChkYXRhICE9IG51bGwpXG4gICAgICB0aGlzLnB1c2goZGF0YSk7XG4gICAgY2IoZXIpO1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgcnMucmVhZGluZyA9IGZhbHNlO1xuICAgIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMyKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpXG4gICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zMik7XG4gICAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9uczIpO1xuICAgIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgICB3cml0ZWNiOiBudWxsLFxuICAgICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICBpZiAob3B0aW9uczIpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uczIudHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMyLnRyYW5zZm9ybTtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uczIuZmx1c2ggPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhpcy5fZmx1c2ggPSBvcHRpb25zMi5mbHVzaDtcbiAgICB9XG4gICAgdGhpcy5vbihcInByZWZpbmlzaFwiLCBwcmVmaW5pc2gpO1xuICB9XG4gIGZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09IFwiZnVuY3Rpb25cIiAmJiAhdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uKGVyLCBkYXRhKSB7XG4gICAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgfVxuICBUcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG4gIH07XG4gIFRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoXCJfdHJhbnNmb3JtKClcIikpO1xuICB9O1xuICBUcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgICB0cy53cml0ZWNiID0gY2I7XG4gICAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICAgIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKVxuICAgICAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICAgIH1cbiAgfTtcbiAgVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gICAgfVxuICB9O1xuICBUcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24oZXJyLCBjYikge1xuICAgIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uKGVycjIpIHtcbiAgICAgIGNiKGVycjIpO1xuICAgIH0pO1xuICB9O1xuICBmdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgICBpZiAoZXIpXG4gICAgICByZXR1cm4gc3RyZWFtLmVtaXQoXCJlcnJvclwiLCBlcik7XG4gICAgaWYgKGRhdGEgIT0gbnVsbClcbiAgICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuICAgIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCgpO1xuICAgIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZylcbiAgICAgIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HKCk7XG4gICAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xuICB9XG4gIHJldHVybiBfc3RyZWFtX3RyYW5zZm9ybTtcbn1cbnZhciBfc3RyZWFtX3Bhc3N0aHJvdWdoO1xudmFyIGhhc1JlcXVpcmVkX3N0cmVhbV9wYXNzdGhyb3VnaDtcbmZ1bmN0aW9uIHJlcXVpcmVfc3RyZWFtX3Bhc3N0aHJvdWdoKCkge1xuICBpZiAoaGFzUmVxdWlyZWRfc3RyZWFtX3Bhc3N0aHJvdWdoKVxuICAgIHJldHVybiBfc3RyZWFtX3Bhc3N0aHJvdWdoO1xuICBoYXNSZXF1aXJlZF9zdHJlYW1fcGFzc3Rocm91Z2ggPSAxO1xuICBfc3RyZWFtX3Bhc3N0aHJvdWdoID0gUGFzc1Rocm91Z2g7XG4gIHZhciBUcmFuc2Zvcm0gPSByZXF1aXJlX3N0cmVhbV90cmFuc2Zvcm0oKTtcbiAgaW5oZXJpdHNfYnJvd3NlckV4cG9ydHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG4gIGZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMyKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSlcbiAgICAgIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9uczIpO1xuICAgIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMyKTtcbiAgfVxuICBQYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgICBjYihudWxsLCBjaHVuayk7XG4gIH07XG4gIHJldHVybiBfc3RyZWFtX3Bhc3N0aHJvdWdoO1xufVxudmFyIHBpcGVsaW5lXzE7XG52YXIgaGFzUmVxdWlyZWRQaXBlbGluZTtcbmZ1bmN0aW9uIHJlcXVpcmVQaXBlbGluZSgpIHtcbiAgaWYgKGhhc1JlcXVpcmVkUGlwZWxpbmUpXG4gICAgcmV0dXJuIHBpcGVsaW5lXzE7XG4gIGhhc1JlcXVpcmVkUGlwZWxpbmUgPSAxO1xuICB2YXIgZW9zO1xuICBmdW5jdGlvbiBvbmNlMyhjYWxsYmFjaykge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2FsbGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgdmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZUVycm9yc0Jyb3dzZXIoKS5jb2RlcywgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1MsIEVSUl9TVFJFQU1fREVTVFJPWUVEID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9ERVNUUk9ZRUQ7XG4gIGZ1bmN0aW9uIG5vb3AyKGVycikge1xuICAgIGlmIChlcnIpXG4gICAgICB0aHJvdyBlcnI7XG4gIH1cbiAgZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkge1xuICAgIHJldHVybiBzdHJlYW0uc2V0SGVhZGVyICYmIHR5cGVvZiBzdHJlYW0uYWJvcnQgPT09IFwiZnVuY3Rpb25cIjtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95ZXIoc3RyZWFtLCByZWFkaW5nLCB3cml0aW5nLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gb25jZTMoY2FsbGJhY2spO1xuICAgIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgICBzdHJlYW0ub24oXCJjbG9zZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgaWYgKGVvcyA9PT0gdm9pZCAwKVxuICAgICAgZW9zID0gcmVxdWlyZUVuZE9mU3RyZWFtKCk7XG4gICAgZW9zKHN0cmVhbSwge1xuICAgICAgcmVhZGFibGU6IHJlYWRpbmcsXG4gICAgICB3cml0YWJsZTogd3JpdGluZ1xuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycilcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGNsb3NlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGRlc3Ryb3llZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSlcbiAgICAgICAgcmV0dXJuIHN0cmVhbS5hYm9ydCgpO1xuICAgICAgaWYgKHR5cGVvZiBzdHJlYW0uZGVzdHJveSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIGNhbGxiYWNrKGVyciB8fCBuZXcgRVJSX1NUUkVBTV9ERVNUUk9ZRUQoXCJwaXBlXCIpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGNhbGwoZm4pIHtcbiAgICBmbigpO1xuICB9XG4gIGZ1bmN0aW9uIHBpcGUoZnJvbSwgdG8pIHtcbiAgICByZXR1cm4gZnJvbS5waXBlKHRvKTtcbiAgfVxuICBmdW5jdGlvbiBwb3BDYWxsYmFjayhzdHJlYW1zKSB7XG4gICAgaWYgKCFzdHJlYW1zLmxlbmd0aClcbiAgICAgIHJldHVybiBub29wMjtcbiAgICBpZiAodHlwZW9mIHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgcmV0dXJuIG5vb3AyO1xuICAgIHJldHVybiBzdHJlYW1zLnBvcCgpO1xuICB9XG4gIGZ1bmN0aW9uIHBpcGVsaW5lKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHJlYW1zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgc3RyZWFtc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgdmFyIGNhbGxiYWNrID0gcG9wQ2FsbGJhY2soc3RyZWFtcyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3RyZWFtc1swXSkpXG4gICAgICBzdHJlYW1zID0gc3RyZWFtc1swXTtcbiAgICBpZiAoc3RyZWFtcy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUyhcInN0cmVhbXNcIik7XG4gICAgfVxuICAgIHZhciBlcnJvcjtcbiAgICB2YXIgZGVzdHJveXMgPSBzdHJlYW1zLm1hcChmdW5jdGlvbihzdHJlYW0sIGkpIHtcbiAgICAgIHZhciByZWFkaW5nID0gaSA8IHN0cmVhbXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciB3cml0aW5nID0gaSA+IDA7XG4gICAgICByZXR1cm4gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGlmICghZXJyb3IpXG4gICAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgZGVzdHJveXMuZm9yRWFjaChjYWxsKTtcbiAgICAgICAgaWYgKHJlYWRpbmcpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZXN0cm95cy5mb3JFYWNoKGNhbGwpO1xuICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UocGlwZSk7XG4gIH1cbiAgcGlwZWxpbmVfMSA9IHBpcGVsaW5lO1xuICByZXR1cm4gcGlwZWxpbmVfMTtcbn1cbnZhciBzdHJlYW1Ccm93c2VyaWZ5ID0gU3RyZWFtJDE7XG52YXIgRUUgPSBldmVudHNFeHBvcnRzLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IGluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzO1xuaW5oZXJpdHMoU3RyZWFtJDEsIEVFKTtcblN0cmVhbSQxLlJlYWRhYmxlID0gcmVxdWlyZV9zdHJlYW1fcmVhZGFibGUoKTtcblN0cmVhbSQxLldyaXRhYmxlID0gcmVxdWlyZV9zdHJlYW1fd3JpdGFibGUoKTtcblN0cmVhbSQxLkR1cGxleCA9IHJlcXVpcmVfc3RyZWFtX2R1cGxleCgpO1xuU3RyZWFtJDEuVHJhbnNmb3JtID0gcmVxdWlyZV9zdHJlYW1fdHJhbnNmb3JtKCk7XG5TdHJlYW0kMS5QYXNzVGhyb3VnaCA9IHJlcXVpcmVfc3RyZWFtX3Bhc3N0aHJvdWdoKCk7XG5TdHJlYW0kMS5maW5pc2hlZCA9IHJlcXVpcmVFbmRPZlN0cmVhbSgpO1xuU3RyZWFtJDEucGlwZWxpbmUgPSByZXF1aXJlUGlwZWxpbmUoKTtcblN0cmVhbSQxLlN0cmVhbSA9IFN0cmVhbSQxO1xuZnVuY3Rpb24gU3RyZWFtJDEoKSB7XG4gIEVFLmNhbGwodGhpcyk7XG59XG5TdHJlYW0kMS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMyKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNvdXJjZS5vbihcImRhdGFcIiwgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kcmFpbigpIHtcbiAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHtcbiAgICAgIHNvdXJjZS5yZXN1bWUoKTtcbiAgICB9XG4gIH1cbiAgZGVzdC5vbihcImRyYWluXCIsIG9uZHJhaW4pO1xuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zMiB8fCBvcHRpb25zMi5lbmQgIT09IGZhbHNlKSkge1xuICAgIHNvdXJjZS5vbihcImVuZFwiLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gIH1cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZClcbiAgICAgIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGlmIChkaWRPbkVuZClcbiAgICAgIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGRlc3QuZGVzdHJveSgpO1xuICB9XG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgXCJlcnJvclwiKSA9PT0gMCkge1xuICAgICAgdGhyb3cgZXI7XG4gICAgfVxuICB9XG4gIHNvdXJjZS5vbihcImVycm9yXCIsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBvbmRhdGEpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJkcmFpblwiLCBvbmRyYWluKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgY2xlYW51cCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgY2xlYW51cCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIGNsZWFudXApO1xuICB9XG4gIHNvdXJjZS5vbihcImVuZFwiLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKFwiY2xvc2VcIiwgY2xlYW51cCk7XG4gIGRlc3Qub24oXCJjbG9zZVwiLCBjbGVhbnVwKTtcbiAgZGVzdC5lbWl0KFwicGlwZVwiLCBzb3VyY2UpO1xuICByZXR1cm4gZGVzdDtcbn07XG4oZnVuY3Rpb24oZXhwb3J0czIpIHtcbiAgKGZ1bmN0aW9uKHNheDIpIHtcbiAgICBzYXgyLnBhcnNlciA9IGZ1bmN0aW9uKHN0cmljdCwgb3B0KSB7XG4gICAgICByZXR1cm4gbmV3IFNBWFBhcnNlcihzdHJpY3QsIG9wdCk7XG4gICAgfTtcbiAgICBzYXgyLlNBWFBhcnNlciA9IFNBWFBhcnNlcjtcbiAgICBzYXgyLlNBWFN0cmVhbSA9IFNBWFN0cmVhbTtcbiAgICBzYXgyLmNyZWF0ZVN0cmVhbSA9IGNyZWF0ZVN0cmVhbTtcbiAgICBzYXgyLk1BWF9CVUZGRVJfTEVOR1RIID0gNjQgKiAxMDI0O1xuICAgIHZhciBidWZmZXJzID0gW1xuICAgICAgXCJjb21tZW50XCIsXG4gICAgICBcInNnbWxEZWNsXCIsXG4gICAgICBcInRleHROb2RlXCIsXG4gICAgICBcInRhZ05hbWVcIixcbiAgICAgIFwiZG9jdHlwZVwiLFxuICAgICAgXCJwcm9jSW5zdE5hbWVcIixcbiAgICAgIFwicHJvY0luc3RCb2R5XCIsXG4gICAgICBcImVudGl0eVwiLFxuICAgICAgXCJhdHRyaWJOYW1lXCIsXG4gICAgICBcImF0dHJpYlZhbHVlXCIsXG4gICAgICBcImNkYXRhXCIsXG4gICAgICBcInNjcmlwdFwiXG4gICAgXTtcbiAgICBzYXgyLkVWRU5UUyA9IFtcbiAgICAgIFwidGV4dFwiLFxuICAgICAgXCJwcm9jZXNzaW5naW5zdHJ1Y3Rpb25cIixcbiAgICAgIFwic2dtbGRlY2xhcmF0aW9uXCIsXG4gICAgICBcImRvY3R5cGVcIixcbiAgICAgIFwiY29tbWVudFwiLFxuICAgICAgXCJvcGVudGFnc3RhcnRcIixcbiAgICAgIFwiYXR0cmlidXRlXCIsXG4gICAgICBcIm9wZW50YWdcIixcbiAgICAgIFwiY2xvc2V0YWdcIixcbiAgICAgIFwib3BlbmNkYXRhXCIsXG4gICAgICBcImNkYXRhXCIsXG4gICAgICBcImNsb3NlY2RhdGFcIixcbiAgICAgIFwiZXJyb3JcIixcbiAgICAgIFwiZW5kXCIsXG4gICAgICBcInJlYWR5XCIsXG4gICAgICBcInNjcmlwdFwiLFxuICAgICAgXCJvcGVubmFtZXNwYWNlXCIsXG4gICAgICBcImNsb3NlbmFtZXNwYWNlXCJcbiAgICBdO1xuICAgIGZ1bmN0aW9uIFNBWFBhcnNlcihzdHJpY3QsIG9wdCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNBWFBhcnNlcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpO1xuICAgICAgfVxuICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG4gICAgICBjbGVhckJ1ZmZlcnMocGFyc2VyKTtcbiAgICAgIHBhcnNlci5xID0gcGFyc2VyLmMgPSBcIlwiO1xuICAgICAgcGFyc2VyLmJ1ZmZlckNoZWNrUG9zaXRpb24gPSBzYXgyLk1BWF9CVUZGRVJfTEVOR1RIO1xuICAgICAgcGFyc2VyLm9wdCA9IG9wdCB8fCB7fTtcbiAgICAgIHBhcnNlci5vcHQubG93ZXJjYXNlID0gcGFyc2VyLm9wdC5sb3dlcmNhc2UgfHwgcGFyc2VyLm9wdC5sb3dlcmNhc2V0YWdzO1xuICAgICAgcGFyc2VyLmxvb3NlQ2FzZSA9IHBhcnNlci5vcHQubG93ZXJjYXNlID8gXCJ0b0xvd2VyQ2FzZVwiIDogXCJ0b1VwcGVyQ2FzZVwiO1xuICAgICAgcGFyc2VyLnRhZ3MgPSBbXTtcbiAgICAgIHBhcnNlci5jbG9zZWQgPSBwYXJzZXIuY2xvc2VkUm9vdCA9IHBhcnNlci5zYXdSb290ID0gZmFsc2U7XG4gICAgICBwYXJzZXIudGFnID0gcGFyc2VyLmVycm9yID0gbnVsbDtcbiAgICAgIHBhcnNlci5zdHJpY3QgPSAhIXN0cmljdDtcbiAgICAgIHBhcnNlci5ub3NjcmlwdCA9ICEhKHN0cmljdCB8fCBwYXJzZXIub3B0Lm5vc2NyaXB0KTtcbiAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQkVHSU47XG4gICAgICBwYXJzZXIuc3RyaWN0RW50aXRpZXMgPSBwYXJzZXIub3B0LnN0cmljdEVudGl0aWVzO1xuICAgICAgcGFyc2VyLkVOVElUSUVTID0gcGFyc2VyLnN0cmljdEVudGl0aWVzID8gT2JqZWN0LmNyZWF0ZShzYXgyLlhNTF9FTlRJVElFUykgOiBPYmplY3QuY3JlYXRlKHNheDIuRU5USVRJRVMpO1xuICAgICAgcGFyc2VyLmF0dHJpYkxpc3QgPSBbXTtcbiAgICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICAgIHBhcnNlci5ucyA9IE9iamVjdC5jcmVhdGUocm9vdE5TKTtcbiAgICAgIH1cbiAgICAgIHBhcnNlci50cmFja1Bvc2l0aW9uID0gcGFyc2VyLm9wdC5wb3NpdGlvbiAhPT0gZmFsc2U7XG4gICAgICBpZiAocGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgcGFyc2VyLnBvc2l0aW9uID0gcGFyc2VyLmxpbmUgPSBwYXJzZXIuY29sdW1uID0gMDtcbiAgICAgIH1cbiAgICAgIGVtaXQyKHBhcnNlciwgXCJvbnJlYWR5XCIpO1xuICAgIH1cbiAgICBpZiAoIU9iamVjdC5jcmVhdGUpIHtcbiAgICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIGZ1bmN0aW9uIEYoKSB7XG4gICAgICAgIH1cbiAgICAgICAgRi5wcm90b3R5cGUgPSBvO1xuICAgICAgICB2YXIgbmV3ZiA9IG5ldyBGKCk7XG4gICAgICAgIHJldHVybiBuZXdmO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFPYmplY3Qua2V5cykge1xuICAgICAgT2JqZWN0LmtleXMgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIHZhciBhID0gW107XG4gICAgICAgIGZvciAodmFyIGkgaW4gbylcbiAgICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSlcbiAgICAgICAgICAgIGEucHVzaChpKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja0J1ZmZlckxlbmd0aChwYXJzZXIpIHtcbiAgICAgIHZhciBtYXhBbGxvd2VkID0gTWF0aC5tYXgoc2F4Mi5NQVhfQlVGRkVSX0xFTkdUSCwgMTApO1xuICAgICAgdmFyIG1heEFjdHVhbCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJ1ZmZlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBsZW4gPSBwYXJzZXJbYnVmZmVyc1tpXV0ubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID4gbWF4QWxsb3dlZCkge1xuICAgICAgICAgIHN3aXRjaCAoYnVmZmVyc1tpXSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHROb2RlXCI6XG4gICAgICAgICAgICAgIGNsb3NlVGV4dChwYXJzZXIpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjZGF0YVwiOlxuICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25jZGF0YVwiLCBwYXJzZXIuY2RhdGEpO1xuICAgICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSBcIlwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uc2NyaXB0XCIsIHBhcnNlci5zY3JpcHQpO1xuICAgICAgICAgICAgICBwYXJzZXIuc2NyaXB0ID0gXCJcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBlcnJvcihwYXJzZXIsIFwiTWF4IGJ1ZmZlciBsZW5ndGggZXhjZWVkZWQ6IFwiICsgYnVmZmVyc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1heEFjdHVhbCA9IE1hdGgubWF4KG1heEFjdHVhbCwgbGVuKTtcbiAgICAgIH1cbiAgICAgIHZhciBtID0gc2F4Mi5NQVhfQlVGRkVSX0xFTkdUSCAtIG1heEFjdHVhbDtcbiAgICAgIHBhcnNlci5idWZmZXJDaGVja1Bvc2l0aW9uID0gbSArIHBhcnNlci5wb3NpdGlvbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xlYXJCdWZmZXJzKHBhcnNlcikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBidWZmZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJzZXJbYnVmZmVyc1tpXV0gPSBcIlwiO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmbHVzaEJ1ZmZlcnMocGFyc2VyKSB7XG4gICAgICBjbG9zZVRleHQocGFyc2VyKTtcbiAgICAgIGlmIChwYXJzZXIuY2RhdGEgIT09IFwiXCIpIHtcbiAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uY2RhdGFcIiwgcGFyc2VyLmNkYXRhKTtcbiAgICAgICAgcGFyc2VyLmNkYXRhID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZXIuc2NyaXB0ICE9PSBcIlwiKSB7XG4gICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbnNjcmlwdFwiLCBwYXJzZXIuc2NyaXB0KTtcbiAgICAgICAgcGFyc2VyLnNjcmlwdCA9IFwiXCI7XG4gICAgICB9XG4gICAgfVxuICAgIFNBWFBhcnNlci5wcm90b3R5cGUgPSB7XG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBlbmQodGhpcyk7XG4gICAgICB9LFxuICAgICAgd3JpdGUsXG4gICAgICByZXN1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZShudWxsKTtcbiAgICAgIH0sXG4gICAgICBmbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZsdXNoQnVmZmVycyh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBTdHJlYW0yO1xuICAgIHRyeSB7XG4gICAgICBTdHJlYW0yID0gc3RyZWFtQnJvd3NlcmlmeS5TdHJlYW07XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIFN0cmVhbTIgPSBmdW5jdGlvbigpIHtcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBzdHJlYW1XcmFwcyA9IHNheDIuRVZFTlRTLmZpbHRlcihmdW5jdGlvbihldikge1xuICAgICAgcmV0dXJuIGV2ICE9PSBcImVycm9yXCIgJiYgZXYgIT09IFwiZW5kXCI7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY3JlYXRlU3RyZWFtKHN0cmljdCwgb3B0KSB7XG4gICAgICByZXR1cm4gbmV3IFNBWFN0cmVhbShzdHJpY3QsIG9wdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFNBWFN0cmVhbShzdHJpY3QsIG9wdCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNBWFN0cmVhbSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTQVhTdHJlYW0oc3RyaWN0LCBvcHQpO1xuICAgICAgfVxuICAgICAgU3RyZWFtMi5hcHBseSh0aGlzKTtcbiAgICAgIHRoaXMuX3BhcnNlciA9IG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpO1xuICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICB0aGlzLl9wYXJzZXIub25lbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbWUuZW1pdChcImVuZFwiKTtcbiAgICAgIH07XG4gICAgICB0aGlzLl9wYXJzZXIub25lcnJvciA9IGZ1bmN0aW9uKGVyKSB7XG4gICAgICAgIG1lLmVtaXQoXCJlcnJvclwiLCBlcik7XG4gICAgICAgIG1lLl9wYXJzZXIuZXJyb3IgPSBudWxsO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX2RlY29kZXIgPSBudWxsO1xuICAgICAgc3RyZWFtV3JhcHMuZm9yRWFjaChmdW5jdGlvbihldikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsIFwib25cIiArIGV2LCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBtZS5fcGFyc2VyW1wib25cIiArIGV2XTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICAgIG1lLnJlbW92ZUFsbExpc3RlbmVycyhldik7XG4gICAgICAgICAgICAgIG1lLl9wYXJzZXJbXCJvblwiICsgZXZdID0gaDtcbiAgICAgICAgICAgICAgcmV0dXJuIGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZS5vbihldiwgaCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgU0FYU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3RyZWFtMi5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBTQVhTdHJlYW1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTQVhTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgaWYgKHR5cGVvZiBCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgQnVmZmVyLmlzQnVmZmVyID09PSBcImZ1bmN0aW9uXCIgJiYgQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgICAgICAgIHZhciBTRCA9IHJlcXVpcmVTdHJpbmdfZGVjb2RlcigpLlN0cmluZ0RlY29kZXI7XG4gICAgICAgICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTRChcInV0ZjhcIik7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX2RlY29kZXIud3JpdGUoZGF0YSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wYXJzZXIud3JpdGUoZGF0YS50b1N0cmluZygpKTtcbiAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgZGF0YSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFNBWFN0cmVhbS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wYXJzZXIuZW5kKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFNBWFN0cmVhbS5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldiwgaGFuZGxlcikge1xuICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgIGlmICghbWUuX3BhcnNlcltcIm9uXCIgKyBldl0gJiYgc3RyZWFtV3JhcHMuaW5kZXhPZihldikgIT09IC0xKSB7XG4gICAgICAgIG1lLl9wYXJzZXJbXCJvblwiICsgZXZdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gW2FyZ3VtZW50c1swXV0gOiBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgIGFyZ3Muc3BsaWNlKDAsIDAsIGV2KTtcbiAgICAgICAgICBtZS5lbWl0LmFwcGx5KG1lLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTdHJlYW0yLnByb3RvdHlwZS5vbi5jYWxsKG1lLCBldiwgaGFuZGxlcik7XG4gICAgfTtcbiAgICB2YXIgQ0RBVEEgPSBcIltDREFUQVtcIjtcbiAgICB2YXIgRE9DVFlQRSA9IFwiRE9DVFlQRVwiO1xuICAgIHZhciBYTUxfTkFNRVNQQUNFID0gXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIjtcbiAgICB2YXIgWE1MTlNfTkFNRVNQQUNFID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiO1xuICAgIHZhciByb290TlMgPSB7IHhtbDogWE1MX05BTUVTUEFDRSwgeG1sbnM6IFhNTE5TX05BTUVTUEFDRSB9O1xuICAgIHZhciBuYW1lU3RhcnQgPSAvWzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS87XG4gICAgdmFyIG5hbWVCb2R5ID0gL1s6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDAuXFxkLV0vO1xuICAgIHZhciBlbnRpdHlTdGFydCA9IC9bIzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS87XG4gICAgdmFyIGVudGl0eUJvZHkgPSAvWyM6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDAuXFxkLV0vO1xuICAgIGZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gICAgICByZXR1cm4gYyA9PT0gXCIgXCIgfHwgYyA9PT0gXCJcXG5cIiB8fCBjID09PSBcIlxcclwiIHx8IGMgPT09IFwiXHRcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNRdW90ZShjKSB7XG4gICAgICByZXR1cm4gYyA9PT0gJ1wiJyB8fCBjID09PSBcIidcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNBdHRyaWJFbmQoYykge1xuICAgICAgcmV0dXJuIGMgPT09IFwiPlwiIHx8IGlzV2hpdGVzcGFjZShjKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNNYXRjaChyZWdleCwgYykge1xuICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoYyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vdE1hdGNoKHJlZ2V4LCBjKSB7XG4gICAgICByZXR1cm4gIWlzTWF0Y2gocmVnZXgsIGMpO1xuICAgIH1cbiAgICB2YXIgUyA9IDA7XG4gICAgc2F4Mi5TVEFURSA9IHtcbiAgICAgIEJFR0lOOiBTKyssXG4gICAgICAvLyBsZWFkaW5nIGJ5dGUgb3JkZXIgbWFyayBvciB3aGl0ZXNwYWNlXG4gICAgICBCRUdJTl9XSElURVNQQUNFOiBTKyssXG4gICAgICAvLyBsZWFkaW5nIHdoaXRlc3BhY2VcbiAgICAgIFRFWFQ6IFMrKyxcbiAgICAgIC8vIGdlbmVyYWwgc3R1ZmZcbiAgICAgIFRFWFRfRU5USVRZOiBTKyssXG4gICAgICAvLyAmYW1wIGFuZCBzdWNoLlxuICAgICAgT1BFTl9XQUtBOiBTKyssXG4gICAgICAvLyA8XG4gICAgICBTR01MX0RFQ0w6IFMrKyxcbiAgICAgIC8vIDwhQkxBUkdcbiAgICAgIFNHTUxfREVDTF9RVU9URUQ6IFMrKyxcbiAgICAgIC8vIDwhQkxBUkcgZm9vIFwiYmFyXG4gICAgICBET0NUWVBFOiBTKyssXG4gICAgICAvLyA8IURPQ1RZUEVcbiAgICAgIERPQ1RZUEVfUVVPVEVEOiBTKyssXG4gICAgICAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcbiAgICAgIERPQ1RZUEVfRFREOiBTKyssXG4gICAgICAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcIiBbIC4uLlxuICAgICAgRE9DVFlQRV9EVERfUVVPVEVEOiBTKyssXG4gICAgICAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcIiBbIFwiZm9vXG4gICAgICBDT01NRU5UX1NUQVJUSU5HOiBTKyssXG4gICAgICAvLyA8IS1cbiAgICAgIENPTU1FTlQ6IFMrKyxcbiAgICAgIC8vIDwhLS1cbiAgICAgIENPTU1FTlRfRU5ESU5HOiBTKyssXG4gICAgICAvLyA8IS0tIGJsYWggLVxuICAgICAgQ09NTUVOVF9FTkRFRDogUysrLFxuICAgICAgLy8gPCEtLSBibGFoIC0tXG4gICAgICBDREFUQTogUysrLFxuICAgICAgLy8gPCFbQ0RBVEFbIHNvbWV0aGluZ1xuICAgICAgQ0RBVEFfRU5ESU5HOiBTKyssXG4gICAgICAvLyBdXG4gICAgICBDREFUQV9FTkRJTkdfMjogUysrLFxuICAgICAgLy8gXV1cbiAgICAgIFBST0NfSU5TVDogUysrLFxuICAgICAgLy8gPD9oaVxuICAgICAgUFJPQ19JTlNUX0JPRFk6IFMrKyxcbiAgICAgIC8vIDw/aGkgdGhlcmVcbiAgICAgIFBST0NfSU5TVF9FTkRJTkc6IFMrKyxcbiAgICAgIC8vIDw/aGkgXCJ0aGVyZVwiID9cbiAgICAgIE9QRU5fVEFHOiBTKyssXG4gICAgICAvLyA8c3Ryb25nXG4gICAgICBPUEVOX1RBR19TTEFTSDogUysrLFxuICAgICAgLy8gPHN0cm9uZyAvXG4gICAgICBBVFRSSUI6IFMrKyxcbiAgICAgIC8vIDxhXG4gICAgICBBVFRSSUJfTkFNRTogUysrLFxuICAgICAgLy8gPGEgZm9vXG4gICAgICBBVFRSSUJfTkFNRV9TQVdfV0hJVEU6IFMrKyxcbiAgICAgIC8vIDxhIGZvbyBfXG4gICAgICBBVFRSSUJfVkFMVUU6IFMrKyxcbiAgICAgIC8vIDxhIGZvbz1cbiAgICAgIEFUVFJJQl9WQUxVRV9RVU9URUQ6IFMrKyxcbiAgICAgIC8vIDxhIGZvbz1cImJhclxuICAgICAgQVRUUklCX1ZBTFVFX0NMT1NFRDogUysrLFxuICAgICAgLy8gPGEgZm9vPVwiYmFyXCJcbiAgICAgIEFUVFJJQl9WQUxVRV9VTlFVT1RFRDogUysrLFxuICAgICAgLy8gPGEgZm9vPWJhclxuICAgICAgQVRUUklCX1ZBTFVFX0VOVElUWV9ROiBTKyssXG4gICAgICAvLyA8Zm9vIGJhcj1cIiZxdW90O1wiXG4gICAgICBBVFRSSUJfVkFMVUVfRU5USVRZX1U6IFMrKyxcbiAgICAgIC8vIDxmb28gYmFyPSZxdW90XG4gICAgICBDTE9TRV9UQUc6IFMrKyxcbiAgICAgIC8vIDwvYVxuICAgICAgQ0xPU0VfVEFHX1NBV19XSElURTogUysrLFxuICAgICAgLy8gPC9hICAgPlxuICAgICAgU0NSSVBUOiBTKyssXG4gICAgICAvLyA8c2NyaXB0PiAuLi5cbiAgICAgIFNDUklQVF9FTkRJTkc6IFMrK1xuICAgICAgLy8gPHNjcmlwdD4gLi4uIDxcbiAgICB9O1xuICAgIHNheDIuWE1MX0VOVElUSUVTID0ge1xuICAgICAgXCJhbXBcIjogXCImXCIsXG4gICAgICBcImd0XCI6IFwiPlwiLFxuICAgICAgXCJsdFwiOiBcIjxcIixcbiAgICAgIFwicXVvdFwiOiAnXCInLFxuICAgICAgXCJhcG9zXCI6IFwiJ1wiXG4gICAgfTtcbiAgICBzYXgyLkVOVElUSUVTID0ge1xuICAgICAgXCJhbXBcIjogXCImXCIsXG4gICAgICBcImd0XCI6IFwiPlwiLFxuICAgICAgXCJsdFwiOiBcIjxcIixcbiAgICAgIFwicXVvdFwiOiAnXCInLFxuICAgICAgXCJhcG9zXCI6IFwiJ1wiLFxuICAgICAgXCJBRWxpZ1wiOiAxOTgsXG4gICAgICBcIkFhY3V0ZVwiOiAxOTMsXG4gICAgICBcIkFjaXJjXCI6IDE5NCxcbiAgICAgIFwiQWdyYXZlXCI6IDE5MixcbiAgICAgIFwiQXJpbmdcIjogMTk3LFxuICAgICAgXCJBdGlsZGVcIjogMTk1LFxuICAgICAgXCJBdW1sXCI6IDE5NixcbiAgICAgIFwiQ2NlZGlsXCI6IDE5OSxcbiAgICAgIFwiRVRIXCI6IDIwOCxcbiAgICAgIFwiRWFjdXRlXCI6IDIwMSxcbiAgICAgIFwiRWNpcmNcIjogMjAyLFxuICAgICAgXCJFZ3JhdmVcIjogMjAwLFxuICAgICAgXCJFdW1sXCI6IDIwMyxcbiAgICAgIFwiSWFjdXRlXCI6IDIwNSxcbiAgICAgIFwiSWNpcmNcIjogMjA2LFxuICAgICAgXCJJZ3JhdmVcIjogMjA0LFxuICAgICAgXCJJdW1sXCI6IDIwNyxcbiAgICAgIFwiTnRpbGRlXCI6IDIwOSxcbiAgICAgIFwiT2FjdXRlXCI6IDIxMSxcbiAgICAgIFwiT2NpcmNcIjogMjEyLFxuICAgICAgXCJPZ3JhdmVcIjogMjEwLFxuICAgICAgXCJPc2xhc2hcIjogMjE2LFxuICAgICAgXCJPdGlsZGVcIjogMjEzLFxuICAgICAgXCJPdW1sXCI6IDIxNCxcbiAgICAgIFwiVEhPUk5cIjogMjIyLFxuICAgICAgXCJVYWN1dGVcIjogMjE4LFxuICAgICAgXCJVY2lyY1wiOiAyMTksXG4gICAgICBcIlVncmF2ZVwiOiAyMTcsXG4gICAgICBcIlV1bWxcIjogMjIwLFxuICAgICAgXCJZYWN1dGVcIjogMjIxLFxuICAgICAgXCJhYWN1dGVcIjogMjI1LFxuICAgICAgXCJhY2lyY1wiOiAyMjYsXG4gICAgICBcImFlbGlnXCI6IDIzMCxcbiAgICAgIFwiYWdyYXZlXCI6IDIyNCxcbiAgICAgIFwiYXJpbmdcIjogMjI5LFxuICAgICAgXCJhdGlsZGVcIjogMjI3LFxuICAgICAgXCJhdW1sXCI6IDIyOCxcbiAgICAgIFwiY2NlZGlsXCI6IDIzMSxcbiAgICAgIFwiZWFjdXRlXCI6IDIzMyxcbiAgICAgIFwiZWNpcmNcIjogMjM0LFxuICAgICAgXCJlZ3JhdmVcIjogMjMyLFxuICAgICAgXCJldGhcIjogMjQwLFxuICAgICAgXCJldW1sXCI6IDIzNSxcbiAgICAgIFwiaWFjdXRlXCI6IDIzNyxcbiAgICAgIFwiaWNpcmNcIjogMjM4LFxuICAgICAgXCJpZ3JhdmVcIjogMjM2LFxuICAgICAgXCJpdW1sXCI6IDIzOSxcbiAgICAgIFwibnRpbGRlXCI6IDI0MSxcbiAgICAgIFwib2FjdXRlXCI6IDI0MyxcbiAgICAgIFwib2NpcmNcIjogMjQ0LFxuICAgICAgXCJvZ3JhdmVcIjogMjQyLFxuICAgICAgXCJvc2xhc2hcIjogMjQ4LFxuICAgICAgXCJvdGlsZGVcIjogMjQ1LFxuICAgICAgXCJvdW1sXCI6IDI0NixcbiAgICAgIFwic3psaWdcIjogMjIzLFxuICAgICAgXCJ0aG9yblwiOiAyNTQsXG4gICAgICBcInVhY3V0ZVwiOiAyNTAsXG4gICAgICBcInVjaXJjXCI6IDI1MSxcbiAgICAgIFwidWdyYXZlXCI6IDI0OSxcbiAgICAgIFwidXVtbFwiOiAyNTIsXG4gICAgICBcInlhY3V0ZVwiOiAyNTMsXG4gICAgICBcInl1bWxcIjogMjU1LFxuICAgICAgXCJjb3B5XCI6IDE2OSxcbiAgICAgIFwicmVnXCI6IDE3NCxcbiAgICAgIFwibmJzcFwiOiAxNjAsXG4gICAgICBcImlleGNsXCI6IDE2MSxcbiAgICAgIFwiY2VudFwiOiAxNjIsXG4gICAgICBcInBvdW5kXCI6IDE2MyxcbiAgICAgIFwiY3VycmVuXCI6IDE2NCxcbiAgICAgIFwieWVuXCI6IDE2NSxcbiAgICAgIFwiYnJ2YmFyXCI6IDE2NixcbiAgICAgIFwic2VjdFwiOiAxNjcsXG4gICAgICBcInVtbFwiOiAxNjgsXG4gICAgICBcIm9yZGZcIjogMTcwLFxuICAgICAgXCJsYXF1b1wiOiAxNzEsXG4gICAgICBcIm5vdFwiOiAxNzIsXG4gICAgICBcInNoeVwiOiAxNzMsXG4gICAgICBcIm1hY3JcIjogMTc1LFxuICAgICAgXCJkZWdcIjogMTc2LFxuICAgICAgXCJwbHVzbW5cIjogMTc3LFxuICAgICAgXCJzdXAxXCI6IDE4NSxcbiAgICAgIFwic3VwMlwiOiAxNzgsXG4gICAgICBcInN1cDNcIjogMTc5LFxuICAgICAgXCJhY3V0ZVwiOiAxODAsXG4gICAgICBcIm1pY3JvXCI6IDE4MSxcbiAgICAgIFwicGFyYVwiOiAxODIsXG4gICAgICBcIm1pZGRvdFwiOiAxODMsXG4gICAgICBcImNlZGlsXCI6IDE4NCxcbiAgICAgIFwib3JkbVwiOiAxODYsXG4gICAgICBcInJhcXVvXCI6IDE4NyxcbiAgICAgIFwiZnJhYzE0XCI6IDE4OCxcbiAgICAgIFwiZnJhYzEyXCI6IDE4OSxcbiAgICAgIFwiZnJhYzM0XCI6IDE5MCxcbiAgICAgIFwiaXF1ZXN0XCI6IDE5MSxcbiAgICAgIFwidGltZXNcIjogMjE1LFxuICAgICAgXCJkaXZpZGVcIjogMjQ3LFxuICAgICAgXCJPRWxpZ1wiOiAzMzgsXG4gICAgICBcIm9lbGlnXCI6IDMzOSxcbiAgICAgIFwiU2Nhcm9uXCI6IDM1MixcbiAgICAgIFwic2Nhcm9uXCI6IDM1MyxcbiAgICAgIFwiWXVtbFwiOiAzNzYsXG4gICAgICBcImZub2ZcIjogNDAyLFxuICAgICAgXCJjaXJjXCI6IDcxMCxcbiAgICAgIFwidGlsZGVcIjogNzMyLFxuICAgICAgXCJBbHBoYVwiOiA5MTMsXG4gICAgICBcIkJldGFcIjogOTE0LFxuICAgICAgXCJHYW1tYVwiOiA5MTUsXG4gICAgICBcIkRlbHRhXCI6IDkxNixcbiAgICAgIFwiRXBzaWxvblwiOiA5MTcsXG4gICAgICBcIlpldGFcIjogOTE4LFxuICAgICAgXCJFdGFcIjogOTE5LFxuICAgICAgXCJUaGV0YVwiOiA5MjAsXG4gICAgICBcIklvdGFcIjogOTIxLFxuICAgICAgXCJLYXBwYVwiOiA5MjIsXG4gICAgICBcIkxhbWJkYVwiOiA5MjMsXG4gICAgICBcIk11XCI6IDkyNCxcbiAgICAgIFwiTnVcIjogOTI1LFxuICAgICAgXCJYaVwiOiA5MjYsXG4gICAgICBcIk9taWNyb25cIjogOTI3LFxuICAgICAgXCJQaVwiOiA5MjgsXG4gICAgICBcIlJob1wiOiA5MjksXG4gICAgICBcIlNpZ21hXCI6IDkzMSxcbiAgICAgIFwiVGF1XCI6IDkzMixcbiAgICAgIFwiVXBzaWxvblwiOiA5MzMsXG4gICAgICBcIlBoaVwiOiA5MzQsXG4gICAgICBcIkNoaVwiOiA5MzUsXG4gICAgICBcIlBzaVwiOiA5MzYsXG4gICAgICBcIk9tZWdhXCI6IDkzNyxcbiAgICAgIFwiYWxwaGFcIjogOTQ1LFxuICAgICAgXCJiZXRhXCI6IDk0NixcbiAgICAgIFwiZ2FtbWFcIjogOTQ3LFxuICAgICAgXCJkZWx0YVwiOiA5NDgsXG4gICAgICBcImVwc2lsb25cIjogOTQ5LFxuICAgICAgXCJ6ZXRhXCI6IDk1MCxcbiAgICAgIFwiZXRhXCI6IDk1MSxcbiAgICAgIFwidGhldGFcIjogOTUyLFxuICAgICAgXCJpb3RhXCI6IDk1MyxcbiAgICAgIFwia2FwcGFcIjogOTU0LFxuICAgICAgXCJsYW1iZGFcIjogOTU1LFxuICAgICAgXCJtdVwiOiA5NTYsXG4gICAgICBcIm51XCI6IDk1NyxcbiAgICAgIFwieGlcIjogOTU4LFxuICAgICAgXCJvbWljcm9uXCI6IDk1OSxcbiAgICAgIFwicGlcIjogOTYwLFxuICAgICAgXCJyaG9cIjogOTYxLFxuICAgICAgXCJzaWdtYWZcIjogOTYyLFxuICAgICAgXCJzaWdtYVwiOiA5NjMsXG4gICAgICBcInRhdVwiOiA5NjQsXG4gICAgICBcInVwc2lsb25cIjogOTY1LFxuICAgICAgXCJwaGlcIjogOTY2LFxuICAgICAgXCJjaGlcIjogOTY3LFxuICAgICAgXCJwc2lcIjogOTY4LFxuICAgICAgXCJvbWVnYVwiOiA5NjksXG4gICAgICBcInRoZXRhc3ltXCI6IDk3NyxcbiAgICAgIFwidXBzaWhcIjogOTc4LFxuICAgICAgXCJwaXZcIjogOTgyLFxuICAgICAgXCJlbnNwXCI6IDgxOTQsXG4gICAgICBcImVtc3BcIjogODE5NSxcbiAgICAgIFwidGhpbnNwXCI6IDgyMDEsXG4gICAgICBcInp3bmpcIjogODIwNCxcbiAgICAgIFwiendqXCI6IDgyMDUsXG4gICAgICBcImxybVwiOiA4MjA2LFxuICAgICAgXCJybG1cIjogODIwNyxcbiAgICAgIFwibmRhc2hcIjogODIxMSxcbiAgICAgIFwibWRhc2hcIjogODIxMixcbiAgICAgIFwibHNxdW9cIjogODIxNixcbiAgICAgIFwicnNxdW9cIjogODIxNyxcbiAgICAgIFwic2JxdW9cIjogODIxOCxcbiAgICAgIFwibGRxdW9cIjogODIyMCxcbiAgICAgIFwicmRxdW9cIjogODIyMSxcbiAgICAgIFwiYmRxdW9cIjogODIyMixcbiAgICAgIFwiZGFnZ2VyXCI6IDgyMjQsXG4gICAgICBcIkRhZ2dlclwiOiA4MjI1LFxuICAgICAgXCJidWxsXCI6IDgyMjYsXG4gICAgICBcImhlbGxpcFwiOiA4MjMwLFxuICAgICAgXCJwZXJtaWxcIjogODI0MCxcbiAgICAgIFwicHJpbWVcIjogODI0MixcbiAgICAgIFwiUHJpbWVcIjogODI0MyxcbiAgICAgIFwibHNhcXVvXCI6IDgyNDksXG4gICAgICBcInJzYXF1b1wiOiA4MjUwLFxuICAgICAgXCJvbGluZVwiOiA4MjU0LFxuICAgICAgXCJmcmFzbFwiOiA4MjYwLFxuICAgICAgXCJldXJvXCI6IDgzNjQsXG4gICAgICBcImltYWdlXCI6IDg0NjUsXG4gICAgICBcIndlaWVycFwiOiA4NDcyLFxuICAgICAgXCJyZWFsXCI6IDg0NzYsXG4gICAgICBcInRyYWRlXCI6IDg0ODIsXG4gICAgICBcImFsZWZzeW1cIjogODUwMSxcbiAgICAgIFwibGFyclwiOiA4NTkyLFxuICAgICAgXCJ1YXJyXCI6IDg1OTMsXG4gICAgICBcInJhcnJcIjogODU5NCxcbiAgICAgIFwiZGFyclwiOiA4NTk1LFxuICAgICAgXCJoYXJyXCI6IDg1OTYsXG4gICAgICBcImNyYXJyXCI6IDg2MjksXG4gICAgICBcImxBcnJcIjogODY1NixcbiAgICAgIFwidUFyclwiOiA4NjU3LFxuICAgICAgXCJyQXJyXCI6IDg2NTgsXG4gICAgICBcImRBcnJcIjogODY1OSxcbiAgICAgIFwiaEFyclwiOiA4NjYwLFxuICAgICAgXCJmb3JhbGxcIjogODcwNCxcbiAgICAgIFwicGFydFwiOiA4NzA2LFxuICAgICAgXCJleGlzdFwiOiA4NzA3LFxuICAgICAgXCJlbXB0eVwiOiA4NzA5LFxuICAgICAgXCJuYWJsYVwiOiA4NzExLFxuICAgICAgXCJpc2luXCI6IDg3MTIsXG4gICAgICBcIm5vdGluXCI6IDg3MTMsXG4gICAgICBcIm5pXCI6IDg3MTUsXG4gICAgICBcInByb2RcIjogODcxOSxcbiAgICAgIFwic3VtXCI6IDg3MjEsXG4gICAgICBcIm1pbnVzXCI6IDg3MjIsXG4gICAgICBcImxvd2FzdFwiOiA4NzI3LFxuICAgICAgXCJyYWRpY1wiOiA4NzMwLFxuICAgICAgXCJwcm9wXCI6IDg3MzMsXG4gICAgICBcImluZmluXCI6IDg3MzQsXG4gICAgICBcImFuZ1wiOiA4NzM2LFxuICAgICAgXCJhbmRcIjogODc0MyxcbiAgICAgIFwib3JcIjogODc0NCxcbiAgICAgIFwiY2FwXCI6IDg3NDUsXG4gICAgICBcImN1cFwiOiA4NzQ2LFxuICAgICAgXCJpbnRcIjogODc0NyxcbiAgICAgIFwidGhlcmU0XCI6IDg3NTYsXG4gICAgICBcInNpbVwiOiA4NzY0LFxuICAgICAgXCJjb25nXCI6IDg3NzMsXG4gICAgICBcImFzeW1wXCI6IDg3NzYsXG4gICAgICBcIm5lXCI6IDg4MDAsXG4gICAgICBcImVxdWl2XCI6IDg4MDEsXG4gICAgICBcImxlXCI6IDg4MDQsXG4gICAgICBcImdlXCI6IDg4MDUsXG4gICAgICBcInN1YlwiOiA4ODM0LFxuICAgICAgXCJzdXBcIjogODgzNSxcbiAgICAgIFwibnN1YlwiOiA4ODM2LFxuICAgICAgXCJzdWJlXCI6IDg4MzgsXG4gICAgICBcInN1cGVcIjogODgzOSxcbiAgICAgIFwib3BsdXNcIjogODg1MyxcbiAgICAgIFwib3RpbWVzXCI6IDg4NTUsXG4gICAgICBcInBlcnBcIjogODg2OSxcbiAgICAgIFwic2RvdFwiOiA4OTAxLFxuICAgICAgXCJsY2VpbFwiOiA4OTY4LFxuICAgICAgXCJyY2VpbFwiOiA4OTY5LFxuICAgICAgXCJsZmxvb3JcIjogODk3MCxcbiAgICAgIFwicmZsb29yXCI6IDg5NzEsXG4gICAgICBcImxhbmdcIjogOTAwMSxcbiAgICAgIFwicmFuZ1wiOiA5MDAyLFxuICAgICAgXCJsb3pcIjogOTY3NCxcbiAgICAgIFwic3BhZGVzXCI6IDk4MjQsXG4gICAgICBcImNsdWJzXCI6IDk4MjcsXG4gICAgICBcImhlYXJ0c1wiOiA5ODI5LFxuICAgICAgXCJkaWFtc1wiOiA5ODMwXG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyhzYXgyLkVOVElUSUVTKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGUgPSBzYXgyLkVOVElUSUVTW2tleV07XG4gICAgICB2YXIgczIgPSB0eXBlb2YgZSA9PT0gXCJudW1iZXJcIiA/IFN0cmluZy5mcm9tQ2hhckNvZGUoZSkgOiBlO1xuICAgICAgc2F4Mi5FTlRJVElFU1trZXldID0gczI7XG4gICAgfSk7XG4gICAgZm9yICh2YXIgcyBpbiBzYXgyLlNUQVRFKSB7XG4gICAgICBzYXgyLlNUQVRFW3NheDIuU1RBVEVbc11dID0gcztcbiAgICB9XG4gICAgUyA9IHNheDIuU1RBVEU7XG4gICAgZnVuY3Rpb24gZW1pdDIocGFyc2VyLCBldmVudCwgZGF0YSkge1xuICAgICAgcGFyc2VyW2V2ZW50XSAmJiBwYXJzZXJbZXZlbnRdKGRhdGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbWl0Tm9kZShwYXJzZXIsIG5vZGVUeXBlLCBkYXRhKSB7XG4gICAgICBpZiAocGFyc2VyLnRleHROb2RlKVxuICAgICAgICBjbG9zZVRleHQocGFyc2VyKTtcbiAgICAgIGVtaXQyKHBhcnNlciwgbm9kZVR5cGUsIGRhdGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZVRleHQocGFyc2VyKSB7XG4gICAgICBwYXJzZXIudGV4dE5vZGUgPSB0ZXh0b3B0cyhwYXJzZXIub3B0LCBwYXJzZXIudGV4dE5vZGUpO1xuICAgICAgaWYgKHBhcnNlci50ZXh0Tm9kZSlcbiAgICAgICAgZW1pdDIocGFyc2VyLCBcIm9udGV4dFwiLCBwYXJzZXIudGV4dE5vZGUpO1xuICAgICAgcGFyc2VyLnRleHROb2RlID0gXCJcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGV4dG9wdHMob3B0LCB0ZXh0KSB7XG4gICAgICBpZiAob3B0LnRyaW0pXG4gICAgICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcbiAgICAgIGlmIChvcHQubm9ybWFsaXplKVxuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBlcnJvcihwYXJzZXIsIGVyKSB7XG4gICAgICBjbG9zZVRleHQocGFyc2VyKTtcbiAgICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgICBlciArPSBcIlxcbkxpbmU6IFwiICsgcGFyc2VyLmxpbmUgKyBcIlxcbkNvbHVtbjogXCIgKyBwYXJzZXIuY29sdW1uICsgXCJcXG5DaGFyOiBcIiArIHBhcnNlci5jO1xuICAgICAgfVxuICAgICAgZXIgPSBuZXcgRXJyb3IoZXIpO1xuICAgICAgcGFyc2VyLmVycm9yID0gZXI7XG4gICAgICBlbWl0MihwYXJzZXIsIFwib25lcnJvclwiLCBlcik7XG4gICAgICByZXR1cm4gcGFyc2VyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmQocGFyc2VyKSB7XG4gICAgICBpZiAocGFyc2VyLnNhd1Jvb3QgJiYgIXBhcnNlci5jbG9zZWRSb290KVxuICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJVbmNsb3NlZCByb290IHRhZ1wiKTtcbiAgICAgIGlmIChwYXJzZXIuc3RhdGUgIT09IFMuQkVHSU4gJiYgcGFyc2VyLnN0YXRlICE9PSBTLkJFR0lOX1dISVRFU1BBQ0UgJiYgcGFyc2VyLnN0YXRlICE9PSBTLlRFWFQpIHtcbiAgICAgICAgZXJyb3IocGFyc2VyLCBcIlVuZXhwZWN0ZWQgZW5kXCIpO1xuICAgICAgfVxuICAgICAgY2xvc2VUZXh0KHBhcnNlcik7XG4gICAgICBwYXJzZXIuYyA9IFwiXCI7XG4gICAgICBwYXJzZXIuY2xvc2VkID0gdHJ1ZTtcbiAgICAgIGVtaXQyKHBhcnNlciwgXCJvbmVuZFwiKTtcbiAgICAgIFNBWFBhcnNlci5jYWxsKHBhcnNlciwgcGFyc2VyLnN0cmljdCwgcGFyc2VyLm9wdCk7XG4gICAgICByZXR1cm4gcGFyc2VyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdHJpY3RGYWlsKHBhcnNlciwgbWVzc2FnZSkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJzZXIgIT09IFwib2JqZWN0XCIgfHwgIShwYXJzZXIgaW5zdGFuY2VvZiBTQVhQYXJzZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBjYWxsIHRvIHN0cmljdEZhaWxcIik7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLnN0cmljdCkge1xuICAgICAgICBlcnJvcihwYXJzZXIsIG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBuZXdUYWcocGFyc2VyKSB7XG4gICAgICBpZiAoIXBhcnNlci5zdHJpY3QpXG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLnRhZ05hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKTtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJzZXIudGFnc1twYXJzZXIudGFncy5sZW5ndGggLSAxXSB8fCBwYXJzZXI7XG4gICAgICB2YXIgdGFnID0gcGFyc2VyLnRhZyA9IHsgbmFtZTogcGFyc2VyLnRhZ05hbWUsIGF0dHJpYnV0ZXM6IHt9IH07XG4gICAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgICB0YWcubnMgPSBwYXJlbnQubnM7XG4gICAgICB9XG4gICAgICBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGggPSAwO1xuICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9ub3BlbnRhZ3N0YXJ0XCIsIHRhZyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHFuYW1lKG5hbWUsIGF0dHJpYnV0ZTIpIHtcbiAgICAgIHZhciBpID0gbmFtZS5pbmRleE9mKFwiOlwiKTtcbiAgICAgIHZhciBxdWFsTmFtZSA9IGkgPCAwID8gW1wiXCIsIG5hbWVdIDogbmFtZS5zcGxpdChcIjpcIik7XG4gICAgICB2YXIgcHJlZml4ID0gcXVhbE5hbWVbMF07XG4gICAgICB2YXIgbG9jYWwgPSBxdWFsTmFtZVsxXTtcbiAgICAgIGlmIChhdHRyaWJ1dGUyICYmIG5hbWUgPT09IFwieG1sbnNcIikge1xuICAgICAgICBwcmVmaXggPSBcInhtbG5zXCI7XG4gICAgICAgIGxvY2FsID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHByZWZpeCwgbG9jYWwgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXR0cmliKHBhcnNlcikge1xuICAgICAgaWYgKCFwYXJzZXIuc3RyaWN0KSB7XG4gICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYk5hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZXIuYXR0cmliTGlzdC5pbmRleE9mKHBhcnNlci5hdHRyaWJOYW1lKSAhPT0gLTEgfHwgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KHBhcnNlci5hdHRyaWJOYW1lKSkge1xuICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9IFwiXCI7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICAgIHZhciBxbiA9IHFuYW1lKHBhcnNlci5hdHRyaWJOYW1lLCB0cnVlKTtcbiAgICAgICAgdmFyIHByZWZpeCA9IHFuLnByZWZpeDtcbiAgICAgICAgdmFyIGxvY2FsID0gcW4ubG9jYWw7XG4gICAgICAgIGlmIChwcmVmaXggPT09IFwieG1sbnNcIikge1xuICAgICAgICAgIGlmIChsb2NhbCA9PT0gXCJ4bWxcIiAmJiBwYXJzZXIuYXR0cmliVmFsdWUgIT09IFhNTF9OQU1FU1BBQ0UpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwoXG4gICAgICAgICAgICAgIHBhcnNlcixcbiAgICAgICAgICAgICAgXCJ4bWw6IHByZWZpeCBtdXN0IGJlIGJvdW5kIHRvIFwiICsgWE1MX05BTUVTUEFDRSArIFwiXFxuQWN0dWFsOiBcIiArIHBhcnNlci5hdHRyaWJWYWx1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsID09PSBcInhtbG5zXCIgJiYgcGFyc2VyLmF0dHJpYlZhbHVlICE9PSBYTUxOU19OQU1FU1BBQ0UpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwoXG4gICAgICAgICAgICAgIHBhcnNlcixcbiAgICAgICAgICAgICAgXCJ4bWxuczogcHJlZml4IG11c3QgYmUgYm91bmQgdG8gXCIgKyBYTUxOU19OQU1FU1BBQ0UgKyBcIlxcbkFjdHVhbDogXCIgKyBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlcjtcbiAgICAgICAgICAgIGlmICh0YWcubnMgPT09IHBhcmVudC5ucykge1xuICAgICAgICAgICAgICB0YWcubnMgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWcubnNbbG9jYWxdID0gcGFyc2VyLmF0dHJpYlZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJzZXIuYXR0cmliTGlzdC5wdXNoKFtwYXJzZXIuYXR0cmliTmFtZSwgcGFyc2VyLmF0dHJpYlZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXNbcGFyc2VyLmF0dHJpYk5hbWVdID0gcGFyc2VyLmF0dHJpYlZhbHVlO1xuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25hdHRyaWJ1dGVcIiwge1xuICAgICAgICAgIG5hbWU6IHBhcnNlci5hdHRyaWJOYW1lLFxuICAgICAgICAgIHZhbHVlOiBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9wZW5UYWcocGFyc2VyLCBzZWxmQ2xvc2luZykge1xuICAgICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgICAgdmFyIHRhZyA9IHBhcnNlci50YWc7XG4gICAgICAgIHZhciBxbiA9IHFuYW1lKHBhcnNlci50YWdOYW1lKTtcbiAgICAgICAgdGFnLnByZWZpeCA9IHFuLnByZWZpeDtcbiAgICAgICAgdGFnLmxvY2FsID0gcW4ubG9jYWw7XG4gICAgICAgIHRhZy51cmkgPSB0YWcubnNbcW4ucHJlZml4XSB8fCBcIlwiO1xuICAgICAgICBpZiAodGFnLnByZWZpeCAmJiAhdGFnLnVyaSkge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIlVuYm91bmQgbmFtZXNwYWNlIHByZWZpeDogXCIgKyBKU09OLnN0cmluZ2lmeShwYXJzZXIudGFnTmFtZSkpO1xuICAgICAgICAgIHRhZy51cmkgPSBxbi5wcmVmaXg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlcjtcbiAgICAgICAgaWYgKHRhZy5ucyAmJiBwYXJlbnQubnMgIT09IHRhZy5ucykge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25vcGVubmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgICAgcHJlZml4OiBwLFxuICAgICAgICAgICAgICB1cmk6IHRhZy5uc1twXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIgbnYgPSBwYXJzZXIuYXR0cmliTGlzdFtpXTtcbiAgICAgICAgICB2YXIgbmFtZSA9IG52WzBdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG52WzFdO1xuICAgICAgICAgIHZhciBxdWFsTmFtZSA9IHFuYW1lKG5hbWUsIHRydWUpO1xuICAgICAgICAgIHZhciBwcmVmaXggPSBxdWFsTmFtZS5wcmVmaXg7XG4gICAgICAgICAgdmFyIGxvY2FsID0gcXVhbE5hbWUubG9jYWw7XG4gICAgICAgICAgdmFyIHVyaSA9IHByZWZpeCA9PT0gXCJcIiA/IFwiXCIgOiB0YWcubnNbcHJlZml4XSB8fCBcIlwiO1xuICAgICAgICAgIHZhciBhID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgbG9jYWwsXG4gICAgICAgICAgICB1cmlcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChwcmVmaXggJiYgcHJlZml4ICE9PSBcInhtbG5zXCIgJiYgIXVyaSkge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiVW5ib3VuZCBuYW1lc3BhY2UgcHJlZml4OiBcIiArIEpTT04uc3RyaW5naWZ5KHByZWZpeCkpO1xuICAgICAgICAgICAgYS51cmkgPSBwcmVmaXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1tuYW1lXSA9IGE7XG4gICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uYXR0cmlidXRlXCIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgICBwYXJzZXIudGFnLmlzU2VsZkNsb3NpbmcgPSAhIXNlbGZDbG9zaW5nO1xuICAgICAgcGFyc2VyLnNhd1Jvb3QgPSB0cnVlO1xuICAgICAgcGFyc2VyLnRhZ3MucHVzaChwYXJzZXIudGFnKTtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbm9wZW50YWdcIiwgcGFyc2VyLnRhZyk7XG4gICAgICBpZiAoIXNlbGZDbG9zaW5nKSB7XG4gICAgICAgIGlmICghcGFyc2VyLm5vc2NyaXB0ICYmIHBhcnNlci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VyLnRhZyA9IG51bGw7XG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gcGFyc2VyLmF0dHJpYlZhbHVlID0gXCJcIjtcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlVGFnKHBhcnNlcikge1xuICAgICAgaWYgKCFwYXJzZXIudGFnTmFtZSkge1xuICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJXZWlyZCBlbXB0eSBjbG9zZSB0YWcuXCIpO1xuICAgICAgICBwYXJzZXIudGV4dE5vZGUgKz0gXCI8Lz5cIjtcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgICBpZiAocGFyc2VyLnRhZ05hbWUgIT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IFwiPC9cIiArIHBhcnNlci50YWdOYW1lICsgXCI+XCI7XG4gICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSBcIlwiO1xuICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25zY3JpcHRcIiwgcGFyc2VyLnNjcmlwdCk7XG4gICAgICAgIHBhcnNlci5zY3JpcHQgPSBcIlwiO1xuICAgICAgfVxuICAgICAgdmFyIHQgPSBwYXJzZXIudGFncy5sZW5ndGg7XG4gICAgICB2YXIgdGFnTmFtZSA9IHBhcnNlci50YWdOYW1lO1xuICAgICAgaWYgKCFwYXJzZXIuc3RyaWN0KSB7XG4gICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lW3BhcnNlci5sb29zZUNhc2VdKCk7XG4gICAgICB9XG4gICAgICB2YXIgY2xvc2VUbyA9IHRhZ05hbWU7XG4gICAgICB3aGlsZSAodC0tKSB7XG4gICAgICAgIHZhciBjbG9zZSA9IHBhcnNlci50YWdzW3RdO1xuICAgICAgICBpZiAoY2xvc2UubmFtZSAhPT0gY2xvc2VUbykge1xuICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIlVuZXhwZWN0ZWQgY2xvc2UgdGFnXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodCA8IDApIHtcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiVW5tYXRjaGVkIGNsb3NpbmcgdGFnOiBcIiArIHBhcnNlci50YWdOYW1lKTtcbiAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IFwiPC9cIiArIHBhcnNlci50YWdOYW1lICsgXCI+XCI7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGFyc2VyLnRhZ05hbWUgPSB0YWdOYW1lO1xuICAgICAgdmFyIHMyID0gcGFyc2VyLnRhZ3MubGVuZ3RoO1xuICAgICAgd2hpbGUgKHMyLS0gPiB0KSB7XG4gICAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnID0gcGFyc2VyLnRhZ3MucG9wKCk7XG4gICAgICAgIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLnRhZy5uYW1lO1xuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25jbG9zZXRhZ1wiLCBwYXJzZXIudGFnTmFtZSk7XG4gICAgICAgIHZhciB4ID0ge307XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGFnLm5zKSB7XG4gICAgICAgICAgeFtpXSA9IHRhZy5uc1tpXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyO1xuICAgICAgICBpZiAocGFyc2VyLm9wdC54bWxucyAmJiB0YWcubnMgIT09IHBhcmVudC5ucykge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHRhZy5ucykuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRhZy5uc1twXTtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbmNsb3NlbmFtZXNwYWNlXCIsIHsgcHJlZml4OiBwLCB1cmk6IG4gfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0ID09PSAwKVxuICAgICAgICBwYXJzZXIuY2xvc2VkUm9vdCA9IHRydWU7XG4gICAgICBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9IHBhcnNlci5hdHRyaWJOYW1lID0gXCJcIjtcbiAgICAgIHBhcnNlci5hdHRyaWJMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlRW50aXR5KHBhcnNlcikge1xuICAgICAgdmFyIGVudGl0eSA9IHBhcnNlci5lbnRpdHk7XG4gICAgICB2YXIgZW50aXR5TEMgPSBlbnRpdHkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBudW07XG4gICAgICB2YXIgbnVtU3RyID0gXCJcIjtcbiAgICAgIGlmIChwYXJzZXIuRU5USVRJRVNbZW50aXR5XSkge1xuICAgICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eV07XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXSkge1xuICAgICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXTtcbiAgICAgIH1cbiAgICAgIGVudGl0eSA9IGVudGl0eUxDO1xuICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICAgIGlmIChlbnRpdHkuY2hhckF0KDEpID09PSBcInhcIikge1xuICAgICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgyKTtcbiAgICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDE2KTtcbiAgICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgxKTtcbiAgICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDEwKTtcbiAgICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbnRpdHkgPSBlbnRpdHkucmVwbGFjZSgvXjArLywgXCJcIik7XG4gICAgICBpZiAoaXNOYU4obnVtKSB8fCBudW1TdHIudG9Mb3dlckNhc2UoKSAhPT0gZW50aXR5KSB7XG4gICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgY2hhcmFjdGVyIGVudGl0eVwiKTtcbiAgICAgICAgcmV0dXJuIFwiJlwiICsgcGFyc2VyLmVudGl0eSArIFwiO1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KG51bSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJlZ2luV2hpdGVTcGFjZShwYXJzZXIsIGMpIHtcbiAgICAgIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fV0FLQTtcbiAgICAgICAgcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gPSBwYXJzZXIucG9zaXRpb247XG4gICAgICB9IGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiTm9uLXdoaXRlc3BhY2UgYmVmb3JlIGZpcnN0IHRhZy5cIik7XG4gICAgICAgIHBhcnNlci50ZXh0Tm9kZSA9IGM7XG4gICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2hhckF0KGNodW5rLCBpKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgIGlmIChpIDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNodW5rLmNoYXJBdChpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlKGNodW5rKSB7XG4gICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICAgIHRocm93IHRoaXMuZXJyb3I7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VyLmNsb3NlZCkge1xuICAgICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgICAgcGFyc2VyLFxuICAgICAgICAgIFwiQ2Fubm90IHdyaXRlIGFmdGVyIGNsb3NlLiBBc3NpZ24gYW4gb25yZWFkeSBoYW5kbGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVuZChwYXJzZXIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjaHVuayA9IGNodW5rLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgYyA9IFwiXCI7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjID0gY2hhckF0KGNodW5rLCBpKyspO1xuICAgICAgICBwYXJzZXIuYyA9IGM7XG4gICAgICAgIGlmICghYykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgICAgIHBhcnNlci5wb3NpdGlvbisrO1xuICAgICAgICAgIGlmIChjID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBwYXJzZXIubGluZSsrO1xuICAgICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb2x1bW4rKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChwYXJzZXIuc3RhdGUpIHtcbiAgICAgICAgICBjYXNlIFMuQkVHSU46XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkJFR0lOX1dISVRFU1BBQ0U7XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCJcXHVGRUZGXCIpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiZWdpbldoaXRlU3BhY2UocGFyc2VyLCBjKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5CRUdJTl9XSElURVNQQUNFOlxuICAgICAgICAgICAgYmVnaW5XaGl0ZVNwYWNlKHBhcnNlciwgYyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuVEVYVDpcbiAgICAgICAgICAgIGlmIChwYXJzZXIuc2F3Um9vdCAmJiAhcGFyc2VyLmNsb3NlZFJvb3QpIHtcbiAgICAgICAgICAgICAgdmFyIHN0YXJ0aSA9IGkgLSAxO1xuICAgICAgICAgICAgICB3aGlsZSAoYyAmJiBjICE9PSBcIjxcIiAmJiBjICE9PSBcIiZcIikge1xuICAgICAgICAgICAgICAgIGMgPSBjaGFyQXQoY2h1bmssIGkrKyk7XG4gICAgICAgICAgICAgICAgaWYgKGMgJiYgcGFyc2VyLnRyYWNrUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5wb3NpdGlvbisrO1xuICAgICAgICAgICAgICAgICAgaWYgKGMgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbHVtbiA9IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZXIuY29sdW1uKys7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRpLCBpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI8XCIgJiYgIShwYXJzZXIuc2F3Um9vdCAmJiBwYXJzZXIuY2xvc2VkUm9vdCAmJiAhcGFyc2VyLnN0cmljdCkpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1dBS0E7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uID0gcGFyc2VyLnBvc2l0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykgJiYgKCFwYXJzZXIuc2F3Um9vdCB8fCBwYXJzZXIuY2xvc2VkUm9vdCkpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJUZXh0IGRhdGEgb3V0c2lkZSBvZiByb290IG5vZGUuXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjID09PSBcIiZcIikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVF9FTlRJVFk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5TQ1JJUFQ6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRfRU5ESU5HO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlNDUklQVF9FTkRJTkc6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IFwiPFwiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuT1BFTl9XQUtBOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiIVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHO1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0xPU0VfVEFHO1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUO1xuICAgICAgICAgICAgICBwYXJzZXIucHJvY0luc3ROYW1lID0gcGFyc2VyLnByb2NJbnN0Qm9keSA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJVbmVuY29kZWQgPFwiKTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uICsgMSA8IHBhcnNlci5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwYWQgPSBwYXJzZXIucG9zaXRpb24gLSBwYXJzZXIuc3RhcnRUYWdQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBjID0gbmV3IEFycmF5KHBhZCkuam9pbihcIiBcIikgKyBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSBcIjxcIiArIGM7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5TR01MX0RFQ0w6XG4gICAgICAgICAgICBpZiAoKHBhcnNlci5zZ21sRGVjbCArIGMpLnRvVXBwZXJDYXNlKCkgPT09IENEQVRBKSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbm9wZW5jZGF0YVwiKTtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQTtcbiAgICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VyLnNnbWxEZWNsICsgYyA9PT0gXCItLVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVDtcbiAgICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgocGFyc2VyLnNnbWxEZWNsICsgYykudG9VcHBlckNhc2UoKSA9PT0gRE9DVFlQRSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEU7XG4gICAgICAgICAgICAgIGlmIChwYXJzZXIuZG9jdHlwZSB8fCBwYXJzZXIuc2F3Um9vdCkge1xuICAgICAgICAgICAgICAgIHN0cmljdEZhaWwoXG4gICAgICAgICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgICAgICAgICAgICBcIkluYXBwcm9wcmlhdGVseSBsb2NhdGVkIGRvY3R5cGUgZGVjbGFyYXRpb25cIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25zZ21sZGVjbGFyYXRpb25cIiwgcGFyc2VyLnNnbWxEZWNsKTtcbiAgICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMX1FVT1RFRDtcbiAgICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsICs9IGM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5TR01MX0RFQ0xfUVVPVEVEOlxuICAgICAgICAgICAgaWYgKGMgPT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMO1xuICAgICAgICAgICAgICBwYXJzZXIucSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gYztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5ET0NUWVBFOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uZG9jdHlwZVwiLCBwYXJzZXIuZG9jdHlwZSk7XG4gICAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGM7XG4gICAgICAgICAgICAgIGlmIChjID09PSBcIltcIikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVEQ7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnEgPSBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuRE9DVFlQRV9RVU9URUQ6XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjO1xuICAgICAgICAgICAgaWYgKGMgPT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5xID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkRPQ1RZUEVfRFREOlxuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gYztcbiAgICAgICAgICAgIGlmIChjID09PSBcIl1cIikge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX0RURF9RVU9URUQ7XG4gICAgICAgICAgICAgIHBhcnNlci5xID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5ET0NUWVBFX0RURF9RVU9URUQ6XG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSArPSBjO1xuICAgICAgICAgICAgaWYgKGMgPT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVEQ7XG4gICAgICAgICAgICAgIHBhcnNlci5xID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5DT01NRU5UOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVF9FTkRJTkc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNPTU1FTlRfRU5ESU5HOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVF9FTkRFRDtcbiAgICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSB0ZXh0b3B0cyhwYXJzZXIub3B0LCBwYXJzZXIuY29tbWVudCk7XG4gICAgICAgICAgICAgIGlmIChwYXJzZXIuY29tbWVudCkge1xuICAgICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbmNvbW1lbnRcIiwgcGFyc2VyLmNvbW1lbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcnNlci5jb21tZW50ID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9IFwiLVwiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNPTU1FTlRfRU5ERUQ6XG4gICAgICAgICAgICBpZiAoYyAhPT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiTWFsZm9ybWVkIGNvbW1lbnRcIik7XG4gICAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9IFwiLS1cIiArIGM7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ09NTUVOVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5DREFUQTpcbiAgICAgICAgICAgIGlmIChjID09PSBcIl1cIikge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBX0VORElORztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNEQVRBX0VORElORzpcbiAgICAgICAgICAgIGlmIChjID09PSBcIl1cIikge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBX0VORElOR18yO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmNkYXRhICs9IFwiXVwiICsgYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkdfMjpcbiAgICAgICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBpZiAocGFyc2VyLmNkYXRhKSB7XG4gICAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9uY2RhdGFcIiwgcGFyc2VyLmNkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsIFwib25jbG9zZWNkYXRhXCIpO1xuICAgICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiXVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSBcIl1cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSBcIl1dXCIgKyBjO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlBST0NfSU5TVDpcbiAgICAgICAgICAgIGlmIChjID09PSBcIj9cIikge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9FTkRJTkc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlBST0NfSU5TVF9CT0RZO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlBST0NfSU5TVF9CT0RZOlxuICAgICAgICAgICAgaWYgKCFwYXJzZXIucHJvY0luc3RCb2R5ICYmIGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfRU5ESU5HO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0Qm9keSArPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLlBST0NfSU5TVF9FTkRJTkc6XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCBcIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uXCIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJzZXIucHJvY0luc3ROYW1lLFxuICAgICAgICAgICAgICAgIGJvZHk6IHBhcnNlci5wcm9jSW5zdEJvZHlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdE5hbWUgPSBwYXJzZXIucHJvY0luc3RCb2R5ID0gXCJcIjtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0Qm9keSArPSBcIj9cIiArIGM7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0JPRFk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuT1BFTl9UQUc6XG4gICAgICAgICAgICBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgKz0gYztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld1RhZyhwYXJzZXIpO1xuICAgICAgICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHX1NMQVNIO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIGNoYXJhY3RlciBpbiB0YWcgbmFtZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5PUEVOX1RBR19TTEFTSDpcbiAgICAgICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgIGNsb3NlVGFnKHBhcnNlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJGb3J3YXJkLXNsYXNoIGluIG9wZW5pbmcgdGFnIG5vdCBmb2xsb3dlZCBieSA+XCIpO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5BVFRSSUI6XG4gICAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9UQUdfU0xBU0g7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IGM7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkFUVFJJQl9OQU1FOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJBdHRyaWJ1dGUgd2l0aG91dCB2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gcGFyc2VyLmF0dHJpYk5hbWU7XG4gICAgICAgICAgICAgIGF0dHJpYihwYXJzZXIpO1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FX1NBV19XSElURTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgKz0gYztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgYXR0cmlidXRlIG5hbWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQVRUUklCX05BTUVfU0FXX1dISVRFOlxuICAgICAgICAgICAgaWYgKGMgPT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJBdHRyaWJ1dGUgd2l0aG91dCB2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzW3BhcnNlci5hdHRyaWJOYW1lXSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgXCJvbmF0dHJpYnV0ZVwiLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogcGFyc2VyLmF0dHJpYk5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFwiXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgICAgb3BlblRhZyhwYXJzZXIpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gYztcbiAgICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIkludmFsaWQgYXR0cmlidXRlIG5hbWVcIik7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUU6XG4gICAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1F1b3RlKGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5xID0gYztcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsIFwiVW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlXCIpO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9VTlFVT1RFRDtcbiAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfUVVPVEVEOlxuICAgICAgICAgICAgaWYgKGMgIT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICAgIGlmIChjID09PSBcIiZcIikge1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX0VOVElUWV9RO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSArPSBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXR0cmliKHBhcnNlcik7XG4gICAgICAgICAgICBwYXJzZXIucSA9IFwiXCI7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9DTE9TRUQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0NMT1NFRDpcbiAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCBcIk5vIHdoaXRlc3BhY2UgYmV0d2VlbiBhdHRyaWJ1dGVzXCIpO1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IGM7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9VTlFVT1RFRDpcbiAgICAgICAgICAgIGlmICghaXNBdHRyaWJFbmQoYykpIHtcbiAgICAgICAgICAgICAgaWYgKGMgPT09IFwiJlwiKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1U7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlICs9IGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdHRyaWIocGFyc2VyKTtcbiAgICAgICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGNhc2UgUy5DTE9TRV9UQUc6XG4gICAgICAgICAgICBpZiAoIXBhcnNlci50YWdOYW1lKSB7XG4gICAgICAgICAgICAgIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3RNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5zY3JpcHQgKz0gXCI8L1wiICsgYztcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIHRhZ25hbWUgaW4gY2xvc2luZyB0YWcuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lQm9keSwgYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgKz0gYztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VyLnNjcmlwdCkge1xuICAgICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IFwiPC9cIiArIHBhcnNlci50YWdOYW1lO1xuICAgICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIHRhZ25hbWUgaW4gY2xvc2luZyB0YWdcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUdfU0FXX1dISVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgY2FzZSBTLkNMT1NFX1RBR19TQVdfV0hJVEU6XG4gICAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIGNsb3NlVGFnKHBhcnNlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIGNoYXJhY3RlcnMgaW4gY2xvc2luZyB0YWdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBjYXNlIFMuVEVYVF9FTlRJVFk6XG4gICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfUTpcbiAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgICAgdmFyIHJldHVyblN0YXRlO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlcjI7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcnNlci5zdGF0ZSkge1xuICAgICAgICAgICAgICBjYXNlIFMuVEVYVF9FTlRJVFk6XG4gICAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLlRFWFQ7XG4gICAgICAgICAgICAgICAgYnVmZmVyMiA9IFwidGV4dE5vZGVcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfUTpcbiAgICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBidWZmZXIyID0gXCJhdHRyaWJWYWx1ZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5BVFRSSUJfVkFMVUVfVU5RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnVmZmVyMiA9IFwiYXR0cmliVmFsdWVcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICAgICAgICBwYXJzZXJbYnVmZmVyMl0gKz0gcGFyc2VFbnRpdHkocGFyc2VyKTtcbiAgICAgICAgICAgICAgcGFyc2VyLmVudGl0eSA9IFwiXCI7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IHJldHVyblN0YXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01hdGNoKHBhcnNlci5lbnRpdHkubGVuZ3RoID8gZW50aXR5Qm9keSA6IGVudGl0eVN0YXJ0LCBjKSkge1xuICAgICAgICAgICAgICBwYXJzZXIuZW50aXR5ICs9IGM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgXCJJbnZhbGlkIGNoYXJhY3RlciBpbiBlbnRpdHkgbmFtZVwiKTtcbiAgICAgICAgICAgICAgcGFyc2VyW2J1ZmZlcjJdICs9IFwiJlwiICsgcGFyc2VyLmVudGl0eSArIGM7XG4gICAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgPSBcIlwiO1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocGFyc2VyLCBcIlVua25vd24gc3RhdGU6IFwiICsgcGFyc2VyLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcnNlci5wb3NpdGlvbiA+PSBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbikge1xuICAgICAgICBjaGVja0J1ZmZlckxlbmd0aChwYXJzZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnNlcjtcbiAgICB9XG4gICAgLyohIGh0dHA6Ly9tdGhzLmJlL2Zyb21jb2RlcG9pbnQgdjAuMS4wIGJ5IEBtYXRoaWFzICovXG4gICAgaWYgKCFTdHJpbmcuZnJvbUNvZGVQb2ludCkge1xuICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbiAgICAgICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICAgICAgdmFyIGZyb21Db2RlUG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgTUFYX1NJWkUgPSAxNjM4NDtcbiAgICAgICAgICB2YXIgY29kZVVuaXRzID0gW107XG4gICAgICAgICAgdmFyIGhpZ2hTdXJyb2dhdGU7XG4gICAgICAgICAgdmFyIGxvd1N1cnJvZ2F0ZTtcbiAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gTnVtYmVyKGFyZ3VtZW50c1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShjb2RlUG9pbnQpIHx8IC8vIGBOYU5gLCBgK0luZmluaXR5YCwgb3IgYC1JbmZpbml0eWBcbiAgICAgICAgICAgIGNvZGVQb2ludCA8IDAgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG4gICAgICAgICAgICBjb2RlUG9pbnQgPiAxMTE0MTExIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuICAgICAgICAgICAgZmxvb3IoY29kZVBvaW50KSAhPT0gY29kZVBvaW50KSB7XG4gICAgICAgICAgICAgIHRocm93IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnQ6IFwiICsgY29kZVBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPD0gNjU1MzUpIHtcbiAgICAgICAgICAgICAgY29kZVVuaXRzLnB1c2goY29kZVBvaW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCAtPSA2NTUzNjtcbiAgICAgICAgICAgICAgaGlnaFN1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgPj4gMTApICsgNTUyOTY7XG4gICAgICAgICAgICAgIGxvd1N1cnJvZ2F0ZSA9IGNvZGVQb2ludCAlIDEwMjQgKyA1NjMyMDtcbiAgICAgICAgICAgICAgY29kZVVuaXRzLnB1c2goaGlnaFN1cnJvZ2F0ZSwgbG93U3Vycm9nYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleCArIDEgPT09IGxlbmd0aCB8fCBjb2RlVW5pdHMubGVuZ3RoID4gTUFYX1NJWkUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShudWxsLCBjb2RlVW5pdHMpO1xuICAgICAgICAgICAgICBjb2RlVW5pdHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcsIFwiZnJvbUNvZGVQb2ludFwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogZnJvbUNvZGVQb2ludCxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgU3RyaW5nLmZyb21Db2RlUG9pbnQgPSBmcm9tQ29kZVBvaW50O1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH1cbiAgfSkoZXhwb3J0czIpO1xufSkoc2F4JDEpO1xudmFyIGFycmF5SGVscGVyID0ge1xuICBpc0FycmF5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gIH1cbn07XG52YXIgaXNBcnJheSQyID0gYXJyYXlIZWxwZXIuaXNBcnJheTtcbnZhciBvcHRpb25zSGVscGVyID0ge1xuICBjb3B5T3B0aW9uczogZnVuY3Rpb24ob3B0aW9uczIpIHtcbiAgICB2YXIga2V5LCBjb3B5ID0ge307XG4gICAgZm9yIChrZXkgaW4gb3B0aW9uczIpIHtcbiAgICAgIGlmIChvcHRpb25zMi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvcHlba2V5XSA9IG9wdGlvbnMyW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xuICB9LFxuICBlbnN1cmVGbGFnRXhpc3RzOiBmdW5jdGlvbihpdGVtLCBvcHRpb25zMikge1xuICAgIGlmICghKGl0ZW0gaW4gb3B0aW9uczIpIHx8IHR5cGVvZiBvcHRpb25zMltpdGVtXSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIG9wdGlvbnMyW2l0ZW1dID0gZmFsc2U7XG4gICAgfVxuICB9LFxuICBlbnN1cmVTcGFjZXNFeGlzdHM6IGZ1bmN0aW9uKG9wdGlvbnMyKSB7XG4gICAgaWYgKCEoXCJzcGFjZXNcIiBpbiBvcHRpb25zMikgfHwgdHlwZW9mIG9wdGlvbnMyLnNwYWNlcyAhPT0gXCJudW1iZXJcIiAmJiB0eXBlb2Ygb3B0aW9uczIuc3BhY2VzICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBvcHRpb25zMi5zcGFjZXMgPSAwO1xuICAgIH1cbiAgfSxcbiAgZW5zdXJlQWx3YXlzQXJyYXlFeGlzdHM6IGZ1bmN0aW9uKG9wdGlvbnMyKSB7XG4gICAgaWYgKCEoXCJhbHdheXNBcnJheVwiIGluIG9wdGlvbnMyKSB8fCB0eXBlb2Ygb3B0aW9uczIuYWx3YXlzQXJyYXkgIT09IFwiYm9vbGVhblwiICYmICFpc0FycmF5JDIob3B0aW9uczIuYWx3YXlzQXJyYXkpKSB7XG4gICAgICBvcHRpb25zMi5hbHdheXNBcnJheSA9IGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZW5zdXJlS2V5RXhpc3RzOiBmdW5jdGlvbihrZXksIG9wdGlvbnMyKSB7XG4gICAgaWYgKCEoa2V5ICsgXCJLZXlcIiBpbiBvcHRpb25zMikgfHwgdHlwZW9mIG9wdGlvbnMyW2tleSArIFwiS2V5XCJdICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBvcHRpb25zMltrZXkgKyBcIktleVwiXSA9IG9wdGlvbnMyLmNvbXBhY3QgPyBcIl9cIiArIGtleSA6IGtleTtcbiAgICB9XG4gIH0sXG4gIGNoZWNrRm5FeGlzdHM6IGZ1bmN0aW9uKGtleSwgb3B0aW9uczIpIHtcbiAgICByZXR1cm4ga2V5ICsgXCJGblwiIGluIG9wdGlvbnMyO1xuICB9XG59O1xudmFyIHNheCA9IHNheCQxO1xudmFyIGhlbHBlciQyID0gb3B0aW9uc0hlbHBlcjtcbnZhciBpc0FycmF5JDEgPSBhcnJheUhlbHBlci5pc0FycmF5O1xudmFyIG9wdGlvbnM7XG52YXIgY3VycmVudEVsZW1lbnQkMTtcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyQyKHVzZXJPcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBoZWxwZXIkMi5jb3B5T3B0aW9ucyh1c2VyT3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVEZWNsYXJhdGlvblwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZUluc3RydWN0aW9uXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlQXR0cmlidXRlc1wiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZVRleHRcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVDb21tZW50XCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlQ2RhdGFcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVEb2N0eXBlXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiY29tcGFjdFwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcImFsd2F5c0NoaWxkcmVuXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiYWRkUGFyZW50XCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwidHJpbVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcIm5hdGl2ZVR5cGVcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUZsYWdFeGlzdHMoXCJuYXRpdmVUeXBlQXR0cmlidXRlc1wiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlRmxhZ0V4aXN0cyhcInNhbml0aXplXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiaW5zdHJ1Y3Rpb25IYXNBdHRyaWJ1dGVzXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVGbGFnRXhpc3RzKFwiY2FwdHVyZVNwYWNlc0JldHdlZW5FbGVtZW50c1wiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlQWx3YXlzQXJyYXlFeGlzdHMob3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcImRlY2xhcmF0aW9uXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJpbnN0cnVjdGlvblwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlS2V5RXhpc3RzKFwiYXR0cmlidXRlc1wiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlS2V5RXhpc3RzKFwidGV4dFwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlS2V5RXhpc3RzKFwiY29tbWVudFwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuZW5zdXJlS2V5RXhpc3RzKFwiY2RhdGFcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcImRvY3R5cGVcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcInR5cGVcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcIm5hbWVcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmVuc3VyZUtleUV4aXN0cyhcImVsZW1lbnRzXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5lbnN1cmVLZXlFeGlzdHMoXCJwYXJlbnRcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmNoZWNrRm5FeGlzdHMoXCJkb2N0eXBlXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiaW5zdHJ1Y3Rpb25cIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmNoZWNrRm5FeGlzdHMoXCJjZGF0YVwiLCBvcHRpb25zKTtcbiAgaGVscGVyJDIuY2hlY2tGbkV4aXN0cyhcImNvbW1lbnRcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmNoZWNrRm5FeGlzdHMoXCJ0ZXh0XCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiaW5zdHJ1Y3Rpb25OYW1lXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiZWxlbWVudE5hbWVcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmNoZWNrRm5FeGlzdHMoXCJhdHRyaWJ1dGVOYW1lXCIsIG9wdGlvbnMpO1xuICBoZWxwZXIkMi5jaGVja0ZuRXhpc3RzKFwiYXR0cmlidXRlVmFsdWVcIiwgb3B0aW9ucyk7XG4gIGhlbHBlciQyLmNoZWNrRm5FeGlzdHMoXCJhdHRyaWJ1dGVzXCIsIG9wdGlvbnMpO1xuICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIG5hdGl2ZVR5cGUodmFsdWUpIHtcbiAgdmFyIG5WYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIGlmICghaXNOYU4oblZhbHVlKSkge1xuICAgIHJldHVybiBuVmFsdWU7XG4gIH1cbiAgdmFyIGJWYWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChiVmFsdWUgPT09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYlZhbHVlID09PSBcImZhbHNlXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gYWRkRmllbGQodHlwZSwgdmFsdWUpIHtcbiAgdmFyIGtleTtcbiAgaWYgKG9wdGlvbnMuY29tcGFjdCkge1xuICAgIGlmICghY3VycmVudEVsZW1lbnQkMVtvcHRpb25zW3R5cGUgKyBcIktleVwiXV0gJiYgKGlzQXJyYXkkMShvcHRpb25zLmFsd2F5c0FycmF5KSA/IG9wdGlvbnMuYWx3YXlzQXJyYXkuaW5kZXhPZihvcHRpb25zW3R5cGUgKyBcIktleVwiXSkgIT09IC0xIDogb3B0aW9ucy5hbHdheXNBcnJheSkpIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlICsgXCJLZXlcIl1dID0gW107XG4gICAgfVxuICAgIGlmIChjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZSArIFwiS2V5XCJdXSAmJiAhaXNBcnJheSQxKGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlICsgXCJLZXlcIl1dKSkge1xuICAgICAgY3VycmVudEVsZW1lbnQkMVtvcHRpb25zW3R5cGUgKyBcIktleVwiXV0gPSBbY3VycmVudEVsZW1lbnQkMVtvcHRpb25zW3R5cGUgKyBcIktleVwiXV1dO1xuICAgIH1cbiAgICBpZiAodHlwZSArIFwiRm5cIiBpbiBvcHRpb25zICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdmFsdWUgPSBvcHRpb25zW3R5cGUgKyBcIkZuXCJdKHZhbHVlLCBjdXJyZW50RWxlbWVudCQxKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwiaW5zdHJ1Y3Rpb25cIiAmJiAoXCJpbnN0cnVjdGlvbkZuXCIgaW4gb3B0aW9ucyB8fCBcImluc3RydWN0aW9uTmFtZUZuXCIgaW4gb3B0aW9ucykpIHtcbiAgICAgIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaWYgKFwiaW5zdHJ1Y3Rpb25GblwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhbHVlW2tleV0gPSBvcHRpb25zLmluc3RydWN0aW9uRm4odmFsdWVba2V5XSwga2V5LCBjdXJyZW50RWxlbWVudCQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRlbXAgPSB2YWx1ZVtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIHZhbHVlW2tleV07XG4gICAgICAgICAgICB2YWx1ZVtvcHRpb25zLmluc3RydWN0aW9uTmFtZUZuKGtleSwgdGVtcCwgY3VycmVudEVsZW1lbnQkMSldID0gdGVtcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQXJyYXkkMShjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZSArIFwiS2V5XCJdXSkpIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9uc1t0eXBlICsgXCJLZXlcIl1dLnB1c2godmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnNbdHlwZSArIFwiS2V5XCJdXSA9IHZhbHVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoIWN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5lbGVtZW50c0tleV0pIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5lbGVtZW50c0tleV0gPSBbXTtcbiAgICB9XG4gICAgdmFyIGVsZW1lbnQyID0ge307XG4gICAgZWxlbWVudDJbb3B0aW9ucy50eXBlS2V5XSA9IHR5cGU7XG4gICAgaWYgKHR5cGUgPT09IFwiaW5zdHJ1Y3Rpb25cIikge1xuICAgICAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbWVudDJbb3B0aW9ucy5uYW1lS2V5XSA9IFwiaW5zdHJ1Y3Rpb25OYW1lRm5cIiBpbiBvcHRpb25zID8gb3B0aW9ucy5pbnN0cnVjdGlvbk5hbWVGbihrZXksIHZhbHVlLCBjdXJyZW50RWxlbWVudCQxKSA6IGtleTtcbiAgICAgIGlmIChvcHRpb25zLmluc3RydWN0aW9uSGFzQXR0cmlidXRlcykge1xuICAgICAgICBlbGVtZW50MltvcHRpb25zLmF0dHJpYnV0ZXNLZXldID0gdmFsdWVba2V5XVtvcHRpb25zLmF0dHJpYnV0ZXNLZXldO1xuICAgICAgICBpZiAoXCJpbnN0cnVjdGlvbkZuXCIgaW4gb3B0aW9ucykge1xuICAgICAgICAgIGVsZW1lbnQyW29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSBvcHRpb25zLmluc3RydWN0aW9uRm4oZWxlbWVudDJbb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSwga2V5LCBjdXJyZW50RWxlbWVudCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFwiaW5zdHJ1Y3Rpb25GblwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YWx1ZVtrZXldID0gb3B0aW9ucy5pbnN0cnVjdGlvbkZuKHZhbHVlW2tleV0sIGtleSwgY3VycmVudEVsZW1lbnQkMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudDJbb3B0aW9ucy5pbnN0cnVjdGlvbktleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZSArIFwiRm5cIiBpbiBvcHRpb25zKSB7XG4gICAgICAgIHZhbHVlID0gb3B0aW9uc1t0eXBlICsgXCJGblwiXSh2YWx1ZSwgY3VycmVudEVsZW1lbnQkMSk7XG4gICAgICB9XG4gICAgICBlbGVtZW50MltvcHRpb25zW3R5cGUgKyBcIktleVwiXV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYWRkUGFyZW50KSB7XG4gICAgICBlbGVtZW50MltvcHRpb25zLnBhcmVudEtleV0gPSBjdXJyZW50RWxlbWVudCQxO1xuICAgIH1cbiAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZWxlbWVudHNLZXldLnB1c2goZWxlbWVudDIpO1xuICB9XG59XG5mdW5jdGlvbiBtYW5pcHVsYXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gIGlmIChcImF0dHJpYnV0ZXNGblwiIGluIG9wdGlvbnMgJiYgYXR0cmlidXRlcykge1xuICAgIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXNGbihhdHRyaWJ1dGVzLCBjdXJyZW50RWxlbWVudCQxKTtcbiAgfVxuICBpZiAoKG9wdGlvbnMudHJpbSB8fCBcImF0dHJpYnV0ZVZhbHVlRm5cIiBpbiBvcHRpb25zIHx8IFwiYXR0cmlidXRlTmFtZUZuXCIgaW4gb3B0aW9ucyB8fCBvcHRpb25zLm5hdGl2ZVR5cGVBdHRyaWJ1dGVzKSAmJiBhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGtleTtcbiAgICBmb3IgKGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnRyaW0pXG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYXR0cmlidXRlc1trZXldLnRyaW0oKTtcbiAgICAgICAgaWYgKG9wdGlvbnMubmF0aXZlVHlwZUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBuYXRpdmVUeXBlKGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiYXR0cmlidXRlVmFsdWVGblwiIGluIG9wdGlvbnMpXG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gb3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZUZuKGF0dHJpYnV0ZXNba2V5XSwga2V5LCBjdXJyZW50RWxlbWVudCQxKTtcbiAgICAgICAgaWYgKFwiYXR0cmlidXRlTmFtZUZuXCIgaW4gb3B0aW9ucykge1xuICAgICAgICAgIHZhciB0ZW1wID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgYXR0cmlidXRlc1tvcHRpb25zLmF0dHJpYnV0ZU5hbWVGbihrZXksIGF0dHJpYnV0ZXNba2V5XSwgY3VycmVudEVsZW1lbnQkMSldID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXR0cmlidXRlcztcbn1cbmZ1bmN0aW9uIG9uSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb24pIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKGluc3RydWN0aW9uLmJvZHkgJiYgKGluc3RydWN0aW9uLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ4bWxcIiB8fCBvcHRpb25zLmluc3RydWN0aW9uSGFzQXR0cmlidXRlcykpIHtcbiAgICB2YXIgYXR0cnNSZWdFeHAgPSAvKFtcXHc6LV0rKVxccyo9XFxzKig/OlwiKFteXCJdKilcInwnKFteJ10qKSd8KFxcdyspKVxccyovZztcbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGF0dHJzUmVnRXhwLmV4ZWMoaW5zdHJ1Y3Rpb24uYm9keSkpICE9PSBudWxsKSB7XG4gICAgICBhdHRyaWJ1dGVzW21hdGNoWzFdXSA9IG1hdGNoWzJdIHx8IG1hdGNoWzNdIHx8IG1hdGNoWzRdO1xuICAgIH1cbiAgICBhdHRyaWJ1dGVzID0gbWFuaXB1bGF0ZUF0dHJpYnV0ZXMoYXR0cmlidXRlcyk7XG4gIH1cbiAgaWYgKGluc3RydWN0aW9uLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ4bWxcIikge1xuICAgIGlmIChvcHRpb25zLmlnbm9yZURlY2xhcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5kZWNsYXJhdGlvbktleV0gPSB7fTtcbiAgICBpZiAoT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZGVjbGFyYXRpb25LZXldW29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSBhdHRyaWJ1dGVzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hZGRQYXJlbnQpIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5kZWNsYXJhdGlvbktleV1bb3B0aW9ucy5wYXJlbnRLZXldID0gY3VycmVudEVsZW1lbnQkMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9wdGlvbnMuaWdub3JlSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudHJpbSkge1xuICAgICAgaW5zdHJ1Y3Rpb24uYm9keSA9IGluc3RydWN0aW9uLmJvZHkudHJpbSgpO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSB7fTtcbiAgICBpZiAob3B0aW9ucy5pbnN0cnVjdGlvbkhhc0F0dHJpYnV0ZXMgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XG4gICAgICB2YWx1ZVtpbnN0cnVjdGlvbi5uYW1lXSA9IHt9O1xuICAgICAgdmFsdWVbaW5zdHJ1Y3Rpb24ubmFtZV1bb3B0aW9ucy5hdHRyaWJ1dGVzS2V5XSA9IGF0dHJpYnV0ZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlW2luc3RydWN0aW9uLm5hbWVdID0gaW5zdHJ1Y3Rpb24uYm9keTtcbiAgICB9XG4gICAgYWRkRmllbGQoXCJpbnN0cnVjdGlvblwiLCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9uU3RhcnRFbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgdmFyIGVsZW1lbnQyO1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICBhdHRyaWJ1dGVzID0gbmFtZS5hdHRyaWJ1dGVzO1xuICAgIG5hbWUgPSBuYW1lLm5hbWU7XG4gIH1cbiAgYXR0cmlidXRlcyA9IG1hbmlwdWxhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuICBpZiAoXCJlbGVtZW50TmFtZUZuXCIgaW4gb3B0aW9ucykge1xuICAgIG5hbWUgPSBvcHRpb25zLmVsZW1lbnROYW1lRm4obmFtZSwgY3VycmVudEVsZW1lbnQkMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcGFjdCkge1xuICAgIGVsZW1lbnQyID0ge307XG4gICAgaWYgKCFvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgJiYgYXR0cmlidXRlcyAmJiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGgpIHtcbiAgICAgIGVsZW1lbnQyW29wdGlvbnMuYXR0cmlidXRlc0tleV0gPSB7fTtcbiAgICAgIHZhciBrZXk7XG4gICAgICBmb3IgKGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBlbGVtZW50MltvcHRpb25zLmF0dHJpYnV0ZXNLZXldW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEobmFtZSBpbiBjdXJyZW50RWxlbWVudCQxKSAmJiAoaXNBcnJheSQxKG9wdGlvbnMuYWx3YXlzQXJyYXkpID8gb3B0aW9ucy5hbHdheXNBcnJheS5pbmRleE9mKG5hbWUpICE9PSAtMSA6IG9wdGlvbnMuYWx3YXlzQXJyYXkpKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW25hbWVdID0gW107XG4gICAgfVxuICAgIGlmIChjdXJyZW50RWxlbWVudCQxW25hbWVdICYmICFpc0FycmF5JDEoY3VycmVudEVsZW1lbnQkMVtuYW1lXSkpIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbbmFtZV0gPSBbY3VycmVudEVsZW1lbnQkMVtuYW1lXV07XG4gICAgfVxuICAgIGlmIChpc0FycmF5JDEoY3VycmVudEVsZW1lbnQkMVtuYW1lXSkpIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbbmFtZV0ucHVzaChlbGVtZW50Mik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRFbGVtZW50JDFbbmFtZV0gPSBlbGVtZW50MjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZWxlbWVudHNLZXldKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCQxW29wdGlvbnMuZWxlbWVudHNLZXldID0gW107XG4gICAgfVxuICAgIGVsZW1lbnQyID0ge307XG4gICAgZWxlbWVudDJbb3B0aW9ucy50eXBlS2V5XSA9IFwiZWxlbWVudFwiO1xuICAgIGVsZW1lbnQyW29wdGlvbnMubmFtZUtleV0gPSBuYW1lO1xuICAgIGlmICghb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzICYmIGF0dHJpYnV0ZXMgJiYgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoKSB7XG4gICAgICBlbGVtZW50MltvcHRpb25zLmF0dHJpYnV0ZXNLZXldID0gYXR0cmlidXRlcztcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYWx3YXlzQ2hpbGRyZW4pIHtcbiAgICAgIGVsZW1lbnQyW29wdGlvbnMuZWxlbWVudHNLZXldID0gW107XG4gICAgfVxuICAgIGN1cnJlbnRFbGVtZW50JDFbb3B0aW9ucy5lbGVtZW50c0tleV0ucHVzaChlbGVtZW50Mik7XG4gIH1cbiAgZWxlbWVudDJbb3B0aW9ucy5wYXJlbnRLZXldID0gY3VycmVudEVsZW1lbnQkMTtcbiAgY3VycmVudEVsZW1lbnQkMSA9IGVsZW1lbnQyO1xufVxuZnVuY3Rpb24gb25UZXh0KHRleHQpIHtcbiAgaWYgKG9wdGlvbnMuaWdub3JlVGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXRleHQudHJpbSgpICYmICFvcHRpb25zLmNhcHR1cmVTcGFjZXNCZXR3ZWVuRWxlbWVudHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG9wdGlvbnMudHJpbSkge1xuICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcbiAgfVxuICBpZiAob3B0aW9ucy5uYXRpdmVUeXBlKSB7XG4gICAgdGV4dCA9IG5hdGl2ZVR5cGUodGV4dCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikucmVwbGFjZSgvPi9nLCBcIiZndDtcIik7XG4gIH1cbiAgYWRkRmllbGQoXCJ0ZXh0XCIsIHRleHQpO1xufVxuZnVuY3Rpb24gb25Db21tZW50KGNvbW1lbnQpIHtcbiAgaWYgKG9wdGlvbnMuaWdub3JlQ29tbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAob3B0aW9ucy50cmltKSB7XG4gICAgY29tbWVudCA9IGNvbW1lbnQudHJpbSgpO1xuICB9XG4gIGFkZEZpZWxkKFwiY29tbWVudFwiLCBjb21tZW50KTtcbn1cbmZ1bmN0aW9uIG9uRW5kRWxlbWVudChuYW1lKSB7XG4gIHZhciBwYXJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQkMVtvcHRpb25zLnBhcmVudEtleV07XG4gIGlmICghb3B0aW9ucy5hZGRQYXJlbnQpIHtcbiAgICBkZWxldGUgY3VycmVudEVsZW1lbnQkMVtvcHRpb25zLnBhcmVudEtleV07XG4gIH1cbiAgY3VycmVudEVsZW1lbnQkMSA9IHBhcmVudEVsZW1lbnQ7XG59XG5mdW5jdGlvbiBvbkNkYXRhKGNkYXRhKSB7XG4gIGlmIChvcHRpb25zLmlnbm9yZUNkYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvcHRpb25zLnRyaW0pIHtcbiAgICBjZGF0YSA9IGNkYXRhLnRyaW0oKTtcbiAgfVxuICBhZGRGaWVsZChcImNkYXRhXCIsIGNkYXRhKTtcbn1cbmZ1bmN0aW9uIG9uRG9jdHlwZShkb2N0eXBlKSB7XG4gIGlmIChvcHRpb25zLmlnbm9yZURvY3R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZG9jdHlwZSA9IGRvY3R5cGUucmVwbGFjZSgvXiAvLCBcIlwiKTtcbiAgaWYgKG9wdGlvbnMudHJpbSkge1xuICAgIGRvY3R5cGUgPSBkb2N0eXBlLnRyaW0oKTtcbiAgfVxuICBhZGRGaWVsZChcImRvY3R5cGVcIiwgZG9jdHlwZSk7XG59XG5mdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gIGVycm9yLm5vdGUgPSBlcnJvcjtcbn1cbnZhciB4bWwyanMkMiA9IGZ1bmN0aW9uKHhtbDIsIHVzZXJPcHRpb25zKSB7XG4gIHZhciBwYXJzZXIgPSBzYXgucGFyc2VyKHRydWUsIHt9KTtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBjdXJyZW50RWxlbWVudCQxID0gcmVzdWx0O1xuICBvcHRpb25zID0gdmFsaWRhdGVPcHRpb25zJDIodXNlck9wdGlvbnMpO1xuICB7XG4gICAgcGFyc2VyLm9wdCA9IHsgc3RyaWN0RW50aXRpZXM6IHRydWUgfTtcbiAgICBwYXJzZXIub25vcGVudGFnID0gb25TdGFydEVsZW1lbnQ7XG4gICAgcGFyc2VyLm9udGV4dCA9IG9uVGV4dDtcbiAgICBwYXJzZXIub25jb21tZW50ID0gb25Db21tZW50O1xuICAgIHBhcnNlci5vbmNsb3NldGFnID0gb25FbmRFbGVtZW50O1xuICAgIHBhcnNlci5vbmVycm9yID0gb25FcnJvcjtcbiAgICBwYXJzZXIub25jZGF0YSA9IG9uQ2RhdGE7XG4gICAgcGFyc2VyLm9uZG9jdHlwZSA9IG9uRG9jdHlwZTtcbiAgICBwYXJzZXIub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24gPSBvbkluc3RydWN0aW9uO1xuICB9XG4gIHtcbiAgICBwYXJzZXIud3JpdGUoeG1sMikuY2xvc2UoKTtcbiAgfVxuICBpZiAocmVzdWx0W29wdGlvbnMuZWxlbWVudHNLZXldKSB7XG4gICAgdmFyIHRlbXAgPSByZXN1bHRbb3B0aW9ucy5lbGVtZW50c0tleV07XG4gICAgZGVsZXRlIHJlc3VsdFtvcHRpb25zLmVsZW1lbnRzS2V5XTtcbiAgICByZXN1bHRbb3B0aW9ucy5lbGVtZW50c0tleV0gPSB0ZW1wO1xuICAgIGRlbGV0ZSByZXN1bHQudGV4dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBoZWxwZXIkMSA9IG9wdGlvbnNIZWxwZXI7XG52YXIgeG1sMmpzJDEgPSB4bWwyanMkMjtcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyQxKHVzZXJPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zMiA9IGhlbHBlciQxLmNvcHlPcHRpb25zKHVzZXJPcHRpb25zKTtcbiAgaGVscGVyJDEuZW5zdXJlU3BhY2VzRXhpc3RzKG9wdGlvbnMyKTtcbiAgcmV0dXJuIG9wdGlvbnMyO1xufVxudmFyIHhtbDJqc29uJDEgPSBmdW5jdGlvbih4bWwyLCB1c2VyT3B0aW9ucykge1xuICB2YXIgb3B0aW9uczIsIGpzLCBqc29uLCBwYXJlbnRLZXk7XG4gIG9wdGlvbnMyID0gdmFsaWRhdGVPcHRpb25zJDEodXNlck9wdGlvbnMpO1xuICBqcyA9IHhtbDJqcyQxKHhtbDIsIG9wdGlvbnMyKTtcbiAgcGFyZW50S2V5ID0gXCJjb21wYWN0XCIgaW4gb3B0aW9uczIgJiYgb3B0aW9uczIuY29tcGFjdCA/IFwiX3BhcmVudFwiIDogXCJwYXJlbnRcIjtcbiAgaWYgKFwiYWRkUGFyZW50XCIgaW4gb3B0aW9uczIgJiYgb3B0aW9uczIuYWRkUGFyZW50KSB7XG4gICAganNvbiA9IEpTT04uc3RyaW5naWZ5KGpzLCBmdW5jdGlvbihrLCB2KSB7XG4gICAgICByZXR1cm4gayA9PT0gcGFyZW50S2V5ID8gXCJfXCIgOiB2O1xuICAgIH0sIG9wdGlvbnMyLnNwYWNlcyk7XG4gIH0gZWxzZSB7XG4gICAganNvbiA9IEpTT04uc3RyaW5naWZ5KGpzLCBudWxsLCBvcHRpb25zMi5zcGFjZXMpO1xuICB9XG4gIHJldHVybiBqc29uLnJlcGxhY2UoL1xcdTIwMjgvZywgXCJcXFxcdTIwMjhcIikucmVwbGFjZSgvXFx1MjAyOS9nLCBcIlxcXFx1MjAyOVwiKTtcbn07XG52YXIgaGVscGVyID0gb3B0aW9uc0hlbHBlcjtcbnZhciBpc0FycmF5ID0gYXJyYXlIZWxwZXIuaXNBcnJheTtcbnZhciBjdXJyZW50RWxlbWVudCwgY3VycmVudEVsZW1lbnROYW1lO1xuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKHVzZXJPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zMiA9IGhlbHBlci5jb3B5T3B0aW9ucyh1c2VyT3B0aW9ucyk7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlRGVjbGFyYXRpb25cIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImlnbm9yZUluc3RydWN0aW9uXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVBdHRyaWJ1dGVzXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVUZXh0XCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVDb21tZW50XCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJpZ25vcmVDZGF0YVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaWdub3JlRG9jdHlwZVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiY29tcGFjdFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaW5kZW50VGV4dFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVGbGFnRXhpc3RzKFwiaW5kZW50Q2RhdGFcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImluZGVudEF0dHJpYnV0ZXNcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlRmxhZ0V4aXN0cyhcImluZGVudEluc3RydWN0aW9uXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJmdWxsVGFnRW1wdHlFbGVtZW50XCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUZsYWdFeGlzdHMoXCJub1F1b3Rlc0Zvck5hdGl2ZUF0dHJpYnV0ZXNcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlU3BhY2VzRXhpc3RzKG9wdGlvbnMyKTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zMi5zcGFjZXMgPT09IFwibnVtYmVyXCIpIHtcbiAgICBvcHRpb25zMi5zcGFjZXMgPSBBcnJheShvcHRpb25zMi5zcGFjZXMgKyAxKS5qb2luKFwiIFwiKTtcbiAgfVxuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwiZGVjbGFyYXRpb25cIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwiaW5zdHJ1Y3Rpb25cIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwiYXR0cmlidXRlc1wiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoXCJ0ZXh0XCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcImNvbW1lbnRcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwiY2RhdGFcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwiZG9jdHlwZVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5lbnN1cmVLZXlFeGlzdHMoXCJ0eXBlXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmVuc3VyZUtleUV4aXN0cyhcIm5hbWVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuZW5zdXJlS2V5RXhpc3RzKFwiZWxlbWVudHNcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImRvY3R5cGVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImluc3RydWN0aW9uXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoXCJjZGF0YVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwiY29tbWVudFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwidGV4dFwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwiaW5zdHJ1Y3Rpb25OYW1lXCIsIG9wdGlvbnMyKTtcbiAgaGVscGVyLmNoZWNrRm5FeGlzdHMoXCJlbGVtZW50TmFtZVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwiYXR0cmlidXRlTmFtZVwiLCBvcHRpb25zMik7XG4gIGhlbHBlci5jaGVja0ZuRXhpc3RzKFwiYXR0cmlidXRlVmFsdWVcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImF0dHJpYnV0ZXNcIiwgb3B0aW9uczIpO1xuICBoZWxwZXIuY2hlY2tGbkV4aXN0cyhcImZ1bGxUYWdFbXB0eUVsZW1lbnRcIiwgb3B0aW9uczIpO1xuICByZXR1cm4gb3B0aW9uczI7XG59XG5mdW5jdGlvbiB3cml0ZUluZGVudGF0aW9uKG9wdGlvbnMyLCBkZXB0aCwgZmlyc3RMaW5lKSB7XG4gIHJldHVybiAoIWZpcnN0TGluZSAmJiBvcHRpb25zMi5zcGFjZXMgPyBcIlxcblwiIDogXCJcIikgKyBBcnJheShkZXB0aCArIDEpLmpvaW4ob3B0aW9uczIuc3BhY2VzKTtcbn1cbmZ1bmN0aW9uIHdyaXRlQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBvcHRpb25zMiwgZGVwdGgpIHtcbiAgaWYgKG9wdGlvbnMyLmlnbm9yZUF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBpZiAoXCJhdHRyaWJ1dGVzRm5cIiBpbiBvcHRpb25zMikge1xuICAgIGF0dHJpYnV0ZXMgPSBvcHRpb25zMi5hdHRyaWJ1dGVzRm4oYXR0cmlidXRlcywgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCk7XG4gIH1cbiAgdmFyIGtleSwgYXR0ciwgYXR0ck5hbWUsIHF1b3RlLCByZXN1bHQgPSBbXTtcbiAgZm9yIChrZXkgaW4gYXR0cmlidXRlcykge1xuICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkgJiYgYXR0cmlidXRlc1trZXldICE9PSBudWxsICYmIGF0dHJpYnV0ZXNba2V5XSAhPT0gdm9pZCAwKSB7XG4gICAgICBxdW90ZSA9IG9wdGlvbnMyLm5vUXVvdGVzRm9yTmF0aXZlQXR0cmlidXRlcyAmJiB0eXBlb2YgYXR0cmlidXRlc1trZXldICE9PSBcInN0cmluZ1wiID8gXCJcIiA6ICdcIic7XG4gICAgICBhdHRyID0gXCJcIiArIGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgIGF0dHIgPSBhdHRyLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpO1xuICAgICAgYXR0ck5hbWUgPSBcImF0dHJpYnV0ZU5hbWVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuYXR0cmlidXRlTmFtZUZuKGtleSwgYXR0ciwgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCkgOiBrZXk7XG4gICAgICByZXN1bHQucHVzaChvcHRpb25zMi5zcGFjZXMgJiYgb3B0aW9uczIuaW5kZW50QXR0cmlidXRlcyA/IHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoICsgMSwgZmFsc2UpIDogXCIgXCIpO1xuICAgICAgcmVzdWx0LnB1c2goYXR0ck5hbWUgKyBcIj1cIiArIHF1b3RlICsgKFwiYXR0cmlidXRlVmFsdWVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuYXR0cmlidXRlVmFsdWVGbihhdHRyLCBrZXksIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogYXR0cikgKyBxdW90ZSk7XG4gICAgfVxuICB9XG4gIGlmIChhdHRyaWJ1dGVzICYmIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCAmJiBvcHRpb25zMi5zcGFjZXMgJiYgb3B0aW9uczIuaW5kZW50QXR0cmlidXRlcykge1xuICAgIHJlc3VsdC5wdXNoKHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmYWxzZSkpO1xuICB9XG4gIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHdyaXRlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24sIG9wdGlvbnMyLCBkZXB0aCkge1xuICBjdXJyZW50RWxlbWVudCA9IGRlY2xhcmF0aW9uO1xuICBjdXJyZW50RWxlbWVudE5hbWUgPSBcInhtbFwiO1xuICByZXR1cm4gb3B0aW9uczIuaWdub3JlRGVjbGFyYXRpb24gPyBcIlwiIDogXCI8P3htbFwiICsgd3JpdGVBdHRyaWJ1dGVzKGRlY2xhcmF0aW9uW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldLCBvcHRpb25zMiwgZGVwdGgpICsgXCI/PlwiO1xufVxuZnVuY3Rpb24gd3JpdGVJbnN0cnVjdGlvbihpbnN0cnVjdGlvbiwgb3B0aW9uczIsIGRlcHRoKSB7XG4gIGlmIChvcHRpb25zMi5pZ25vcmVJbnN0cnVjdGlvbikge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGluc3RydWN0aW9uKSB7XG4gICAgaWYgKGluc3RydWN0aW9uLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgaW5zdHJ1Y3Rpb25OYW1lID0gXCJpbnN0cnVjdGlvbk5hbWVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuaW5zdHJ1Y3Rpb25OYW1lRm4oa2V5LCBpbnN0cnVjdGlvbltrZXldLCBjdXJyZW50RWxlbWVudE5hbWUsIGN1cnJlbnRFbGVtZW50KSA6IGtleTtcbiAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbltrZXldID09PSBcIm9iamVjdFwiKSB7XG4gICAgY3VycmVudEVsZW1lbnQgPSBpbnN0cnVjdGlvbjtcbiAgICBjdXJyZW50RWxlbWVudE5hbWUgPSBpbnN0cnVjdGlvbk5hbWU7XG4gICAgcmV0dXJuIFwiPD9cIiArIGluc3RydWN0aW9uTmFtZSArIHdyaXRlQXR0cmlidXRlcyhpbnN0cnVjdGlvbltrZXldW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldLCBvcHRpb25zMiwgZGVwdGgpICsgXCI/PlwiO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0cnVjdGlvblZhbHVlID0gaW5zdHJ1Y3Rpb25ba2V5XSA/IGluc3RydWN0aW9uW2tleV0gOiBcIlwiO1xuICAgIGlmIChcImluc3RydWN0aW9uRm5cIiBpbiBvcHRpb25zMilcbiAgICAgIGluc3RydWN0aW9uVmFsdWUgPSBvcHRpb25zMi5pbnN0cnVjdGlvbkZuKGluc3RydWN0aW9uVmFsdWUsIGtleSwgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCk7XG4gICAgcmV0dXJuIFwiPD9cIiArIGluc3RydWN0aW9uTmFtZSArIChpbnN0cnVjdGlvblZhbHVlID8gXCIgXCIgKyBpbnN0cnVjdGlvblZhbHVlIDogXCJcIikgKyBcIj8+XCI7XG4gIH1cbn1cbmZ1bmN0aW9uIHdyaXRlQ29tbWVudChjb21tZW50LCBvcHRpb25zMikge1xuICByZXR1cm4gb3B0aW9uczIuaWdub3JlQ29tbWVudCA/IFwiXCIgOiBcIjwhLS1cIiArIChcImNvbW1lbnRGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuY29tbWVudEZuKGNvbW1lbnQsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogY29tbWVudCkgKyBcIi0tPlwiO1xufVxuZnVuY3Rpb24gd3JpdGVDZGF0YShjZGF0YSwgb3B0aW9uczIpIHtcbiAgcmV0dXJuIG9wdGlvbnMyLmlnbm9yZUNkYXRhID8gXCJcIiA6IFwiPCFbQ0RBVEFbXCIgKyAoXCJjZGF0YUZuXCIgaW4gb3B0aW9uczIgPyBvcHRpb25zMi5jZGF0YUZuKGNkYXRhLCBjdXJyZW50RWxlbWVudE5hbWUsIGN1cnJlbnRFbGVtZW50KSA6IGNkYXRhLnJlcGxhY2UoXCJdXT5cIiwgXCJdXV1dPjwhW0NEQVRBWz5cIikpICsgXCJdXT5cIjtcbn1cbmZ1bmN0aW9uIHdyaXRlRG9jdHlwZShkb2N0eXBlLCBvcHRpb25zMikge1xuICByZXR1cm4gb3B0aW9uczIuaWdub3JlRG9jdHlwZSA/IFwiXCIgOiBcIjwhRE9DVFlQRSBcIiArIChcImRvY3R5cGVGblwiIGluIG9wdGlvbnMyID8gb3B0aW9uczIuZG9jdHlwZUZuKGRvY3R5cGUsIGN1cnJlbnRFbGVtZW50TmFtZSwgY3VycmVudEVsZW1lbnQpIDogZG9jdHlwZSkgKyBcIj5cIjtcbn1cbmZ1bmN0aW9uIHdyaXRlVGV4dCh0ZXh0LCBvcHRpb25zMikge1xuICBpZiAob3B0aW9uczIuaWdub3JlVGV4dClcbiAgICByZXR1cm4gXCJcIjtcbiAgdGV4dCA9IFwiXCIgKyB0ZXh0O1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mYW1wOy9nLCBcIiZcIik7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKTtcbiAgcmV0dXJuIFwidGV4dEZuXCIgaW4gb3B0aW9uczIgPyBvcHRpb25zMi50ZXh0Rm4odGV4dCwgY3VycmVudEVsZW1lbnROYW1lLCBjdXJyZW50RWxlbWVudCkgOiB0ZXh0O1xufVxuZnVuY3Rpb24gaGFzQ29udGVudChlbGVtZW50Miwgb3B0aW9uczIpIHtcbiAgdmFyIGk7XG4gIGlmIChlbGVtZW50Mi5lbGVtZW50cyAmJiBlbGVtZW50Mi5lbGVtZW50cy5sZW5ndGgpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudDIuZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHN3aXRjaCAoZWxlbWVudDIuZWxlbWVudHNbaV1bb3B0aW9uczIudHlwZUtleV0pIHtcbiAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICBpZiAob3B0aW9uczIuaW5kZW50VGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY2RhdGFcIjpcbiAgICAgICAgICBpZiAob3B0aW9uczIuaW5kZW50Q2RhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImluc3RydWN0aW9uXCI6XG4gICAgICAgICAgaWYgKG9wdGlvbnMyLmluZGVudEluc3RydWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkb2N0eXBlXCI6XG4gICAgICAgIGNhc2UgXCJjb21tZW50XCI6XG4gICAgICAgIGNhc2UgXCJlbGVtZW50XCI6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHdyaXRlRWxlbWVudChlbGVtZW50Miwgb3B0aW9uczIsIGRlcHRoKSB7XG4gIGN1cnJlbnRFbGVtZW50ID0gZWxlbWVudDI7XG4gIGN1cnJlbnRFbGVtZW50TmFtZSA9IGVsZW1lbnQyLm5hbWU7XG4gIHZhciB4bWwyID0gW10sIGVsZW1lbnROYW1lID0gXCJlbGVtZW50TmFtZUZuXCIgaW4gb3B0aW9uczIgPyBvcHRpb25zMi5lbGVtZW50TmFtZUZuKGVsZW1lbnQyLm5hbWUsIGVsZW1lbnQyKSA6IGVsZW1lbnQyLm5hbWU7XG4gIHhtbDIucHVzaChcIjxcIiArIGVsZW1lbnROYW1lKTtcbiAgaWYgKGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldKSB7XG4gICAgeG1sMi5wdXNoKHdyaXRlQXR0cmlidXRlcyhlbGVtZW50MltvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XSwgb3B0aW9uczIsIGRlcHRoKSk7XG4gIH1cbiAgdmFyIHdpdGhDbG9zaW5nVGFnID0gZWxlbWVudDJbb3B0aW9uczIuZWxlbWVudHNLZXldICYmIGVsZW1lbnQyW29wdGlvbnMyLmVsZW1lbnRzS2V5XS5sZW5ndGggfHwgZWxlbWVudDJbb3B0aW9uczIuYXR0cmlidXRlc0tleV0gJiYgZWxlbWVudDJbb3B0aW9uczIuYXR0cmlidXRlc0tleV1bXCJ4bWw6c3BhY2VcIl0gPT09IFwicHJlc2VydmVcIjtcbiAgaWYgKCF3aXRoQ2xvc2luZ1RhZykge1xuICAgIGlmIChcImZ1bGxUYWdFbXB0eUVsZW1lbnRGblwiIGluIG9wdGlvbnMyKSB7XG4gICAgICB3aXRoQ2xvc2luZ1RhZyA9IG9wdGlvbnMyLmZ1bGxUYWdFbXB0eUVsZW1lbnRGbihlbGVtZW50Mi5uYW1lLCBlbGVtZW50Mik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpdGhDbG9zaW5nVGFnID0gb3B0aW9uczIuZnVsbFRhZ0VtcHR5RWxlbWVudDtcbiAgICB9XG4gIH1cbiAgaWYgKHdpdGhDbG9zaW5nVGFnKSB7XG4gICAgeG1sMi5wdXNoKFwiPlwiKTtcbiAgICBpZiAoZWxlbWVudDJbb3B0aW9uczIuZWxlbWVudHNLZXldICYmIGVsZW1lbnQyW29wdGlvbnMyLmVsZW1lbnRzS2V5XS5sZW5ndGgpIHtcbiAgICAgIHhtbDIucHVzaCh3cml0ZUVsZW1lbnRzKGVsZW1lbnQyW29wdGlvbnMyLmVsZW1lbnRzS2V5XSwgb3B0aW9uczIsIGRlcHRoICsgMSkpO1xuICAgICAgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50MjtcbiAgICAgIGN1cnJlbnRFbGVtZW50TmFtZSA9IGVsZW1lbnQyLm5hbWU7XG4gICAgfVxuICAgIHhtbDIucHVzaChvcHRpb25zMi5zcGFjZXMgJiYgaGFzQ29udGVudChlbGVtZW50Miwgb3B0aW9uczIpID8gXCJcXG5cIiArIEFycmF5KGRlcHRoICsgMSkuam9pbihvcHRpb25zMi5zcGFjZXMpIDogXCJcIik7XG4gICAgeG1sMi5wdXNoKFwiPC9cIiArIGVsZW1lbnROYW1lICsgXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIHhtbDIucHVzaChcIi8+XCIpO1xuICB9XG4gIHJldHVybiB4bWwyLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiB3cml0ZUVsZW1lbnRzKGVsZW1lbnRzLCBvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkge1xuICByZXR1cm4gZWxlbWVudHMucmVkdWNlKGZ1bmN0aW9uKHhtbDIsIGVsZW1lbnQyKSB7XG4gICAgdmFyIGluZGVudCA9IHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUgJiYgIXhtbDIpO1xuICAgIHN3aXRjaCAoZWxlbWVudDIudHlwZSkge1xuICAgICAgY2FzZSBcImVsZW1lbnRcIjpcbiAgICAgICAgcmV0dXJuIHhtbDIgKyBpbmRlbnQgKyB3cml0ZUVsZW1lbnQoZWxlbWVudDIsIG9wdGlvbnMyLCBkZXB0aCk7XG4gICAgICBjYXNlIFwiY29tbWVudFwiOlxuICAgICAgICByZXR1cm4geG1sMiArIGluZGVudCArIHdyaXRlQ29tbWVudChlbGVtZW50MltvcHRpb25zMi5jb21tZW50S2V5XSwgb3B0aW9uczIpO1xuICAgICAgY2FzZSBcImRvY3R5cGVcIjpcbiAgICAgICAgcmV0dXJuIHhtbDIgKyBpbmRlbnQgKyB3cml0ZURvY3R5cGUoZWxlbWVudDJbb3B0aW9uczIuZG9jdHlwZUtleV0sIG9wdGlvbnMyKTtcbiAgICAgIGNhc2UgXCJjZGF0YVwiOlxuICAgICAgICByZXR1cm4geG1sMiArIChvcHRpb25zMi5pbmRlbnRDZGF0YSA/IGluZGVudCA6IFwiXCIpICsgd3JpdGVDZGF0YShlbGVtZW50MltvcHRpb25zMi5jZGF0YUtleV0sIG9wdGlvbnMyKTtcbiAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgIHJldHVybiB4bWwyICsgKG9wdGlvbnMyLmluZGVudFRleHQgPyBpbmRlbnQgOiBcIlwiKSArIHdyaXRlVGV4dChlbGVtZW50MltvcHRpb25zMi50ZXh0S2V5XSwgb3B0aW9uczIpO1xuICAgICAgY2FzZSBcImluc3RydWN0aW9uXCI6XG4gICAgICAgIHZhciBpbnN0cnVjdGlvbiA9IHt9O1xuICAgICAgICBpbnN0cnVjdGlvbltlbGVtZW50MltvcHRpb25zMi5uYW1lS2V5XV0gPSBlbGVtZW50MltvcHRpb25zMi5hdHRyaWJ1dGVzS2V5XSA/IGVsZW1lbnQyIDogZWxlbWVudDJbb3B0aW9uczIuaW5zdHJ1Y3Rpb25LZXldO1xuICAgICAgICByZXR1cm4geG1sMiArIChvcHRpb25zMi5pbmRlbnRJbnN0cnVjdGlvbiA/IGluZGVudCA6IFwiXCIpICsgd3JpdGVJbnN0cnVjdGlvbihpbnN0cnVjdGlvbiwgb3B0aW9uczIsIGRlcHRoKTtcbiAgICB9XG4gIH0sIFwiXCIpO1xufVxuZnVuY3Rpb24gaGFzQ29udGVudENvbXBhY3QoZWxlbWVudDIsIG9wdGlvbnMyLCBhbnlDb250ZW50KSB7XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGVsZW1lbnQyKSB7XG4gICAgaWYgKGVsZW1lbnQyLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2Ugb3B0aW9uczIucGFyZW50S2V5OlxuICAgICAgICBjYXNlIG9wdGlvbnMyLmF0dHJpYnV0ZXNLZXk6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugb3B0aW9uczIudGV4dEtleTpcbiAgICAgICAgICBpZiAob3B0aW9uczIuaW5kZW50VGV4dCB8fCBhbnlDb250ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugb3B0aW9uczIuY2RhdGFLZXk6XG4gICAgICAgICAgaWYgKG9wdGlvbnMyLmluZGVudENkYXRhIHx8IGFueUNvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBvcHRpb25zMi5pbnN0cnVjdGlvbktleTpcbiAgICAgICAgICBpZiAob3B0aW9uczIuaW5kZW50SW5zdHJ1Y3Rpb24gfHwgYW55Q29udGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIG9wdGlvbnMyLmRvY3R5cGVLZXk6XG4gICAgICAgIGNhc2Ugb3B0aW9uczIuY29tbWVudEtleTpcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gd3JpdGVFbGVtZW50Q29tcGFjdChlbGVtZW50MiwgbmFtZSwgb3B0aW9uczIsIGRlcHRoLCBpbmRlbnQpIHtcbiAgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50MjtcbiAgY3VycmVudEVsZW1lbnROYW1lID0gbmFtZTtcbiAgdmFyIGVsZW1lbnROYW1lID0gXCJlbGVtZW50TmFtZUZuXCIgaW4gb3B0aW9uczIgPyBvcHRpb25zMi5lbGVtZW50TmFtZUZuKG5hbWUsIGVsZW1lbnQyKSA6IG5hbWU7XG4gIGlmICh0eXBlb2YgZWxlbWVudDIgPT09IFwidW5kZWZpbmVkXCIgfHwgZWxlbWVudDIgPT09IG51bGwgfHwgZWxlbWVudDIgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gXCJmdWxsVGFnRW1wdHlFbGVtZW50Rm5cIiBpbiBvcHRpb25zMiAmJiBvcHRpb25zMi5mdWxsVGFnRW1wdHlFbGVtZW50Rm4obmFtZSwgZWxlbWVudDIpIHx8IG9wdGlvbnMyLmZ1bGxUYWdFbXB0eUVsZW1lbnQgPyBcIjxcIiArIGVsZW1lbnROYW1lICsgXCI+PC9cIiArIGVsZW1lbnROYW1lICsgXCI+XCIgOiBcIjxcIiArIGVsZW1lbnROYW1lICsgXCIvPlwiO1xuICB9XG4gIHZhciB4bWwyID0gW107XG4gIGlmIChuYW1lKSB7XG4gICAgeG1sMi5wdXNoKFwiPFwiICsgZWxlbWVudE5hbWUpO1xuICAgIGlmICh0eXBlb2YgZWxlbWVudDIgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHhtbDIucHVzaChcIj5cIiArIHdyaXRlVGV4dChlbGVtZW50Miwgb3B0aW9uczIpICsgXCI8L1wiICsgZWxlbWVudE5hbWUgKyBcIj5cIik7XG4gICAgICByZXR1cm4geG1sMi5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudDJbb3B0aW9uczIuYXR0cmlidXRlc0tleV0pIHtcbiAgICAgIHhtbDIucHVzaCh3cml0ZUF0dHJpYnV0ZXMoZWxlbWVudDJbb3B0aW9uczIuYXR0cmlidXRlc0tleV0sIG9wdGlvbnMyLCBkZXB0aCkpO1xuICAgIH1cbiAgICB2YXIgd2l0aENsb3NpbmdUYWcgPSBoYXNDb250ZW50Q29tcGFjdChlbGVtZW50Miwgb3B0aW9uczIsIHRydWUpIHx8IGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldICYmIGVsZW1lbnQyW29wdGlvbnMyLmF0dHJpYnV0ZXNLZXldW1wieG1sOnNwYWNlXCJdID09PSBcInByZXNlcnZlXCI7XG4gICAgaWYgKCF3aXRoQ2xvc2luZ1RhZykge1xuICAgICAgaWYgKFwiZnVsbFRhZ0VtcHR5RWxlbWVudEZuXCIgaW4gb3B0aW9uczIpIHtcbiAgICAgICAgd2l0aENsb3NpbmdUYWcgPSBvcHRpb25zMi5mdWxsVGFnRW1wdHlFbGVtZW50Rm4obmFtZSwgZWxlbWVudDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2l0aENsb3NpbmdUYWcgPSBvcHRpb25zMi5mdWxsVGFnRW1wdHlFbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAod2l0aENsb3NpbmdUYWcpIHtcbiAgICAgIHhtbDIucHVzaChcIj5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhtbDIucHVzaChcIi8+XCIpO1xuICAgICAgcmV0dXJuIHhtbDIuam9pbihcIlwiKTtcbiAgICB9XG4gIH1cbiAgeG1sMi5wdXNoKHdyaXRlRWxlbWVudHNDb21wYWN0KGVsZW1lbnQyLCBvcHRpb25zMiwgZGVwdGggKyAxLCBmYWxzZSkpO1xuICBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQyO1xuICBjdXJyZW50RWxlbWVudE5hbWUgPSBuYW1lO1xuICBpZiAobmFtZSkge1xuICAgIHhtbDIucHVzaCgoaW5kZW50ID8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZhbHNlKSA6IFwiXCIpICsgXCI8L1wiICsgZWxlbWVudE5hbWUgKyBcIj5cIik7XG4gIH1cbiAgcmV0dXJuIHhtbDIuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHdyaXRlRWxlbWVudHNDb21wYWN0KGVsZW1lbnQyLCBvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkge1xuICB2YXIgaSwga2V5LCBub2RlcywgeG1sMiA9IFtdO1xuICBmb3IgKGtleSBpbiBlbGVtZW50Mikge1xuICAgIGlmIChlbGVtZW50Mi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBub2RlcyA9IGlzQXJyYXkoZWxlbWVudDJba2V5XSkgPyBlbGVtZW50MltrZXldIDogW2VsZW1lbnQyW2tleV1dO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgY2FzZSBvcHRpb25zMi5kZWNsYXJhdGlvbktleTpcbiAgICAgICAgICAgIHhtbDIucHVzaCh3cml0ZURlY2xhcmF0aW9uKG5vZGVzW2ldLCBvcHRpb25zMiwgZGVwdGgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugb3B0aW9uczIuaW5zdHJ1Y3Rpb25LZXk6XG4gICAgICAgICAgICB4bWwyLnB1c2goKG9wdGlvbnMyLmluZGVudEluc3RydWN0aW9uID8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkgOiBcIlwiKSArIHdyaXRlSW5zdHJ1Y3Rpb24obm9kZXNbaV0sIG9wdGlvbnMyLCBkZXB0aCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBvcHRpb25zMi5hdHRyaWJ1dGVzS2V5OlxuICAgICAgICAgIGNhc2Ugb3B0aW9uczIucGFyZW50S2V5OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBvcHRpb25zMi50ZXh0S2V5OlxuICAgICAgICAgICAgeG1sMi5wdXNoKChvcHRpb25zMi5pbmRlbnRUZXh0ID8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkgOiBcIlwiKSArIHdyaXRlVGV4dChub2Rlc1tpXSwgb3B0aW9uczIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugb3B0aW9uczIuY2RhdGFLZXk6XG4gICAgICAgICAgICB4bWwyLnB1c2goKG9wdGlvbnMyLmluZGVudENkYXRhID8gd3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkgOiBcIlwiKSArIHdyaXRlQ2RhdGEobm9kZXNbaV0sIG9wdGlvbnMyKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIG9wdGlvbnMyLmRvY3R5cGVLZXk6XG4gICAgICAgICAgICB4bWwyLnB1c2god3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkgKyB3cml0ZURvY3R5cGUobm9kZXNbaV0sIG9wdGlvbnMyKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIG9wdGlvbnMyLmNvbW1lbnRLZXk6XG4gICAgICAgICAgICB4bWwyLnB1c2god3JpdGVJbmRlbnRhdGlvbihvcHRpb25zMiwgZGVwdGgsIGZpcnN0TGluZSkgKyB3cml0ZUNvbW1lbnQobm9kZXNbaV0sIG9wdGlvbnMyKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgeG1sMi5wdXNoKHdyaXRlSW5kZW50YXRpb24ob3B0aW9uczIsIGRlcHRoLCBmaXJzdExpbmUpICsgd3JpdGVFbGVtZW50Q29tcGFjdChub2Rlc1tpXSwga2V5LCBvcHRpb25zMiwgZGVwdGgsIGhhc0NvbnRlbnRDb21wYWN0KG5vZGVzW2ldLCBvcHRpb25zMikpKTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdExpbmUgPSBmaXJzdExpbmUgJiYgIXhtbDIubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4geG1sMi5qb2luKFwiXCIpO1xufVxudmFyIGpzMnhtbCQyID0gZnVuY3Rpb24oanMsIG9wdGlvbnMyKSB7XG4gIG9wdGlvbnMyID0gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMyKTtcbiAgdmFyIHhtbDIgPSBbXTtcbiAgY3VycmVudEVsZW1lbnQgPSBqcztcbiAgY3VycmVudEVsZW1lbnROYW1lID0gXCJfcm9vdF9cIjtcbiAgaWYgKG9wdGlvbnMyLmNvbXBhY3QpIHtcbiAgICB4bWwyLnB1c2god3JpdGVFbGVtZW50c0NvbXBhY3QoanMsIG9wdGlvbnMyLCAwLCB0cnVlKSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGpzW29wdGlvbnMyLmRlY2xhcmF0aW9uS2V5XSkge1xuICAgICAgeG1sMi5wdXNoKHdyaXRlRGVjbGFyYXRpb24oanNbb3B0aW9uczIuZGVjbGFyYXRpb25LZXldLCBvcHRpb25zMiwgMCkpO1xuICAgIH1cbiAgICBpZiAoanNbb3B0aW9uczIuZWxlbWVudHNLZXldICYmIGpzW29wdGlvbnMyLmVsZW1lbnRzS2V5XS5sZW5ndGgpIHtcbiAgICAgIHhtbDIucHVzaCh3cml0ZUVsZW1lbnRzKGpzW29wdGlvbnMyLmVsZW1lbnRzS2V5XSwgb3B0aW9uczIsIDAsICF4bWwyLmxlbmd0aCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4geG1sMi5qb2luKFwiXCIpO1xufTtcbnZhciBqczJ4bWwkMSA9IGpzMnhtbCQyO1xudmFyIGpzb24yeG1sJDEgPSBmdW5jdGlvbihqc29uLCBvcHRpb25zMikge1xuICBpZiAoanNvbiBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgIGpzb24gPSBqc29uLnRvU3RyaW5nKCk7XG4gIH1cbiAgdmFyIGpzID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBqc29uID09PSBcInN0cmluZ1wiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGpzID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgSlNPTiBzdHJ1Y3R1cmUgaXMgaW52YWxpZFwiKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAganMgPSBqc29uO1xuICB9XG4gIHJldHVybiBqczJ4bWwkMShqcywgb3B0aW9uczIpO1xufTtcbnZhciB4bWwyanMgPSB4bWwyanMkMjtcbnZhciB4bWwyanNvbiA9IHhtbDJqc29uJDE7XG52YXIganMyeG1sID0ganMyeG1sJDI7XG52YXIganNvbjJ4bWwgPSBqc29uMnhtbCQxO1xudmFyIGxpYiA9IHtcbiAgeG1sMmpzLFxuICB4bWwyanNvbixcbiAganMyeG1sLFxuICBqc29uMnhtbFxufTtcbmNvbnN0IGNvbnZlcnRUb1htbENvbXBvbmVudCA9IChlbGVtZW50MikgPT4ge1xuICBzd2l0Y2ggKGVsZW1lbnQyLnR5cGUpIHtcbiAgICBjYXNlIHZvaWQgMDpcbiAgICBjYXNlIFwiZWxlbWVudFwiOlxuICAgICAgY29uc3QgeG1sQ29tcG9uZW50ID0gbmV3IEltcG9ydGVkWG1sQ29tcG9uZW50KGVsZW1lbnQyLm5hbWUsIGVsZW1lbnQyLmF0dHJpYnV0ZXMpO1xuICAgICAgY29uc3QgY2hpbGRFbGVtZW50cyA9IGVsZW1lbnQyLmVsZW1lbnRzIHx8IFtdO1xuICAgICAgZm9yIChjb25zdCBjaGlsZEVsbSBvZiBjaGlsZEVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY29udmVydFRvWG1sQ29tcG9uZW50KGNoaWxkRWxtKTtcbiAgICAgICAgaWYgKGNoaWxkICE9PSB2b2lkIDApIHtcbiAgICAgICAgICB4bWxDb21wb25lbnQucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB4bWxDb21wb25lbnQ7XG4gICAgY2FzZSBcInRleHRcIjpcbiAgICAgIHJldHVybiBlbGVtZW50Mi50ZXh0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICB9XG59O1xuY2xhc3MgSW1wb3J0ZWRYbWxDb21wb25lbnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgLy8gbm9vcFxufVxuY2xhc3MgSW1wb3J0ZWRYbWxDb21wb25lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICAvKipcbiAgICogQ29udmVydHMgdGhlIHhtbCBzdHJpbmcgdG8gYSBYbWxDb21wb25lbnQgdHJlZS5cbiAgICpcbiAgICogQHBhcmFtIGltcG9ydGVkQ29udGVudCB4bWwgY29udGVudCBvZiB0aGUgaW1wb3J0ZWQgY29tcG9uZW50XG4gICAqL1xuICBzdGF0aWMgZnJvbVhtbFN0cmluZyhpbXBvcnRlZENvbnRlbnQpIHtcbiAgICBjb25zdCB4bWxPYmogPSBsaWIueG1sMmpzKGltcG9ydGVkQ29udGVudCwgeyBjb21wYWN0OiBmYWxzZSB9KTtcbiAgICByZXR1cm4gY29udmVydFRvWG1sQ29tcG9uZW50KHhtbE9iaik7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSB4bWwgc3RyaW5nIHRvIGEgWG1sQ29tcG9uZW50IHRyZWUuXG4gICAqXG4gICAqIEBwYXJhbSBpbXBvcnRlZENvbnRlbnQgeG1sIGNvbnRlbnQgb2YgdGhlIGltcG9ydGVkIGNvbXBvbmVudFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgY29uc3RydWN0b3Iocm9vdEtleSwgX2F0dHIpIHtcbiAgICBzdXBlcihyb290S2V5KTtcbiAgICBpZiAoX2F0dHIpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBJbXBvcnRlZFhtbENvbXBvbmVudEF0dHJpYnV0ZXMoX2F0dHIpKTtcbiAgICB9XG4gIH1cbiAgcHVzaCh4bWxDb21wb25lbnQpIHtcbiAgICB0aGlzLnJvb3QucHVzaCh4bWxDb21wb25lbnQpO1xuICB9XG59XG5jbGFzcyBJbXBvcnRlZFJvb3RFbGVtZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNvbnN0cnVjdG9yKF9hdHRyKSB7XG4gICAgc3VwZXIoXCJcIik7XG4gICAgdGhpcy5fYXR0ciA9IF9hdHRyO1xuICB9XG4gIHByZXBGb3JYbWwoXykge1xuICAgIHJldHVybiB7XG4gICAgICBfYXR0cjogdGhpcy5fYXR0clxuICAgIH07XG4gIH1cbn1cbmNvbnN0IFdPUktBUk9VTkQzID0gXCJcIjtcbmNsYXNzIEluaXRpYWxpemFibGVYbWxDb21wb25lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihyb290S2V5LCBpbml0Q29tcG9uZW50KSB7XG4gICAgc3VwZXIocm9vdEtleSk7XG4gICAgaWYgKGluaXRDb21wb25lbnQpIHtcbiAgICAgIHRoaXMucm9vdCA9IGluaXRDb21wb25lbnQucm9vdDtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IGRlY2ltYWxOdW1iZXIgPSAodmFsKSA9PiB7XG4gIGlmIChpc05hTih2YWwpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbHVlICcke3ZhbH0nIHNwZWNpZmllZC4gTXVzdCBiZSBhbiBpbnRlZ2VyLmApO1xuICB9XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG59O1xuY29uc3QgdW5zaWduZWREZWNpbWFsTnVtYmVyID0gKHZhbCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IGRlY2ltYWxOdW1iZXIodmFsKTtcbiAgaWYgKHZhbHVlIDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZSAnJHt2YWx9JyBzcGVjaWZpZWQuIE11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLmApO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5jb25zdCBoZXhCaW5hcnkgPSAodmFsLCBsZW5ndGgpID0+IHtcbiAgY29uc3QgZXhwZWN0ZWRMZW5ndGggPSBsZW5ndGggKiAyO1xuICBpZiAodmFsLmxlbmd0aCAhPT0gZXhwZWN0ZWRMZW5ndGggfHwgaXNOYU4oTnVtYmVyKGAweCR7dmFsfWApKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBoZXggdmFsdWUgJyR7dmFsfScuIEV4cGVjdGVkICR7ZXhwZWN0ZWRMZW5ndGh9IGRpZ2l0IGhleCB2YWx1ZWApO1xuICB9XG4gIHJldHVybiB2YWw7XG59O1xuY29uc3QgbG9uZ0hleE51bWJlciA9ICh2YWwpID0+IGhleEJpbmFyeSh2YWwsIDQpO1xuY29uc3Qgc2hvcnRIZXhOdW1iZXIgPSAodmFsKSA9PiBoZXhCaW5hcnkodmFsLCAyKTtcbmNvbnN0IHVDaGFySGV4TnVtYmVyID0gKHZhbCkgPT4gaGV4QmluYXJ5KHZhbCwgMSk7XG5jb25zdCB1bml2ZXJzYWxNZWFzdXJlVmFsdWUgPSAodmFsKSA9PiB7XG4gIGNvbnN0IHVuaXQgPSB2YWwuc2xpY2UoLTIpO1xuICBjb25zdCBhbW91bnQgPSB2YWwuc3Vic3RyaW5nKDAsIHZhbC5sZW5ndGggLSAyKTtcbiAgcmV0dXJuIGAke051bWJlcihhbW91bnQpfSR7dW5pdH1gO1xufTtcbmNvbnN0IHBvc2l0aXZlVW5pdmVyc2FsTWVhc3VyZVZhbHVlID0gKHZhbCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IHVuaXZlcnNhbE1lYXN1cmVWYWx1ZSh2YWwpO1xuICBpZiAocGFyc2VGbG9hdCh2YWx1ZSkgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbHVlICcke3ZhbHVlfScgc3BlY2lmaWVkLiBFeHBlY3RlZCBhIHBvc2l0aXZlIG51bWJlci5gKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuY29uc3QgaGV4Q29sb3JWYWx1ZSA9ICh2YWwpID0+IHtcbiAgaWYgKHZhbCA9PT0gXCJhdXRvXCIpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIGNvbnN0IGNvbG9yID0gdmFsLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyB2YWwuc3Vic3RyaW5nKDEpIDogdmFsO1xuICByZXR1cm4gaGV4QmluYXJ5KGNvbG9yLCAzKTtcbn07XG5jb25zdCBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyB1bml2ZXJzYWxNZWFzdXJlVmFsdWUodmFsKSA6IGRlY2ltYWxOdW1iZXIodmFsKTtcbmNvbnN0IGhwc01lYXN1cmVWYWx1ZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBwb3NpdGl2ZVVuaXZlcnNhbE1lYXN1cmVWYWx1ZSh2YWwpIDogdW5zaWduZWREZWNpbWFsTnVtYmVyKHZhbCk7XG5jb25zdCBzaWduZWRIcHNNZWFzdXJlVmFsdWUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiID8gdW5pdmVyc2FsTWVhc3VyZVZhbHVlKHZhbCkgOiBkZWNpbWFsTnVtYmVyKHZhbCk7XG5jb25zdCB0d2lwc01lYXN1cmVWYWx1ZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBwb3NpdGl2ZVVuaXZlcnNhbE1lYXN1cmVWYWx1ZSh2YWwpIDogdW5zaWduZWREZWNpbWFsTnVtYmVyKHZhbCk7XG5jb25zdCBwZXJjZW50YWdlVmFsdWUgPSAodmFsKSA9PiB7XG4gIGNvbnN0IHBlcmNlbnQgPSB2YWwuc3Vic3RyaW5nKDAsIHZhbC5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIGAke051bWJlcihwZXJjZW50KX0lYDtcbn07XG5jb25zdCBtZWFzdXJlbWVudE9yUGVyY2VudFZhbHVlID0gKHZhbCkgPT4ge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBkZWNpbWFsTnVtYmVyKHZhbCk7XG4gIH1cbiAgaWYgKHZhbC5zbGljZSgtMSkgPT09IFwiJVwiKSB7XG4gICAgcmV0dXJuIHBlcmNlbnRhZ2VWYWx1ZSh2YWwpO1xuICB9XG4gIHJldHVybiB1bml2ZXJzYWxNZWFzdXJlVmFsdWUodmFsKTtcbn07XG5jb25zdCBlaWdodGhQb2ludE1lYXN1cmVWYWx1ZSA9IHVuc2lnbmVkRGVjaW1hbE51bWJlcjtcbmNvbnN0IHBvaW50TWVhc3VyZVZhbHVlID0gdW5zaWduZWREZWNpbWFsTnVtYmVyO1xuY29uc3QgZGF0ZVRpbWVWYWx1ZSA9ICh2YWwpID0+IHZhbC50b0lTT1N0cmluZygpO1xuY2xhc3MgT25PZmZFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsID0gdHJ1ZSkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIGlmICh2YWwgIT09IHRydWUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBdHRyaWJ1dGVzKHsgdmFsIH0pKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEhwc01lYXN1cmVFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsKSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEF0dHJpYnV0ZXMoeyB2YWw6IGhwc01lYXN1cmVWYWx1ZSh2YWwpIH0pKTtcbiAgfVxufVxuY2xhc3MgRW1wdHlFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbn1cbmNsYXNzIFN0cmluZ1ZhbHVlRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHZhbCkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBdHRyaWJ1dGVzKHsgdmFsIH0pKTtcbiAgfVxufVxuY29uc3QgY3JlYXRlU3RyaW5nRWxlbWVudCA9IChuYW1lLCB2YWx1ZSkgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZSxcbiAgYXR0cmlidXRlczoge1xuICAgIHZhbHVlOiB7IGtleTogXCJ3OnZhbFwiLCB2YWx1ZSB9XG4gIH1cbn0pO1xuY2xhc3MgTnVtYmVyVmFsdWVFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsKSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEF0dHJpYnV0ZXMoeyB2YWwgfSkpO1xuICB9XG59XG5jbGFzcyBTdHJpbmdFbnVtVmFsdWVFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsKSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEF0dHJpYnV0ZXMoeyB2YWwgfSkpO1xuICB9XG59XG5jbGFzcyBTdHJpbmdDb250YWluZXIgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB2YWwpIHtcbiAgICBzdXBlcihuYW1lKTtcbiAgICB0aGlzLnJvb3QucHVzaCh2YWwpO1xuICB9XG59XG5jbGFzcyBCdWlsZGVyRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBuYW1lLFxuICAgIGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW5cbiAgfSkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTmV4dEF0dHJpYnV0ZUNvbXBvbmVudChhdHRyaWJ1dGVzKSk7XG4gICAgfVxuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goLi4uY2hpbGRyZW4pO1xuICAgIH1cbiAgfVxufVxuY29uc3QgQWxpZ25tZW50VHlwZSA9IHtcbiAgLyoqIEFsaWduIFN0YXJ0ICovXG4gIFNUQVJUOiBcInN0YXJ0XCIsXG4gIC8qKiBBbGlnbiBDZW50ZXIgKi9cbiAgQ0VOVEVSOiBcImNlbnRlclwiLFxuICAvKiogRW5kICovXG4gIEVORDogXCJlbmRcIixcbiAgLyoqIEp1c3RpZmllZCAqL1xuICBCT1RIOiBcImJvdGhcIixcbiAgLyoqIE1lZGl1bSBLYXNoaWRhIExlbmd0aCAqL1xuICBNRURJVU1fS0FTSElEQTogXCJtZWRpdW1LYXNoaWRhXCIsXG4gIC8qKiBEaXN0cmlidXRlIEFsbCBDaGFyYWN0ZXJzIEVxdWFsbHkgKi9cbiAgRElTVFJJQlVURTogXCJkaXN0cmlidXRlXCIsXG4gIC8qKiBBbGlnbiB0byBMaXN0IFRhYiAqL1xuICBOVU1fVEFCOiBcIm51bVRhYlwiLFxuICAvKiogV2lkZXN0IEthc2hpZGEgTGVuZ3RoICovXG4gIEhJR0hfS0FTSElEQTogXCJoaWdoS2FzaGlkYVwiLFxuICAvKiogTG93IEthc2hpZGEgTGVuZ3RoICovXG4gIExPV19LQVNISURBOiBcImxvd0thc2hpZGFcIixcbiAgLyoqIFRoYWkgTGFuZ3VhZ2UgSnVzdGlmaWNhdGlvbiAqL1xuICBUSEFJX0RJU1RSSUJVVEU6IFwidGhhaURpc3RyaWJ1dGVcIixcbiAgLyoqIEFsaWduIExlZnQgKi9cbiAgTEVGVDogXCJsZWZ0XCIsXG4gIC8qKiBBbGlnbiBSaWdodCAqL1xuICBSSUdIVDogXCJyaWdodFwiLFxuICAvKiogSnVzdGlmaWVkICovXG4gIEpVU1RJRklFRDogXCJib3RoXCJcbn07XG5jbGFzcyBBbGlnbm1lbnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbDogXCJ3OnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBBbGlnbm1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgc3VwZXIoXCJ3OmpjXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBbGlnbm1lbnRBdHRyaWJ1dGVzKHsgdmFsOiB0eXBlIH0pKTtcbiAgfVxufVxuY2xhc3MgQm9yZGVyRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnROYW1lLCB7IGNvbG9yLCBzaXplLCBzcGFjZSwgc3R5bGUgfSkge1xuICAgIHN1cGVyKGVsZW1lbnROYW1lKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBCb3JkZXJzQXR0cmlidXRlcyh7XG4gICAgICAgIHN0eWxlLFxuICAgICAgICBjb2xvcjogY29sb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhleENvbG9yVmFsdWUoY29sb3IpLFxuICAgICAgICBzaXplOiBzaXplID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlaWdodGhQb2ludE1lYXN1cmVWYWx1ZShzaXplKSxcbiAgICAgICAgc3BhY2U6IHNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb2ludE1lYXN1cmVWYWx1ZShzcGFjZSlcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQm9yZGVyc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHN0eWxlOiBcInc6dmFsXCIsXG4gICAgICBjb2xvcjogXCJ3OmNvbG9yXCIsXG4gICAgICBzaXplOiBcInc6c3pcIixcbiAgICAgIHNwYWNlOiBcInc6c3BhY2VcIlxuICAgIH0pO1xuICB9XG59XG5jb25zdCBCb3JkZXJTdHlsZSA9IHtcbiAgU0lOR0xFOiBcInNpbmdsZVwiLFxuICBEQVNIX0RPVF9TVFJPS0VEOiBcImRhc2hEb3RTdHJva2VkXCIsXG4gIERBU0hFRDogXCJkYXNoZWRcIixcbiAgREFTSF9TTUFMTF9HQVA6IFwiZGFzaFNtYWxsR2FwXCIsXG4gIERPVF9EQVNIOiBcImRvdERhc2hcIixcbiAgRE9UX0RPVF9EQVNIOiBcImRvdERvdERhc2hcIixcbiAgRE9UVEVEOiBcImRvdHRlZFwiLFxuICBET1VCTEU6IFwiZG91YmxlXCIsXG4gIERPVUJMRV9XQVZFOiBcImRvdWJsZVdhdmVcIixcbiAgSU5TRVQ6IFwiaW5zZXRcIixcbiAgTklMOiBcIm5pbFwiLFxuICBOT05FOiBcIm5vbmVcIixcbiAgT1VUU0VUOiBcIm91dHNldFwiLFxuICBUSElDSzogXCJ0aGlja1wiLFxuICBUSElDS19USElOX0xBUkdFX0dBUDogXCJ0aGlja1RoaW5MYXJnZUdhcFwiLFxuICBUSElDS19USElOX01FRElVTV9HQVA6IFwidGhpY2tUaGluTWVkaXVtR2FwXCIsXG4gIFRISUNLX1RISU5fU01BTExfR0FQOiBcInRoaWNrVGhpblNtYWxsR2FwXCIsXG4gIFRISU5fVEhJQ0tfTEFSR0VfR0FQOiBcInRoaW5UaGlja0xhcmdlR2FwXCIsXG4gIFRISU5fVEhJQ0tfTUVESVVNX0dBUDogXCJ0aGluVGhpY2tNZWRpdW1HYXBcIixcbiAgVEhJTl9USElDS19TTUFMTF9HQVA6IFwidGhpblRoaWNrU21hbGxHYXBcIixcbiAgVEhJTl9USElDS19USElOX0xBUkdFX0dBUDogXCJ0aGluVGhpY2tUaGluTGFyZ2VHYXBcIixcbiAgVEhJTl9USElDS19USElOX01FRElVTV9HQVA6IFwidGhpblRoaWNrVGhpbk1lZGl1bUdhcFwiLFxuICBUSElOX1RISUNLX1RISU5fU01BTExfR0FQOiBcInRoaW5UaGlja1RoaW5TbWFsbEdhcFwiLFxuICBUSFJFRV9EX0VNQk9TUzogXCJ0aHJlZURFbWJvc3NcIixcbiAgVEhSRUVfRF9FTkdSQVZFOiBcInRocmVlREVuZ3JhdmVcIixcbiAgVFJJUExFOiBcInRyaXBsZVwiLFxuICBXQVZFOiBcIndhdmVcIlxufTtcbmNsYXNzIEJvcmRlciBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpwQmRyXCIpO1xuICAgIGlmIChvcHRpb25zMi50b3ApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzp0b3BcIiwgb3B0aW9uczIudG9wKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ib3R0b20pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpib3R0b21cIiwgb3B0aW9uczIuYm90dG9tKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sZWZ0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6bGVmdFwiLCBvcHRpb25zMi5sZWZ0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5yaWdodCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnJpZ2h0XCIsIG9wdGlvbnMyLnJpZ2h0KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBUaGVtYXRpY0JyZWFrIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OnBCZHJcIik7XG4gICAgY29uc3QgYm90dG9tID0gbmV3IEJvcmRlckVsZW1lbnQoXCJ3OmJvdHRvbVwiLCB7XG4gICAgICBjb2xvcjogXCJhdXRvXCIsXG4gICAgICBzcGFjZTogMSxcbiAgICAgIHN0eWxlOiBCb3JkZXJTdHlsZS5TSU5HTEUsXG4gICAgICBzaXplOiA2XG4gICAgfSk7XG4gICAgdGhpcy5yb290LnB1c2goYm90dG9tKTtcbiAgfVxufVxuY2xhc3MgSW5kZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBzdGFydCwgZW5kLCBsZWZ0LCByaWdodCwgaGFuZ2luZywgZmlyc3RMaW5lIH0pIHtcbiAgICBzdXBlcihcInc6aW5kXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGtleTogXCJ3OnN0YXJ0XCIsXG4gICAgICAgICAgdmFsdWU6IHN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShzdGFydClcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAga2V5OiBcInc6ZW5kXCIsXG4gICAgICAgICAgdmFsdWU6IGVuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUoZW5kKVxuICAgICAgICB9LFxuICAgICAgICBsZWZ0OiB7XG4gICAgICAgICAga2V5OiBcInc6bGVmdFwiLFxuICAgICAgICAgIHZhbHVlOiBsZWZ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShsZWZ0KVxuICAgICAgICB9LFxuICAgICAgICByaWdodDoge1xuICAgICAgICAgIGtleTogXCJ3OnJpZ2h0XCIsXG4gICAgICAgICAgdmFsdWU6IHJpZ2h0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZShyaWdodClcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZ2luZzoge1xuICAgICAgICAgIGtleTogXCJ3OmhhbmdpbmdcIixcbiAgICAgICAgICB2YWx1ZTogaGFuZ2luZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUoaGFuZ2luZylcbiAgICAgICAgfSxcbiAgICAgICAgZmlyc3RMaW5lOiB7XG4gICAgICAgICAga2V5OiBcInc6Zmlyc3RMaW5lXCIsXG4gICAgICAgICAgdmFsdWU6IGZpcnN0TGluZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHdpcHNNZWFzdXJlVmFsdWUoZmlyc3RMaW5lKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmxldCBCcmVhayQxID0gY2xhc3MgQnJlYWsgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6YnJcIik7XG4gIH1cbn07XG5jb25zdCBGaWVsZENoYXJhY3RlclR5cGUgPSB7XG4gIEJFR0lOOiBcImJlZ2luXCIsXG4gIEVORDogXCJlbmRcIixcbiAgU0VQQVJBVEU6IFwic2VwYXJhdGVcIlxufTtcbmNsYXNzIEZpZENoYXJBdHRycyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB0eXBlOiBcInc6ZmxkQ2hhclR5cGVcIiwgZGlydHk6IFwidzpkaXJ0eVwiIH0pO1xuICB9XG59XG5jbGFzcyBCZWdpbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGRpcnR5KSB7XG4gICAgc3VwZXIoXCJ3OmZsZENoYXJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEZpZENoYXJBdHRycyh7IHR5cGU6IEZpZWxkQ2hhcmFjdGVyVHlwZS5CRUdJTiwgZGlydHkgfSkpO1xuICB9XG59XG5jbGFzcyBTZXBhcmF0ZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGRpcnR5KSB7XG4gICAgc3VwZXIoXCJ3OmZsZENoYXJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEZpZENoYXJBdHRycyh7IHR5cGU6IEZpZWxkQ2hhcmFjdGVyVHlwZS5TRVBBUkFURSwgZGlydHkgfSkpO1xuICB9XG59XG5jbGFzcyBFbmQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihkaXJ0eSkge1xuICAgIHN1cGVyKFwidzpmbGRDaGFyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGaWRDaGFyQXR0cnMoeyB0eXBlOiBGaWVsZENoYXJhY3RlclR5cGUuRU5ELCBkaXJ0eSB9KSk7XG4gIH1cbn1cbmNvbnN0IEhvcml6b250YWxQb3NpdGlvbkFsaWduID0ge1xuICBDRU5URVI6IFwiY2VudGVyXCIsXG4gIElOU0lERTogXCJpbnNpZGVcIixcbiAgTEVGVDogXCJsZWZ0XCIsXG4gIE9VVFNJREU6IFwib3V0c2lkZVwiLFxuICBSSUdIVDogXCJyaWdodFwiXG59O1xuY29uc3QgVmVydGljYWxQb3NpdGlvbkFsaWduID0ge1xuICBCT1RUT006IFwiYm90dG9tXCIsXG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgSU5TSURFOiBcImluc2lkZVwiLFxuICBPVVRTSURFOiBcIm91dHNpZGVcIixcbiAgVE9QOiBcInRvcFwiXG59O1xuY29uc3QgTnVtYmVyRm9ybWF0JDEgPSB7XG4gIERFQ0lNQUw6IFwiZGVjaW1hbFwiLFxuICBVUFBFUl9ST01BTjogXCJ1cHBlclJvbWFuXCIsXG4gIExPV0VSX1JPTUFOOiBcImxvd2VyUm9tYW5cIixcbiAgVVBQRVJfTEVUVEVSOiBcInVwcGVyTGV0dGVyXCIsXG4gIExPV0VSX0xFVFRFUjogXCJsb3dlckxldHRlclwiLFxuICBPUkRJTkFMOiBcIm9yZGluYWxcIixcbiAgQ0FSRElOQUxfVEVYVDogXCJjYXJkaW5hbFRleHRcIixcbiAgT1JESU5BTF9URVhUOiBcIm9yZGluYWxUZXh0XCIsXG4gIEhFWDogXCJoZXhcIixcbiAgQ0hJQ0FHTzogXCJjaGljYWdvXCIsXG4gIElERU9HUkFQSF9ESUdJVEFMOiBcImlkZW9ncmFwaERpZ2l0YWxcIixcbiAgSkFQQU5FU0VfQ09VTlRJTkc6IFwiamFwYW5lc2VDb3VudGluZ1wiLFxuICBBSVVFTzogXCJhaXVlb1wiLFxuICBJUk9IQTogXCJpcm9oYVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEg6IFwiZGVjaW1hbEZ1bGxXaWR0aFwiLFxuICBERUNJTUFMX0hBTEZfV0lEVEg6IFwiZGVjaW1hbEhhbGZXaWR0aFwiLFxuICBKQVBBTkVTRV9MRUdBTDogXCJqYXBhbmVzZUxlZ2FsXCIsXG4gIEpBUEFORVNFX0RJR0lUQUxfVEVOX1RIT1VTQU5EOiBcImphcGFuZXNlRGlnaXRhbFRlblRob3VzYW5kXCIsXG4gIERFQ0lNQUxfRU5DTE9TRURfQ0lSQ0xFOiBcImRlY2ltYWxFbmNsb3NlZENpcmNsZVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEhfMjogXCJkZWNpbWFsRnVsbFdpZHRoMlwiLFxuICBBSVVFT19GVUxMX1dJRFRIOiBcImFpdWVvRnVsbFdpZHRoXCIsXG4gIElST0hBX0ZVTExfV0lEVEg6IFwiaXJvaGFGdWxsV2lkdGhcIixcbiAgREVDSU1BTF9aRVJPOiBcImRlY2ltYWxaZXJvXCIsXG4gIEJVTExFVDogXCJidWxsZXRcIixcbiAgR0FOQURBOiBcImdhbmFkYVwiLFxuICBDSE9TVU5HOiBcImNob3N1bmdcIixcbiAgREVDSU1BTF9FTkNMT1NFRF9GVUxMX1NUT1A6IFwiZGVjaW1hbEVuY2xvc2VkRnVsbHN0b3BcIixcbiAgREVDSU1BTF9FTkNMT1NFRF9QQVJFTjogXCJkZWNpbWFsRW5jbG9zZWRQYXJlblwiLFxuICBERUNJTUFMX0VOQ0xPU0VEX0NJUkNMRV9DSElORVNFOiBcImRlY2ltYWxFbmNsb3NlZENpcmNsZUNoaW5lc2VcIixcbiAgSURFT0dSQVBIX0VOQ0xPU0VEX0NJUkNMRTogXCJpZGVvZ3JhcGhFbmNsb3NlZENpcmNsZVwiLFxuICBJREVPR1JBUEhfVFJBRElUSU9OQUw6IFwiaWRlb2dyYXBoVHJhZGl0aW9uYWxcIixcbiAgSURFT0dSQVBIX1pPRElBQzogXCJpZGVvZ3JhcGhab2RpYWNcIixcbiAgSURFT0dSQVBIX1pPRElBQ19UUkFESVRJT05BTDogXCJpZGVvZ3JhcGhab2RpYWNUcmFkaXRpb25hbFwiLFxuICBUQUlXQU5FU0VfQ09VTlRJTkc6IFwidGFpd2FuZXNlQ291bnRpbmdcIixcbiAgSURFT0dSQVBIX0xFR0FMX1RSQURJVElPTkFMOiBcImlkZW9ncmFwaExlZ2FsVHJhZGl0aW9uYWxcIixcbiAgVEFJV0FORVNFX0NPVU5USU5HX1RIT1VTQU5EOiBcInRhaXdhbmVzZUNvdW50aW5nVGhvdXNhbmRcIixcbiAgVEFJV0FORVNFX0RJR0lUQUw6IFwidGFpd2FuZXNlRGlnaXRhbFwiLFxuICBDSElORVNFX0NPVU5USU5HOiBcImNoaW5lc2VDb3VudGluZ1wiLFxuICBDSElORVNFX0xFR0FMX1NJTVBMSUZJRUQ6IFwiY2hpbmVzZUxlZ2FsU2ltcGxpZmllZFwiLFxuICBDSElORVNFX0NPVU5USU5HX1RFTl9USE9VU0FORDogXCJjaGluZXNlQ291bnRpbmdUaG91c2FuZFwiLFxuICBLT1JFQU5fRElHSVRBTDogXCJrb3JlYW5EaWdpdGFsXCIsXG4gIEtPUkVBTl9DT1VOVElORzogXCJrb3JlYW5Db3VudGluZ1wiLFxuICBLT1JFQU5fTEVHQUw6IFwia29yZWFuTGVnYWxcIixcbiAgS09SRUFOX0RJR0lUQUxfMjogXCJrb3JlYW5EaWdpdGFsMlwiLFxuICBWSUVUTkFNRVNFX0NPVU5USU5HOiBcInZpZXRuYW1lc2VDb3VudGluZ1wiLFxuICBSVVNTSUFOX0xPV0VSOiBcInJ1c3NpYW5Mb3dlclwiLFxuICBSVVNTSUFOX1VQUEVSOiBcInJ1c3NpYW5VcHBlclwiLFxuICBOT05FOiBcIm5vbmVcIixcbiAgTlVNQkVSX0lOX0RBU0g6IFwibnVtYmVySW5EYXNoXCIsXG4gIEhFQlJFV18xOiBcImhlYnJldzFcIixcbiAgSEVCUkVXXzI6IFwiaGVicmV3MlwiLFxuICBBUkFCSUNfQUxQSEE6IFwiYXJhYmljQWxwaGFcIixcbiAgQVJBQklDX0FCSkFEOiBcImFyYWJpY0FiamFkXCIsXG4gIEhJTkRJX1ZPV0VMUzogXCJoaW5kaVZvd2Vsc1wiLFxuICBISU5ESV9DT05TT05BTlRTOiBcImhpbmRpQ29uc29uYW50c1wiLFxuICBISU5ESV9OVU1CRVJTOiBcImhpbmRpTnVtYmVyc1wiLFxuICBISU5ESV9DT1VOVElORzogXCJoaW5kaUNvdW50aW5nXCIsXG4gIFRIQUlfTEVUVEVSUzogXCJ0aGFpTGV0dGVyc1wiLFxuICBUSEFJX05VTUJFUlM6IFwidGhhaU51bWJlcnNcIixcbiAgVEhBSV9DT1VOVElORzogXCJ0aGFpQ291bnRpbmdcIixcbiAgQkFIVF9URVhUOiBcImJhaHRUZXh0XCIsXG4gIERPTExBUl9URVhUOiBcImRvbGxhclRleHRcIlxuICAvLyAgIDx4c2Q6ZW51bWVyYXRpb24gdmFsdWU9XCJjdXN0b21cIi8+XG59O1xuY29uc3QgU3BhY2VUeXBlID0ge1xuICBERUZBVUxUOiBcImRlZmF1bHRcIixcbiAgUFJFU0VSVkU6IFwicHJlc2VydmVcIlxufTtcbmNsYXNzIFRleHRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHNwYWNlOiBcInhtbDpzcGFjZVwiIH0pO1xuICB9XG59XG5jbGFzcyBQYWdlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIlBBR0VcIik7XG4gIH1cbn1cbmNsYXNzIE51bWJlck9mUGFnZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKFwiTlVNUEFHRVNcIik7XG4gIH1cbn1cbmNsYXNzIE51bWJlck9mUGFnZXNTZWN0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIlNFQ1RJT05QQUdFU1wiKTtcbiAgfVxufVxuY2xhc3MgQ3VycmVudFNlY3Rpb24gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIHRoaXMucm9vdC5wdXNoKFwiU0VDVElPTlwiKTtcbiAgfVxufVxuY2xhc3MgU2hhZGluZ0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGZpbGw6IFwidzpmaWxsXCIsXG4gICAgICBjb2xvcjogXCJ3OmNvbG9yXCIsXG4gICAgICB0eXBlOiBcInc6dmFsXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU2hhZGluZyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgZmlsbCwgY29sb3IsIHR5cGUgfSkge1xuICAgIHN1cGVyKFwidzpzaGRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgU2hhZGluZ0F0dHJpYnV0ZXMoe1xuICAgICAgICBmaWxsOiBmaWxsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBoZXhDb2xvclZhbHVlKGZpbGwpLFxuICAgICAgICBjb2xvcjogY29sb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhleENvbG9yVmFsdWUoY29sb3IpLFxuICAgICAgICB0eXBlXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IFNoYWRpbmdUeXBlID0ge1xuICBDTEVBUjogXCJjbGVhclwiLFxuICBESUFHT05BTF9DUk9TUzogXCJkaWFnQ3Jvc3NcIixcbiAgRElBR09OQUxfU1RSSVBFOiBcImRpYWdTdHJpcGVcIixcbiAgSE9SSVpPTlRBTF9DUk9TUzogXCJob3J6Q3Jvc3NcIixcbiAgSE9SSVpPTlRBTF9TVFJJUEU6IFwiaG9yelN0cmlwZVwiLFxuICBOSUw6IFwibmlsXCIsXG4gIFBFUkNFTlRfNTogXCJwY3Q1XCIsXG4gIFBFUkNFTlRfMTA6IFwicGN0MTBcIixcbiAgUEVSQ0VOVF8xMjogXCJwY3QxMlwiLFxuICBQRVJDRU5UXzE1OiBcInBjdDE1XCIsXG4gIFBFUkNFTlRfMjA6IFwicGN0MjBcIixcbiAgUEVSQ0VOVF8yNTogXCJwY3QyNVwiLFxuICBQRVJDRU5UXzMwOiBcInBjdDMwXCIsXG4gIFBFUkNFTlRfMzU6IFwicGN0MzVcIixcbiAgUEVSQ0VOVF8zNzogXCJwY3QzN1wiLFxuICBQRVJDRU5UXzQwOiBcInBjdDQwXCIsXG4gIFBFUkNFTlRfNDU6IFwicGN0NDVcIixcbiAgUEVSQ0VOVF81MDogXCJwY3Q1MFwiLFxuICBQRVJDRU5UXzU1OiBcInBjdDU1XCIsXG4gIFBFUkNFTlRfNjA6IFwicGN0NjBcIixcbiAgUEVSQ0VOVF82MjogXCJwY3Q2MlwiLFxuICBQRVJDRU5UXzY1OiBcInBjdDY1XCIsXG4gIFBFUkNFTlRfNzA6IFwicGN0NzBcIixcbiAgUEVSQ0VOVF83NTogXCJwY3Q3NVwiLFxuICBQRVJDRU5UXzgwOiBcInBjdDgwXCIsXG4gIFBFUkNFTlRfODU6IFwicGN0ODVcIixcbiAgUEVSQ0VOVF84NzogXCJwY3Q4N1wiLFxuICBQRVJDRU5UXzkwOiBcInBjdDkwXCIsXG4gIFBFUkNFTlRfOTU6IFwicGN0OTVcIixcbiAgUkVWRVJTRV9ESUFHT05BTF9TVFJJUEU6IFwicmV2ZXJzZURpYWdTdHJpcGVcIixcbiAgU09MSUQ6IFwic29saWRcIixcbiAgVEhJTl9ESUFHT05BTF9DUk9TUzogXCJ0aGluRGlhZ0Nyb3NzXCIsXG4gIFRISU5fRElBR09OQUxfU1RSSVBFOiBcInRoaW5EaWFnU3RyaXBlXCIsXG4gIFRISU5fSE9SSVpPTlRBTF9DUk9TUzogXCJ0aGluSG9yekNyb3NzXCIsXG4gIFRISU5fUkVWRVJTRV9ESUFHT05BTF9TVFJJUEU6IFwidGhpblJldmVyc2VEaWFnU3RyaXBlXCIsXG4gIFRISU5fVkVSVElDQUxfU1RSSVBFOiBcInRoaW5WZXJ0U3RyaXBlXCIsXG4gIFZFUlRJQ0FMX1NUUklQRTogXCJ2ZXJ0U3RyaXBlXCJcbn07XG5jbGFzcyBDaGFuZ2VBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBpZDogXCJ3OmlkXCIsXG4gICAgICBhdXRob3I6IFwidzphdXRob3JcIixcbiAgICAgIGRhdGU6IFwidzpkYXRlXCJcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgRW1waGFzaXNNYXJrVHlwZSA9IHtcbiAgRE9UOiBcImRvdFwiXG59O1xuY2xhc3MgQmFzZUVtcGhhc2lzTWFyayBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVtcGhhc2lzTWFya1R5cGUpIHtcbiAgICBzdXBlcihcInc6ZW1cIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogZW1waGFzaXNNYXJrVHlwZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBFbXBoYXNpc01hcmsgZXh0ZW5kcyBCYXNlRW1waGFzaXNNYXJrIHtcbiAgY29uc3RydWN0b3IoZW1waGFzaXNNYXJrVHlwZSA9IEVtcGhhc2lzTWFya1R5cGUuRE9UKSB7XG4gICAgc3VwZXIoZW1waGFzaXNNYXJrVHlwZSk7XG4gIH1cbn1cbmNsYXNzIERvdEVtcGhhc2lzTWFyayBleHRlbmRzIEJhc2VFbXBoYXNpc01hcmsge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihFbXBoYXNpc01hcmtUeXBlLkRPVCk7XG4gIH1cbn1cbmNsYXNzIENoYXJhY3RlclNwYWNpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzpzcGFjaW5nXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHNpZ25lZFR3aXBzTWVhc3VyZVZhbHVlKHZhbHVlKVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBDb2xvciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbG9yKSB7XG4gICAgc3VwZXIoXCJ3OmNvbG9yXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IGhleENvbG9yVmFsdWUoY29sb3IpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEhpZ2hsaWdodCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbG9yKSB7XG4gICAgc3VwZXIoXCJ3OmhpZ2hsaWdodFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBjb2xvclxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBIaWdobGlnaHRDb21wbGV4U2NyaXB0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY29sb3IpIHtcbiAgICBzdXBlcihcInc6aGlnaGxpZ2h0Q3NcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogY29sb3JcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgY3JlYXRlTGFuZ3VhZ2VDb21wb25lbnQgPSAob3B0aW9uczIpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwidzpsYW5nXCIsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICB2YWx1ZToge1xuICAgICAga2V5OiBcInc6dmFsXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIudmFsdWVcbiAgICB9LFxuICAgIGVhc3RBc2lhOiB7XG4gICAgICBrZXk6IFwidzplYXN0QXNpYVwiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMyLmVhc3RBc2lhXG4gICAgfSxcbiAgICBiaWRpcmVjdGlvbmFsOiB7XG4gICAgICBrZXk6IFwidzpiaWRpXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIuYmlkaXJlY3Rpb25hbFxuICAgIH1cbiAgfVxufSk7XG5jbGFzcyBSdW5Gb250QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgYXNjaWk6IFwidzphc2NpaVwiLFxuICAgICAgY3M6IFwidzpjc1wiLFxuICAgICAgZWFzdEFzaWE6IFwidzplYXN0QXNpYVwiLFxuICAgICAgaEFuc2k6IFwidzpoQW5zaVwiLFxuICAgICAgaGludDogXCJ3OmhpbnRcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBSdW5Gb250cyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG5hbWVPckF0dHJzLCBoaW50KSB7XG4gICAgc3VwZXIoXCJ3OnJGb250c1wiKTtcbiAgICBpZiAodHlwZW9mIG5hbWVPckF0dHJzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBuYW1lID0gbmFtZU9yQXR0cnM7XG4gICAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgICAgbmV3IFJ1bkZvbnRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICBhc2NpaTogbmFtZSxcbiAgICAgICAgICBjczogbmFtZSxcbiAgICAgICAgICBlYXN0QXNpYTogbmFtZSxcbiAgICAgICAgICBoQW5zaTogbmFtZSxcbiAgICAgICAgICBoaW50XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhdHRycyA9IG5hbWVPckF0dHJzO1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFJ1bkZvbnRBdHRyaWJ1dGVzKGF0dHJzKSk7XG4gICAgfVxuICB9XG59XG5sZXQgVmVydGljYWxBbGlnbiQxID0gY2xhc3MgVmVydGljYWxBbGlnbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICBzdXBlcihcInc6dmVydEFsaWduXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHR5cGVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufTtcbmNsYXNzIFN1cGVyU2NyaXB0IGV4dGVuZHMgVmVydGljYWxBbGlnbiQxIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJzdXBlcnNjcmlwdFwiKTtcbiAgfVxufVxuY2xhc3MgU3ViU2NyaXB0IGV4dGVuZHMgVmVydGljYWxBbGlnbiQxIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJzdWJzY3JpcHRcIik7XG4gIH1cbn1cbmNvbnN0IFVuZGVybGluZVR5cGUgPSB7XG4gIFNJTkdMRTogXCJzaW5nbGVcIixcbiAgV09SRFM6IFwid29yZHNcIixcbiAgRE9VQkxFOiBcImRvdWJsZVwiLFxuICBUSElDSzogXCJ0aGlja1wiLFxuICBET1RURUQ6IFwiZG90dGVkXCIsXG4gIERPVFRFREhFQVZZOiBcImRvdHRlZEhlYXZ5XCIsXG4gIERBU0g6IFwiZGFzaFwiLFxuICBEQVNIRURIRUFWWTogXCJkYXNoZWRIZWF2eVwiLFxuICBEQVNITE9ORzogXCJkYXNoTG9uZ1wiLFxuICBEQVNITE9OR0hFQVZZOiBcImRhc2hMb25nSGVhdnlcIixcbiAgRE9UREFTSDogXCJkb3REYXNoXCIsXG4gIERBU0hET1RIRUFWWTogXCJkYXNoRG90SGVhdnlcIixcbiAgRE9URE9UREFTSDogXCJkb3REb3REYXNoXCIsXG4gIERBU0hET1RET1RIRUFWWTogXCJkYXNoRG90RG90SGVhdnlcIixcbiAgV0FWRTogXCJ3YXZlXCIsXG4gIFdBVllIRUFWWTogXCJ3YXZ5SGVhdnlcIixcbiAgV0FWWURPVUJMRTogXCJ3YXZ5RG91YmxlXCIsXG4gIE5PTkU6IFwibm9uZVwiXG59O1xuY2xhc3MgVW5kZXJsaW5lIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodW5kZXJsaW5lVHlwZSA9IFVuZGVybGluZVR5cGUuU0lOR0xFLCBjb2xvcikge1xuICAgIHN1cGVyKFwidzp1XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHVuZGVybGluZVR5cGUsXG4gICAgICAgIGNvbG9yOiBjb2xvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGV4Q29sb3JWYWx1ZShjb2xvcilcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgVGV4dEVmZmVjdCA9IHtcbiAgQkxJTktfQkFDS0dST1VORDogXCJibGlua0JhY2tncm91bmRcIixcbiAgTElHSFRTOiBcImxpZ2h0c1wiLFxuICBBTlRTX0JMQUNLOiBcImFudHNCbGFja1wiLFxuICBBTlRTX1JFRDogXCJhbnRzUmVkXCIsXG4gIFNISU1NRVI6IFwic2hpbW1lclwiLFxuICBTUEFSS0xFOiBcInNwYXJrbGVcIixcbiAgTk9ORTogXCJub25lXCJcbn07XG5jbGFzcyBSdW5Qcm9wZXJ0aWVzIGV4dGVuZHMgSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBzdXBlcihcInc6clByXCIpO1xuICAgIGlmICghb3B0aW9uczIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm5vUHJvb2YgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vUHJvb2ZcIiwgb3B0aW9uczIubm9Qcm9vZikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm9sZCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YlwiLCBvcHRpb25zMi5ib2xkKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ib2xkQ29tcGxleFNjcmlwdCA9PT0gdm9pZCAwICYmIG9wdGlvbnMyLmJvbGQgIT09IHZvaWQgMCB8fCBvcHRpb25zMi5ib2xkQ29tcGxleFNjcmlwdCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmJDc1wiLCAoX2EgPSBvcHRpb25zMi5ib2xkQ29tcGxleFNjcmlwdCkgIT0gbnVsbCA/IF9hIDogb3B0aW9uczIuYm9sZCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaXRhbGljcyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6aVwiLCBvcHRpb25zMi5pdGFsaWNzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5pdGFsaWNzQ29tcGxleFNjcmlwdCA9PT0gdm9pZCAwICYmIG9wdGlvbnMyLml0YWxpY3MgIT09IHZvaWQgMCB8fCBvcHRpb25zMi5pdGFsaWNzQ29tcGxleFNjcmlwdCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmlDc1wiLCAoX2IgPSBvcHRpb25zMi5pdGFsaWNzQ29tcGxleFNjcmlwdCkgIT0gbnVsbCA/IF9iIDogb3B0aW9uczIuaXRhbGljcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudW5kZXJsaW5lKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFVuZGVybGluZShvcHRpb25zMi51bmRlcmxpbmUudHlwZSwgb3B0aW9uczIudW5kZXJsaW5lLmNvbG9yKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5lZmZlY3QpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU3RyaW5nVmFsdWVFbGVtZW50KFwidzplZmZlY3RcIiwgb3B0aW9uczIuZWZmZWN0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5lbXBoYXNpc01hcmspIHtcbiAgICAgIHRoaXMucHVzaChuZXcgRW1waGFzaXNNYXJrKG9wdGlvbnMyLmVtcGhhc2lzTWFyay50eXBlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jb2xvcikge1xuICAgICAgdGhpcy5wdXNoKG5ldyBDb2xvcihvcHRpb25zMi5jb2xvcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIua2Vybikge1xuICAgICAgdGhpcy5wdXNoKG5ldyBIcHNNZWFzdXJlRWxlbWVudChcInc6a2VyblwiLCBvcHRpb25zMi5rZXJuKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5wb3NpdGlvbikge1xuICAgICAgdGhpcy5wdXNoKG5ldyBTdHJpbmdWYWx1ZUVsZW1lbnQoXCJ3OnBvc2l0aW9uXCIsIG9wdGlvbnMyLnBvc2l0aW9uKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zaXplICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgSHBzTWVhc3VyZUVsZW1lbnQoXCJ3OnN6XCIsIG9wdGlvbnMyLnNpemUpKTtcbiAgICB9XG4gICAgY29uc3Qgc3pDcyA9IG9wdGlvbnMyLnNpemVDb21wbGV4U2NyaXB0ID09PSB2b2lkIDAgfHwgb3B0aW9uczIuc2l6ZUNvbXBsZXhTY3JpcHQgPT09IHRydWUgPyBvcHRpb25zMi5zaXplIDogb3B0aW9uczIuc2l6ZUNvbXBsZXhTY3JpcHQ7XG4gICAgaWYgKHN6Q3MpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgSHBzTWVhc3VyZUVsZW1lbnQoXCJ3OnN6Q3NcIiwgc3pDcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucmlnaHRUb0xlZnQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnJ0bFwiLCBvcHRpb25zMi5yaWdodFRvTGVmdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc21hbGxDYXBzICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzbWFsbENhcHNcIiwgb3B0aW9uczIuc21hbGxDYXBzKSk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zMi5hbGxDYXBzICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpjYXBzXCIsIG9wdGlvbnMyLmFsbENhcHMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN0cmlrZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3RyaWtlXCIsIG9wdGlvbnMyLnN0cmlrZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZG91YmxlU3RyaWtlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkc3RyaWtlXCIsIG9wdGlvbnMyLmRvdWJsZVN0cmlrZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3ViU2NyaXB0KSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFN1YlNjcmlwdCgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN1cGVyU2NyaXB0KSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFN1cGVyU2NyaXB0KCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3R5bGUpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU3RyaW5nVmFsdWVFbGVtZW50KFwidzpyU3R5bGVcIiwgb3B0aW9uczIuc3R5bGUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmZvbnQpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uczIuZm9udCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aGlzLnB1c2gobmV3IFJ1bkZvbnRzKG9wdGlvbnMyLmZvbnQpKTtcbiAgICAgIH0gZWxzZSBpZiAoXCJuYW1lXCIgaW4gb3B0aW9uczIuZm9udCkge1xuICAgICAgICB0aGlzLnB1c2gobmV3IFJ1bkZvbnRzKG9wdGlvbnMyLmZvbnQubmFtZSwgb3B0aW9uczIuZm9udC5oaW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnB1c2gobmV3IFJ1bkZvbnRzKG9wdGlvbnMyLmZvbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmhpZ2hsaWdodCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBIaWdobGlnaHQob3B0aW9uczIuaGlnaGxpZ2h0KSk7XG4gICAgfVxuICAgIGNvbnN0IGhpZ2hsaWdodENzID0gb3B0aW9uczIuaGlnaGxpZ2h0Q29tcGxleFNjcmlwdCA9PT0gdm9pZCAwIHx8IG9wdGlvbnMyLmhpZ2hsaWdodENvbXBsZXhTY3JpcHQgPT09IHRydWUgPyBvcHRpb25zMi5oaWdobGlnaHQgOiBvcHRpb25zMi5oaWdobGlnaHRDb21wbGV4U2NyaXB0O1xuICAgIGlmIChoaWdobGlnaHRDcykge1xuICAgICAgdGhpcy5wdXNoKG5ldyBIaWdobGlnaHRDb21wbGV4U2NyaXB0KGhpZ2hsaWdodENzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jaGFyYWN0ZXJTcGFjaW5nKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IENoYXJhY3RlclNwYWNpbmcob3B0aW9uczIuY2hhcmFjdGVyU3BhY2luZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZW1ib3NzICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzplbWJvc3NcIiwgb3B0aW9uczIuZW1ib3NzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5pbXByaW50ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzppbXByaW50XCIsIG9wdGlvbnMyLmltcHJpbnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNoYWRpbmcpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU2hhZGluZyhvcHRpb25zMi5zaGFkaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5yZXZpc2lvbikge1xuICAgICAgdGhpcy5wdXNoKG5ldyBSdW5Qcm9wZXJ0aWVzQ2hhbmdlKG9wdGlvbnMyLnJldmlzaW9uKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ib3JkZXIpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6YmRyXCIsIG9wdGlvbnMyLmJvcmRlcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc25hcFRvR3JpZCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c25hcFRvR3JpZFwiLCBvcHRpb25zMi5zbmFwVG9HcmlkKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi52YW5pc2gpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp2YW5pc2hcIiwgb3B0aW9uczIudmFuaXNoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zcGVjVmFuaXNoKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3BlY1ZhbmlzaFwiLCBvcHRpb25zMi52YW5pc2gpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNjYWxlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgTnVtYmVyVmFsdWVFbGVtZW50KFwidzp3XCIsIG9wdGlvbnMyLnNjYWxlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sYW5ndWFnZSkge1xuICAgICAgdGhpcy5wdXNoKGNyZWF0ZUxhbmd1YWdlQ29tcG9uZW50KG9wdGlvbnMyLmxhbmd1YWdlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5tYXRoKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6b01hdGhcIiwgb3B0aW9uczIubWF0aCkpO1xuICAgIH1cbiAgfVxuICBwdXNoKGl0ZW0pIHtcbiAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcbiAgfVxufVxuY2xhc3MgUnVuUHJvcGVydGllc0NoYW5nZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnJQckNoYW5nZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDaGFuZ2VBdHRyaWJ1dGVzKHtcbiAgICAgICAgaWQ6IG9wdGlvbnMyLmlkLFxuICAgICAgICBhdXRob3I6IG9wdGlvbnMyLmF1dGhvcixcbiAgICAgICAgZGF0ZTogb3B0aW9uczIuZGF0ZVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuYWRkQ2hpbGRFbGVtZW50KG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIFRleHQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYTtcbiAgICBzdXBlcihcInc6dFwiKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG9wdGlvbnMyKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogKF9hID0gb3B0aW9uczIuc3BhY2UpICE9IG51bGwgPyBfYSA6IFNwYWNlVHlwZS5ERUZBVUxUIH0pKTtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG9wdGlvbnMyLnRleHQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG59XG5jb25zdCBQYWdlTnVtYmVyID0ge1xuICBDVVJSRU5UOiBcIkNVUlJFTlRcIixcbiAgVE9UQUxfUEFHRVM6IFwiVE9UQUxfUEFHRVNcIixcbiAgVE9UQUxfUEFHRVNfSU5fU0VDVElPTjogXCJUT1RBTF9QQUdFU19JTl9TRUNUSU9OXCIsXG4gIENVUlJFTlRfU0VDVElPTjogXCJTRUNUSU9OXCJcbn07XG5jbGFzcyBSdW4gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwcm9wZXJ0aWVzXCIpO1xuICAgIHRoaXMucHJvcGVydGllcyA9IG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xuICAgIGlmIChvcHRpb25zMi5icmVhaykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5icmVhazsgaSsrKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCcmVhayQxKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHN3aXRjaCAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNhc2UgUGFnZU51bWJlci5DVVJSRU5UOlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQmVnaW4oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLlRPVEFMX1BBR0VTOlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQmVnaW4oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBOdW1iZXJPZlBhZ2VzKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLlRPVEFMX1BBR0VTX0lOX1NFQ1RJT046XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCZWdpbigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlck9mUGFnZXNTZWN0aW9uKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLkNVUlJFTlRfU0VDVElPTjpcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJlZ2luKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ3VycmVudFNlY3Rpb24oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZXBhcmF0ZSgpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEVuZCgpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dChjaGlsZCkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9uczIudGV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHQob3B0aW9uczIudGV4dCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgVGV4dFJ1biBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zMiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgc3VwZXIoe30pO1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHQob3B0aW9uczIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdXBlcihvcHRpb25zMik7XG4gIH1cbn1cbmNsYXNzIFN5bWJvbEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGNoYXI6IFwidzpjaGFyXCIsXG4gICAgICBzeW1ib2xmb250OiBcInc6Zm9udFwiXG4gICAgfSk7XG4gIH1cbn1cbmxldCBTeW1ib2wkMSA9IGNsYXNzIFN5bWJvbDIgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGFyID0gXCJcIiwgc3ltYm9sZm9udCA9IFwiV2luZ2RpbmdzXCIpIHtcbiAgICBzdXBlcihcInc6c3ltXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTeW1ib2xBdHRyaWJ1dGVzKHsgY2hhciwgc3ltYm9sZm9udCB9KSk7XG4gIH1cbn07XG5jbGFzcyBTeW1ib2xSdW4gZXh0ZW5kcyBSdW4ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uczIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHN1cGVyKHt9KTtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTeW1ib2wkMShvcHRpb25zMikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN1cGVyKG9wdGlvbnMyKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU3ltYm9sJDEob3B0aW9uczIuY2hhciwgb3B0aW9uczIuc3ltYm9sZm9udCkpO1xuICB9XG59XG5sZXQgdXJsQWxwaGFiZXQgPSBcInVzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3RcIjtcbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUgPSAyMSkgPT4ge1xuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9IFwiXCI7XG4gICAgbGV0IGkgPSBzaXplO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlkICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGggfCAwXTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9O1xufTtcbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9IFwiXCI7XG4gIGxldCBpID0gc2l6ZTtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xuICB9XG4gIHJldHVybiBpZDtcbn07XG5jb25zdCBjb252ZXJ0TWlsbGltZXRlcnNUb1R3aXAgPSAobWlsbGltZXRlcnMpID0+IE1hdGguZmxvb3IobWlsbGltZXRlcnMgLyAyNS40ICogNzIgKiAyMCk7XG5jb25zdCBjb252ZXJ0SW5jaGVzVG9Ud2lwID0gKGluY2hlcykgPT4gTWF0aC5mbG9vcihpbmNoZXMgKiA3MiAqIDIwKTtcbmNvbnN0IHVuaXF1ZU51bWVyaWNJZENyZWF0b3IgPSAoaW5pdGlhbCA9IDApID0+IHtcbiAgbGV0IGN1cnJlbnRDb3VudCA9IGluaXRpYWw7XG4gIHJldHVybiAoKSA9PiArK2N1cnJlbnRDb3VudDtcbn07XG5jb25zdCBhYnN0cmFjdE51bVVuaXF1ZU51bWVyaWNJZEdlbiA9ICgpID0+IHVuaXF1ZU51bWVyaWNJZENyZWF0b3IoKTtcbmNvbnN0IGNvbmNyZXRlTnVtVW5pcXVlTnVtZXJpY0lkR2VuID0gKCkgPT4gdW5pcXVlTnVtZXJpY0lkQ3JlYXRvcigxKTtcbmNvbnN0IGRvY1Byb3BlcnRpZXNVbmlxdWVOdW1lcmljSWRHZW4gPSAoKSA9PiB1bmlxdWVOdW1lcmljSWRDcmVhdG9yKCk7XG5jb25zdCBib29rbWFya1VuaXF1ZU51bWVyaWNJZEdlbiA9ICgpID0+IHVuaXF1ZU51bWVyaWNJZENyZWF0b3IoKTtcbmNvbnN0IHVuaXF1ZUlkID0gKCkgPT4gbmFub2lkKCkudG9Mb3dlckNhc2UoKTtcbmNvbnN0IGdlbmVyYXRlVXVpZFBhcnQgPSAoY291bnQpID0+IGN1c3RvbUFscGhhYmV0KFwiMTIzNDU2Nzg5MGFiY2RlZlwiLCBjb3VudCkoKTtcbmNvbnN0IHVuaXF1ZVV1aWQgPSAoKSA9PiBgJHtnZW5lcmF0ZVV1aWRQYXJ0KDgpfS0ke2dlbmVyYXRlVXVpZFBhcnQoNCl9LSR7Z2VuZXJhdGVVdWlkUGFydCg0KX0tJHtnZW5lcmF0ZVV1aWRQYXJ0KDQpfS0ke2dlbmVyYXRlVXVpZFBhcnQoMTIpfWA7XG5jb25zdCBIb3Jpem9udGFsUG9zaXRpb25SZWxhdGl2ZUZyb20gPSB7XG4gIENIQVJBQ1RFUjogXCJjaGFyYWN0ZXJcIixcbiAgQ09MVU1OOiBcImNvbHVtblwiLFxuICBJTlNJREVfTUFSR0lOOiBcImluc2lkZU1hcmdpblwiLFxuICBMRUZUX01BUkdJTjogXCJsZWZ0TWFyZ2luXCIsXG4gIE1BUkdJTjogXCJtYXJnaW5cIixcbiAgT1VUU0lERV9NQVJHSU46IFwib3V0c2lkZU1hcmdpblwiLFxuICBQQUdFOiBcInBhZ2VcIixcbiAgUklHSFRfTUFSR0lOOiBcInJpZ2h0TWFyZ2luXCJcbn07XG5jb25zdCBWZXJ0aWNhbFBvc2l0aW9uUmVsYXRpdmVGcm9tID0ge1xuICBCT1RUT01fTUFSR0lOOiBcImJvdHRvbU1hcmdpblwiLFxuICBJTlNJREVfTUFSR0lOOiBcImluc2lkZU1hcmdpblwiLFxuICBMSU5FOiBcImxpbmVcIixcbiAgTUFSR0lOOiBcIm1hcmdpblwiLFxuICBPVVRTSURFX01BUkdJTjogXCJvdXRzaWRlTWFyZ2luXCIsXG4gIFBBR0U6IFwicGFnZVwiLFxuICBQQVJBR1JBUEg6IFwicGFyYWdyYXBoXCIsXG4gIFRPUF9NQVJHSU46IFwidG9wTWFyZ2luXCJcbn07XG5jbGFzcyBTaW1wbGVQb3NBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4OiBcInhcIixcbiAgICAgIHk6IFwieVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFNpbXBsZVBvcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwid3A6c2ltcGxlUG9zXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFNpbXBsZVBvc0F0dHJpYnV0ZXMoe1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIEFsaWduIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcIndwOmFsaWduXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKHZhbHVlKTtcbiAgfVxufVxuY2xhc3MgUG9zaXRpb25PZmZzZXQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvZmZzZXRWYWx1ZSkge1xuICAgIHN1cGVyKFwid3A6cG9zT2Zmc2V0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG9mZnNldFZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG59XG5jbGFzcyBIb3Jpem9udGFsUG9zaXRpb25BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICByZWxhdGl2ZUZyb206IFwicmVsYXRpdmVGcm9tXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgSG9yaXpvbnRhbFBvc2l0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaG9yaXpvbnRhbFBvc2l0aW9uKSB7XG4gICAgc3VwZXIoXCJ3cDpwb3NpdGlvbkhcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgSG9yaXpvbnRhbFBvc2l0aW9uQXR0cmlidXRlcyh7XG4gICAgICAgIHJlbGF0aXZlRnJvbTogaG9yaXpvbnRhbFBvc2l0aW9uLnJlbGF0aXZlIHx8IEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbS5QQUdFXG4gICAgICB9KVxuICAgICk7XG4gICAgaWYgKGhvcml6b250YWxQb3NpdGlvbi5hbGlnbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFsaWduKGhvcml6b250YWxQb3NpdGlvbi5hbGlnbikpO1xuICAgIH0gZWxzZSBpZiAoaG9yaXpvbnRhbFBvc2l0aW9uLm9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgUG9zaXRpb25PZmZzZXQoaG9yaXpvbnRhbFBvc2l0aW9uLm9mZnNldCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBjb25maWd1cmF0aW9uIHByb3ZpZGVkIGZvciBmbG9hdGluZyBwb3NpdGlvbiAoQWxpZ24gb3Igb2Zmc2V0KVwiKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFZlcnRpY2FsUG9zaXRpb25BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICByZWxhdGl2ZUZyb206IFwicmVsYXRpdmVGcm9tXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgVmVydGljYWxQb3NpdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZlcnRpY2FsUG9zaXRpb24pIHtcbiAgICBzdXBlcihcIndwOnBvc2l0aW9uVlwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBWZXJ0aWNhbFBvc2l0aW9uQXR0cmlidXRlcyh7XG4gICAgICAgIHJlbGF0aXZlRnJvbTogdmVydGljYWxQb3NpdGlvbi5yZWxhdGl2ZSB8fCBWZXJ0aWNhbFBvc2l0aW9uUmVsYXRpdmVGcm9tLlBBR0VcbiAgICAgIH0pXG4gICAgKTtcbiAgICBpZiAodmVydGljYWxQb3NpdGlvbi5hbGlnbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEFsaWduKHZlcnRpY2FsUG9zaXRpb24uYWxpZ24pKTtcbiAgICB9IGVsc2UgaWYgKHZlcnRpY2FsUG9zaXRpb24ub2Zmc2V0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQb3NpdGlvbk9mZnNldCh2ZXJ0aWNhbFBvc2l0aW9uLm9mZnNldCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBjb25maWd1cmF0aW9uIHByb3ZpZGVkIGZvciBmbG9hdGluZyBwb3NpdGlvbiAoQWxpZ24gb3Igb2Zmc2V0KVwiKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNEYXRhQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdXJpOiBcInVyaVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEJsaXBBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBlbWJlZDogXCJyOmVtYmVkXCIsXG4gICAgICBjc3RhdGU6IFwiY3N0YXRlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgQmxpcCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG1lZGlhRGF0YSkge1xuICAgIHN1cGVyKFwiYTpibGlwXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEJsaXBBdHRyaWJ1dGVzKHtcbiAgICAgICAgZW1iZWQ6IGBySWR7JHttZWRpYURhdGEuZmlsZU5hbWV9fWAsXG4gICAgICAgIGNzdGF0ZTogXCJub25lXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgU291cmNlUmVjdGFuZ2xlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJhOnNyY1JlY3RcIik7XG4gIH1cbn1cbmNsYXNzIEZpbGxSZWN0YW5nbGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6ZmlsbFJlY3RcIik7XG4gIH1cbn1cbmNsYXNzIFN0cmV0Y2ggZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6c3RyZXRjaFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRmlsbFJlY3RhbmdsZSgpKTtcbiAgfVxufVxuY2xhc3MgQmxpcEZpbGwgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihtZWRpYURhdGEpIHtcbiAgICBzdXBlcihcInBpYzpibGlwRmlsbFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQmxpcChtZWRpYURhdGEpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU291cmNlUmVjdGFuZ2xlKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJldGNoKCkpO1xuICB9XG59XG5jbGFzcyBQaWNMb2Nrc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIG5vQ2hhbmdlQXNwZWN0OiBcIm5vQ2hhbmdlQXNwZWN0XCIsXG4gICAgICBub0NoYW5nZUFycm93aGVhZHM6IFwibm9DaGFuZ2VBcnJvd2hlYWRzXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgUGljTG9ja3MgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcImE6cGljTG9ja3NcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUGljTG9ja3NBdHRyaWJ1dGVzKHtcbiAgICAgICAgbm9DaGFuZ2VBc3BlY3Q6IDEsXG4gICAgICAgIG5vQ2hhbmdlQXJyb3doZWFkczogMVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBDaGlsZE5vblZpc3VhbFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInBpYzpjTnZQaWNQclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUGljTG9ja3MoKSk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZUh5cGVybGlua0NsaWNrID0gKGxpbmtJZCwgaGFzWG1sTnMpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwiYTpobGlua0NsaWNrXCIsXG4gIGF0dHJpYnV0ZXM6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGhhc1htbE5zID8ge1xuICAgIHhtbG5zOiB7XG4gICAgICBrZXk6IFwieG1sbnM6YVwiLFxuICAgICAgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW5cIlxuICAgIH1cbiAgfSA6IHt9KSwge1xuICAgIGlkOiB7XG4gICAgICBrZXk6IFwicjppZFwiLFxuICAgICAgdmFsdWU6IGBySWQke2xpbmtJZH1gXG4gICAgfVxuICB9KVxufSk7XG5jbGFzcyBOb25WaXN1YWxQcm9wZXJ0aWVzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgaWQ6IFwiaWRcIixcbiAgICAgIG5hbWU6IFwibmFtZVwiLFxuICAgICAgZGVzY3I6IFwiZGVzY3JcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBOb25WaXN1YWxQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJwaWM6Y052UHJcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTm9uVmlzdWFsUHJvcGVydGllc0F0dHJpYnV0ZXMoe1xuICAgICAgICBpZDogMCxcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgZGVzY3I6IFwiXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBwcmVwRm9yWG1sKGNvbnRleHQpIHtcbiAgICBmb3IgKGxldCBpID0gY29udGV4dC5zdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgZWxlbWVudDIgPSBjb250ZXh0LnN0YWNrW2ldO1xuICAgICAgaWYgKCEoZWxlbWVudDIgaW5zdGFuY2VvZiBDb25jcmV0ZUh5cGVybGluaykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLnJvb3QucHVzaChjcmVhdGVIeXBlcmxpbmtDbGljayhlbGVtZW50Mi5saW5rSWQsIGZhbHNlKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gIH1cbn1cbmNsYXNzIE5vblZpc3VhbFBpY1Byb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInBpYzpudlBpY1ByXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBOb25WaXN1YWxQcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDaGlsZE5vblZpc3VhbFByb3BlcnRpZXMoKSk7XG4gIH1cbn1cbmNsYXNzIFBpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHhtbG5zOiBcInhtbG5zOnBpY1wiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEV4dGVudHNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBjeDogXCJjeFwiLFxuICAgICAgY3k6IFwiY3lcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBFeHRlbnRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgIHN1cGVyKFwiYTpleHRcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImF0dHJpYnV0ZXNcIik7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IEV4dGVudHNBdHRyaWJ1dGVzKHtcbiAgICAgIGN4OiB4LFxuICAgICAgY3k6IHlcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmF0dHJpYnV0ZXMpO1xuICB9XG59XG5jbGFzcyBPZmZzZXRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4OiBcInhcIixcbiAgICAgIHk6IFwieVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIE9mZnNldCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiYTpvZmZcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgT2Zmc2V0QXR0cmlidXRlcyh7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgRm9ybUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGZsaXBWZXJ0aWNhbDogXCJmbGlwVlwiLFxuICAgICAgZmxpcEhvcml6b250YWw6IFwiZmxpcEhcIixcbiAgICAgIHJvdGF0aW9uOiBcInJvdFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEZvcm0gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgc3VwZXIoXCJhOnhmcm1cIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImV4dGVudHNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRm9ybUF0dHJpYnV0ZXMoe1xuICAgICAgICBmbGlwVmVydGljYWw6IChfYSA9IG9wdGlvbnMyLmZsaXApID09IG51bGwgPyB2b2lkIDAgOiBfYS52ZXJ0aWNhbCxcbiAgICAgICAgZmxpcEhvcml6b250YWw6IChfYiA9IG9wdGlvbnMyLmZsaXApID09IG51bGwgPyB2b2lkIDAgOiBfYi5ob3Jpem9udGFsLFxuICAgICAgICByb3RhdGlvbjogb3B0aW9uczIucm90YXRpb25cbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmV4dGVudHMgPSBuZXcgRXh0ZW50cyhvcHRpb25zMi5lbXVzLngsIG9wdGlvbnMyLmVtdXMueSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE9mZnNldCgpKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLmV4dGVudHMpO1xuICB9XG59XG5jb25zdCBjcmVhdGVOb0ZpbGwgPSAoKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoeyBuYW1lOiBcImE6bm9GaWxsXCIgfSk7XG5jb25zdCBjcmVhdGVTY2hlbWVDb2xvciA9IChvcHRpb25zMikgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZTogXCJhOnNjaGVtZUNsclwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGtleTogXCJ2YWxcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi52YWx1ZVxuICAgIH1cbiAgfVxufSk7XG5jb25zdCBjcmVhdGVTb2xpZFJnYkNvbG9yID0gKG9wdGlvbnMyKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcImE6c3JnYkNsclwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGtleTogXCJ2YWxcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi52YWx1ZVxuICAgIH1cbiAgfVxufSk7XG5jb25zdCBjcmVhdGVTb2xpZEZpbGwgPSAob3B0aW9uczIpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwiYTpzb2xpZEZpbGxcIixcbiAgY2hpbGRyZW46IFtvcHRpb25zMi50eXBlID09PSBcInJnYlwiID8gY3JlYXRlU29saWRSZ2JDb2xvcihvcHRpb25zMikgOiBjcmVhdGVTY2hlbWVDb2xvcihvcHRpb25zMildXG59KTtcbmNvbnN0IGNyZWF0ZU91dGxpbmUgPSAob3B0aW9uczIpID0+IG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gIG5hbWU6IFwiYTpsblwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgd2lkdGg6IHtcbiAgICAgIGtleTogXCJ3XCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIud2lkdGhcbiAgICB9LFxuICAgIGNhcDoge1xuICAgICAga2V5OiBcImNhcFwiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMyLmNhcFxuICAgIH0sXG4gICAgY29tcG91bmRMaW5lOiB7XG4gICAgICBrZXk6IFwiY21wZFwiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMyLmNvbXBvdW5kTGluZVxuICAgIH0sXG4gICAgYWxpZ246IHtcbiAgICAgIGtleTogXCJhbGduXCIsXG4gICAgICB2YWx1ZTogb3B0aW9uczIuYWxpZ25cbiAgICB9XG4gIH0sXG4gIGNoaWxkcmVuOiBbXG4gICAgb3B0aW9uczIudHlwZSA9PT0gXCJub0ZpbGxcIiA/IGNyZWF0ZU5vRmlsbCgpIDogb3B0aW9uczIuc29saWRGaWxsVHlwZSA9PT0gXCJyZ2JcIiA/IGNyZWF0ZVNvbGlkRmlsbCh7XG4gICAgICB0eXBlOiBcInJnYlwiLFxuICAgICAgdmFsdWU6IG9wdGlvbnMyLnZhbHVlXG4gICAgfSkgOiBjcmVhdGVTb2xpZEZpbGwoe1xuICAgICAgdHlwZTogXCJzY2hlbWVcIixcbiAgICAgIHZhbHVlOiBvcHRpb25zMi52YWx1ZVxuICAgIH0pXG4gIF1cbn0pO1xuY2xhc3MgQWRqdXN0bWVudFZhbHVlcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiYTphdkxzdFwiKTtcbiAgfVxufVxuY2xhc3MgUHJlc2V0R2VvbWV0cnlBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBwcnN0OiBcInByc3RcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBQcmVzZXRHZW9tZXRyeSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiYTpwcnN0R2VvbVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBQcmVzZXRHZW9tZXRyeUF0dHJpYnV0ZXMoe1xuICAgICAgICBwcnN0OiBcInJlY3RcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBZGp1c3RtZW50VmFsdWVzKCkpO1xuICB9XG59XG5jbGFzcyBTaGFwZVByb3BlcnRpZXNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBid01vZGU6IFwiYndNb2RlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU2hhcGVQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBvdXRsaW5lLCB0cmFuc2Zvcm0gfSkge1xuICAgIHN1cGVyKFwicGljOnNwUHJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvcm1cIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgU2hhcGVQcm9wZXJ0aWVzQXR0cmlidXRlcyh7XG4gICAgICAgIGJ3TW9kZTogXCJhdXRvXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmZvcm0gPSBuZXcgRm9ybSh0cmFuc2Zvcm0pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFByZXNldEdlb21ldHJ5KCkpO1xuICAgIGlmIChvdXRsaW5lKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChjcmVhdGVOb0ZpbGwoKSk7XG4gICAgICB0aGlzLnJvb3QucHVzaChjcmVhdGVPdXRsaW5lKG91dGxpbmUpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFBpYyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBtZWRpYURhdGEsXG4gICAgdHJhbnNmb3JtLFxuICAgIG91dGxpbmVcbiAgfSkge1xuICAgIHN1cGVyKFwicGljOnBpY1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBQaWNBdHRyaWJ1dGVzKHtcbiAgICAgICAgeG1sbnM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3BpY3R1cmVcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBOb25WaXN1YWxQaWNQcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCbGlwRmlsbChtZWRpYURhdGEpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU2hhcGVQcm9wZXJ0aWVzKHsgdHJhbnNmb3JtLCBvdXRsaW5lIH0pKTtcbiAgfVxufVxuY2xhc3MgR3JhcGhpY0RhdGEgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWVkaWFEYXRhLFxuICAgIHRyYW5zZm9ybSxcbiAgICBvdXRsaW5lXG4gIH0pIHtcbiAgICBzdXBlcihcImE6Z3JhcGhpY0RhdGFcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInBpY1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBHcmFwaGljRGF0YUF0dHJpYnV0ZXMoe1xuICAgICAgICB1cmk6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3BpY3R1cmVcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucGljID0gbmV3IFBpYyh7IG1lZGlhRGF0YSwgdHJhbnNmb3JtLCBvdXRsaW5lIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGljKTtcbiAgfVxufVxuY2xhc3MgR3JhcGhpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGE6IFwieG1sbnM6YVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWVkaWFEYXRhLFxuICAgIHRyYW5zZm9ybSxcbiAgICBvdXRsaW5lXG4gIH0pIHtcbiAgICBzdXBlcihcImE6Z3JhcGhpY1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZGF0YVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBHcmFwaGljQXR0cmlidXRlcyh7XG4gICAgICAgIGE6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW5cIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuZGF0YSA9IG5ldyBHcmFwaGljRGF0YSh7IG1lZGlhRGF0YSwgdHJhbnNmb3JtLCBvdXRsaW5lIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuZGF0YSk7XG4gIH1cbn1cbmNvbnN0IFRleHRXcmFwcGluZ1R5cGUgPSB7XG4gIE5PTkU6IDAsXG4gIFNRVUFSRTogMSxcbiAgVElHSFQ6IDIsXG4gIFRPUF9BTkRfQk9UVE9NOiAzXG59O1xuY29uc3QgVGV4dFdyYXBwaW5nU2lkZSA9IHtcbiAgQk9USF9TSURFUzogXCJib3RoU2lkZXNcIixcbiAgTEVGVDogXCJsZWZ0XCIsXG4gIFJJR0hUOiBcInJpZ2h0XCIsXG4gIExBUkdFU1Q6IFwibGFyZ2VzdFwiXG59O1xuY2xhc3MgV3JhcE5vbmUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIndwOndyYXBOb25lXCIpO1xuICB9XG59XG5jbGFzcyBXcmFwU3F1YXJlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZGlzdFQ6IFwiZGlzdFRcIixcbiAgICAgIGRpc3RCOiBcImRpc3RCXCIsXG4gICAgICBkaXN0TDogXCJkaXN0TFwiLFxuICAgICAgZGlzdFI6IFwiZGlzdFJcIixcbiAgICAgIHdyYXBUZXh0OiBcIndyYXBUZXh0XCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgV3JhcFNxdWFyZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHRleHRXcmFwcGluZywgbWFyZ2lucyA9IHtcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDBcbiAgfSkge1xuICAgIHN1cGVyKFwid3A6d3JhcFNxdWFyZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBXcmFwU3F1YXJlQXR0cmlidXRlcyh7XG4gICAgICAgIHdyYXBUZXh0OiB0ZXh0V3JhcHBpbmcuc2lkZSB8fCBUZXh0V3JhcHBpbmdTaWRlLkJPVEhfU0lERVMsXG4gICAgICAgIGRpc3RUOiBtYXJnaW5zLnRvcCxcbiAgICAgICAgZGlzdEI6IG1hcmdpbnMuYm90dG9tLFxuICAgICAgICBkaXN0TDogbWFyZ2lucy5sZWZ0LFxuICAgICAgICBkaXN0UjogbWFyZ2lucy5yaWdodFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBXcmFwVGlnaHRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBkaXN0VDogXCJkaXN0VFwiLFxuICAgICAgZGlzdEI6IFwiZGlzdEJcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBXcmFwVGlnaHQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihtYXJnaW5zID0ge1xuICAgIHRvcDogMCxcbiAgICBib3R0b206IDBcbiAgfSkge1xuICAgIHN1cGVyKFwid3A6d3JhcFRpZ2h0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFdyYXBUaWdodEF0dHJpYnV0ZXMoe1xuICAgICAgICBkaXN0VDogbWFyZ2lucy50b3AsXG4gICAgICAgIGRpc3RCOiBtYXJnaW5zLmJvdHRvbVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBXcmFwVG9wQW5kQm90dG9tQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZGlzdFQ6IFwiZGlzdFRcIixcbiAgICAgIGRpc3RCOiBcImRpc3RCXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgV3JhcFRvcEFuZEJvdHRvbSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG1hcmdpbnMgPSB7XG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMFxuICB9KSB7XG4gICAgc3VwZXIoXCJ3cDp3cmFwVG9wQW5kQm90dG9tXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IFdyYXBUb3BBbmRCb3R0b21BdHRyaWJ1dGVzKHtcbiAgICAgICAgZGlzdFQ6IG1hcmdpbnMudG9wLFxuICAgICAgICBkaXN0QjogbWFyZ2lucy5ib3R0b21cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgRG9jUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgbmFtZSwgZGVzY3JpcHRpb24sIHRpdGxlIH0gPSB7IG5hbWU6IFwiXCIsIGRlc2NyaXB0aW9uOiBcIlwiLCB0aXRsZTogXCJcIiB9KSB7XG4gICAgc3VwZXIoXCJ3cDpkb2NQclwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZG9jUHJvcGVydGllc1VuaXF1ZU51bWVyaWNJZFwiLCBkb2NQcm9wZXJ0aWVzVW5pcXVlTnVtZXJpY0lkR2VuKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICBpZDoge1xuICAgICAgICAgIGtleTogXCJpZFwiLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLmRvY1Byb3BlcnRpZXNVbmlxdWVOdW1lcmljSWQoKVxuICAgICAgICB9LFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAga2V5OiBcIm5hbWVcIixcbiAgICAgICAgICB2YWx1ZTogbmFtZVxuICAgICAgICB9LFxuICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgIGtleTogXCJkZXNjclwiLFxuICAgICAgICAgIHZhbHVlOiBkZXNjcmlwdGlvblxuICAgICAgICB9LFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIGtleTogXCJ0aXRsZVwiLFxuICAgICAgICAgIHZhbHVlOiB0aXRsZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgZm9yIChsZXQgaSA9IGNvbnRleHQuc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQyID0gY29udGV4dC5zdGFja1tpXTtcbiAgICAgIGlmICghKGVsZW1lbnQyIGluc3RhbmNlb2YgQ29uY3JldGVIeXBlcmxpbmspKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5yb290LnB1c2goY3JlYXRlSHlwZXJsaW5rQ2xpY2soZWxlbWVudDIubGlua0lkLCB0cnVlKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZUVmZmVjdEV4dGVudCA9ICh7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCB9KSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lOiBcIndwOmVmZmVjdEV4dGVudFwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgdG9wOiB7XG4gICAgICBrZXk6IFwidFwiLFxuICAgICAgdmFsdWU6IHRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIGtleTogXCJyXCIsXG4gICAgICB2YWx1ZTogcmlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAga2V5OiBcImJcIixcbiAgICAgIHZhbHVlOiBib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIGtleTogXCJsXCIsXG4gICAgICB2YWx1ZTogbGVmdFxuICAgIH1cbiAgfVxufSk7XG5jbGFzcyBFeHRlbnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBjeDogXCJjeFwiLFxuICAgICAgY3k6IFwiY3lcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBFeHRlbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgc3VwZXIoXCJ3cDpleHRlbnRcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImF0dHJpYnV0ZXNcIik7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IEV4dGVudEF0dHJpYnV0ZXMoe1xuICAgICAgY3g6IHgsXG4gICAgICBjeTogeVxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuYXR0cmlidXRlcyk7XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNGcmFtZUxvY2tBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4bWxuczogXCJ4bWxuczphXCIsXG4gICAgICBub0NoYW5nZUFzcGVjdDogXCJub0NoYW5nZUFzcGVjdFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEdyYXBoaWNGcmFtZUxvY2tzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJhOmdyYXBoaWNGcmFtZUxvY2tzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEdyYXBoaWNGcmFtZUxvY2tBdHRyaWJ1dGVzKHtcbiAgICAgICAgeG1sbnM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW5cIixcbiAgICAgICAgbm9DaGFuZ2VBc3BlY3Q6IDFcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgR3JhcGhpY0ZyYW1lUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwid3A6Y052R3JhcGhpY0ZyYW1lUHJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEdyYXBoaWNGcmFtZUxvY2tzKCkpO1xuICB9XG59XG5jbGFzcyBBbmNob3JBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBkaXN0VDogXCJkaXN0VFwiLFxuICAgICAgZGlzdEI6IFwiZGlzdEJcIixcbiAgICAgIGRpc3RMOiBcImRpc3RMXCIsXG4gICAgICBkaXN0UjogXCJkaXN0UlwiLFxuICAgICAgYWxsb3dPdmVybGFwOiBcImFsbG93T3ZlcmxhcFwiLFxuICAgICAgYmVoaW5kRG9jOiBcImJlaGluZERvY1wiLFxuICAgICAgbGF5b3V0SW5DZWxsOiBcImxheW91dEluQ2VsbFwiLFxuICAgICAgbG9ja2VkOiBcImxvY2tlZFwiLFxuICAgICAgcmVsYXRpdmVIZWlnaHQ6IFwicmVsYXRpdmVIZWlnaHRcIixcbiAgICAgIHNpbXBsZVBvczogXCJzaW1wbGVQb3NcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBBbmNob3IgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWVkaWFEYXRhLFxuICAgIHRyYW5zZm9ybSxcbiAgICBkcmF3aW5nT3B0aW9uc1xuICB9KSB7XG4gICAgc3VwZXIoXCJ3cDphbmNob3JcIik7XG4gICAgY29uc3QgZmxvYXRpbmcgPSBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBhbGxvd092ZXJsYXA6IHRydWUsXG4gICAgICBiZWhpbmREb2N1bWVudDogZmFsc2UsXG4gICAgICBsb2NrQW5jaG9yOiBmYWxzZSxcbiAgICAgIGxheW91dEluQ2VsbDogdHJ1ZSxcbiAgICAgIHZlcnRpY2FsUG9zaXRpb246IHt9LFxuICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiB7fVxuICAgIH0sIGRyYXdpbmdPcHRpb25zLmZsb2F0aW5nKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBbmNob3JBdHRyaWJ1dGVzKHtcbiAgICAgICAgZGlzdFQ6IGZsb2F0aW5nLm1hcmdpbnMgPyBmbG9hdGluZy5tYXJnaW5zLnRvcCB8fCAwIDogMCxcbiAgICAgICAgZGlzdEI6IGZsb2F0aW5nLm1hcmdpbnMgPyBmbG9hdGluZy5tYXJnaW5zLmJvdHRvbSB8fCAwIDogMCxcbiAgICAgICAgZGlzdEw6IGZsb2F0aW5nLm1hcmdpbnMgPyBmbG9hdGluZy5tYXJnaW5zLmxlZnQgfHwgMCA6IDAsXG4gICAgICAgIGRpc3RSOiBmbG9hdGluZy5tYXJnaW5zID8gZmxvYXRpbmcubWFyZ2lucy5yaWdodCB8fCAwIDogMCxcbiAgICAgICAgc2ltcGxlUG9zOiBcIjBcIixcbiAgICAgICAgLy8gbm90ZTogd29yZCBkb2Vzbid0IGZ1bGx5IHN1cHBvcnQgLSBzbyB3ZSB1c2UgMFxuICAgICAgICBhbGxvd092ZXJsYXA6IGZsb2F0aW5nLmFsbG93T3ZlcmxhcCA9PT0gdHJ1ZSA/IFwiMVwiIDogXCIwXCIsXG4gICAgICAgIGJlaGluZERvYzogZmxvYXRpbmcuYmVoaW5kRG9jdW1lbnQgPT09IHRydWUgPyBcIjFcIiA6IFwiMFwiLFxuICAgICAgICBsb2NrZWQ6IGZsb2F0aW5nLmxvY2tBbmNob3IgPT09IHRydWUgPyBcIjFcIiA6IFwiMFwiLFxuICAgICAgICBsYXlvdXRJbkNlbGw6IGZsb2F0aW5nLmxheW91dEluQ2VsbCA9PT0gdHJ1ZSA/IFwiMVwiIDogXCIwXCIsXG4gICAgICAgIHJlbGF0aXZlSGVpZ2h0OiBmbG9hdGluZy56SW5kZXggPyBmbG9hdGluZy56SW5kZXggOiB0cmFuc2Zvcm0uZW11cy55XG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNpbXBsZVBvcygpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgSG9yaXpvbnRhbFBvc2l0aW9uKGZsb2F0aW5nLmhvcml6b250YWxQb3NpdGlvbikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWZXJ0aWNhbFBvc2l0aW9uKGZsb2F0aW5nLnZlcnRpY2FsUG9zaXRpb24pKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRXh0ZW50KHRyYW5zZm9ybS5lbXVzLngsIHRyYW5zZm9ybS5lbXVzLnkpKTtcbiAgICB0aGlzLnJvb3QucHVzaChjcmVhdGVFZmZlY3RFeHRlbnQoeyB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAsIGxlZnQ6IDAgfSkpO1xuICAgIGlmIChkcmF3aW5nT3B0aW9ucy5mbG9hdGluZyAhPT0gdm9pZCAwICYmIGRyYXdpbmdPcHRpb25zLmZsb2F0aW5nLndyYXAgIT09IHZvaWQgMCkge1xuICAgICAgc3dpdGNoIChkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy53cmFwLnR5cGUpIHtcbiAgICAgICAgY2FzZSBUZXh0V3JhcHBpbmdUeXBlLlNRVUFSRTpcbiAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgV3JhcFNxdWFyZShkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy53cmFwLCBkcmF3aW5nT3B0aW9ucy5mbG9hdGluZy5tYXJnaW5zKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVGV4dFdyYXBwaW5nVHlwZS5USUdIVDpcbiAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgV3JhcFRpZ2h0KGRyYXdpbmdPcHRpb25zLmZsb2F0aW5nLm1hcmdpbnMpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUZXh0V3JhcHBpbmdUeXBlLlRPUF9BTkRfQk9UVE9NOlxuICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBXcmFwVG9wQW5kQm90dG9tKGRyYXdpbmdPcHRpb25zLmZsb2F0aW5nLm1hcmdpbnMpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUZXh0V3JhcHBpbmdUeXBlLk5PTkU6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFdyYXBOb25lKCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgV3JhcE5vbmUoKSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEb2NQcm9wZXJ0aWVzKGRyYXdpbmdPcHRpb25zLmRvY1Byb3BlcnRpZXMpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgR3JhcGhpY0ZyYW1lUHJvcGVydGllcygpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgR3JhcGhpYyh7IG1lZGlhRGF0YSwgdHJhbnNmb3JtLCBvdXRsaW5lOiBkcmF3aW5nT3B0aW9ucy5vdXRsaW5lIH0pKTtcbiAgfVxufVxuY29uc3QgY3JlYXRlSW5saW5lID0gKHsgbWVkaWFEYXRhLCB0cmFuc2Zvcm0sIGRvY1Byb3BlcnRpZXMsIG91dGxpbmUgfSkgPT4ge1xuICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gIHJldHVybiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICAgIG5hbWU6IFwid3A6aW5saW5lXCIsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgZGlzdGFuY2VUb3A6IHtcbiAgICAgICAga2V5OiBcImRpc3RUXCIsXG4gICAgICAgIHZhbHVlOiAwXG4gICAgICB9LFxuICAgICAgZGlzdGFuY2VCb3R0b206IHtcbiAgICAgICAga2V5OiBcImRpc3RCXCIsXG4gICAgICAgIHZhbHVlOiAwXG4gICAgICB9LFxuICAgICAgZGlzdGFuY2VMZWZ0OiB7XG4gICAgICAgIGtleTogXCJkaXN0TFwiLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSxcbiAgICAgIGRpc3RhbmNlUmlnaHQ6IHtcbiAgICAgICAga2V5OiBcImRpc3RSXCIsXG4gICAgICAgIHZhbHVlOiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgbmV3IEV4dGVudCh0cmFuc2Zvcm0uZW11cy54LCB0cmFuc2Zvcm0uZW11cy55KSxcbiAgICAgIGNyZWF0ZUVmZmVjdEV4dGVudChcbiAgICAgICAgb3V0bGluZSA/IHtcbiAgICAgICAgICB0b3A6ICgoX2EgPSBvdXRsaW5lLndpZHRoKSAhPSBudWxsID8gX2EgOiA5NTI1KSAqIDIsXG4gICAgICAgICAgcmlnaHQ6ICgoX2IgPSBvdXRsaW5lLndpZHRoKSAhPSBudWxsID8gX2IgOiA5NTI1KSAqIDIsXG4gICAgICAgICAgYm90dG9tOiAoKF9jID0gb3V0bGluZS53aWR0aCkgIT0gbnVsbCA/IF9jIDogOTUyNSkgKiAyLFxuICAgICAgICAgIGxlZnQ6ICgoX2QgPSBvdXRsaW5lLndpZHRoKSAhPSBudWxsID8gX2QgOiA5NTI1KSAqIDJcbiAgICAgICAgfSA6IHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwIH1cbiAgICAgICksXG4gICAgICBuZXcgRG9jUHJvcGVydGllcyhkb2NQcm9wZXJ0aWVzKSxcbiAgICAgIG5ldyBHcmFwaGljRnJhbWVQcm9wZXJ0aWVzKCksXG4gICAgICBuZXcgR3JhcGhpYyh7IG1lZGlhRGF0YSwgdHJhbnNmb3JtLCBvdXRsaW5lIH0pXG4gICAgXVxuICB9KTtcbn07XG5jbGFzcyBEcmF3aW5nIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaW1hZ2VEYXRhLCBkcmF3aW5nT3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoXCJ3OmRyYXdpbmdcIik7XG4gICAgaWYgKCFkcmF3aW5nT3B0aW9ucy5mbG9hdGluZykge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIGNyZWF0ZUlubGluZSh7XG4gICAgICAgICAgbWVkaWFEYXRhOiBpbWFnZURhdGEsXG4gICAgICAgICAgdHJhbnNmb3JtOiBpbWFnZURhdGEudHJhbnNmb3JtYXRpb24sXG4gICAgICAgICAgZG9jUHJvcGVydGllczogZHJhd2luZ09wdGlvbnMuZG9jUHJvcGVydGllcyxcbiAgICAgICAgICBvdXRsaW5lOiBkcmF3aW5nT3B0aW9ucy5vdXRsaW5lXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQW5jaG9yKHsgbWVkaWFEYXRhOiBpbWFnZURhdGEsIHRyYW5zZm9ybTogaW1hZ2VEYXRhLnRyYW5zZm9ybWF0aW9uLCBkcmF3aW5nT3B0aW9ucyB9KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBJbWFnZVJ1biBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJrZXlcIiwgYCR7dW5pcXVlSWQoKX0ucG5nYCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImltYWdlRGF0YVwiKTtcbiAgICBjb25zdCBuZXdEYXRhID0gdHlwZW9mIG9wdGlvbnMyLmRhdGEgPT09IFwic3RyaW5nXCIgPyB0aGlzLmNvbnZlcnREYXRhVVJJVG9CaW5hcnkob3B0aW9uczIuZGF0YSkgOiBvcHRpb25zMi5kYXRhO1xuICAgIHRoaXMuaW1hZ2VEYXRhID0ge1xuICAgICAgc3RyZWFtOiBuZXdEYXRhLFxuICAgICAgZmlsZU5hbWU6IHRoaXMua2V5LFxuICAgICAgdHJhbnNmb3JtYXRpb246IHtcbiAgICAgICAgcGl4ZWxzOiB7XG4gICAgICAgICAgeDogTWF0aC5yb3VuZChvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi53aWR0aCksXG4gICAgICAgICAgeTogTWF0aC5yb3VuZChvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5oZWlnaHQpXG4gICAgICAgIH0sXG4gICAgICAgIGVtdXM6IHtcbiAgICAgICAgICB4OiBNYXRoLnJvdW5kKG9wdGlvbnMyLnRyYW5zZm9ybWF0aW9uLndpZHRoICogOTUyNSksXG4gICAgICAgICAgeTogTWF0aC5yb3VuZChvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5oZWlnaHQgKiA5NTI1KVxuICAgICAgICB9LFxuICAgICAgICBmbGlwOiBvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5mbGlwLFxuICAgICAgICByb3RhdGlvbjogb3B0aW9uczIudHJhbnNmb3JtYXRpb24ucm90YXRpb24gPyBvcHRpb25zMi50cmFuc2Zvcm1hdGlvbi5yb3RhdGlvbiAqIDZlNCA6IHZvaWQgMFxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZHJhd2luZyA9IG5ldyBEcmF3aW5nKHRoaXMuaW1hZ2VEYXRhLCB7XG4gICAgICBmbG9hdGluZzogb3B0aW9uczIuZmxvYXRpbmcsXG4gICAgICBkb2NQcm9wZXJ0aWVzOiBvcHRpb25zMi5hbHRUZXh0LFxuICAgICAgb3V0bGluZTogb3B0aW9uczIub3V0bGluZVxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKGRyYXdpbmcpO1xuICB9XG4gIHByZXBGb3JYbWwoY29udGV4dCkge1xuICAgIGNvbnRleHQuZmlsZS5NZWRpYS5hZGRJbWFnZSh0aGlzLmtleSwgdGhpcy5pbWFnZURhdGEpO1xuICAgIHJldHVybiBzdXBlci5wcmVwRm9yWG1sKGNvbnRleHQpO1xuICB9XG4gIGNvbnZlcnREYXRhVVJJVG9CaW5hcnkoZGF0YVVSSSkge1xuICAgIGlmICh0eXBlb2YgYXRvYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBCQVNFNjRfTUFSS0VSID0gXCI7YmFzZTY0LFwiO1xuICAgICAgY29uc3QgYmFzZTY0SW5kZXggPSBkYXRhVVJJLmluZGV4T2YoQkFTRTY0X01BUktFUik7XG4gICAgICBjb25zdCBiYXNlNjRJbmRleFdpdGhPZmZzZXQgPSBiYXNlNjRJbmRleCA9PT0gLTEgPyAwIDogYmFzZTY0SW5kZXggKyBCQVNFNjRfTUFSS0VSLmxlbmd0aDtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShcbiAgICAgICAgYXRvYihkYXRhVVJJLnN1YnN0cmluZyhiYXNlNjRJbmRleFdpdGhPZmZzZXQpKS5zcGxpdChcIlwiKS5tYXAoKGMpID0+IGMuY2hhckNvZGVBdCgwKSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGIgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuICAgICAgcmV0dXJuIG5ldyBiLkJ1ZmZlcihkYXRhVVJJLCBcImJhc2U2NFwiKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFNlcXVlbnRpYWxJZGVudGlmaWVySW5zdHJ1Y3Rpb24gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyKSB7XG4gICAgc3VwZXIoXCJ3Omluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChgU0VRICR7aWRlbnRpZmllcn1gKTtcbiAgfVxufVxuY2xhc3MgU2VxdWVudGlhbElkZW50aWZpZXIgZXh0ZW5kcyBSdW4ge1xuICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCZWdpbih0cnVlKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNlcXVlbnRpYWxJZGVudGlmaWVySW5zdHJ1Y3Rpb24oaWRlbnRpZmllcikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZXBhcmF0ZSgpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRW5kKCkpO1xuICB9XG59XG5jbGFzcyBGbGRTaW1wbGVBdHRycyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyBpbnN0cjogXCJ3Omluc3RyXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFNpbXBsZUZpZWxkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaW5zdHJ1Y3Rpb24sIGNhY2hlZFZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OmZsZFNpbXBsZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRmxkU2ltcGxlQXR0cnMoeyBpbnN0cjogaW5zdHJ1Y3Rpb24gfSkpO1xuICAgIGlmIChjYWNoZWRWYWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dFJ1bihjYWNoZWRWYWx1ZSkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgU2ltcGxlTWFpbE1lcmdlRmllbGQgZXh0ZW5kcyBTaW1wbGVGaWVsZCB7XG4gIGNvbnN0cnVjdG9yKGZpZWxkTmFtZSkge1xuICAgIHN1cGVyKGAgTUVSR0VGSUVMRCAke2ZpZWxkTmFtZX0gYCwgYMKrJHtmaWVsZE5hbWV9wrtgKTtcbiAgfVxufVxuY2xhc3MgQ29tbWVudEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgaWQ6IFwidzppZFwiLCBpbml0aWFsczogXCJ3OmluaXRpYWxzXCIsIGF1dGhvcjogXCJ3OmF1dGhvclwiLCBkYXRlOiBcInc6ZGF0ZVwiIH0pO1xuICB9XG59XG5jbGFzcyBDb21tZW50UmFuZ2VBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGlkOiBcInc6aWRcIiB9KTtcbiAgfVxufVxuY2xhc3MgUm9vdENvbW1lbnRzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgXCJ4bWxuczpjeFwiOiBcInhtbG5zOmN4XCIsXG4gICAgICBcInhtbG5zOmN4MVwiOiBcInhtbG5zOmN4MVwiLFxuICAgICAgXCJ4bWxuczpjeDJcIjogXCJ4bWxuczpjeDJcIixcbiAgICAgIFwieG1sbnM6Y3gzXCI6IFwieG1sbnM6Y3gzXCIsXG4gICAgICBcInhtbG5zOmN4NFwiOiBcInhtbG5zOmN4NFwiLFxuICAgICAgXCJ4bWxuczpjeDVcIjogXCJ4bWxuczpjeDVcIixcbiAgICAgIFwieG1sbnM6Y3g2XCI6IFwieG1sbnM6Y3g2XCIsXG4gICAgICBcInhtbG5zOmN4N1wiOiBcInhtbG5zOmN4N1wiLFxuICAgICAgXCJ4bWxuczpjeDhcIjogXCJ4bWxuczpjeDhcIixcbiAgICAgIFwieG1sbnM6bWNcIjogXCJ4bWxuczptY1wiLFxuICAgICAgXCJ4bWxuczphaW5rXCI6IFwieG1sbnM6YWlua1wiLFxuICAgICAgXCJ4bWxuczphbTNkXCI6IFwieG1sbnM6YW0zZFwiLFxuICAgICAgXCJ4bWxuczpvXCI6IFwieG1sbnM6b1wiLFxuICAgICAgXCJ4bWxuczpyXCI6IFwieG1sbnM6clwiLFxuICAgICAgXCJ4bWxuczptXCI6IFwieG1sbnM6bVwiLFxuICAgICAgXCJ4bWxuczp2XCI6IFwieG1sbnM6dlwiLFxuICAgICAgXCJ4bWxuczp3cDE0XCI6IFwieG1sbnM6d3AxNFwiLFxuICAgICAgXCJ4bWxuczp3cFwiOiBcInhtbG5zOndwXCIsXG4gICAgICBcInhtbG5zOncxMFwiOiBcInhtbG5zOncxMFwiLFxuICAgICAgXCJ4bWxuczp3XCI6IFwieG1sbnM6d1wiLFxuICAgICAgXCJ4bWxuczp3MTRcIjogXCJ4bWxuczp3MTRcIixcbiAgICAgIFwieG1sbnM6dzE1XCI6IFwieG1sbnM6dzE1XCIsXG4gICAgICBcInhtbG5zOncxNmNleFwiOiBcInhtbG5zOncxNmNleFwiLFxuICAgICAgXCJ4bWxuczp3MTZjaWRcIjogXCJ4bWxuczp3MTZjaWRcIixcbiAgICAgIFwieG1sbnM6dzE2XCI6IFwieG1sbnM6dzE2XCIsXG4gICAgICBcInhtbG5zOncxNnNkdGRoXCI6IFwieG1sbnM6dzE2c2R0ZGhcIixcbiAgICAgIFwieG1sbnM6dzE2c2VcIjogXCJ4bWxuczp3MTZzZVwiLFxuICAgICAgXCJ4bWxuczp3cGdcIjogXCJ4bWxuczp3cGdcIixcbiAgICAgIFwieG1sbnM6d3BpXCI6IFwieG1sbnM6d3BpXCIsXG4gICAgICBcInhtbG5zOnduZVwiOiBcInhtbG5zOnduZVwiLFxuICAgICAgXCJ4bWxuczp3cHNcIjogXCJ4bWxuczp3cHNcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBDb21tZW50UmFuZ2VTdGFydCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoXCJ3OmNvbW1lbnRSYW5nZVN0YXJ0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb21tZW50UmFuZ2VBdHRyaWJ1dGVzKHsgaWQgfSkpO1xuICB9XG59XG5jbGFzcyBDb21tZW50UmFuZ2VFbmQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHN1cGVyKFwidzpjb21tZW50UmFuZ2VFbmRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbW1lbnRSYW5nZUF0dHJpYnV0ZXMoeyBpZCB9KSk7XG4gIH1cbn1cbmNsYXNzIENvbW1lbnRSZWZlcmVuY2UgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHN1cGVyKFwidzpjb21tZW50UmVmZXJlbmNlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb21tZW50UmFuZ2VBdHRyaWJ1dGVzKHsgaWQgfSkpO1xuICB9XG59XG5jbGFzcyBDb21tZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBpZCwgaW5pdGlhbHMsIGF1dGhvciwgZGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLCBjaGlsZHJlbiB9KSB7XG4gICAgc3VwZXIoXCJ3OmNvbW1lbnRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQ29tbWVudEF0dHJpYnV0ZXMoe1xuICAgICAgICBpZCxcbiAgICAgICAgaW5pdGlhbHMsXG4gICAgICAgIGF1dGhvcixcbiAgICAgICAgZGF0ZTogZGF0ZS50b0lTT1N0cmluZygpXG4gICAgICB9KVxuICAgICk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgQ29tbWVudHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IGNoaWxkcmVuIH0pIHtcbiAgICBzdXBlcihcInc6Y29tbWVudHNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUm9vdENvbW1lbnRzQXR0cmlidXRlcyh7XG4gICAgICAgIFwieG1sbnM6Y3hcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTQvY2hhcnRleFwiLFxuICAgICAgICBcInhtbG5zOmN4MVwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS85LzgvY2hhcnRleFwiLFxuICAgICAgICBcInhtbG5zOmN4MlwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS8xMC8yMS9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3gzXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvOS9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3g0XCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTAvY2hhcnRleFwiLFxuICAgICAgICBcInhtbG5zOmN4NVwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzExL2NoYXJ0ZXhcIixcbiAgICAgICAgXCJ4bWxuczpjeDZcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMi9jaGFydGV4XCIsXG4gICAgICAgIFwieG1sbnM6Y3g3XCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTMvY2hhcnRleFwiLFxuICAgICAgICBcInhtbG5zOmN4OFwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzE0L2NoYXJ0ZXhcIixcbiAgICAgICAgXCJ4bWxuczptY1wiOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgIFwieG1sbnM6YWlua1wiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi9pbmtcIixcbiAgICAgICAgXCJ4bWxuczphbTNkXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE3L21vZGVsM2RcIixcbiAgICAgICAgXCJ4bWxuczpvXCI6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgIFwieG1sbnM6clwiOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHNcIixcbiAgICAgICAgXCJ4bWxuczptXCI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvbWF0aFwiLFxuICAgICAgICBcInhtbG5zOnZcIjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICBcInhtbG5zOndwMTRcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgIFwieG1sbnM6d3BcIjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgIFwieG1sbnM6dzEwXCI6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICBcInhtbG5zOndcIjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcbiAgICAgICAgXCJ4bWxuczp3MTRcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXG4gICAgICAgIFwieG1sbnM6dzE1XCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICBcInhtbG5zOncxNmNleFwiOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxOC93b3JkbWwvY2V4XCIsXG4gICAgICAgIFwieG1sbnM6dzE2Y2lkXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE2L3dvcmRtbC9jaWRcIixcbiAgICAgICAgXCJ4bWxuczp3MTZcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sXCIsXG4gICAgICAgIFwieG1sbnM6dzE2c2R0ZGhcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMjAvd29yZG1sL3NkdGRhdGFoYXNoXCIsXG4gICAgICAgIFwieG1sbnM6dzE2c2VcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTUvd29yZG1sL3N5bWV4XCIsXG4gICAgICAgIFwieG1sbnM6d3BnXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgXCJ4bWxuczp3cGlcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdJbmtcIixcbiAgICAgICAgXCJ4bWxuczp3bmVcIjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMDYvd29yZG1sXCIsXG4gICAgICAgIFwieG1sbnM6d3BzXCI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIlxuICAgICAgfSlcbiAgICApO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb21tZW50KGNoaWxkKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBOb0JyZWFrSHlwaGVuIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3Om5vQnJlYWtIeXBoZW5cIik7XG4gIH1cbn1cbmNsYXNzIFNvZnRIeXBoZW4gZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6c29mdEh5cGhlblwiKTtcbiAgfVxufVxuY2xhc3MgRGF5U2hvcnQgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6ZGF5U2hvcnRcIik7XG4gIH1cbn1cbmNsYXNzIE1vbnRoU2hvcnQgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6bW9udGhTaG9ydFwiKTtcbiAgfVxufVxuY2xhc3MgWWVhclNob3J0IGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OnllYXJTaG9ydFwiKTtcbiAgfVxufVxuY2xhc3MgRGF5TG9uZyBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpkYXlMb25nXCIpO1xuICB9XG59XG5jbGFzcyBNb250aExvbmcgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6bW9udGhMb25nXCIpO1xuICB9XG59XG5jbGFzcyBZZWFyTG9uZyBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzp5ZWFyTG9uZ1wiKTtcbiAgfVxufVxuY2xhc3MgQW5ub3RhdGlvblJlZmVyZW5jZSBleHRlbmRzIEVtcHR5RWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzphbm5vdGF0aW9uUmVmXCIpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVJlZmVyZW5jZUVsZW1lbnQgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Zm9vdG5vdGVSZWZcIik7XG4gIH1cbn1cbmNsYXNzIEVuZG5vdGVSZWZlcmVuY2UgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6ZW5kbm90ZVJlZlwiKTtcbiAgfVxufVxuY2xhc3MgU2VwYXJhdG9yIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OnNlcGFyYXRvclwiKTtcbiAgfVxufVxuY2xhc3MgQ29udGludWF0aW9uU2VwYXJhdG9yIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmNvbnRpbnVhdGlvblNlcGFyYXRvclwiKTtcbiAgfVxufVxuY2xhc3MgUGFnZU51bWJlckVsZW1lbnQgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6cGdOdW1cIik7XG4gIH1cbn1cbmNsYXNzIENhcnJpYWdlUmV0dXJuIGV4dGVuZHMgRW1wdHlFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmNyXCIpO1xuICB9XG59XG5jbGFzcyBUYWIgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6dGFiXCIpO1xuICB9XG59XG5jbGFzcyBMYXN0UmVuZGVyZWRQYWdlQnJlYWsgZXh0ZW5kcyBFbXB0eUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6bGFzdFJlbmRlcmVkUGFnZUJyZWFrXCIpO1xuICB9XG59XG5jb25zdCBQb3NpdGlvbmFsVGFiQWxpZ25tZW50ID0ge1xuICBMRUZUOiBcImxlZnRcIixcbiAgQ0VOVEVSOiBcImNlbnRlclwiLFxuICBSSUdIVDogXCJyaWdodFwiXG59O1xuY29uc3QgUG9zaXRpb25hbFRhYlJlbGF0aXZlVG8gPSB7XG4gIE1BUkdJTjogXCJtYXJnaW5cIixcbiAgSU5ERU5UOiBcImluZGVudFwiXG59O1xuY29uc3QgUG9zaXRpb25hbFRhYkxlYWRlciA9IHtcbiAgTk9ORTogXCJub25lXCIsXG4gIERPVDogXCJkb3RcIixcbiAgSFlQSEVOOiBcImh5cGhlblwiLFxuICBVTkRFUlNDT1JFOiBcInVuZGVyc2NvcmVcIixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICBNSURETEVfRE9UOiBcIm1pZGRsZURvdFwiXG59O1xuY2xhc3MgUG9zaXRpb25hbFRhYiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnB0YWJcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTmV4dEF0dHJpYnV0ZUNvbXBvbmVudCh7XG4gICAgICAgIGFsaWdubWVudDoge1xuICAgICAgICAgIGtleTogXCJ3OmFsaWdubWVudFwiLFxuICAgICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbGlnbm1lbnRcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUbzoge1xuICAgICAgICAgIGtleTogXCJ3OnJlbGF0aXZlVG9cIixcbiAgICAgICAgICB2YWx1ZTogb3B0aW9uczIucmVsYXRpdmVUb1xuICAgICAgICB9LFxuICAgICAgICBsZWFkZXI6IHtcbiAgICAgICAgICBrZXk6IFwidzpsZWFkZXJcIixcbiAgICAgICAgICB2YWx1ZTogb3B0aW9uczIubGVhZGVyXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgQnJlYWtUeXBlID0ge1xuICBDT0xVTU46IFwiY29sdW1uXCIsXG4gIFBBR0U6IFwicGFnZVwiXG4gIC8vIHRleHRXcmFwcGluZyBicmVha3MgYXJlIHRoZSBkZWZhdWx0IGFuZCBhbHJlYWR5IGV4cG9zZWQgdmlhIHRoZSBcIlJ1blwiIGNsYXNzXG59O1xuY2xhc3MgQnJlYWsyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZSkge1xuICAgIHN1cGVyKFwidzpiclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdHlwZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBQYWdlQnJlYWsgZXh0ZW5kcyBSdW4ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7fSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEJyZWFrMihCcmVha1R5cGUuUEFHRSkpO1xuICB9XG59XG5jbGFzcyBDb2x1bW5CcmVhayBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgQnJlYWsyKEJyZWFrVHlwZS5DT0xVTU4pKTtcbiAgfVxufVxuY2xhc3MgUGFnZUJyZWFrQmVmb3JlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OnBhZ2VCcmVha0JlZm9yZVwiKTtcbiAgfVxufVxuY29uc3QgTGluZVJ1bGVUeXBlID0ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gIEFUX0xFQVNUOiBcImF0TGVhc3RcIixcbiAgRVhBQ1RMWTogXCJleGFjdGx5XCIsXG4gIEVYQUNUOiBcImV4YWN0XCIsXG4gIEFVVE86IFwiYXV0b1wiXG59O1xuY2xhc3MgU3BhY2luZ0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIGFmdGVyOiBcInc6YWZ0ZXJcIixcbiAgICAgIGJlZm9yZTogXCJ3OmJlZm9yZVwiLFxuICAgICAgbGluZTogXCJ3OmxpbmVcIixcbiAgICAgIGxpbmVSdWxlOiBcInc6bGluZVJ1bGVcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBTcGFjaW5nIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6c3BhY2luZ1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU3BhY2luZ0F0dHJpYnV0ZXMob3B0aW9uczIpKTtcbiAgfVxufVxuY29uc3QgSGVhZGluZ0xldmVsID0ge1xuICBIRUFESU5HXzE6IFwiSGVhZGluZzFcIixcbiAgSEVBRElOR18yOiBcIkhlYWRpbmcyXCIsXG4gIEhFQURJTkdfMzogXCJIZWFkaW5nM1wiLFxuICBIRUFESU5HXzQ6IFwiSGVhZGluZzRcIixcbiAgSEVBRElOR181OiBcIkhlYWRpbmc1XCIsXG4gIEhFQURJTkdfNjogXCJIZWFkaW5nNlwiLFxuICBUSVRMRTogXCJUaXRsZVwiXG59O1xubGV0IFN0eWxlJDEgPSBjbGFzcyBTdHlsZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHN0eWxlSWQpIHtcbiAgICBzdXBlcihcInc6cFN0eWxlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHN0eWxlSWRcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufTtcbmNsYXNzIFRhYlN0b3AgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih0YWJEZWZpbml0aW9ucykge1xuICAgIHN1cGVyKFwidzp0YWJzXCIpO1xuICAgIGZvciAoY29uc3QgdGFiRGVmaW5pdGlvbiBvZiB0YWJEZWZpbml0aW9ucykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYlN0b3BJdGVtKHRhYkRlZmluaXRpb24pKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IFRhYlN0b3BUeXBlID0ge1xuICBMRUZUOiBcImxlZnRcIixcbiAgUklHSFQ6IFwicmlnaHRcIixcbiAgQ0VOVEVSOiBcImNlbnRlclwiLFxuICBCQVI6IFwiYmFyXCIsXG4gIENMRUFSOiBcImNsZWFyXCIsXG4gIERFQ0lNQUw6IFwiZGVjaW1hbFwiLFxuICBFTkQ6IFwiZW5kXCIsXG4gIE5VTTogXCJudW1cIixcbiAgU1RBUlQ6IFwic3RhcnRcIlxufTtcbmNvbnN0IExlYWRlclR5cGUgPSB7XG4gIERPVDogXCJkb3RcIixcbiAgSFlQSEVOOiBcImh5cGhlblwiLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gIE1JRERMRV9ET1Q6IFwibWlkZGxlRG90XCIsXG4gIE5PTkU6IFwibm9uZVwiLFxuICBVTkRFUlNDT1JFOiBcInVuZGVyc2NvcmVcIlxufTtcbmNvbnN0IFRhYlN0b3BQb3NpdGlvbiA9IHtcbiAgTUFYOiA5MDI2XG59O1xuY2xhc3MgVGFiQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiwgcG9zOiBcInc6cG9zXCIsIGxlYWRlcjogXCJ3OmxlYWRlclwiIH0pO1xuICB9XG59XG5jbGFzcyBUYWJTdG9wSXRlbSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgdHlwZSwgcG9zaXRpb24sIGxlYWRlciB9KSB7XG4gICAgc3VwZXIoXCJ3OnRhYlwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBUYWJBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB0eXBlLFxuICAgICAgICBwb3M6IHBvc2l0aW9uLFxuICAgICAgICBsZWFkZXJcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgTnVtYmVyUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG51bWJlcklkLCBpbmRlbnRMZXZlbCkge1xuICAgIHN1cGVyKFwidzpudW1QclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgSW5kZW50TGV2ZWwoaW5kZW50TGV2ZWwpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTnVtYmVySWQobnVtYmVySWQpKTtcbiAgfVxufVxuY2xhc3MgSW5kZW50TGV2ZWwgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgIHN1cGVyKFwidzppbHZsXCIpO1xuICAgIGlmIChsZXZlbCA+IDkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJMZXZlbCBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIDkuIFJlYWQgbW9yZSBoZXJlOiBodHRwczovL2Fuc3dlcnMubWljcm9zb2Z0LmNvbS9lbi11cy9tc29mZmljZS9mb3J1bS9hbGwvZG9lcy13b3JkLXN1cHBvcnQtbW9yZS10aGFuLTktbGlzdC1sZXZlbHMvZDEzMGZkY2QtMTc4MS00NDZkLThjODQtYzZjNzkxMjRlNGQ3XCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IGxldmVsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIE51bWJlcklkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICBzdXBlcihcInc6bnVtSWRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdHlwZW9mIGlkID09PSBcInN0cmluZ1wiID8gYHske2lkfX1gIDogaWRcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgRmlsZUNoaWxkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZmlsZUNoaWxkXCIsIFN5bWJvbCgpKTtcbiAgfVxufVxuY2xhc3MgUmVsYXRpb25zaGlwQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgaWQ6IFwiSWRcIixcbiAgICAgIHR5cGU6IFwiVHlwZVwiLFxuICAgICAgdGFyZ2V0OiBcIlRhcmdldFwiLFxuICAgICAgdGFyZ2V0TW9kZTogXCJUYXJnZXRNb2RlXCJcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgVGFyZ2V0TW9kZVR5cGUgPSB7XG4gIEVYVEVSTkFMOiBcIkV4dGVybmFsXCJcbn07XG5jbGFzcyBSZWxhdGlvbnNoaXAgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCwgdHlwZSwgdGFyZ2V0LCB0YXJnZXRNb2RlKSB7XG4gICAgc3VwZXIoXCJSZWxhdGlvbnNoaXBcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUmVsYXRpb25zaGlwQXR0cmlidXRlcyh7XG4gICAgICAgIGlkLFxuICAgICAgICB0eXBlLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHRhcmdldE1vZGVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgSHlwZXJsaW5rQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgaWQ6IFwicjppZFwiLFxuICAgICAgaGlzdG9yeTogXCJ3Omhpc3RvcnlcIixcbiAgICAgIGFuY2hvcjogXCJ3OmFuY2hvclwiXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IEh5cGVybGlua1R5cGUgPSB7XG4gIElOVEVSTkFMOiBcIklOVEVSTkFMXCIsXG4gIEVYVEVSTkFMOiBcIkVYVEVSTkFMXCJcbn07XG5jbGFzcyBDb25jcmV0ZUh5cGVybGluayBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkcmVuLCByZWxhdGlvbnNoaXBJZCwgYW5jaG9yKSB7XG4gICAgc3VwZXIoXCJ3Omh5cGVybGlua1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibGlua0lkXCIpO1xuICAgIHRoaXMubGlua0lkID0gcmVsYXRpb25zaGlwSWQ7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBoaXN0b3J5OiAxLFxuICAgICAgYW5jaG9yOiBhbmNob3IgPyBhbmNob3IgOiB2b2lkIDAsXG4gICAgICBpZDogIWFuY2hvciA/IGBySWQke3RoaXMubGlua0lkfWAgOiB2b2lkIDBcbiAgICB9O1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBuZXcgSHlwZXJsaW5rQXR0cmlidXRlcyhwcm9wcyk7XG4gICAgdGhpcy5yb290LnB1c2goYXR0cmlidXRlcyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgSW50ZXJuYWxIeXBlcmxpbmsgZXh0ZW5kcyBDb25jcmV0ZUh5cGVybGluayB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIob3B0aW9uczIuY2hpbGRyZW4sIHVuaXF1ZUlkKCksIG9wdGlvbnMyLmFuY2hvcik7XG4gIH1cbn1cbmNsYXNzIEV4dGVybmFsSHlwZXJsaW5rIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6ZXh0ZXJuYWxIeXBlcmxpbmtcIik7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczI7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrU3RhcnRBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBpZDogXCJ3OmlkXCIsXG4gICAgICBuYW1lOiBcInc6bmFtZVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrRW5kQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgaWQ6IFwidzppZFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiYm9va21hcmtVbmlxdWVOdW1lcmljSWRcIiwgYm9va21hcmtVbmlxdWVOdW1lcmljSWRHZW4oKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN0YXJ0XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjaGlsZHJlblwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZW5kXCIpO1xuICAgIGNvbnN0IGxpbmtJZCA9IHRoaXMuYm9va21hcmtVbmlxdWVOdW1lcmljSWQoKTtcbiAgICB0aGlzLnN0YXJ0ID0gbmV3IEJvb2ttYXJrU3RhcnQob3B0aW9uczIuaWQsIGxpbmtJZCk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG9wdGlvbnMyLmNoaWxkcmVuO1xuICAgIHRoaXMuZW5kID0gbmV3IEJvb2ttYXJrRW5kKGxpbmtJZCk7XG4gIH1cbn1cbmNsYXNzIEJvb2ttYXJrU3RhcnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCwgbGlua0lkKSB7XG4gICAgc3VwZXIoXCJ3OmJvb2ttYXJrU3RhcnRcIik7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBCb29rbWFya1N0YXJ0QXR0cmlidXRlcyh7XG4gICAgICBuYW1lOiBpZCxcbiAgICAgIGlkOiBsaW5rSWRcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaChhdHRyaWJ1dGVzKTtcbiAgfVxufVxuY2xhc3MgQm9va21hcmtFbmQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsaW5rSWQpIHtcbiAgICBzdXBlcihcInc6Ym9va21hcmtFbmRcIik7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IG5ldyBCb29rbWFya0VuZEF0dHJpYnV0ZXMoe1xuICAgICAgaWQ6IGxpbmtJZFxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKGF0dHJpYnV0ZXMpO1xuICB9XG59XG5jbGFzcyBPdXRsaW5lTGV2ZWwgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgIHN1cGVyKFwidzpvdXRsaW5lTHZsXCIpO1xuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiBsZXZlbFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBQYWdlUmVmZXJlbmNlRmllbGRJbnN0cnVjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGJvb2ttYXJrSWQsIG9wdGlvbnMyID0ge30pIHtcbiAgICBzdXBlcihcInc6aW5zdHJUZXh0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUZXh0QXR0cmlidXRlcyh7IHNwYWNlOiBTcGFjZVR5cGUuUFJFU0VSVkUgfSkpO1xuICAgIGxldCBpbnN0cnVjdGlvbiA9IGBQQUdFUkVGICR7Ym9va21hcmtJZH1gO1xuICAgIGlmIChvcHRpb25zMi5oeXBlcmxpbmspIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxoYDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVzZVJlbGF0aXZlUG9zaXRpb24pIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxwYDtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2goaW5zdHJ1Y3Rpb24pO1xuICB9XG59XG5jbGFzcyBQYWdlUmVmZXJlbmNlIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoYm9va21hcmtJZCwgb3B0aW9uczIgPSB7fSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNoaWxkcmVuOiBbbmV3IEJlZ2luKHRydWUpLCBuZXcgUGFnZVJlZmVyZW5jZUZpZWxkSW5zdHJ1Y3Rpb24oYm9va21hcmtJZCwgb3B0aW9uczIpLCBuZXcgRW5kKCldXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IFZlcnRpY2FsQWxpZ24yID0ge1xuICBCT1RUT006IFwiYm90dG9tXCIsXG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgVE9QOiBcInRvcFwiXG59O1xuY2xhc3MgVmVydGljYWxBbGlnbkF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHZlcnRpY2FsQWxpZ246IFwidzp2YWxcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBWZXJ0aWNhbEFsaWduRWxlbWVudCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnZBbGlnblwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVmVydGljYWxBbGlnbkF0dHJpYnV0ZXMoeyB2ZXJ0aWNhbEFsaWduOiB2YWx1ZSB9KSk7XG4gIH1cbn1cbmNvbnN0IEhlYWRlckZvb3RlclJlZmVyZW5jZVR5cGUgPSB7XG4gIERFRkFVTFQ6IFwiZGVmYXVsdFwiLFxuICBGSVJTVDogXCJmaXJzdFwiLFxuICBFVkVOOiBcImV2ZW5cIlxufTtcbmNsYXNzIEZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHR5cGU6IFwidzp0eXBlXCIsXG4gICAgICBpZDogXCJyOmlkXCJcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgSGVhZGVyRm9vdGVyVHlwZSA9IHtcbiAgSEVBREVSOiBcInc6aGVhZGVyUmVmZXJlbmNlXCIsXG4gIEZPT1RFUjogXCJ3OmZvb3RlclJlZmVyZW5jZVwiXG59O1xuY2xhc3MgSGVhZGVyRm9vdGVyUmVmZXJlbmNlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodHlwZSwgb3B0aW9uczIpIHtcbiAgICBzdXBlcih0eXBlKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBGb290ZXJSZWZlcmVuY2VBdHRyaWJ1dGVzKHtcbiAgICAgICAgdHlwZTogb3B0aW9uczIudHlwZSB8fCBIZWFkZXJGb290ZXJSZWZlcmVuY2VUeXBlLkRFRkFVTFQsXG4gICAgICAgIGlkOiBgcklkJHtvcHRpb25zMi5pZH1gXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIENvbHVtbnMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IHNwYWNlLCBjb3VudCwgc2VwYXJhdGUsIGVxdWFsV2lkdGgsIGNoaWxkcmVuIH0pIHtcbiAgICBzdXBlcihcInc6Y29sc1wiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgc3BhY2U6IHsga2V5OiBcInc6c3BhY2VcIiwgdmFsdWU6IHNwYWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0d2lwc01lYXN1cmVWYWx1ZShzcGFjZSkgfSxcbiAgICAgICAgY291bnQ6IHsga2V5OiBcInc6bnVtXCIsIHZhbHVlOiBjb3VudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVjaW1hbE51bWJlcihjb3VudCkgfSxcbiAgICAgICAgc2VwYXJhdGU6IHsga2V5OiBcInc6c2VwXCIsIHZhbHVlOiBzZXBhcmF0ZSB9LFxuICAgICAgICBlcXVhbFdpZHRoOiB7IGtleTogXCJ3OmVxdWFsV2lkdGhcIiwgdmFsdWU6IGVxdWFsV2lkdGggfVxuICAgICAgfSlcbiAgICApO1xuICAgIGlmICghZXF1YWxXaWR0aCAmJiBjaGlsZHJlbikge1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY29sdW1uKSA9PiB0aGlzLmFkZENoaWxkRWxlbWVudChjb2x1bW4pKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IERvY3VtZW50R3JpZFR5cGUgPSB7XG4gIERFRkFVTFQ6IFwiZGVmYXVsdFwiLFxuICBMSU5FUzogXCJsaW5lc1wiLFxuICBMSU5FU19BTkRfQ0hBUlM6IFwibGluZXNBbmRDaGFyc1wiLFxuICBTTkFQX1RPX0NIQVJTOiBcInNuYXBUb0NoYXJzXCJcbn07XG5jbGFzcyBEb2NHcmlkQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdHlwZTogXCJ3OnR5cGVcIixcbiAgICAgIGxpbmVQaXRjaDogXCJ3OmxpbmVQaXRjaFwiLFxuICAgICAgY2hhclNwYWNlOiBcInc6Y2hhclNwYWNlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRG9jdW1lbnRHcmlkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobGluZVBpdGNoLCBjaGFyU3BhY2UsIHR5cGUpIHtcbiAgICBzdXBlcihcInc6ZG9jR3JpZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBEb2NHcmlkQXR0cmlidXRlcyh7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGxpbmVQaXRjaDogZGVjaW1hbE51bWJlcihsaW5lUGl0Y2gpLFxuICAgICAgICBjaGFyU3BhY2U6IGNoYXJTcGFjZSA/IGRlY2ltYWxOdW1iZXIoY2hhclNwYWNlKSA6IHZvaWQgMFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jb25zdCBMaW5lTnVtYmVyUmVzdGFydEZvcm1hdCA9IHtcbiAgTkVXX1BBR0U6IFwibmV3UGFnZVwiLFxuICBORVdfU0VDVElPTjogXCJuZXdTZWN0aW9uXCIsXG4gIENPTlRJTlVPVVM6IFwiY29udGludW91c1wiXG59O1xuY29uc3QgY3JlYXRlTGluZU51bWJlclR5cGUgPSAoeyBjb3VudEJ5LCBzdGFydCwgcmVzdGFydCwgZGlzdGFuY2UgfSkgPT4gbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgbmFtZTogXCJ3OmxuTnVtVHlwZVwiLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgY291bnRCeTogeyBrZXk6IFwidzpjb3VudEJ5XCIsIHZhbHVlOiBjb3VudEJ5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWNpbWFsTnVtYmVyKGNvdW50QnkpIH0sXG4gICAgc3RhcnQ6IHsga2V5OiBcInc6c3RhcnRcIiwgdmFsdWU6IHN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWNpbWFsTnVtYmVyKHN0YXJ0KSB9LFxuICAgIHJlc3RhcnQ6IHsga2V5OiBcInc6cmVzdGFydFwiLCB2YWx1ZTogcmVzdGFydCB9LFxuICAgIGRpc3RhbmNlOiB7XG4gICAgICBrZXk6IFwidzpkaXN0YW5jZVwiLFxuICAgICAgdmFsdWU6IGRpc3RhbmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0d2lwc01lYXN1cmVWYWx1ZShkaXN0YW5jZSlcbiAgICB9XG4gIH1cbn0pO1xuY29uc3QgUGFnZUJvcmRlckRpc3BsYXkgPSB7XG4gIEFMTF9QQUdFUzogXCJhbGxQYWdlc1wiLFxuICBGSVJTVF9QQUdFOiBcImZpcnN0UGFnZVwiLFxuICBOT1RfRklSU1RfUEFHRTogXCJub3RGaXJzdFBhZ2VcIlxufTtcbmNvbnN0IFBhZ2VCb3JkZXJPZmZzZXRGcm9tID0ge1xuICBQQUdFOiBcInBhZ2VcIixcbiAgVEVYVDogXCJ0ZXh0XCJcbn07XG5jb25zdCBQYWdlQm9yZGVyWk9yZGVyID0ge1xuICBCQUNLOiBcImJhY2tcIixcbiAgRlJPTlQ6IFwiZnJvbnRcIlxufTtcbmNsYXNzIFBhZ2VCb3JkZXJzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZGlzcGxheTogXCJ3OmRpc3BsYXlcIixcbiAgICAgIG9mZnNldEZyb206IFwidzpvZmZzZXRGcm9tXCIsXG4gICAgICB6T3JkZXI6IFwidzp6T3JkZXJcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBQYWdlQm9yZGVycyBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpwZ0JvcmRlcnNcIik7XG4gICAgaWYgKCFvcHRpb25zMikge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5wYWdlQm9yZGVycykge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIG5ldyBQYWdlQm9yZGVyc0F0dHJpYnV0ZXMoe1xuICAgICAgICAgIGRpc3BsYXk6IG9wdGlvbnMyLnBhZ2VCb3JkZXJzLmRpc3BsYXksXG4gICAgICAgICAgb2Zmc2V0RnJvbTogb3B0aW9uczIucGFnZUJvcmRlcnMub2Zmc2V0RnJvbSxcbiAgICAgICAgICB6T3JkZXI6IG9wdGlvbnMyLnBhZ2VCb3JkZXJzLnpPcmRlclxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VCb3JkZXJzQXR0cmlidXRlcyh7fSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucGFnZUJvcmRlclRvcCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnRvcFwiLCBvcHRpb25zMi5wYWdlQm9yZGVyVG9wKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5wYWdlQm9yZGVyTGVmdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OmxlZnRcIiwgb3B0aW9uczIucGFnZUJvcmRlckxlZnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnBhZ2VCb3JkZXJCb3R0b20pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpib3R0b21cIiwgb3B0aW9uczIucGFnZUJvcmRlckJvdHRvbSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucGFnZUJvcmRlclJpZ2h0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6cmlnaHRcIiwgb3B0aW9uczIucGFnZUJvcmRlclJpZ2h0KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBQYWdlTWFyZ2luIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBoZWFkZXIsIGZvb3RlciwgZ3V0dGVyKSB7XG4gICAgc3VwZXIoXCJ3OnBnTWFyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICB0b3A6IHsga2V5OiBcInc6dG9wXCIsIHZhbHVlOiBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZSh0b3ApIH0sXG4gICAgICAgIHJpZ2h0OiB7IGtleTogXCJ3OnJpZ2h0XCIsIHZhbHVlOiB0d2lwc01lYXN1cmVWYWx1ZShyaWdodCkgfSxcbiAgICAgICAgYm90dG9tOiB7IGtleTogXCJ3OmJvdHRvbVwiLCB2YWx1ZTogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUoYm90dG9tKSB9LFxuICAgICAgICBsZWZ0OiB7IGtleTogXCJ3OmxlZnRcIiwgdmFsdWU6IHR3aXBzTWVhc3VyZVZhbHVlKGxlZnQpIH0sXG4gICAgICAgIGhlYWRlcjogeyBrZXk6IFwidzpoZWFkZXJcIiwgdmFsdWU6IHR3aXBzTWVhc3VyZVZhbHVlKGhlYWRlcikgfSxcbiAgICAgICAgZm9vdGVyOiB7IGtleTogXCJ3OmZvb3RlclwiLCB2YWx1ZTogdHdpcHNNZWFzdXJlVmFsdWUoZm9vdGVyKSB9LFxuICAgICAgICBndXR0ZXI6IHsga2V5OiBcInc6Z3V0dGVyXCIsIHZhbHVlOiB0d2lwc01lYXN1cmVWYWx1ZShndXR0ZXIpIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgUGFnZU51bWJlclNlcGFyYXRvciA9IHtcbiAgSFlQSEVOOiBcImh5cGhlblwiLFxuICBQRVJJT0Q6IFwicGVyaW9kXCIsXG4gIENPTE9OOiBcImNvbG9uXCIsXG4gIEVNX0RBU0g6IFwiZW1EYXNoXCIsXG4gIEVOX0RBU0g6IFwiZW5kYXNoXCJcbn07XG5jbGFzcyBQYWdlTnVtYmVyVHlwZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHN0YXJ0OiBcInc6c3RhcnRcIixcbiAgICAgIGZvcm1hdFR5cGU6IFwidzpmbXRcIixcbiAgICAgIHNlcGFyYXRvcjogXCJ3OmNoYXBTZXBcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBQYWdlTnVtYmVyVHlwZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgc3RhcnQsIGZvcm1hdFR5cGUsIHNlcGFyYXRvciB9KSB7XG4gICAgc3VwZXIoXCJ3OnBnTnVtVHlwZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBQYWdlTnVtYmVyVHlwZUF0dHJpYnV0ZXMoe1xuICAgICAgICBzdGFydDogc3RhcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlY2ltYWxOdW1iZXIoc3RhcnQpLFxuICAgICAgICBmb3JtYXRUeXBlLFxuICAgICAgICBzZXBhcmF0b3JcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgUGFnZU9yaWVudGF0aW9uID0ge1xuICBQT1JUUkFJVDogXCJwb3J0cmFpdFwiLFxuICBMQU5EU0NBUEU6IFwibGFuZHNjYXBlXCJcbn07XG5jbGFzcyBQYWdlU2l6ZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIG9yaWVudGF0aW9uKSB7XG4gICAgc3VwZXIoXCJ3OnBnU3pcIik7XG4gICAgY29uc3QgZmxpcCA9IG9yaWVudGF0aW9uID09PSBQYWdlT3JpZW50YXRpb24uTEFORFNDQVBFO1xuICAgIGNvbnN0IHdpZHRoVHdpcHMgPSB0d2lwc01lYXN1cmVWYWx1ZSh3aWR0aCk7XG4gICAgY29uc3QgaGVpZ2h0VHdpcHMgPSB0d2lwc01lYXN1cmVWYWx1ZShoZWlnaHQpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICB3aWR0aDogeyBrZXk6IFwidzp3XCIsIHZhbHVlOiBmbGlwID8gaGVpZ2h0VHdpcHMgOiB3aWR0aFR3aXBzIH0sXG4gICAgICAgIGhlaWdodDogeyBrZXk6IFwidzpoXCIsIHZhbHVlOiBmbGlwID8gd2lkdGhUd2lwcyA6IGhlaWdodFR3aXBzIH0sXG4gICAgICAgIG9yaWVudGF0aW9uOiB7IGtleTogXCJ3Om9yaWVudFwiLCB2YWx1ZTogb3JpZW50YXRpb24gfVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jb25zdCBQYWdlVGV4dERpcmVjdGlvblR5cGUgPSB7XG4gIExFRlRfVE9fUklHSFRfVE9QX1RPX0JPVFRPTTogXCJsclRiXCIsXG4gIFRPUF9UT19CT1RUT01fUklHSFRfVE9fTEVGVDogXCJ0YlJsXCJcbn07XG5jbGFzcyBQYWdlVGV4dERpcmVjdGlvbkF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgdmFsOiBcInc6dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFBhZ2VUZXh0RGlyZWN0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6dGV4dERpcmVjdGlvblwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBQYWdlVGV4dERpcmVjdGlvbkF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHZhbHVlXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IFNlY3Rpb25UeXBlID0ge1xuICBORVhUX1BBR0U6IFwibmV4dFBhZ2VcIixcbiAgTkVYVF9DT0xVTU46IFwibmV4dENvbHVtblwiLFxuICBDT05USU5VT1VTOiBcImNvbnRpbnVvdXNcIixcbiAgRVZFTl9QQUdFOiBcImV2ZW5QYWdlXCIsXG4gIE9ERF9QQUdFOiBcIm9kZFBhZ2VcIlxufTtcbmNsYXNzIFNlY3Rpb25UeXBlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdmFsOiBcInc6dmFsXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgVHlwZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnR5cGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFNlY3Rpb25UeXBlQXR0cmlidXRlcyh7IHZhbDogdmFsdWUgfSkpO1xuICB9XG59XG5jb25zdCBzZWN0aW9uTWFyZ2luRGVmYXVsdHMgPSB7XG4gIFRPUDogMTQ0MCxcbiAgUklHSFQ6IDE0NDAsXG4gIEJPVFRPTTogMTQ0MCxcbiAgTEVGVDogMTQ0MCxcbiAgSEVBREVSOiA3MDgsXG4gIEZPT1RFUjogNzA4LFxuICBHVVRURVI6IDBcbn07XG5jb25zdCBzZWN0aW9uUGFnZVNpemVEZWZhdWx0cyA9IHtcbiAgV0lEVEg6IDExOTA2LFxuICBIRUlHSFQ6IDE2ODM4LFxuICBPUklFTlRBVElPTjogUGFnZU9yaWVudGF0aW9uLlBPUlRSQUlUXG59O1xuY2xhc3MgU2VjdGlvblByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgcGFnZToge1xuICAgICAgc2l6ZToge1xuICAgICAgICB3aWR0aCA9IHNlY3Rpb25QYWdlU2l6ZURlZmF1bHRzLldJRFRILFxuICAgICAgICBoZWlnaHQgPSBzZWN0aW9uUGFnZVNpemVEZWZhdWx0cy5IRUlHSFQsXG4gICAgICAgIG9yaWVudGF0aW9uID0gc2VjdGlvblBhZ2VTaXplRGVmYXVsdHMuT1JJRU5UQVRJT05cbiAgICAgIH0gPSB7fSxcbiAgICAgIG1hcmdpbjoge1xuICAgICAgICB0b3AgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHMuVE9QLFxuICAgICAgICByaWdodCA9IHNlY3Rpb25NYXJnaW5EZWZhdWx0cy5SSUdIVCxcbiAgICAgICAgYm90dG9tID0gc2VjdGlvbk1hcmdpbkRlZmF1bHRzLkJPVFRPTSxcbiAgICAgICAgbGVmdCA9IHNlY3Rpb25NYXJnaW5EZWZhdWx0cy5MRUZULFxuICAgICAgICBoZWFkZXIgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHMuSEVBREVSLFxuICAgICAgICBmb290ZXIgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHMuRk9PVEVSLFxuICAgICAgICBndXR0ZXIgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHMuR1VUVEVSXG4gICAgICB9ID0ge30sXG4gICAgICBwYWdlTnVtYmVycyA9IHt9LFxuICAgICAgYm9yZGVycyxcbiAgICAgIHRleHREaXJlY3Rpb25cbiAgICB9ID0ge30sXG4gICAgZ3JpZDogeyBsaW5lUGl0Y2ggPSAzNjAsIGNoYXJTcGFjZSwgdHlwZTogZ3JpZFR5cGUgfSA9IHt9LFxuICAgIGhlYWRlcldyYXBwZXJHcm91cCA9IHt9LFxuICAgIGZvb3RlcldyYXBwZXJHcm91cCA9IHt9LFxuICAgIGxpbmVOdW1iZXJzLFxuICAgIHRpdGxlUGFnZSxcbiAgICB2ZXJ0aWNhbEFsaWduLFxuICAgIGNvbHVtbixcbiAgICB0eXBlXG4gIH0gPSB7fSkge1xuICAgIHN1cGVyKFwidzpzZWN0UHJcIik7XG4gICAgdGhpcy5hZGRIZWFkZXJGb290ZXJHcm91cChIZWFkZXJGb290ZXJUeXBlLkhFQURFUiwgaGVhZGVyV3JhcHBlckdyb3VwKTtcbiAgICB0aGlzLmFkZEhlYWRlckZvb3Rlckdyb3VwKEhlYWRlckZvb3RlclR5cGUuRk9PVEVSLCBmb290ZXJXcmFwcGVyR3JvdXApO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVHlwZSh0eXBlKSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlU2l6ZSh3aWR0aCwgaGVpZ2h0LCBvcmllbnRhdGlvbikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlTWFyZ2luKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgaGVhZGVyLCBmb290ZXIsIGd1dHRlcikpO1xuICAgIGlmIChib3JkZXJzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFnZUJvcmRlcnMoYm9yZGVycykpO1xuICAgIH1cbiAgICBpZiAobGluZU51bWJlcnMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNyZWF0ZUxpbmVOdW1iZXJUeXBlKGxpbmVOdW1iZXJzKSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYWdlTnVtYmVyVHlwZShwYWdlTnVtYmVycykpO1xuICAgIGlmIChjb2x1bW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb2x1bW5zKGNvbHVtbikpO1xuICAgIH1cbiAgICBpZiAodmVydGljYWxBbGlnbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFZlcnRpY2FsQWxpZ25FbGVtZW50KHZlcnRpY2FsQWxpZ24pKTtcbiAgICB9XG4gICAgaWYgKHRpdGxlUGFnZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp0aXRsZVBnXCIsIHRpdGxlUGFnZSkpO1xuICAgIH1cbiAgICBpZiAodGV4dERpcmVjdGlvbikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFBhZ2VUZXh0RGlyZWN0aW9uKHRleHREaXJlY3Rpb24pKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERvY3VtZW50R3JpZChsaW5lUGl0Y2gsIGNoYXJTcGFjZSwgZ3JpZFR5cGUpKTtcbiAgfVxuICBhZGRIZWFkZXJGb290ZXJHcm91cCh0eXBlLCBncm91cCkge1xuICAgIGlmIChncm91cC5kZWZhdWx0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgICAgbmV3IEhlYWRlckZvb3RlclJlZmVyZW5jZSh0eXBlLCB7XG4gICAgICAgICAgdHlwZTogSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZS5ERUZBVUxULFxuICAgICAgICAgIGlkOiBncm91cC5kZWZhdWx0LlZpZXcuUmVmZXJlbmNlSWRcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChncm91cC5maXJzdCkge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIG5ldyBIZWFkZXJGb290ZXJSZWZlcmVuY2UodHlwZSwge1xuICAgICAgICAgIHR5cGU6IEhlYWRlckZvb3RlclJlZmVyZW5jZVR5cGUuRklSU1QsXG4gICAgICAgICAgaWQ6IGdyb3VwLmZpcnN0LlZpZXcuUmVmZXJlbmNlSWRcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChncm91cC5ldmVuKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgICAgbmV3IEhlYWRlckZvb3RlclJlZmVyZW5jZSh0eXBlLCB7XG4gICAgICAgICAgdHlwZTogSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZS5FVkVOLFxuICAgICAgICAgIGlkOiBncm91cC5ldmVuLlZpZXcuUmVmZXJlbmNlSWRcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBCb2R5IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmJvZHlcIik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvcHJlZmVyLXJlYWRvbmx5LXR5cGVcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic2VjdGlvbnNcIiwgW10pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIG5ldyBzZWN0aW9uIHByb3BlcnRpZXMuXG4gICAqIE5vdGU6IFByZXZpb3VzIHNlY3Rpb24gaXMgY3JlYXRlZCBpbiBwYXJhZ3JhcGggYWZ0ZXIgdGhlIGN1cnJlbnQgZWxlbWVudCwgYW5kIHRoZW4gbmV3IHNlY3Rpb24gd2lsbCBiZSBhZGRlZC5cbiAgICogVGhlIHNwZWMgc2F5czpcbiAgICogIC0gc2VjdGlvbiBlbGVtZW50IHNob3VsZCBiZSBpbiB0aGUgbGFzdCBwYXJhZ3JhcGggb2YgdGhlIHNlY3Rpb25cbiAgICogIC0gbGFzdCBzZWN0aW9uIHNob3VsZCBiZSBkaXJlY3QgY2hpbGQgb2YgYm9keVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyBuZXcgc2VjdGlvbiBvcHRpb25zXG4gICAqL1xuICBhZGRTZWN0aW9uKG9wdGlvbnMyKSB7XG4gICAgY29uc3QgY3VycmVudFNlY3Rpb24gPSB0aGlzLnNlY3Rpb25zLnBvcCgpO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMuY3JlYXRlU2VjdGlvblBhcmFncmFwaChjdXJyZW50U2VjdGlvbikpO1xuICAgIHRoaXMuc2VjdGlvbnMucHVzaChuZXcgU2VjdGlvblByb3BlcnRpZXMob3B0aW9uczIpKTtcbiAgfVxuICBwcmVwRm9yWG1sKGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy5zZWN0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMucm9vdC5zcGxpY2UoMCwgMSk7XG4gICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnNlY3Rpb25zLnBvcCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gIH1cbiAgcHVzaChjb21wb25lbnQpIHtcbiAgICB0aGlzLnJvb3QucHVzaChjb21wb25lbnQpO1xuICB9XG4gIGNyZWF0ZVNlY3Rpb25QYXJhZ3JhcGgoc2VjdGlvbikge1xuICAgIGNvbnN0IHBhcmFncmFwaCA9IG5ldyBQYXJhZ3JhcGgoe30pO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllcyh7fSk7XG4gICAgcHJvcGVydGllcy5wdXNoKHNlY3Rpb24pO1xuICAgIHBhcmFncmFwaC5hZGRDaGlsZEVsZW1lbnQocHJvcGVydGllcyk7XG4gICAgcmV0dXJuIHBhcmFncmFwaDtcbiAgfVxufVxuY2xhc3MgQ29sdW1uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyB3aWR0aCwgc3BhY2UgfSkge1xuICAgIHN1cGVyKFwidzpjb2xcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTmV4dEF0dHJpYnV0ZUNvbXBvbmVudCh7XG4gICAgICAgIHdpZHRoOiB7IGtleTogXCJ3OndcIiwgdmFsdWU6IHR3aXBzTWVhc3VyZVZhbHVlKHdpZHRoKSB9LFxuICAgICAgICBzcGFjZTogeyBrZXk6IFwidzpzcGFjZVwiLCB2YWx1ZTogc3BhY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHR3aXBzTWVhc3VyZVZhbHVlKHNwYWNlKSB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIERvY3VtZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgd3BjOiBcInhtbG5zOndwY1wiLFxuICAgICAgbWM6IFwieG1sbnM6bWNcIixcbiAgICAgIG86IFwieG1sbnM6b1wiLFxuICAgICAgcjogXCJ4bWxuczpyXCIsXG4gICAgICBtOiBcInhtbG5zOm1cIixcbiAgICAgIHY6IFwieG1sbnM6dlwiLFxuICAgICAgd3AxNDogXCJ4bWxuczp3cDE0XCIsXG4gICAgICB3cDogXCJ4bWxuczp3cFwiLFxuICAgICAgdzEwOiBcInhtbG5zOncxMFwiLFxuICAgICAgdzogXCJ4bWxuczp3XCIsXG4gICAgICB3MTQ6IFwieG1sbnM6dzE0XCIsXG4gICAgICB3MTU6IFwieG1sbnM6dzE1XCIsXG4gICAgICB3cGc6IFwieG1sbnM6d3BnXCIsXG4gICAgICB3cGk6IFwieG1sbnM6d3BpXCIsXG4gICAgICB3bmU6IFwieG1sbnM6d25lXCIsXG4gICAgICB3cHM6IFwieG1sbnM6d3BzXCIsXG4gICAgICBJZ25vcmFibGU6IFwibWM6SWdub3JhYmxlXCIsXG4gICAgICBjcDogXCJ4bWxuczpjcFwiLFxuICAgICAgZGM6IFwieG1sbnM6ZGNcIixcbiAgICAgIGRjdGVybXM6IFwieG1sbnM6ZGN0ZXJtc1wiLFxuICAgICAgZGNtaXR5cGU6IFwieG1sbnM6ZGNtaXR5cGVcIixcbiAgICAgIHhzaTogXCJ4bWxuczp4c2lcIixcbiAgICAgIHR5cGU6IFwieHNpOnR5cGVcIixcbiAgICAgIGN4OiBcInhtbG5zOmN4XCIsXG4gICAgICBjeDE6IFwieG1sbnM6Y3gxXCIsXG4gICAgICBjeDI6IFwieG1sbnM6Y3gyXCIsXG4gICAgICBjeDM6IFwieG1sbnM6Y3gzXCIsXG4gICAgICBjeDQ6IFwieG1sbnM6Y3g0XCIsXG4gICAgICBjeDU6IFwieG1sbnM6Y3g1XCIsXG4gICAgICBjeDY6IFwieG1sbnM6Y3g2XCIsXG4gICAgICBjeDc6IFwieG1sbnM6Y3g3XCIsXG4gICAgICBjeDg6IFwieG1sbnM6Y3g4XCIsXG4gICAgICBhaW5rOiBcInhtbG5zOmFpbmtcIixcbiAgICAgIGFtM2Q6IFwieG1sbnM6YW0zZFwiLFxuICAgICAgdzE2Y2V4OiBcInhtbG5zOncxNmNleFwiLFxuICAgICAgdzE2Y2lkOiBcInhtbG5zOncxNmNpZFwiLFxuICAgICAgdzE2OiBcInhtbG5zOncxNlwiLFxuICAgICAgdzE2c2R0ZGg6IFwieG1sbnM6dzE2c2R0ZGhcIixcbiAgICAgIHcxNnNlOiBcInhtbG5zOncxNnNlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRG9jdW1lbnRCYWNrZ3JvdW5kQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgY29sb3I6IFwidzpjb2xvclwiLFxuICAgICAgdGhlbWVDb2xvcjogXCJ3OnRoZW1lQ29sb3JcIixcbiAgICAgIHRoZW1lU2hhZGU6IFwidzp0aGVtZVNoYWRlXCIsXG4gICAgICB0aGVtZVRpbnQ6IFwidzp0aGVtZVRpbnRcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBEb2N1bWVudEJhY2tncm91bmQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpiYWNrZ3JvdW5kXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IERvY3VtZW50QmFja2dyb3VuZEF0dHJpYnV0ZXMoe1xuICAgICAgICBjb2xvcjogb3B0aW9uczIuY29sb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhleENvbG9yVmFsdWUob3B0aW9uczIuY29sb3IpLFxuICAgICAgICB0aGVtZUNvbG9yOiBvcHRpb25zMi50aGVtZUNvbG9yLFxuICAgICAgICB0aGVtZVNoYWRlOiBvcHRpb25zMi50aGVtZVNoYWRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1Q2hhckhleE51bWJlcihvcHRpb25zMi50aGVtZVNoYWRlKSxcbiAgICAgICAgdGhlbWVUaW50OiBvcHRpb25zMi50aGVtZVRpbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHVDaGFySGV4TnVtYmVyKG9wdGlvbnMyLnRoZW1lVGludClcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgRG9jdW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpkb2N1bWVudFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiYm9keVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBEb2N1bWVudEF0dHJpYnV0ZXMoe1xuICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXG4gICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxuICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcbiAgICAgICAgY3g6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE0L2NoYXJ0ZXhcIixcbiAgICAgICAgY3gxOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS85LzgvY2hhcnRleFwiLFxuICAgICAgICBjeDI6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE1LzEwLzIxL2NoYXJ0ZXhcIixcbiAgICAgICAgY3gzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzkvY2hhcnRleFwiLFxuICAgICAgICBjeDQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTAvY2hhcnRleFwiLFxuICAgICAgICBjeDU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTEvY2hhcnRleFwiLFxuICAgICAgICBjeDY6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTIvY2hhcnRleFwiLFxuICAgICAgICBjeDc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTMvY2hhcnRleFwiLFxuICAgICAgICBjeDg6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTQvY2hhcnRleFwiLFxuICAgICAgICBhaW5rOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi9pbmtcIixcbiAgICAgICAgYW0zZDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTcvbW9kZWwzZFwiLFxuICAgICAgICB3MTZjZXg6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE4L3dvcmRtbC9jZXhcIixcbiAgICAgICAgdzE2Y2lkOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxNi93b3JkbWwvY2lkXCIsXG4gICAgICAgIHcxNjogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sXCIsXG4gICAgICAgIHcxNnNkdGRoOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAyMC93b3JkbWwvc2R0ZGF0YWhhc2hcIixcbiAgICAgICAgdzE2c2U6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE1L3dvcmRtbC9zeW1leFwiLFxuICAgICAgICBJZ25vcmFibGU6IFwidzE0IHcxNSB3cDE0XCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmJvZHkgPSBuZXcgQm9keSgpO1xuICAgIGlmIChvcHRpb25zMi5iYWNrZ3JvdW5kKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgRG9jdW1lbnRCYWNrZ3JvdW5kKG9wdGlvbnMyLmJhY2tncm91bmQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ib2R5KTtcbiAgfVxuICBhZGQoaXRlbSkge1xuICAgIHRoaXMuYm9keS5wdXNoKGl0ZW0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGdldCBCb2R5KCkge1xuICAgIHJldHVybiB0aGlzLmJvZHk7XG4gIH1cbn1cbmNsYXNzIFJlbGF0aW9uc2hpcHNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4bWxuczogXCJ4bWxuc1wiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFJlbGF0aW9uc2hpcHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlJlbGF0aW9uc2hpcHNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgUmVsYXRpb25zaGlwc0F0dHJpYnV0ZXMoe1xuICAgICAgICB4bWxuczogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHNcIlxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGNyZWF0ZVJlbGF0aW9uc2hpcChpZCwgdHlwZSwgdGFyZ2V0LCB0YXJnZXRNb2RlKSB7XG4gICAgY29uc3QgcmVsYXRpb25zaGlwID0gbmV3IFJlbGF0aW9uc2hpcChgcklkJHtpZH1gLCB0eXBlLCB0YXJnZXQsIHRhcmdldE1vZGUpO1xuICAgIHRoaXMucm9vdC5wdXNoKHJlbGF0aW9uc2hpcCk7XG4gICAgcmV0dXJuIHJlbGF0aW9uc2hpcDtcbiAgfVxuICBnZXQgUmVsYXRpb25zaGlwQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdC5sZW5ndGggLSAxO1xuICB9XG59XG5jbGFzcyBEb2N1bWVudFdyYXBwZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkb2N1bWVudFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVsYXRpb25zaGlwc1wiKTtcbiAgICB0aGlzLmRvY3VtZW50ID0gbmV3IERvY3VtZW50KG9wdGlvbnMyKTtcbiAgICB0aGlzLnJlbGF0aW9uc2hpcHMgPSBuZXcgUmVsYXRpb25zaGlwcygpO1xuICB9XG4gIGdldCBWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50O1xuICB9XG4gIGdldCBSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbGF0aW9uc2hpcHM7XG4gIH1cbn1cbmNsYXNzIFdvcmRXcmFwQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgV29yZFdyYXAgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6d29yZFdyYXBcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFdvcmRXcmFwQXR0cmlidXRlcyh7IHZhbDogMCB9KSk7XG4gIH1cbn1cbmNvbnN0IERyb3BDYXBUeXBlID0ge1xuICBOT05FOiBcIm5vbmVcIixcbiAgRFJPUDogXCJkcm9wXCIsXG4gIE1BUkdJTjogXCJtYXJnaW5cIlxufTtcbmNvbnN0IEZyYW1lQW5jaG9yVHlwZSA9IHtcbiAgTUFSR0lOOiBcIm1hcmdpblwiLFxuICBQQUdFOiBcInBhZ2VcIixcbiAgVEVYVDogXCJ0ZXh0XCJcbn07XG5jb25zdCBGcmFtZVdyYXAgPSB7XG4gIEFST1VORDogXCJhcm91bmRcIixcbiAgQVVUTzogXCJhdXRvXCIsXG4gIE5PTkU6IFwibm9uZVwiLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gIE5PVF9CRVNJREU6IFwibm90QmVzaWRlXCIsXG4gIFRIUk9VR0g6IFwidGhyb3VnaFwiLFxuICBUSUdIVDogXCJ0aWdodFwiXG59O1xuY29uc3QgY3JlYXRlRnJhbWVQcm9wZXJ0aWVzID0gKG9wdGlvbnMyKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIHJldHVybiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICAgIG5hbWU6IFwidzpmcmFtZVByXCIsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgYW5jaG9yTG9jazoge1xuICAgICAgICBrZXk6IFwidzphbmNob3JMb2NrXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbmNob3JMb2NrXG4gICAgICB9LFxuICAgICAgZHJvcENhcDoge1xuICAgICAgICBrZXk6IFwidzpkcm9wQ2FwXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5kcm9wQ2FwXG4gICAgICB9LFxuICAgICAgd2lkdGg6IHtcbiAgICAgICAga2V5OiBcInc6d1wiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIud2lkdGhcbiAgICAgIH0sXG4gICAgICBoZWlnaHQ6IHtcbiAgICAgICAga2V5OiBcInc6aFwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIuaGVpZ2h0XG4gICAgICB9LFxuICAgICAgeDoge1xuICAgICAgICBrZXk6IFwidzp4XCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5wb3NpdGlvbiA/IG9wdGlvbnMyLnBvc2l0aW9uLnggOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICB5OiB7XG4gICAgICAgIGtleTogXCJ3OnlcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLnBvc2l0aW9uID8gb3B0aW9uczIucG9zaXRpb24ueSA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIGFuY2hvckhvcml6b250YWw6IHtcbiAgICAgICAga2V5OiBcInc6aEFuY2hvclwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIuYW5jaG9yLmhvcml6b250YWxcbiAgICAgIH0sXG4gICAgICBhbmNob3JWZXJ0aWNhbDoge1xuICAgICAgICBrZXk6IFwidzp2QW5jaG9yXCIsXG4gICAgICAgIHZhbHVlOiBvcHRpb25zMi5hbmNob3IudmVydGljYWxcbiAgICAgIH0sXG4gICAgICBzcGFjZUhvcml6b250YWw6IHtcbiAgICAgICAga2V5OiBcInc6aFNwYWNlXCIsXG4gICAgICAgIHZhbHVlOiAoX2EgPSBvcHRpb25zMi5zcGFjZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmhvcml6b250YWxcbiAgICAgIH0sXG4gICAgICBzcGFjZVZlcnRpY2FsOiB7XG4gICAgICAgIGtleTogXCJ3OnZTcGFjZVwiLFxuICAgICAgICB2YWx1ZTogKF9iID0gb3B0aW9uczIuc3BhY2UpID09IG51bGwgPyB2b2lkIDAgOiBfYi52ZXJ0aWNhbFxuICAgICAgfSxcbiAgICAgIHJ1bGU6IHtcbiAgICAgICAga2V5OiBcInc6aFJ1bGVcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLnJ1bGVcbiAgICAgIH0sXG4gICAgICBhbGlnbm1lbnRYOiB7XG4gICAgICAgIGtleTogXCJ3OnhBbGlnblwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIuYWxpZ25tZW50ID8gb3B0aW9uczIuYWxpZ25tZW50LnggOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICBhbGlnbm1lbnRZOiB7XG4gICAgICAgIGtleTogXCJ3OnlBbGlnblwiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIuYWxpZ25tZW50ID8gb3B0aW9uczIuYWxpZ25tZW50LnkgOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICBsaW5lczoge1xuICAgICAgICBrZXk6IFwidzpsaW5lc1wiLFxuICAgICAgICB2YWx1ZTogb3B0aW9uczIubGluZXNcbiAgICAgIH0sXG4gICAgICB3cmFwOiB7XG4gICAgICAgIGtleTogXCJ3OndyYXBcIixcbiAgICAgICAgdmFsdWU6IG9wdGlvbnMyLndyYXBcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbmNsYXNzIFBhcmFncmFwaFByb3BlcnRpZXMgZXh0ZW5kcyBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHN1cGVyKFwidzpwUHJcIik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvcHJlZmVyLXJlYWRvbmx5LXR5cGVcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibnVtYmVyaW5nUmVmZXJlbmNlc1wiLCBbXSk7XG4gICAgaWYgKCFvcHRpb25zMikge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5oZWFkaW5nKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFN0eWxlJDEob3B0aW9uczIuaGVhZGluZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYnVsbGV0KSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFN0eWxlJDEoXCJMaXN0UGFyYWdyYXBoXCIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm51bWJlcmluZykge1xuICAgICAgaWYgKCFvcHRpb25zMi5zdHlsZSAmJiAhb3B0aW9uczIuaGVhZGluZykge1xuICAgICAgICBpZiAoIW9wdGlvbnMyLm51bWJlcmluZy5jdXN0b20pIHtcbiAgICAgICAgICB0aGlzLnB1c2gobmV3IFN0eWxlJDEoXCJMaXN0UGFyYWdyYXBoXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3R5bGUpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU3R5bGUkMShvcHRpb25zMi5zdHlsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIua2VlcE5leHQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmtlZXBOZXh0XCIsIG9wdGlvbnMyLmtlZXBOZXh0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5rZWVwTGluZXMgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmtlZXBMaW5lc1wiLCBvcHRpb25zMi5rZWVwTGluZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnBhZ2VCcmVha0JlZm9yZSkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBQYWdlQnJlYWtCZWZvcmUoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mcmFtZSkge1xuICAgICAgdGhpcy5wdXNoKGNyZWF0ZUZyYW1lUHJvcGVydGllcyhvcHRpb25zMi5mcmFtZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIud2lkb3dDb250cm9sICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp3aWRvd0NvbnRyb2xcIiwgb3B0aW9uczIud2lkb3dDb250cm9sKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5idWxsZXQpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgTnVtYmVyUHJvcGVydGllcygxLCBvcHRpb25zMi5idWxsZXQubGV2ZWwpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm51bWJlcmluZykge1xuICAgICAgdGhpcy5udW1iZXJpbmdSZWZlcmVuY2VzLnB1c2goe1xuICAgICAgICByZWZlcmVuY2U6IG9wdGlvbnMyLm51bWJlcmluZy5yZWZlcmVuY2UsXG4gICAgICAgIGluc3RhbmNlOiAoX2EgPSBvcHRpb25zMi5udW1iZXJpbmcuaW5zdGFuY2UpICE9IG51bGwgPyBfYSA6IDBcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wdXNoKG5ldyBOdW1iZXJQcm9wZXJ0aWVzKGAke29wdGlvbnMyLm51bWJlcmluZy5yZWZlcmVuY2V9LSR7KF9iID0gb3B0aW9uczIubnVtYmVyaW5nLmluc3RhbmNlKSAhPSBudWxsID8gX2IgOiAwfWAsIG9wdGlvbnMyLm51bWJlcmluZy5sZXZlbCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm9yZGVyKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IEJvcmRlcihvcHRpb25zMi5ib3JkZXIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnRoZW1hdGljQnJlYWspIHtcbiAgICAgIHRoaXMucHVzaChuZXcgVGhlbWF0aWNCcmVhaygpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNoYWRpbmcpIHtcbiAgICAgIHRoaXMucHVzaChuZXcgU2hhZGluZyhvcHRpb25zMi5zaGFkaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi53b3JkV3JhcCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBXb3JkV3JhcCgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm92ZXJmbG93UHVuY3R1YXRpb24pIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpvdmVyZmxvd1B1bmN0XCIsIG9wdGlvbnMyLm92ZXJmbG93UHVuY3R1YXRpb24pKTtcbiAgICB9XG4gICAgY29uc3QgdGFiRGVmaW5pdGlvbnMgPSBbXG4gICAgICAuLi5vcHRpb25zMi5yaWdodFRhYlN0b3AgIT09IHZvaWQgMCA/IFt7IHR5cGU6IFRhYlN0b3BUeXBlLlJJR0hULCBwb3NpdGlvbjogb3B0aW9uczIucmlnaHRUYWJTdG9wIH1dIDogW10sXG4gICAgICAuLi5vcHRpb25zMi50YWJTdG9wcyA/IG9wdGlvbnMyLnRhYlN0b3BzIDogW10sXG4gICAgICAuLi5vcHRpb25zMi5sZWZ0VGFiU3RvcCAhPT0gdm9pZCAwID8gW3sgdHlwZTogVGFiU3RvcFR5cGUuTEVGVCwgcG9zaXRpb246IG9wdGlvbnMyLmxlZnRUYWJTdG9wIH1dIDogW11cbiAgICBdO1xuICAgIGlmICh0YWJEZWZpbml0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IFRhYlN0b3AodGFiRGVmaW5pdGlvbnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJpZGlyZWN0aW9uYWwgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmJpZGlcIiwgb3B0aW9uczIuYmlkaXJlY3Rpb25hbCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BhY2luZykge1xuICAgICAgdGhpcy5wdXNoKG5ldyBTcGFjaW5nKG9wdGlvbnMyLnNwYWNpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmluZGVudCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBJbmRlbnQob3B0aW9uczIuaW5kZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jb250ZXh0dWFsU3BhY2luZyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6Y29udGV4dHVhbFNwYWNpbmdcIiwgb3B0aW9uczIuY29udGV4dHVhbFNwYWNpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmFsaWdubWVudCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBBbGlnbm1lbnQob3B0aW9uczIuYWxpZ25tZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5vdXRsaW5lTGV2ZWwgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPdXRsaW5lTGV2ZWwob3B0aW9uczIub3V0bGluZUxldmVsKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdXBwcmVzc0xpbmVOdW1iZXJzICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdXBwcmVzc0xpbmVOdW1iZXJzXCIsIG9wdGlvbnMyLnN1cHByZXNzTGluZU51bWJlcnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmF1dG9TcGFjZUVhc3RBc2lhblRleHQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmF1dG9TcGFjZUROXCIsIG9wdGlvbnMyLmF1dG9TcGFjZUVhc3RBc2lhblRleHQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnJ1bikge1xuICAgICAgdGhpcy5wdXNoKG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyLnJ1bikpO1xuICAgIH1cbiAgfVxuICBwdXNoKGl0ZW0pIHtcbiAgICB0aGlzLnJvb3QucHVzaChpdGVtKTtcbiAgfVxuICBwcmVwRm9yWG1sKGNvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dC52aWV3V3JhcHBlciBpbnN0YW5jZW9mIERvY3VtZW50V3JhcHBlcikge1xuICAgICAgZm9yIChjb25zdCByZWZlcmVuY2Ugb2YgdGhpcy5udW1iZXJpbmdSZWZlcmVuY2VzKSB7XG4gICAgICAgIGNvbnRleHQuZmlsZS5OdW1iZXJpbmcuY3JlYXRlQ29uY3JldGVOdW1iZXJpbmdJbnN0YW5jZShyZWZlcmVuY2UucmVmZXJlbmNlLCByZWZlcmVuY2UuaW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxufVxuY2xhc3MgUGFyYWdyYXBoIGV4dGVuZHMgRmlsZUNoaWxkIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6cFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicHJvcGVydGllc1wiKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllcyh7fSk7XG4gICAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnByb3BlcnRpZXMpO1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRSdW4ob3B0aW9uczIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aGlzLnByb3BlcnRpZXMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllcyhvcHRpb25zMik7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5wcm9wZXJ0aWVzKTtcbiAgICBpZiAob3B0aW9uczIudGV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRSdW4ob3B0aW9uczIudGV4dCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgQm9va21hcmspIHtcbiAgICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZC5zdGFydCk7XG4gICAgICAgICAgZm9yIChjb25zdCB0ZXh0UnVuIG9mIGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QucHVzaCh0ZXh0UnVuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQuZW5kKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHByZXBGb3JYbWwoY29udGV4dCkge1xuICAgIGZvciAoY29uc3QgZWxlbWVudDIgb2YgdGhpcy5yb290KSB7XG4gICAgICBpZiAoZWxlbWVudDIgaW5zdGFuY2VvZiBFeHRlcm5hbEh5cGVybGluaykge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucm9vdC5pbmRleE9mKGVsZW1lbnQyKTtcbiAgICAgICAgY29uc3QgY29uY3JldGVIeXBlcmxpbmsgPSBuZXcgQ29uY3JldGVIeXBlcmxpbmsoZWxlbWVudDIub3B0aW9ucy5jaGlsZHJlbiwgdW5pcXVlSWQoKSk7XG4gICAgICAgIGNvbnRleHQudmlld1dyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAgICAgY29uY3JldGVIeXBlcmxpbmsubGlua0lkLFxuICAgICAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9oeXBlcmxpbmtcIixcbiAgICAgICAgICBlbGVtZW50Mi5vcHRpb25zLmxpbmssXG4gICAgICAgICAgVGFyZ2V0TW9kZVR5cGUuRVhURVJOQUxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yb290W2luZGV4XSA9IGNvbmNyZXRlSHlwZXJsaW5rO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxuICBhZGRSdW5Ub0Zyb250KHJ1bikge1xuICAgIHRoaXMucm9vdC5zcGxpY2UoMSwgMCwgcnVuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxubGV0IE1hdGgkMSA9IGNsYXNzIE1hdGgyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06b01hdGhcIik7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBvcHRpb25zMi5jaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufTtcbmNsYXNzIE1hdGhUZXh0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodGV4dCkge1xuICAgIHN1cGVyKFwibTp0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKHRleHQpO1xuICB9XG59XG5jbGFzcyBNYXRoUnVuIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodGV4dCkge1xuICAgIHN1cGVyKFwibTpyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoVGV4dCh0ZXh0KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhEZW5vbWluYXRvciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XG4gICAgc3VwZXIoXCJtOmRlblwiKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBNYXRoTnVtZXJhdG9yIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICBzdXBlcihcIm06bnVtXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhGcmFjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmZcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhOdW1lcmF0b3Iob3B0aW9uczIubnVtZXJhdG9yKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhEZW5vbWluYXRvcihvcHRpb25zMi5kZW5vbWluYXRvcikpO1xuICB9XG59XG5jbGFzcyBNYXRoQWNjZW50Q2hhcmFjdGVyQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyBhY2NlbnQ6IFwibTp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTWF0aEFjY2VudENoYXJhY3RlciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGFjY2VudCkge1xuICAgIHN1cGVyKFwibTpjaHJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhBY2NlbnRDaGFyYWN0ZXJBdHRyaWJ1dGVzKHsgYWNjZW50IH0pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEJhc2UgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xuICAgIHN1cGVyKFwibTplXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhMaW1pdExvY2F0aW9uQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWx1ZTogXCJtOnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBNYXRoTGltaXRMb2NhdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpsaW1Mb2NcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhMaW1pdExvY2F0aW9uQXR0cmlidXRlcyh7IHZhbHVlOiBcInVuZE92clwiIH0pKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1YlNjcmlwdEhpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGhpZGU6IFwibTp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1YlNjcmlwdEhpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIm06c3ViSGlkZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1YlNjcmlwdEhpZGVBdHRyaWJ1dGVzKHsgaGlkZTogMSB9KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhTdXBlclNjcmlwdEhpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGhpZGU6IFwibTp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1cGVyU2NyaXB0SGlkZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpzdXBIaWRlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3VwZXJTY3JpcHRIaWRlQXR0cmlidXRlcyh7IGhpZGU6IDEgfSkpO1xuICB9XG59XG5jbGFzcyBNYXRoTkFyeVByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihhY2NlbnQsIGhhc1N1cGVyU2NyaXB0LCBoYXNTdWJTY3JpcHQpIHtcbiAgICBzdXBlcihcIm06bmFyeVByXCIpO1xuICAgIGlmICghIWFjY2VudCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhBY2NlbnRDaGFyYWN0ZXIoYWNjZW50KSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoTGltaXRMb2NhdGlvbigpKTtcbiAgICBpZiAoIWhhc1N1cGVyU2NyaXB0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1cGVyU2NyaXB0SGlkZSgpKTtcbiAgICB9XG4gICAgaWYgKCFoYXNTdWJTY3JpcHQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3ViU2NyaXB0SGlkZSgpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhTdWJTY3JpcHRFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICBzdXBlcihcIm06c3ViXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhTdXBlclNjcmlwdEVsZW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGlsZHJlbikge1xuICAgIHN1cGVyKFwibTpzdXBcIik7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgTWF0aFN1bSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOm5hcnlcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhOQXJ5UHJvcGVydGllcyhcIuKIkVwiLCAhIW9wdGlvbnMyLnN1cGVyU2NyaXB0LCAhIW9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIGlmICghIW9wdGlvbnMyLnN1YlNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIH1cbiAgICBpZiAoISFvcHRpb25zMi5zdXBlclNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3VwZXJTY3JpcHQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhJbnRlZ3JhbCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOm5hcnlcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhOQXJ5UHJvcGVydGllcyhcIlwiLCAhIW9wdGlvbnMyLnN1cGVyU2NyaXB0LCAhIW9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIGlmICghIW9wdGlvbnMyLnN1YlNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIH1cbiAgICBpZiAoISFvcHRpb25zMi5zdXBlclNjcmlwdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQob3B0aW9uczIuc3VwZXJTY3JpcHQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIm06c1N1cFByXCIpO1xuICB9XG59XG5jbGFzcyBNYXRoU3VwZXJTY3JpcHQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpzU3VwXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3VwZXJTY3JpcHRQcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3VwZXJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1cGVyU2NyaXB0KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhTdWJTY3JpcHRQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJtOnNTdWJQclwiKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1YlNjcmlwdCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOnNTdWJcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRQcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3ViU2NyaXB0RWxlbWVudChvcHRpb25zMi5zdWJTY3JpcHQpKTtcbiAgfVxufVxuY2xhc3MgTWF0aFN1YlN1cGVyU2NyaXB0UHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwibTpzU3ViU3VwUHJcIik7XG4gIH1cbn1cbmNsYXNzIE1hdGhTdWJTdXBlclNjcmlwdCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOnNTdWJTdXBcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMoKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhTdWJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1YlNjcmlwdCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3VwZXJTY3JpcHRFbGVtZW50KG9wdGlvbnMyLnN1cGVyU2NyaXB0KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhQcmVTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIm06c1ByZVByXCIpO1xuICB9XG59XG5jbGFzcyBNYXRoUHJlU3ViU3VwZXJTY3JpcHQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpzUHJlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmFzZShvcHRpb25zMi5jaGlsZHJlbikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoU3ViU2NyaXB0RWxlbWVudChvcHRpb25zMi5zdWJTY3JpcHQpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aFN1cGVyU2NyaXB0RWxlbWVudChvcHRpb25zMi5zdXBlclNjcmlwdCkpO1xuICB9XG59XG5jb25zdCBXT1JLQVJPVU5ENCA9IFwiXCI7XG5jbGFzcyBNYXRoRGVncmVlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICBzdXBlcihcIm06ZGVnXCIpO1xuICAgIGlmICghIWNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhEZWdyZWVIaWRlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyBoaWRlOiBcIm06dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhEZWdyZWVIaWRlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJtOmRlZ0hpZGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhEZWdyZWVIaWRlQXR0cmlidXRlcyh7IGhpZGU6IDEgfSkpO1xuICB9XG59XG5jbGFzcyBNYXRoUmFkaWNhbFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihoYXNEZWdyZWUpIHtcbiAgICBzdXBlcihcIm06cmFkUHJcIik7XG4gICAgaWYgKCFoYXNEZWdyZWUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoRGVncmVlSGlkZSgpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhSYWRpY2FsIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06cmFkXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoUmFkaWNhbFByb3BlcnRpZXMoISFvcHRpb25zMi5kZWdyZWUpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aERlZ3JlZShvcHRpb25zMi5kZWdyZWUpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEZ1bmN0aW9uTmFtZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XG4gICAgc3VwZXIoXCJtOmZOYW1lXCIpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIE1hdGhGdW5jdGlvblByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIm06ZnVuY1ByXCIpO1xuICB9XG59XG5jbGFzcyBNYXRoRnVuY3Rpb24gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpmdW5jXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoRnVuY3Rpb25Qcm9wZXJ0aWVzKCkpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoRnVuY3Rpb25OYW1lKG9wdGlvbnMyLm5hbWUpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgfVxufVxuY2xhc3MgTWF0aEJlZ2lubmluZ0NoYXJhY3RlckF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgY2hhcmFjdGVyOiBcIm06dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhCZWdpbm5pbmdDaGFyYWN0ZXIgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihjaGFyYWN0ZXIpIHtcbiAgICBzdXBlcihcIm06YmVnQ2hyXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmVnaW5uaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyh7IGNoYXJhY3RlciB9KSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhFbmRpbmdDaGFyYWN0ZXJBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGNoYXJhY3RlcjogXCJtOnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBNYXRoRW5kaW5nQ2hhcmFjdGVyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2hhcmFjdGVyKSB7XG4gICAgc3VwZXIoXCJtOmVuZENoclwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEVuZGluZ0NoYXJhY3RlckF0dHJpYnV0ZXMoeyBjaGFyYWN0ZXIgfSkpO1xuICB9XG59XG5jbGFzcyBNYXRoQnJhY2tldFByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwibTpkUHJcIik7XG4gICAgaWYgKCEhb3B0aW9uczIpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBNYXRoQmVnaW5uaW5nQ2hhcmFjdGVyKG9wdGlvbnMyLmJlZ2lubmluZ0NoYXJhY3RlcikpO1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhFbmRpbmdDaGFyYWN0ZXIob3B0aW9uczIuZW5kaW5nQ2hhcmFjdGVyKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBNYXRoUm91bmRCcmFja2V0cyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCcmFja2V0UHJvcGVydGllcygpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgfVxufVxuY2xhc3MgTWF0aFNxdWFyZUJyYWNrZXRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06ZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBNYXRoQnJhY2tldFByb3BlcnRpZXMoe1xuICAgICAgICBiZWdpbm5pbmdDaGFyYWN0ZXI6IFwiW1wiLFxuICAgICAgICBlbmRpbmdDaGFyYWN0ZXI6IFwiXVwiXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhDdXJseUJyYWNrZXRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcIm06ZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBNYXRoQnJhY2tldFByb3BlcnRpZXMoe1xuICAgICAgICBiZWdpbm5pbmdDaGFyYWN0ZXI6IFwie1wiLFxuICAgICAgICBlbmRpbmdDaGFyYWN0ZXI6IFwifVwiXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE1hdGhCYXNlKG9wdGlvbnMyLmNoaWxkcmVuKSk7XG4gIH1cbn1cbmNsYXNzIE1hdGhBbmdsZWRCcmFja2V0cyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJtOmRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTWF0aEJyYWNrZXRQcm9wZXJ0aWVzKHtcbiAgICAgICAgYmVnaW5uaW5nQ2hhcmFjdGVyOiBcIuKMqVwiLFxuICAgICAgICBlbmRpbmdDaGFyYWN0ZXI6IFwi4oyqXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTWF0aEJhc2Uob3B0aW9uczIuY2hpbGRyZW4pKTtcbiAgfVxufVxuY2xhc3MgVGFibGVHcmlkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iod2lkdGhzKSB7XG4gICAgc3VwZXIoXCJ3OnRibEdyaWRcIik7XG4gICAgZm9yIChjb25zdCB3aWR0aCBvZiB3aWR0aHMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBHcmlkQ29sKHdpZHRoKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBHcmlkQ29sIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iod2lkdGgpIHtcbiAgICBzdXBlcihcInc6Z3JpZENvbFwiKTtcbiAgICBpZiAod2lkdGggIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgICB3aWR0aDogeyBrZXk6IFwidzp3XCIsIHZhbHVlOiB0d2lwc01lYXN1cmVWYWx1ZSh3aWR0aCkgfVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IFRhYmxlQ2VsbE1hcmdpbkVsZW1lbnRUeXBlID0ge1xuICBUQUJMRTogXCJ3OnRibENlbGxNYXJcIixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICBUQUJMRV9DRUxMOiBcInc6dGNNYXJcIlxufTtcbmNsYXNzIFRhYmxlQ2VsbE1hcmdpbiBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCB7IG1hcmdpblVuaXRUeXBlID0gV2lkdGhUeXBlLkRYQSwgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0IH0pIHtcbiAgICBzdXBlcih0eXBlKTtcbiAgICBpZiAodG9wICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZVdpZHRoRWxlbWVudChcInc6dG9wXCIsIHsgdHlwZTogbWFyZ2luVW5pdFR5cGUsIHNpemU6IHRvcCB9KSk7XG4gICAgfVxuICAgIGlmIChsZWZ0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZVdpZHRoRWxlbWVudChcInc6bGVmdFwiLCB7IHR5cGU6IG1hcmdpblVuaXRUeXBlLCBzaXplOiBsZWZ0IH0pKTtcbiAgICB9XG4gICAgaWYgKGJvdHRvbSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVXaWR0aEVsZW1lbnQoXCJ3OmJvdHRvbVwiLCB7IHR5cGU6IG1hcmdpblVuaXRUeXBlLCBzaXplOiBib3R0b20gfSkpO1xuICAgIH1cbiAgICBpZiAocmlnaHQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlV2lkdGhFbGVtZW50KFwidzpyaWdodFwiLCB7IHR5cGU6IG1hcmdpblVuaXRUeXBlLCBzaXplOiByaWdodCB9KSk7XG4gICAgfVxuICB9XG59XG5jb25zdCBXaWR0aFR5cGUgPSB7XG4gIC8qKiBBdXRvLiAqL1xuICBBVVRPOiBcImF1dG9cIixcbiAgLyoqIFZhbHVlIGlzIGluIHR3ZW50aWV0aHMgb2YgYSBwb2ludCAqL1xuICBEWEE6IFwiZHhhXCIsXG4gIC8qKiBObyAoZW1wdHkpIHZhbHVlLiAqL1xuICBOSUw6IFwibmlsXCIsXG4gIC8qKiBWYWx1ZSBpcyBpbiBwZXJjZW50YWdlLiAqL1xuICBQRVJDRU5UQUdFOiBcInBjdFwiXG59O1xuY2xhc3MgVGFibGVXaWR0aEVsZW1lbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihuYW1lLCB7IHR5cGUgPSBXaWR0aFR5cGUuQVVUTywgc2l6ZSB9KSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgbGV0IHRhYmxlV2lkdGhWYWx1ZSA9IHNpemU7XG4gICAgaWYgKHR5cGUgPT09IFdpZHRoVHlwZS5QRVJDRU5UQUdFICYmIHR5cGVvZiBzaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgICB0YWJsZVdpZHRoVmFsdWUgPSBgJHtzaXplfSVgO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBOZXh0QXR0cmlidXRlQ29tcG9uZW50KHtcbiAgICAgICAgdHlwZTogeyBrZXk6IFwidzp0eXBlXCIsIHZhbHVlOiB0eXBlIH0sXG4gICAgICAgIHNpemU6IHsga2V5OiBcInc6d1wiLCB2YWx1ZTogbWVhc3VyZW1lbnRPclBlcmNlbnRWYWx1ZSh0YWJsZVdpZHRoVmFsdWUpIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgVGFibGVDZWxsQm9yZGVycyBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzp0Y0JvcmRlcnNcIik7XG4gICAgaWYgKG9wdGlvbnMyLnRvcCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnRvcFwiLCBvcHRpb25zMi50b3ApKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN0YXJ0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6c3RhcnRcIiwgb3B0aW9uczIuc3RhcnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmxlZnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpsZWZ0XCIsIG9wdGlvbnMyLmxlZnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJvdHRvbSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OmJvdHRvbVwiLCBvcHRpb25zMi5ib3R0b20pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmVuZCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OmVuZFwiLCBvcHRpb25zMi5lbmQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnJpZ2h0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6cmlnaHRcIiwgb3B0aW9uczIucmlnaHQpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEdyaWRTcGFuQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgR3JpZFNwYW4gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzpncmlkU3BhblwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBHcmlkU3BhbkF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IGRlY2ltYWxOdW1iZXIodmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IFZlcnRpY2FsTWVyZ2VUeXBlID0ge1xuICAvKipcbiAgICogQ2VsbCB0aGF0IGlzIG1lcmdlZCB3aXRoIHVwcGVyIG9uZS5cbiAgICovXG4gIENPTlRJTlVFOiBcImNvbnRpbnVlXCIsXG4gIC8qKlxuICAgKiBDZWxsIHRoYXQgaXMgc3RhcnRpbmcgdGhlIHZlcnRpY2FsIG1lcmdlLlxuICAgKi9cbiAgUkVTVEFSVDogXCJyZXN0YXJ0XCJcbn07XG5jbGFzcyBWZXJ0aWNhbE1lcmdlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgVmVydGljYWxNZXJnZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnZNZXJnZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBWZXJ0aWNhbE1lcmdlQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgVGV4dERpcmVjdGlvbiA9IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICBCT1RUT01fVE9fVE9QX0xFRlRfVE9fUklHSFQ6IFwiYnRMclwiLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gIExFRlRfVE9fUklHSFRfVE9QX1RPX0JPVFRPTTogXCJsclRiXCIsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgVE9QX1RPX0JPVFRPTV9SSUdIVF9UT19MRUZUOiBcInRiUmxcIlxufTtcbmNsYXNzIFREaXJlY3Rpb25BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IHZhbDogXCJ3OnZhbFwiIH0pO1xuICB9XG59XG5jbGFzcyBURGlyZWN0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6dGV4dERpcmVjdGlvblwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBURGlyZWN0aW9uQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgVGFibGVDZWxsUHJvcGVydGllcyBleHRlbmRzIElnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzp0Y1ByXCIpO1xuICAgIGlmIChvcHRpb25zMi53aWR0aCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlV2lkdGhFbGVtZW50KFwidzp0Y1dcIiwgb3B0aW9uczIud2lkdGgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmNvbHVtblNwYW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBHcmlkU3BhbihvcHRpb25zMi5jb2x1bW5TcGFuKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi52ZXJ0aWNhbE1lcmdlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVmVydGljYWxNZXJnZShvcHRpb25zMi52ZXJ0aWNhbE1lcmdlKSk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zMi5yb3dTcGFuICYmIG9wdGlvbnMyLnJvd1NwYW4gPiAxKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVmVydGljYWxNZXJnZShWZXJ0aWNhbE1lcmdlVHlwZS5SRVNUQVJUKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ib3JkZXJzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVDZWxsQm9yZGVycyhvcHRpb25zMi5ib3JkZXJzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zaGFkaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2hhZGluZyhvcHRpb25zMi5zaGFkaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5tYXJnaW5zKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVDZWxsTWFyZ2luKFRhYmxlQ2VsbE1hcmdpbkVsZW1lbnRUeXBlLlRBQkxFX0NFTEwsIG9wdGlvbnMyLm1hcmdpbnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnRleHREaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBURGlyZWN0aW9uKG9wdGlvbnMyLnRleHREaXJlY3Rpb24pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnZlcnRpY2FsQWxpZ24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBWZXJ0aWNhbEFsaWduRWxlbWVudChvcHRpb25zMi52ZXJ0aWNhbEFsaWduKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBUYWJsZUNlbGwgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzp0Y1wiKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zMjtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVDZWxsUHJvcGVydGllcyhvcHRpb25zMikpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygb3B0aW9uczIuY2hpbGRyZW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgaWYgKCEodGhpcy5yb290W3RoaXMucm9vdC5sZW5ndGggLSAxXSBpbnN0YW5jZW9mIFBhcmFncmFwaCkpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBQYXJhZ3JhcGgoe30pKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gIH1cbn1cbmNvbnN0IE5PTkVfQk9SREVSID0ge1xuICBzdHlsZTogQm9yZGVyU3R5bGUuTk9ORSxcbiAgc2l6ZTogMCxcbiAgY29sb3I6IFwiYXV0b1wiXG59O1xuY29uc3QgREVGQVVMVF9CT1JERVIgPSB7XG4gIHN0eWxlOiBCb3JkZXJTdHlsZS5TSU5HTEUsXG4gIHNpemU6IDQsXG4gIGNvbG9yOiBcImF1dG9cIlxufTtcbmNsYXNzIFRhYmxlQm9yZGVycyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnRibEJvcmRlcnNcIik7XG4gICAgaWYgKG9wdGlvbnMyLnRvcCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnRvcFwiLCBvcHRpb25zMi50b3ApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnRvcFwiLCBERUZBVUxUX0JPUkRFUikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGVmdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OmxlZnRcIiwgb3B0aW9uczIubGVmdCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6bGVmdFwiLCBERUZBVUxUX0JPUkRFUikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm90dG9tKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6Ym90dG9tXCIsIG9wdGlvbnMyLmJvdHRvbSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6Ym90dG9tXCIsIERFRkFVTFRfQk9SREVSKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5yaWdodCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3OnJpZ2h0XCIsIG9wdGlvbnMyLnJpZ2h0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzpyaWdodFwiLCBERUZBVUxUX0JPUkRFUikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaW5zaWRlSG9yaXpvbnRhbCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IEJvcmRlckVsZW1lbnQoXCJ3Omluc2lkZUhcIiwgb3B0aW9uczIuaW5zaWRlSG9yaXpvbnRhbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQm9yZGVyRWxlbWVudChcInc6aW5zaWRlSFwiLCBERUZBVUxUX0JPUkRFUikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaW5zaWRlVmVydGljYWwpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzppbnNpZGVWXCIsIG9wdGlvbnMyLmluc2lkZVZlcnRpY2FsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCb3JkZXJFbGVtZW50KFwidzppbnNpZGVWXCIsIERFRkFVTFRfQk9SREVSKSk7XG4gICAgfVxuICB9XG59XG5fX3B1YmxpY0ZpZWxkKFRhYmxlQm9yZGVycywgXCJOT05FXCIsIHtcbiAgdG9wOiBOT05FX0JPUkRFUixcbiAgYm90dG9tOiBOT05FX0JPUkRFUixcbiAgbGVmdDogTk9ORV9CT1JERVIsXG4gIHJpZ2h0OiBOT05FX0JPUkRFUixcbiAgaW5zaWRlSG9yaXpvbnRhbDogTk9ORV9CT1JERVIsXG4gIGluc2lkZVZlcnRpY2FsOiBOT05FX0JPUkRFUlxufSk7XG5jb25zdCBUYWJsZUFuY2hvclR5cGUgPSB7XG4gIE1BUkdJTjogXCJtYXJnaW5cIixcbiAgUEFHRTogXCJwYWdlXCIsXG4gIFRFWFQ6IFwidGV4dFwiXG59O1xuY29uc3QgUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb24gPSB7XG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgSU5TSURFOiBcImluc2lkZVwiLFxuICBMRUZUOiBcImxlZnRcIixcbiAgT1VUU0lERTogXCJvdXRzaWRlXCIsXG4gIFJJR0hUOiBcInJpZ2h0XCJcbn07XG5jb25zdCBSZWxhdGl2ZVZlcnRpY2FsUG9zaXRpb24gPSB7XG4gIENFTlRFUjogXCJjZW50ZXJcIixcbiAgSU5TSURFOiBcImluc2lkZVwiLFxuICBCT1RUT006IFwiYm90dG9tXCIsXG4gIE9VVFNJREU6IFwib3V0c2lkZVwiLFxuICBJTkxJTkU6IFwiaW5saW5lXCIsXG4gIFRPUDogXCJ0b3BcIlxufTtcbmNvbnN0IE92ZXJsYXBUeXBlID0ge1xuICBORVZFUjogXCJuZXZlclwiLFxuICBPVkVSTEFQOiBcIm92ZXJsYXBcIlxufTtcbmNsYXNzIFRhYmxlRmxvYXRQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGhvcml6b250YWxBbmNob3IsXG4gICAgdmVydGljYWxBbmNob3IsXG4gICAgYWJzb2x1dGVIb3Jpem9udGFsUG9zaXRpb24sXG4gICAgcmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb24sXG4gICAgYWJzb2x1dGVWZXJ0aWNhbFBvc2l0aW9uLFxuICAgIHJlbGF0aXZlVmVydGljYWxQb3NpdGlvbixcbiAgICBib3R0b21Gcm9tVGV4dCxcbiAgICB0b3BGcm9tVGV4dCxcbiAgICBsZWZ0RnJvbVRleHQsXG4gICAgcmlnaHRGcm9tVGV4dCxcbiAgICBvdmVybGFwXG4gIH0pIHtcbiAgICBzdXBlcihcInc6dGJscFByXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IE5leHRBdHRyaWJ1dGVDb21wb25lbnQoe1xuICAgICAgICBsZWZ0RnJvbVRleHQ6IHtcbiAgICAgICAgICBrZXk6IFwidzpsZWZ0RnJvbVRleHRcIixcbiAgICAgICAgICB2YWx1ZTogbGVmdEZyb21UZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0d2lwc01lYXN1cmVWYWx1ZShsZWZ0RnJvbVRleHQpXG4gICAgICAgIH0sXG4gICAgICAgIHJpZ2h0RnJvbVRleHQ6IHtcbiAgICAgICAgICBrZXk6IFwidzpyaWdodEZyb21UZXh0XCIsXG4gICAgICAgICAgdmFsdWU6IHJpZ2h0RnJvbVRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHR3aXBzTWVhc3VyZVZhbHVlKHJpZ2h0RnJvbVRleHQpXG4gICAgICAgIH0sXG4gICAgICAgIHRvcEZyb21UZXh0OiB7XG4gICAgICAgICAga2V5OiBcInc6dG9wRnJvbVRleHRcIixcbiAgICAgICAgICB2YWx1ZTogdG9wRnJvbVRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHR3aXBzTWVhc3VyZVZhbHVlKHRvcEZyb21UZXh0KVxuICAgICAgICB9LFxuICAgICAgICBib3R0b21Gcm9tVGV4dDoge1xuICAgICAgICAgIGtleTogXCJ3OmJvdHRvbUZyb21UZXh0XCIsXG4gICAgICAgICAgdmFsdWU6IGJvdHRvbUZyb21UZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0d2lwc01lYXN1cmVWYWx1ZShib3R0b21Gcm9tVGV4dClcbiAgICAgICAgfSxcbiAgICAgICAgYWJzb2x1dGVIb3Jpem9udGFsUG9zaXRpb246IHtcbiAgICAgICAgICBrZXk6IFwidzp0YmxwWFwiLFxuICAgICAgICAgIHZhbHVlOiBhYnNvbHV0ZUhvcml6b250YWxQb3NpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUoYWJzb2x1dGVIb3Jpem9udGFsUG9zaXRpb24pXG4gICAgICAgIH0sXG4gICAgICAgIGFic29sdXRlVmVydGljYWxQb3NpdGlvbjoge1xuICAgICAgICAgIGtleTogXCJ3OnRibHBZXCIsXG4gICAgICAgICAgdmFsdWU6IGFic29sdXRlVmVydGljYWxQb3NpdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUoYWJzb2x1dGVWZXJ0aWNhbFBvc2l0aW9uKVxuICAgICAgICB9LFxuICAgICAgICBob3Jpem9udGFsQW5jaG9yOiB7XG4gICAgICAgICAga2V5OiBcInc6aG9yekFuY2hvclwiLFxuICAgICAgICAgIHZhbHVlOiBob3Jpem9udGFsQW5jaG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBob3Jpem9udGFsQW5jaG9yXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uOiB7XG4gICAgICAgICAga2V5OiBcInc6dGJscFhTcGVjXCIsXG4gICAgICAgICAgdmFsdWU6IHJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVmVydGljYWxQb3NpdGlvbjoge1xuICAgICAgICAgIGtleTogXCJ3OnRibHBZU3BlY1wiLFxuICAgICAgICAgIHZhbHVlOiByZWxhdGl2ZVZlcnRpY2FsUG9zaXRpb25cbiAgICAgICAgfSxcbiAgICAgICAgdmVydGljYWxBbmNob3I6IHtcbiAgICAgICAgICBrZXk6IFwidzp2ZXJ0QW5jaG9yXCIsXG4gICAgICAgICAgdmFsdWU6IHZlcnRpY2FsQW5jaG9yXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgICBpZiAob3ZlcmxhcCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ0VudW1WYWx1ZUVsZW1lbnQoXCJ3OnRibE92ZXJsYXBcIiwgb3ZlcmxhcCkpO1xuICAgIH1cbiAgfVxufVxuY29uc3QgVGFibGVMYXlvdXRUeXBlID0ge1xuICBBVVRPRklUOiBcImF1dG9maXRcIixcbiAgRklYRUQ6IFwiZml4ZWRcIlxufTtcbmNsYXNzIFRhYmxlTGF5b3V0QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB0eXBlOiBcInc6dHlwZVwiIH0pO1xuICB9XG59XG5jbGFzcyBUYWJsZUxheW91dCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICBzdXBlcihcInc6dGJsTGF5b3V0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUxheW91dEF0dHJpYnV0ZXMoeyB0eXBlIH0pKTtcbiAgfVxufVxuY2xhc3MgVGFibGVQcm9wZXJ0aWVzIGV4dGVuZHMgSWdub3JlSWZFbXB0eVhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoXCJ3OnRibFByXCIpO1xuICAgIGlmIChvcHRpb25zMi5zdHlsZSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ1ZhbHVlRWxlbWVudChcInc6dGJsU3R5bGVcIiwgb3B0aW9uczIuc3R5bGUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmZsb2F0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVGbG9hdFByb3BlcnRpZXMob3B0aW9uczIuZmxvYXQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnZpc3VhbGx5UmlnaHRUb0xlZnQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YmlkaVZpc3VhbFwiLCBvcHRpb25zMi52aXN1YWxseVJpZ2h0VG9MZWZ0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi53aWR0aCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlV2lkdGhFbGVtZW50KFwidzp0YmxXXCIsIG9wdGlvbnMyLndpZHRoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5hbGlnbm1lbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBbGlnbm1lbnQob3B0aW9uczIuYWxpZ25tZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5pbmRlbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZVdpZHRoRWxlbWVudChcInc6dGJsSW5kXCIsIG9wdGlvbnMyLmluZGVudCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYm9yZGVycykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFRhYmxlQm9yZGVycyhvcHRpb25zMi5ib3JkZXJzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zaGFkaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2hhZGluZyhvcHRpb25zMi5zaGFkaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sYXlvdXQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUxheW91dChvcHRpb25zMi5sYXlvdXQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmNlbGxNYXJnaW4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUYWJsZUNlbGxNYXJnaW4oVGFibGVDZWxsTWFyZ2luRWxlbWVudFR5cGUuVEFCTEUsIG9wdGlvbnMyLmNlbGxNYXJnaW4pKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFRhYmxlIGV4dGVuZHMgRmlsZUNoaWxkIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHJvd3MsXG4gICAgd2lkdGgsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGFcbiAgICBjb2x1bW5XaWR0aHMgPSBBcnJheShNYXRoLm1heCguLi5yb3dzLm1hcCgocm93KSA9PiByb3cuQ2VsbENvdW50KSkpLmZpbGwoMTAwKSxcbiAgICBtYXJnaW5zLFxuICAgIGluZGVudCxcbiAgICBmbG9hdCxcbiAgICBsYXlvdXQsXG4gICAgc3R5bGUsXG4gICAgYm9yZGVycyxcbiAgICBhbGlnbm1lbnQsXG4gICAgdmlzdWFsbHlSaWdodFRvTGVmdFxuICB9KSB7XG4gICAgc3VwZXIoXCJ3OnRibFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBUYWJsZVByb3BlcnRpZXMoe1xuICAgICAgICBib3JkZXJzOiBib3JkZXJzICE9IG51bGwgPyBib3JkZXJzIDoge30sXG4gICAgICAgIHdpZHRoOiB3aWR0aCAhPSBudWxsID8gd2lkdGggOiB7IHNpemU6IDEwMCB9LFxuICAgICAgICBpbmRlbnQsXG4gICAgICAgIGZsb2F0LFxuICAgICAgICBsYXlvdXQsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICBhbGlnbm1lbnQsXG4gICAgICAgIGNlbGxNYXJnaW46IG1hcmdpbnMsXG4gICAgICAgIHZpc3VhbGx5UmlnaHRUb0xlZnRcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVHcmlkKGNvbHVtbldpZHRocykpO1xuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKHJvdyk7XG4gICAgfVxuICAgIHJvd3MuZm9yRWFjaCgocm93LCByb3dJbmRleCkgPT4ge1xuICAgICAgaWYgKHJvd0luZGV4ID09PSByb3dzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IGNvbHVtbkluZGV4ID0gMDtcbiAgICAgIHJvdy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgIGlmIChjZWxsLm9wdGlvbnMucm93U3BhbiAmJiBjZWxsLm9wdGlvbnMucm93U3BhbiA+IDEpIHtcbiAgICAgICAgICBjb25zdCBjb250aW51ZUNlbGwgPSBuZXcgVGFibGVDZWxsKHtcbiAgICAgICAgICAgIC8vIHRoZSBpbnNlcnRlZCBDT05USU5VRSBjZWxsIGhhcyByb3dTcGFuLCBhbmQgd2lsbCBiZSBoYW5kbGVkIHdoZW4gcHJvY2VzcyB0aGUgbmV4dCByb3dcbiAgICAgICAgICAgIHJvd1NwYW46IGNlbGwub3B0aW9ucy5yb3dTcGFuIC0gMSxcbiAgICAgICAgICAgIGNvbHVtblNwYW46IGNlbGwub3B0aW9ucy5jb2x1bW5TcGFuLFxuICAgICAgICAgICAgYm9yZGVyczogY2VsbC5vcHRpb25zLmJvcmRlcnMsXG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICB2ZXJ0aWNhbE1lcmdlOiBWZXJ0aWNhbE1lcmdlVHlwZS5DT05USU5VRVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJvd3Nbcm93SW5kZXggKyAxXS5hZGRDZWxsVG9Db2x1bW5JbmRleChjb250aW51ZUNlbGwsIGNvbHVtbkluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5JbmRleCArPSBjZWxsLm9wdGlvbnMuY29sdW1uU3BhbiB8fCAxO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IEhlaWdodFJ1bGUgPSB7XG4gIC8qKiBIZWlnaHQgaXMgZGV0ZXJtaW5lZCBiYXNlZCBvbiB0aGUgY29udGVudCwgc28gdmFsdWUgaXMgaWdub3JlZC4gKi9cbiAgQVVUTzogXCJhdXRvXCIsXG4gIC8qKiBBdCBsZWFzdCB0aGUgdmFsdWUgc3BlY2lmaWVkICovXG4gIEFUTEVBU1Q6IFwiYXRMZWFzdFwiLFxuICAvKiogRXhhY3RseSB0aGUgdmFsdWUgc3BlY2lmaWVkICovXG4gIEVYQUNUOiBcImV4YWN0XCJcbn07XG5jbGFzcyBUYWJsZVJvd0hlaWdodEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgdmFsdWU6IFwidzp2YWxcIiwgcnVsZTogXCJ3OmhSdWxlXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFRhYmxlUm93SGVpZ2h0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUsIHJ1bGUpIHtcbiAgICBzdXBlcihcInc6dHJIZWlnaHRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgVGFibGVSb3dIZWlnaHRBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsdWU6IHR3aXBzTWVhc3VyZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgcnVsZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBUYWJsZVJvd1Byb3BlcnRpZXMgZXh0ZW5kcyBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6dHJQclwiKTtcbiAgICBpZiAob3B0aW9uczIuY2FudFNwbGl0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmNhbnRTcGxpdFwiLCBvcHRpb25zMi5jYW50U3BsaXQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnRhYmxlSGVhZGVyICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnRibEhlYWRlclwiLCBvcHRpb25zMi50YWJsZUhlYWRlcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaGVpZ2h0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVSb3dIZWlnaHQob3B0aW9uczIuaGVpZ2h0LnZhbHVlLCBvcHRpb25zMi5oZWlnaHQucnVsZSkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgVGFibGVSb3cgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzp0clwiKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zMjtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGFibGVSb3dQcm9wZXJ0aWVzKG9wdGlvbnMyKSk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBvcHRpb25zMi5jaGlsZHJlbikge1xuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICBnZXQgQ2VsbENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2hpbGRyZW4ubGVuZ3RoO1xuICB9XG4gIGdldCBjZWxscygpIHtcbiAgICByZXR1cm4gdGhpcy5yb290LmZpbHRlcigoeG1sQ29tcG9uZW50KSA9PiB4bWxDb21wb25lbnQgaW5zdGFuY2VvZiBUYWJsZUNlbGwpO1xuICB9XG4gIGFkZENlbGxUb0luZGV4KGNlbGwsIGluZGV4KSB7XG4gICAgdGhpcy5yb290LnNwbGljZShpbmRleCArIDEsIDAsIGNlbGwpO1xuICB9XG4gIGFkZENlbGxUb0NvbHVtbkluZGV4KGNlbGwsIGNvbHVtbkluZGV4KSB7XG4gICAgY29uc3Qgcm9vdEluZGV4ID0gdGhpcy5jb2x1bW5JbmRleFRvUm9vdEluZGV4KGNvbHVtbkluZGV4LCB0cnVlKTtcbiAgICB0aGlzLmFkZENlbGxUb0luZGV4KGNlbGwsIHJvb3RJbmRleCAtIDEpO1xuICB9XG4gIHJvb3RJbmRleFRvQ29sdW1uSW5kZXgocm9vdEluZGV4KSB7XG4gICAgaWYgKHJvb3RJbmRleCA8IDEgfHwgcm9vdEluZGV4ID49IHRoaXMucm9vdC5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2VsbCAncm9vdEluZGV4JyBzaG91bGQgYmV0d2VlbiAxIHRvICR7dGhpcy5yb290Lmxlbmd0aCAtIDF9YCk7XG4gICAgfVxuICAgIGxldCBjb2xJZHggPSAwO1xuICAgIGZvciAobGV0IHJvb3RJZHggPSAxOyByb290SWR4IDwgcm9vdEluZGV4OyByb290SWR4KyspIHtcbiAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLnJvb3Rbcm9vdElkeF07XG4gICAgICBjb2xJZHggKz0gY2VsbC5vcHRpb25zLmNvbHVtblNwYW4gfHwgMTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbElkeDtcbiAgfVxuICBjb2x1bW5JbmRleFRvUm9vdEluZGV4KGNvbHVtbkluZGV4LCBhbGxvd0VuZE5ld0NlbGwgPSBmYWxzZSkge1xuICAgIGlmIChjb2x1bW5JbmRleCA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2VsbCAnY29sdW1uSW5kZXgnIHNob3VsZCBub3QgbGVzcyB0aGFuIHplcm9gKTtcbiAgICB9XG4gICAgbGV0IGNvbElkeCA9IDA7XG4gICAgbGV0IHJvb3RJZHggPSAxO1xuICAgIHdoaWxlIChjb2xJZHggPD0gY29sdW1uSW5kZXgpIHtcbiAgICAgIGlmIChyb290SWR4ID49IHRoaXMucm9vdC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGFsbG93RW5kTmV3Q2VsbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJvb3QubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2VsbCAnY29sdW1uSW5kZXgnIHNob3VsZCBub3QgZ3JlYXQgdGhhbiAke2NvbElkeCAtIDF9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLnJvb3Rbcm9vdElkeF07XG4gICAgICByb290SWR4ICs9IDE7XG4gICAgICBjb2xJZHggKz0gY2VsbCAmJiBjZWxsLm9wdGlvbnMuY29sdW1uU3BhbiB8fCAxO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdElkeCAtIDE7XG4gIH1cbn1cbmNsYXNzIEFwcFByb3BlcnRpZXNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB4bWxuczogXCJ4bWxuc1wiLFxuICAgICAgdnQ6IFwieG1sbnM6dnRcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBBcHBQcm9wZXJ0aWVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJQcm9wZXJ0aWVzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEFwcFByb3BlcnRpZXNBdHRyaWJ1dGVzKHtcbiAgICAgICAgeG1sbnM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZXh0ZW5kZWQtcHJvcGVydGllc1wiLFxuICAgICAgICB2dDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9kb2NQcm9wc1ZUeXBlc1wiXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIENvbnRlbnRUeXBlQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgeG1sbnM6IFwieG1sbnNcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBEZWZhdWx0QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgY29udGVudFR5cGU6IFwiQ29udGVudFR5cGVcIixcbiAgICAgIGV4dGVuc2lvbjogXCJFeHRlbnNpb25cIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBEZWZhdWx0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY29udGVudFR5cGUsIGV4dGVuc2lvbikge1xuICAgIHN1cGVyKFwiRGVmYXVsdFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBEZWZhdWx0QXR0cmlidXRlcyh7XG4gICAgICAgIGNvbnRlbnRUeXBlLFxuICAgICAgICBleHRlbnNpb25cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgT3ZlcnJpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBjb250ZW50VHlwZTogXCJDb250ZW50VHlwZVwiLFxuICAgICAgcGFydE5hbWU6IFwiUGFydE5hbWVcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBPdmVycmlkZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbnRlbnRUeXBlLCBwYXJ0TmFtZSkge1xuICAgIHN1cGVyKFwiT3ZlcnJpZGVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgT3ZlcnJpZGVBdHRyaWJ1dGVzKHtcbiAgICAgICAgY29udGVudFR5cGUsXG4gICAgICAgIHBhcnROYW1lXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIENvbnRlbnRUeXBlcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiVHlwZXNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQ29udGVudFR5cGVBdHRyaWJ1dGVzKHtcbiAgICAgICAgeG1sbnM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9jb250ZW50LXR5cGVzXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVmYXVsdChcImltYWdlL3BuZ1wiLCBcInBuZ1wiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJpbWFnZS9qcGVnXCIsIFwianBlZ1wiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJpbWFnZS9qcGVnXCIsIFwianBnXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVmYXVsdChcImltYWdlL2JtcFwiLCBcImJtcFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJpbWFnZS9naWZcIiwgXCJnaWZcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWZhdWx0KFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UucmVsYXRpb25zaGlwcyt4bWxcIiwgXCJyZWxzXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVmYXVsdChcImFwcGxpY2F0aW9uL3htbFwiLCBcInhtbFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IERlZmF1bHQoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQub2JmdXNjYXRlZEZvbnRcIiwgXCJvZHR0ZlwiKSk7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudC5tYWluK3htbFwiLCBcIi93b3JkL2RvY3VtZW50LnhtbFwiKVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc3R5bGVzK3htbFwiLCBcIi93b3JkL3N0eWxlcy54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmNvcmUtcHJvcGVydGllcyt4bWxcIiwgXCIvZG9jUHJvcHMvY29yZS54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b20tcHJvcGVydGllcyt4bWxcIiwgXCIvZG9jUHJvcHMvY3VzdG9tLnhtbFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmV4dGVuZGVkLXByb3BlcnRpZXMreG1sXCIsIFwiL2RvY1Byb3BzL2FwcC54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLm51bWJlcmluZyt4bWxcIiwgXCIvd29yZC9udW1iZXJpbmcueG1sXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb290bm90ZXMreG1sXCIsIFwiL3dvcmQvZm9vdG5vdGVzLnhtbFwiKSk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE92ZXJyaWRlKFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuc2V0dGluZ3MreG1sXCIsIFwiL3dvcmQvc2V0dGluZ3MueG1sXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgT3ZlcnJpZGUoXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5jb21tZW50cyt4bWxcIiwgXCIvd29yZC9jb21tZW50cy54bWxcIikpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvbnRUYWJsZSt4bWxcIiwgXCIvd29yZC9mb250VGFibGUueG1sXCIpKTtcbiAgfVxuICBhZGRGb290ZXIoaW5kZXgpIHtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvb3Rlcit4bWxcIiwgYC93b3JkL2Zvb3RlciR7aW5kZXh9LnhtbGApXG4gICAgKTtcbiAgfVxuICBhZGRIZWFkZXIoaW5kZXgpIHtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBPdmVycmlkZShcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmhlYWRlcit4bWxcIiwgYC93b3JkL2hlYWRlciR7aW5kZXh9LnhtbGApXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQ29yZVByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwiY3A6Y29yZVByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRG9jdW1lbnRBdHRyaWJ1dGVzKHtcbiAgICAgICAgY3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9tZXRhZGF0YS9jb3JlLXByb3BlcnRpZXNcIixcbiAgICAgICAgZGM6IFwiaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS9cIixcbiAgICAgICAgZGN0ZXJtczogXCJodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvXCIsXG4gICAgICAgIGRjbWl0eXBlOiBcImh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9cIixcbiAgICAgICAgeHNpOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICBpZiAob3B0aW9uczIudGl0bGUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJkYzp0aXRsZVwiLCBvcHRpb25zMi50aXRsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3ViamVjdCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ0NvbnRhaW5lcihcImRjOnN1YmplY3RcIiwgb3B0aW9uczIuc3ViamVjdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuY3JlYXRvcikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ0NvbnRhaW5lcihcImRjOmNyZWF0b3JcIiwgb3B0aW9uczIuY3JlYXRvcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIua2V5d29yZHMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJjcDprZXl3b3Jkc1wiLCBvcHRpb25zMi5rZXl3b3JkcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZGVzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJkYzpkZXNjcmlwdGlvblwiLCBvcHRpb25zMi5kZXNjcmlwdGlvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGFzdE1vZGlmaWVkQnkpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJjcDpsYXN0TW9kaWZpZWRCeVwiLCBvcHRpb25zMi5sYXN0TW9kaWZpZWRCeSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucmV2aXNpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdDb250YWluZXIoXCJjcDpyZXZpc2lvblwiLCBTdHJpbmcob3B0aW9uczIucmV2aXNpb24pKSk7XG4gICAgfVxuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBUaW1lc3RhbXBFbGVtZW50KFwiZGN0ZXJtczpjcmVhdGVkXCIpKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGltZXN0YW1wRWxlbWVudChcImRjdGVybXM6bW9kaWZpZWRcIikpO1xuICB9XG59XG5jbGFzcyBUaW1lc3RhbXBFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKG5hbWUpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IERvY3VtZW50QXR0cmlidXRlcyh7XG4gICAgICAgIHR5cGU6IFwiZGN0ZXJtczpXM0NEVEZcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKGRhdGVUaW1lVmFsdWUoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpKTtcbiAgfVxufVxuY2xhc3MgQ3VzdG9tUHJvcGVydGllc0F0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHhtbG5zOiBcInhtbG5zXCIsXG4gICAgICB2dDogXCJ4bWxuczp2dFwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEN1c3RvbVByb3BlcnR5QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgZm10aWQ6IFwiZm10aWRcIixcbiAgICAgIHBpZDogXCJwaWRcIixcbiAgICAgIG5hbWU6IFwibmFtZVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIEN1c3RvbVByb3BlcnR5IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoaWQsIHByb3BlcnRpZXMpIHtcbiAgICBzdXBlcihcInByb3BlcnR5XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEN1c3RvbVByb3BlcnR5QXR0cmlidXRlcyh7XG4gICAgICAgIGZtdGlkOiBcIntENUNERDUwNS0yRTlDLTEwMUItOTM5Ny0wODAwMkIyQ0Y5QUV9XCIsXG4gICAgICAgIHBpZDogaWQudG9TdHJpbmcoKSxcbiAgICAgICAgbmFtZTogcHJvcGVydGllcy5uYW1lXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IEN1c3RvbVByb3BlcnR5VmFsdWUocHJvcGVydGllcy52YWx1ZSkpO1xuICB9XG59XG5jbGFzcyBDdXN0b21Qcm9wZXJ0eVZhbHVlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInZ0Omxwd3N0clwiKTtcbiAgICB0aGlzLnJvb3QucHVzaCh2YWx1ZSk7XG4gIH1cbn1cbmNsYXNzIEN1c3RvbVByb3BlcnRpZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIoXCJQcm9wZXJ0aWVzXCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm5leHRJZFwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwcm9wZXJ0aWVzXCIsIFtdKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDdXN0b21Qcm9wZXJ0aWVzQXR0cmlidXRlcyh7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2N1c3RvbS1wcm9wZXJ0aWVzXCIsXG4gICAgICAgIHZ0OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2RvY1Byb3BzVlR5cGVzXCJcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLm5leHRJZCA9IDI7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLmFkZEN1c3RvbVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgdGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goKHgpID0+IHRoaXMucm9vdC5wdXNoKHgpKTtcbiAgICByZXR1cm4gc3VwZXIucHJlcEZvclhtbChjb250ZXh0KTtcbiAgfVxuICBhZGRDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIHRoaXMucHJvcGVydGllcy5wdXNoKG5ldyBDdXN0b21Qcm9wZXJ0eSh0aGlzLm5leHRJZCsrLCBwcm9wZXJ0eSkpO1xuICB9XG59XG5jbGFzcyBGb290ZXJBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXG4gICAgICBtYzogXCJ4bWxuczptY1wiLFxuICAgICAgbzogXCJ4bWxuczpvXCIsXG4gICAgICByOiBcInhtbG5zOnJcIixcbiAgICAgIG06IFwieG1sbnM6bVwiLFxuICAgICAgdjogXCJ4bWxuczp2XCIsXG4gICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcbiAgICAgIHdwOiBcInhtbG5zOndwXCIsXG4gICAgICB3MTA6IFwieG1sbnM6dzEwXCIsXG4gICAgICB3OiBcInhtbG5zOndcIixcbiAgICAgIHcxNDogXCJ4bWxuczp3MTRcIixcbiAgICAgIHcxNTogXCJ4bWxuczp3MTVcIixcbiAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcbiAgICAgIHdwaTogXCJ4bWxuczp3cGlcIixcbiAgICAgIHduZTogXCJ4bWxuczp3bmVcIixcbiAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcbiAgICAgIGNwOiBcInhtbG5zOmNwXCIsXG4gICAgICBkYzogXCJ4bWxuczpkY1wiLFxuICAgICAgZGN0ZXJtczogXCJ4bWxuczpkY3Rlcm1zXCIsXG4gICAgICBkY21pdHlwZTogXCJ4bWxuczpkY21pdHlwZVwiLFxuICAgICAgeHNpOiBcInhtbG5zOnhzaVwiLFxuICAgICAgdHlwZTogXCJ4c2k6dHlwZVwiXG4gICAgfSk7XG4gIH1cbn1cbmxldCBGb290ZXIkMSA9IGNsYXNzIEZvb3RlciBleHRlbmRzIEluaXRpYWxpemFibGVYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihyZWZlcmVuY2VOdW1iZXIsIGluaXRDb250ZW50KSB7XG4gICAgc3VwZXIoXCJ3OmZ0clwiLCBpbml0Q29udGVudCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlZklkXCIpO1xuICAgIHRoaXMucmVmSWQgPSByZWZlcmVuY2VOdW1iZXI7XG4gICAgaWYgKCFpbml0Q29udGVudCkge1xuICAgICAgdGhpcy5yb290LnB1c2goXG4gICAgICAgIG5ldyBGb290ZXJBdHRyaWJ1dGVzKHtcbiAgICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXG4gICAgICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcbiAgICAgICAgICBvOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiLFxuICAgICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICAgIG06IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvbWF0aFwiLFxuICAgICAgICAgIHY6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWxcIixcbiAgICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgICB3cDogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvZHJhd2luZ21sLzIwMDYvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgICAgdzEwOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmRcIixcbiAgICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXG4gICAgICAgICAgdzE1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMi93b3JkbWxcIixcbiAgICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgICB3cGk6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nSW5rXCIsXG4gICAgICAgICAgd25lOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwNi93b3JkbWxcIixcbiAgICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIlxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZ2V0IFJlZmVyZW5jZUlkKCkge1xuICAgIHJldHVybiB0aGlzLnJlZklkO1xuICB9XG4gIGFkZChpdGVtKSB7XG4gICAgdGhpcy5yb290LnB1c2goaXRlbSk7XG4gIH1cbn07XG5jbGFzcyBGb290ZXJXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IobWVkaWEsIHJlZmVyZW5jZUlkLCBpbml0Q29udGVudCkge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb290ZXJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbGF0aW9uc2hpcHNcIik7XG4gICAgdGhpcy5tZWRpYSA9IG1lZGlhO1xuICAgIHRoaXMuZm9vdGVyID0gbmV3IEZvb3RlciQxKHJlZmVyZW5jZUlkLCBpbml0Q29udGVudCk7XG4gICAgdGhpcy5yZWxhdGlvbnNoaXBzID0gbmV3IFJlbGF0aW9uc2hpcHMoKTtcbiAgfVxuICBhZGQoaXRlbSkge1xuICAgIHRoaXMuZm9vdGVyLmFkZChpdGVtKTtcbiAgfVxuICBhZGRDaGlsZEVsZW1lbnQoY2hpbGRFbGVtZW50KSB7XG4gICAgdGhpcy5mb290ZXIuYWRkQ2hpbGRFbGVtZW50KGNoaWxkRWxlbWVudCk7XG4gIH1cbiAgZ2V0IFZpZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9vdGVyO1xuICB9XG4gIGdldCBSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbGF0aW9uc2hpcHM7XG4gIH1cbiAgZ2V0IE1lZGlhKCkge1xuICAgIHJldHVybiB0aGlzLm1lZGlhO1xuICB9XG59XG5jbGFzcyBGb290bm90ZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHR5cGU6IFwidzp0eXBlXCIsXG4gICAgICBpZDogXCJ3OmlkXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRm9vdG5vdGVSZWYgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Zm9vdG5vdGVSZWZcIik7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3RlUmVmUnVuIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgc3R5bGU6IFwiRm9vdG5vdGVSZWZlcmVuY2VcIlxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGb290bm90ZVJlZigpKTtcbiAgfVxufVxuY29uc3QgRm9vdG5vdGVUeXBlID0ge1xuICBTRVBFUkFUT1I6IFwic2VwYXJhdG9yXCIsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgQ09OVElOVUFUSU9OX1NFUEVSQVRPUjogXCJjb250aW51YXRpb25TZXBhcmF0b3JcIlxufTtcbmNsYXNzIEZvb3Rub3RlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6Zm9vdG5vdGVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgRm9vdG5vdGVBdHRyaWJ1dGVzKHtcbiAgICAgICAgdHlwZTogb3B0aW9uczIudHlwZSxcbiAgICAgICAgaWQ6IG9wdGlvbnMyLmlkXG4gICAgICB9KVxuICAgICk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSBvcHRpb25zMi5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGNoaWxkLmFkZFJ1blRvRnJvbnQobmV3IEZvb3Rub3RlUmVmUnVuKCkpO1xuICAgICAgfVxuICAgICAgdGhpcy5yb290LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgQ29udGludWF0aW9uU2VwZXJhdG9yIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmNvbnRpbnVhdGlvblNlcGFyYXRvclwiKTtcbiAgfVxufVxuY2xhc3MgQ29udGludWF0aW9uU2VwZXJhdG9yUnVuIGV4dGVuZHMgUnVuIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDb250aW51YXRpb25TZXBlcmF0b3IoKSk7XG4gIH1cbn1cbmNsYXNzIFNlcGVyYXRvciBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpzZXBhcmF0b3JcIik7XG4gIH1cbn1cbmNsYXNzIFNlcGVyYXRvclJ1biBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwZXJhdG9yKCkpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZXNBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB3cGM6IFwieG1sbnM6d3BjXCIsXG4gICAgICBtYzogXCJ4bWxuczptY1wiLFxuICAgICAgbzogXCJ4bWxuczpvXCIsXG4gICAgICByOiBcInhtbG5zOnJcIixcbiAgICAgIG06IFwieG1sbnM6bVwiLFxuICAgICAgdjogXCJ4bWxuczp2XCIsXG4gICAgICB3cDE0OiBcInhtbG5zOndwMTRcIixcbiAgICAgIHdwOiBcInhtbG5zOndwXCIsXG4gICAgICB3MTA6IFwieG1sbnM6dzEwXCIsXG4gICAgICB3OiBcInhtbG5zOndcIixcbiAgICAgIHcxNDogXCJ4bWxuczp3MTRcIixcbiAgICAgIHcxNTogXCJ4bWxuczp3MTVcIixcbiAgICAgIHdwZzogXCJ4bWxuczp3cGdcIixcbiAgICAgIHdwaTogXCJ4bWxuczp3cGlcIixcbiAgICAgIHduZTogXCJ4bWxuczp3bmVcIixcbiAgICAgIHdwczogXCJ4bWxuczp3cHNcIixcbiAgICAgIElnbm9yYWJsZTogXCJtYzpJZ25vcmFibGVcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBGb290Tm90ZXMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6Zm9vdG5vdGVzXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEZvb3Rub3Rlc0F0dHJpYnV0ZXMoe1xuICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXG4gICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxuICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcbiAgICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTUgd3AxNFwiXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgYmVnaW4gPSBuZXcgRm9vdG5vdGUoe1xuICAgICAgaWQ6IC0xLFxuICAgICAgdHlwZTogRm9vdG5vdGVUeXBlLlNFUEVSQVRPUixcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIG5ldyBQYXJhZ3JhcGgoe1xuICAgICAgICAgIHNwYWNpbmc6IHtcbiAgICAgICAgICAgIGFmdGVyOiAwLFxuICAgICAgICAgICAgbGluZTogMjQwLFxuICAgICAgICAgICAgbGluZVJ1bGU6IExpbmVSdWxlVHlwZS5BVVRPXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlbjogW25ldyBTZXBlcmF0b3JSdW4oKV1cbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaChiZWdpbik7XG4gICAgY29uc3Qgc3BhY2luZyA9IG5ldyBGb290bm90ZSh7XG4gICAgICBpZDogMCxcbiAgICAgIHR5cGU6IEZvb3Rub3RlVHlwZS5DT05USU5VQVRJT05fU0VQRVJBVE9SLFxuICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgbmV3IFBhcmFncmFwaCh7XG4gICAgICAgICAgc3BhY2luZzoge1xuICAgICAgICAgICAgYWZ0ZXI6IDAsXG4gICAgICAgICAgICBsaW5lOiAyNDAsXG4gICAgICAgICAgICBsaW5lUnVsZTogTGluZVJ1bGVUeXBlLkFVVE9cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiBbbmV3IENvbnRpbnVhdGlvblNlcGVyYXRvclJ1bigpXVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKHNwYWNpbmcpO1xuICB9XG4gIGNyZWF0ZUZvb3ROb3RlKGlkLCBwYXJhZ3JhcGgpIHtcbiAgICBjb25zdCBmb290bm90ZSA9IG5ldyBGb290bm90ZSh7XG4gICAgICBpZCxcbiAgICAgIGNoaWxkcmVuOiBwYXJhZ3JhcGhcbiAgICB9KTtcbiAgICB0aGlzLnJvb3QucHVzaChmb290bm90ZSk7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3Rlc1dyYXBwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZm9vdG5vdGVzc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVsYXRpb25zaGlwc1wiKTtcbiAgICB0aGlzLmZvb3Rub3Rlc3MgPSBuZXcgRm9vdE5vdGVzKCk7XG4gICAgdGhpcy5yZWxhdGlvbnNoaXBzID0gbmV3IFJlbGF0aW9uc2hpcHMoKTtcbiAgfVxuICBnZXQgVmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5mb290bm90ZXNzO1xuICB9XG4gIGdldCBSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbGF0aW9uc2hpcHM7XG4gIH1cbn1cbmNsYXNzIEhlYWRlckF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHdwYzogXCJ4bWxuczp3cGNcIixcbiAgICAgIG1jOiBcInhtbG5zOm1jXCIsXG4gICAgICBvOiBcInhtbG5zOm9cIixcbiAgICAgIHI6IFwieG1sbnM6clwiLFxuICAgICAgbTogXCJ4bWxuczptXCIsXG4gICAgICB2OiBcInhtbG5zOnZcIixcbiAgICAgIHdwMTQ6IFwieG1sbnM6d3AxNFwiLFxuICAgICAgd3A6IFwieG1sbnM6d3BcIixcbiAgICAgIHcxMDogXCJ4bWxuczp3MTBcIixcbiAgICAgIHc6IFwieG1sbnM6d1wiLFxuICAgICAgdzE0OiBcInhtbG5zOncxNFwiLFxuICAgICAgdzE1OiBcInhtbG5zOncxNVwiLFxuICAgICAgd3BnOiBcInhtbG5zOndwZ1wiLFxuICAgICAgd3BpOiBcInhtbG5zOndwaVwiLFxuICAgICAgd25lOiBcInhtbG5zOnduZVwiLFxuICAgICAgd3BzOiBcInhtbG5zOndwc1wiLFxuICAgICAgY3A6IFwieG1sbnM6Y3BcIixcbiAgICAgIGRjOiBcInhtbG5zOmRjXCIsXG4gICAgICBkY3Rlcm1zOiBcInhtbG5zOmRjdGVybXNcIixcbiAgICAgIGRjbWl0eXBlOiBcInhtbG5zOmRjbWl0eXBlXCIsXG4gICAgICB4c2k6IFwieG1sbnM6eHNpXCIsXG4gICAgICB0eXBlOiBcInhzaTp0eXBlXCIsXG4gICAgICBjeDogXCJ4bWxuczpjeFwiLFxuICAgICAgY3gxOiBcInhtbG5zOmN4MVwiLFxuICAgICAgY3gyOiBcInhtbG5zOmN4MlwiLFxuICAgICAgY3gzOiBcInhtbG5zOmN4M1wiLFxuICAgICAgY3g0OiBcInhtbG5zOmN4NFwiLFxuICAgICAgY3g1OiBcInhtbG5zOmN4NVwiLFxuICAgICAgY3g2OiBcInhtbG5zOmN4NlwiLFxuICAgICAgY3g3OiBcInhtbG5zOmN4N1wiLFxuICAgICAgY3g4OiBcInhtbG5zOmN4OFwiLFxuICAgICAgdzE2Y2lkOiBcInhtbG5zOncxNmNpZFwiLFxuICAgICAgdzE2c2U6IFwieG1sbnM6dzE2c2VcIlxuICAgIH0pO1xuICB9XG59XG5sZXQgSGVhZGVyJDEgPSBjbGFzcyBIZWFkZXIgZXh0ZW5kcyBJbml0aWFsaXphYmxlWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocmVmZXJlbmNlTnVtYmVyLCBpbml0Q29udGVudCkge1xuICAgIHN1cGVyKFwidzpoZHJcIiwgaW5pdENvbnRlbnQpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZJZFwiKTtcbiAgICB0aGlzLnJlZklkID0gcmVmZXJlbmNlTnVtYmVyO1xuICAgIGlmICghaW5pdENvbnRlbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgICBuZXcgSGVhZGVyQXR0cmlidXRlcyh7XG4gICAgICAgICAgd3BjOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0NhbnZhc1wiLFxuICAgICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgICAgbzogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2VcIixcbiAgICAgICAgICByOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHNcIixcbiAgICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgICB2OiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIsXG4gICAgICAgICAgd3AxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICAgIHcxMDogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTp3b3JkXCIsXG4gICAgICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcbiAgICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICAgIHcxNTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTIvd29yZG1sXCIsXG4gICAgICAgICAgd3BnOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0dyb3VwXCIsXG4gICAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICAgIHduZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMDYvd29yZG1sXCIsXG4gICAgICAgICAgd3BzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ1NoYXBlXCIsXG4gICAgICAgICAgY3g6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE0L2NoYXJ0ZXhcIixcbiAgICAgICAgICBjeDE6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE1LzkvOC9jaGFydGV4XCIsXG4gICAgICAgICAgY3gyOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNS8xMC8yMS9jaGFydGV4XCIsXG4gICAgICAgICAgY3gzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzkvY2hhcnRleFwiLFxuICAgICAgICAgIGN4NDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMC9jaGFydGV4XCIsXG4gICAgICAgICAgY3g1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzExL2NoYXJ0ZXhcIixcbiAgICAgICAgICBjeDY6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvZHJhd2luZy8yMDE2LzUvMTIvY2hhcnRleFwiLFxuICAgICAgICAgIGN4NzogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS9kcmF3aW5nLzIwMTYvNS8xMy9jaGFydGV4XCIsXG4gICAgICAgICAgY3g4OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2RyYXdpbmcvMjAxNi81LzE0L2NoYXJ0ZXhcIixcbiAgICAgICAgICB3MTZjaWQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDE2L3dvcmRtbC9jaWRcIixcbiAgICAgICAgICB3MTZzZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTUvd29yZG1sL3N5bWV4XCJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGdldCBSZWZlcmVuY2VJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZJZDtcbiAgfVxuICBhZGQoaXRlbSkge1xuICAgIHRoaXMucm9vdC5wdXNoKGl0ZW0pO1xuICB9XG59O1xuY2xhc3MgSGVhZGVyV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKG1lZGlhLCByZWZlcmVuY2VJZCwgaW5pdENvbnRlbnQpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGVhZGVyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWxhdGlvbnNoaXBzXCIpO1xuICAgIHRoaXMubWVkaWEgPSBtZWRpYTtcbiAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIkMShyZWZlcmVuY2VJZCwgaW5pdENvbnRlbnQpO1xuICAgIHRoaXMucmVsYXRpb25zaGlwcyA9IG5ldyBSZWxhdGlvbnNoaXBzKCk7XG4gIH1cbiAgYWRkKGl0ZW0pIHtcbiAgICB0aGlzLmhlYWRlci5hZGQoaXRlbSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYWRkQ2hpbGRFbGVtZW50KGNoaWxkRWxlbWVudCkge1xuICAgIHRoaXMuaGVhZGVyLmFkZENoaWxkRWxlbWVudChjaGlsZEVsZW1lbnQpO1xuICB9XG4gIGdldCBWaWV3KCkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlcjtcbiAgfVxuICBnZXQgUmVsYXRpb25zaGlwcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWxhdGlvbnNoaXBzO1xuICB9XG4gIGdldCBNZWRpYSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZWRpYTtcbiAgfVxufVxuY2xhc3MgTWVkaWEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9wcmVmZXItcmVhZG9ubHktdHlwZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtYXBcIik7XG4gICAgdGhpcy5tYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIGFkZEltYWdlKGtleSwgbWVkaWFEYXRhKSB7XG4gICAgdGhpcy5tYXAuc2V0KGtleSwgbWVkaWFEYXRhKTtcbiAgfVxuICBnZXQgQXJyYXkoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYXAudmFsdWVzKCkpO1xuICB9XG59XG5jb25zdCBXT1JLQVJPVU5EMiA9IFwiXCI7XG5jb25zdCBMZXZlbEZvcm1hdCA9IHtcbiAgREVDSU1BTDogXCJkZWNpbWFsXCIsXG4gIFVQUEVSX1JPTUFOOiBcInVwcGVyUm9tYW5cIixcbiAgTE9XRVJfUk9NQU46IFwibG93ZXJSb21hblwiLFxuICBVUFBFUl9MRVRURVI6IFwidXBwZXJMZXR0ZXJcIixcbiAgTE9XRVJfTEVUVEVSOiBcImxvd2VyTGV0dGVyXCIsXG4gIE9SRElOQUw6IFwib3JkaW5hbFwiLFxuICBDQVJESU5BTF9URVhUOiBcImNhcmRpbmFsVGV4dFwiLFxuICBPUkRJTkFMX1RFWFQ6IFwib3JkaW5hbFRleHRcIixcbiAgSEVYOiBcImhleFwiLFxuICBDSElDQUdPOiBcImNoaWNhZ29cIixcbiAgSURFT0dSQVBIX19ESUdJVEFMOiBcImlkZW9ncmFwaERpZ2l0YWxcIixcbiAgSkFQQU5FU0VfQ09VTlRJTkc6IFwiamFwYW5lc2VDb3VudGluZ1wiLFxuICBBSVVFTzogXCJhaXVlb1wiLFxuICBJUk9IQTogXCJpcm9oYVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEg6IFwiZGVjaW1hbEZ1bGxXaWR0aFwiLFxuICBERUNJTUFMX0hBTEZfV0lEVEg6IFwiZGVjaW1hbEhhbGZXaWR0aFwiLFxuICBKQVBBTkVTRV9MRUdBTDogXCJqYXBhbmVzZUxlZ2FsXCIsXG4gIEpBUEFORVNFX0RJR0lUQUxfVEVOX1RIT1VTQU5EOiBcImphcGFuZXNlRGlnaXRhbFRlblRob3VzYW5kXCIsXG4gIERFQ0lNQUxfRU5DTE9TRURfQ0lSQ0xFOiBcImRlY2ltYWxFbmNsb3NlZENpcmNsZVwiLFxuICBERUNJTUFMX0ZVTExfV0lEVEgyOiBcImRlY2ltYWxGdWxsV2lkdGgyXCIsXG4gIEFJVUVPX0ZVTExfV0lEVEg6IFwiYWl1ZW9GdWxsV2lkdGhcIixcbiAgSVJPSEFfRlVMTF9XSURUSDogXCJpcm9oYUZ1bGxXaWR0aFwiLFxuICBERUNJTUFMX1pFUk86IFwiZGVjaW1hbFplcm9cIixcbiAgQlVMTEVUOiBcImJ1bGxldFwiLFxuICBHQU5BREE6IFwiZ2FuYWRhXCIsXG4gIENIT1NVTkc6IFwiY2hvc3VuZ1wiLFxuICBERUNJTUFMX0VOQ0xPU0VEX0ZVTExTVE9QOiBcImRlY2ltYWxFbmNsb3NlZEZ1bGxzdG9wXCIsXG4gIERFQ0lNQUxfRU5DTE9TRURfUEFSRU5USEVTRVM6IFwiZGVjaW1hbEVuY2xvc2VkUGFyZW5cIixcbiAgREVDSU1BTF9FTkNMT1NFRF9DSVJDTEVfQ0hJTkVTRTogXCJkZWNpbWFsRW5jbG9zZWRDaXJjbGVDaGluZXNlXCIsXG4gIElERU9HUkFQSF9FTkNMT1NFRF9DSVJDTEU6IFwiaWRlb2dyYXBoRW5jbG9zZWRDaXJjbGVcIixcbiAgSURFT0dSQVBIX1RSQURJVElPTkFMOiBcImlkZW9ncmFwaFRyYWRpdGlvbmFsXCIsXG4gIElERU9HUkFQSF9aT0RJQUM6IFwiaWRlb2dyYXBoWm9kaWFjXCIsXG4gIElERU9HUkFQSF9aT0RJQUNfVFJBRElUSU9OQUw6IFwiaWRlb2dyYXBoWm9kaWFjVHJhZGl0aW9uYWxcIixcbiAgVEFJV0FORVNFX0NPVU5USU5HOiBcInRhaXdhbmVzZUNvdW50aW5nXCIsXG4gIElERU9HUkFQSF9MRUdBTF9UUkFESVRJT05BTDogXCJpZGVvZ3JhcGhMZWdhbFRyYWRpdGlvbmFsXCIsXG4gIFRBSVdBTkVTRV9DT1VOVElOR19USE9VU0FORDogXCJ0YWl3YW5lc2VDb3VudGluZ1Rob3VzYW5kXCIsXG4gIFRBSVdBTkVTRV9ESUdJVEFMOiBcInRhaXdhbmVzZURpZ2l0YWxcIixcbiAgQ0hJTkVTRV9DT1VOVElORzogXCJjaGluZXNlQ291bnRpbmdcIixcbiAgQ0hJTkVTRV9MRUdBTF9TSU1QTElGSUVEOiBcImNoaW5lc2VMZWdhbFNpbXBsaWZpZWRcIixcbiAgQ0hJTkVTRV9DT1VOVElOR19USE9VU0FORDogXCJjaGluZXNlQ291bnRpbmdUaG91c2FuZFwiLFxuICBLT1JFQU5fRElHSVRBTDogXCJrb3JlYW5EaWdpdGFsXCIsXG4gIEtPUkVBTl9DT1VOVElORzogXCJrb3JlYW5Db3VudGluZ1wiLFxuICBLT1JFQU5fTEVHQUw6IFwia29yZWFuTGVnYWxcIixcbiAgS09SRUFOX0RJR0lUQUwyOiBcImtvcmVhbkRpZ2l0YWwyXCIsXG4gIFZJRVROQU1FU0VfQ09VTlRJTkc6IFwidmlldG5hbWVzZUNvdW50aW5nXCIsXG4gIFJVU1NJQU5fTE9XRVI6IFwicnVzc2lhbkxvd2VyXCIsXG4gIFJVU1NJQU5fVVBQRVI6IFwicnVzc2lhblVwcGVyXCIsXG4gIE5PTkU6IFwibm9uZVwiLFxuICBOVU1CRVJfSU5fREFTSDogXCJudW1iZXJJbkRhc2hcIixcbiAgSEVCUkVXMTogXCJoZWJyZXcxXCIsXG4gIEhFQlJFVzI6IFwiaGVicmV3MlwiLFxuICBBUkFCSUNfQUxQSEE6IFwiYXJhYmljQWxwaGFcIixcbiAgQVJBQklDX0FCSkFEOiBcImFyYWJpY0FiamFkXCIsXG4gIEhJTkRJX1ZPV0VMUzogXCJoaW5kaVZvd2Vsc1wiLFxuICBISU5ESV9DT05TT05BTlRTOiBcImhpbmRpQ29uc29uYW50c1wiLFxuICBISU5ESV9OVU1CRVJTOiBcImhpbmRpTnVtYmVyc1wiLFxuICBISU5ESV9DT1VOVElORzogXCJoaW5kaUNvdW50aW5nXCIsXG4gIFRIQUlfTEVUVEVSUzogXCJ0aGFpTGV0dGVyc1wiLFxuICBUSEFJX05VTUJFUlM6IFwidGhhaU51bWJlcnNcIixcbiAgVEhBSV9DT1VOVElORzogXCJ0aGFpQ291bnRpbmdcIixcbiAgQkFIVF9URVhUOiBcImJhaHRUZXh0XCIsXG4gIERPTExBUl9URVhUOiBcImRvbGxhclRleHRcIixcbiAgQ1VTVE9NOiBcImN1c3RvbVwiXG59O1xuY2xhc3MgTGV2ZWxBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBpbHZsOiBcInc6aWx2bFwiLFxuICAgICAgdGVudGF0aXZlOiBcIncxNTp0ZW50YXRpdmVcIlxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBOdW1iZXJGb3JtYXQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzpudW1GbXRcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgTGV2ZWxUZXh0IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6bHZsVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBMZXZlbEpjIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6bHZsSmNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY29uc3QgTGV2ZWxTdWZmaXggPSB7XG4gIE5PVEhJTkc6IFwibm90aGluZ1wiLFxuICBTUEFDRTogXCJzcGFjZVwiLFxuICBUQUI6IFwidGFiXCJcbn07XG5jbGFzcyBTdWZmaXggZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKFwidzpzdWZmXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZXMoe1xuICAgICAgICB2YWw6IHZhbHVlXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIElzTGVnYWxOdW1iZXJpbmdTdHlsZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzppc0xnbFwiKTtcbiAgfVxufVxuY2xhc3MgTGV2ZWxCYXNlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGxldmVsLFxuICAgIGZvcm1hdDogZm9ybWF0MixcbiAgICB0ZXh0LFxuICAgIGFsaWdubWVudCA9IEFsaWdubWVudFR5cGUuU1RBUlQsXG4gICAgc3RhcnQgPSAxLFxuICAgIHN0eWxlLFxuICAgIHN1ZmZpeCxcbiAgICBpc0xlZ2FsTnVtYmVyaW5nU3R5bGVcbiAgfSkge1xuICAgIHN1cGVyKFwidzpsdmxcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInBhcmFncmFwaFByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJ1blByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlclZhbHVlRWxlbWVudChcInc6c3RhcnRcIiwgZGVjaW1hbE51bWJlcihzdGFydCkpKTtcbiAgICBpZiAoZm9ybWF0Mikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE51bWJlckZvcm1hdChmb3JtYXQyKSk7XG4gICAgfVxuICAgIGlmIChzdWZmaXgpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdWZmaXgoc3VmZml4KSk7XG4gICAgfVxuICAgIGlmIChpc0xlZ2FsTnVtYmVyaW5nU3R5bGUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBJc0xlZ2FsTnVtYmVyaW5nU3R5bGUoKSk7XG4gICAgfVxuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTGV2ZWxUZXh0KHRleHQpKTtcbiAgICB9XG4gICAgdGhpcy5yb290LnB1c2gobmV3IExldmVsSmMoYWxpZ25tZW50KSk7XG4gICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzID0gbmV3IFBhcmFncmFwaFByb3BlcnRpZXMoc3R5bGUgJiYgc3R5bGUucGFyYWdyYXBoKTtcbiAgICB0aGlzLnJ1blByb3BlcnRpZXMgPSBuZXcgUnVuUHJvcGVydGllcyhzdHlsZSAmJiBzdHlsZS5ydW4pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllcyk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzKTtcbiAgICBpZiAobGV2ZWwgPiA5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTGV2ZWwgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiA5LiBSZWFkIG1vcmUgaGVyZTogaHR0cHM6Ly9hbnN3ZXJzLm1pY3Jvc29mdC5jb20vZW4tdXMvbXNvZmZpY2UvZm9ydW0vYWxsL2RvZXMtd29yZC1zdXBwb3J0LW1vcmUtdGhhbi05LWxpc3QtbGV2ZWxzL2QxMzBmZGNkLTE3ODEtNDQ2ZC04Yzg0LWM2Yzc5MTI0ZTRkN1wiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBMZXZlbEF0dHJpYnV0ZXMoe1xuICAgICAgICBpbHZsOiBkZWNpbWFsTnVtYmVyKGxldmVsKSxcbiAgICAgICAgdGVudGF0aXZlOiAxXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIExldmVsIGV4dGVuZHMgTGV2ZWxCYXNlIHtcbiAgLy8gVGhpcyBpcyB0aGUgbGV2ZWwgdGhhdCBzaXRzIHVuZGVyIGFic3RyYWN0TnVtLiBXZSBtYWtlIGFcbiAgLy8gaGFuZGZ1bCBvZiBwcm9wZXJ0aWVzIHJlcXVpcmVkXG59XG5jbGFzcyBMZXZlbEZvck92ZXJyaWRlIGV4dGVuZHMgTGV2ZWxCYXNlIHtcbn1cbmNsYXNzIE11bHRpTGV2ZWxUeXBlIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6bXVsdGlMZXZlbFR5cGVcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlcyh7XG4gICAgICAgIHZhbDogdmFsdWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQWJzdHJhY3ROdW1iZXJpbmdBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBhYnN0cmFjdE51bUlkOiBcInc6YWJzdHJhY3ROdW1JZFwiLFxuICAgICAgcmVzdGFydE51bWJlcmluZ0FmdGVyQnJlYWs6IFwidzE1OnJlc3RhcnROdW1iZXJpbmdBZnRlckJyZWFrXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgQWJzdHJhY3ROdW1iZXJpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCwgbGV2ZWxPcHRpb25zKSB7XG4gICAgc3VwZXIoXCJ3OmFic3RyYWN0TnVtXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBYnN0cmFjdE51bWJlcmluZ0F0dHJpYnV0ZXMoe1xuICAgICAgICBhYnN0cmFjdE51bUlkOiBkZWNpbWFsTnVtYmVyKGlkKSxcbiAgICAgICAgcmVzdGFydE51bWJlcmluZ0FmdGVyQnJlYWs6IDBcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgTXVsdGlMZXZlbFR5cGUoXCJoeWJyaWRNdWx0aWxldmVsXCIpKTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgZm9yIChjb25zdCBvcHRpb24gb2YgbGV2ZWxPcHRpb25zKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTGV2ZWwob3B0aW9uKSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBBYnN0cmFjdE51bUlkIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcihcInc6YWJzdHJhY3ROdW1JZFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBBdHRyaWJ1dGVzKHtcbiAgICAgICAgdmFsOiB2YWx1ZVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBOdW1BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IG51bUlkOiBcInc6bnVtSWRcIiB9KTtcbiAgfVxufVxuY2xhc3MgQ29uY3JldGVOdW1iZXJpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpudW1cIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm51bUlkXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZlcmVuY2VcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImluc3RhbmNlXCIpO1xuICAgIHRoaXMubnVtSWQgPSBvcHRpb25zMi5udW1JZDtcbiAgICB0aGlzLnJlZmVyZW5jZSA9IG9wdGlvbnMyLnJlZmVyZW5jZTtcbiAgICB0aGlzLmluc3RhbmNlID0gb3B0aW9uczIuaW5zdGFuY2U7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgTnVtQXR0cmlidXRlcyh7XG4gICAgICAgIG51bUlkOiBkZWNpbWFsTnVtYmVyKG9wdGlvbnMyLm51bUlkKVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBBYnN0cmFjdE51bUlkKGRlY2ltYWxOdW1iZXIob3B0aW9uczIuYWJzdHJhY3ROdW1JZCkpKTtcbiAgICBpZiAob3B0aW9uczIub3ZlcnJpZGVMZXZlbHMgJiYgb3B0aW9uczIub3ZlcnJpZGVMZXZlbHMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IGxldmVsIG9mIG9wdGlvbnMyLm92ZXJyaWRlTGV2ZWxzKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBMZXZlbE92ZXJyaWRlKGxldmVsLm51bSwgbGV2ZWwuc3RhcnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNsYXNzIExldmVsT3ZlcnJpZGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7IGlsdmw6IFwidzppbHZsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIExldmVsT3ZlcnJpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihsZXZlbE51bSwgc3RhcnQpIHtcbiAgICBzdXBlcihcInc6bHZsT3ZlcnJpZGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IExldmVsT3ZlcnJpZGVBdHRyaWJ1dGVzKHsgaWx2bDogbGV2ZWxOdW0gfSkpO1xuICAgIGlmIChzdGFydCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RhcnRPdmVycmlkZShzdGFydCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgU3RhcnRPdmVycmlkZUF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHsgdmFsOiBcInc6dmFsXCIgfSk7XG4gIH1cbn1cbmNsYXNzIFN0YXJ0T3ZlcnJpZGUgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihzdGFydCkge1xuICAgIHN1cGVyKFwidzpzdGFydE92ZXJyaWRlXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdGFydE92ZXJyaWRlQXR0cmlidXRlcyh7IHZhbDogc3RhcnQgfSkpO1xuICB9XG59XG5jbGFzcyBOdW1iZXJpbmcgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpudW1iZXJpbmdcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImFic3RyYWN0TnVtYmVyaW5nTWFwXCIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb25jcmV0ZU51bWJlcmluZ01hcFwiLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyZWZlcmVuY2VDb25maWdNYXBcIiwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkXCIsIGFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkR2VuKCkpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZFwiLCBjb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZEdlbigpKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBEb2N1bWVudEF0dHJpYnV0ZXMoe1xuICAgICAgICB3cGM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nQ2FudmFzXCIsXG4gICAgICAgIG1jOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9tYXJrdXAtY29tcGF0aWJpbGl0eS8yMDA2XCIsXG4gICAgICAgIG86IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6b2ZmaWNlXCIsXG4gICAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgICBtOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L21hdGhcIixcbiAgICAgICAgdjogXCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnZtbFwiLFxuICAgICAgICB3cDE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgd3A6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L3dvcmRwcm9jZXNzaW5nRHJhd2luZ1wiLFxuICAgICAgICB3MTA6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZFwiLFxuICAgICAgICB3OiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy93b3JkcHJvY2Vzc2luZ21sLzIwMDYvbWFpblwiLFxuICAgICAgICB3MTQ6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRtbFwiLFxuICAgICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgICB3cGc6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nR3JvdXBcIixcbiAgICAgICAgd3BpOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0lua1wiLFxuICAgICAgICB3bmU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDA2L3dvcmRtbFwiLFxuICAgICAgICB3cHM6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEwL3dvcmRwcm9jZXNzaW5nU2hhcGVcIixcbiAgICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTUgd3AxNFwiXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgYWJzdHJhY3ROdW1iZXJpbmcgPSBuZXcgQWJzdHJhY3ROdW1iZXJpbmcodGhpcy5hYnN0cmFjdE51bVVuaXF1ZU51bWVyaWNJZCgpLCBbXG4gICAgICB7XG4gICAgICAgIGxldmVsOiAwLFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil49cIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogY29udmVydEluY2hlc1RvVHdpcCgwLjUpLCBoYW5naW5nOiBjb252ZXJ0SW5jaGVzVG9Ud2lwKDAuMjUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiAxLFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil4tcIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogY29udmVydEluY2hlc1RvVHdpcCgxKSwgaGFuZ2luZzogY29udmVydEluY2hlc1RvVHdpcCgwLjI1KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsZXZlbDogMixcbiAgICAgICAgZm9ybWF0OiBMZXZlbEZvcm1hdC5CVUxMRVQsXG4gICAgICAgIHRleHQ6IFwi4pagXCIsXG4gICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDIxNjAsIGhhbmdpbmc6IGNvbnZlcnRJbmNoZXNUb1R3aXAoMC4yNSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGV2ZWw6IDMsXG4gICAgICAgIGZvcm1hdDogTGV2ZWxGb3JtYXQuQlVMTEVULFxuICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiAyODgwLCBoYW5naW5nOiBjb252ZXJ0SW5jaGVzVG9Ud2lwKDAuMjUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiA0LFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil4tcIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogMzYwMCwgaGFuZ2luZzogY29udmVydEluY2hlc1RvVHdpcCgwLjI1KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsZXZlbDogNSxcbiAgICAgICAgZm9ybWF0OiBMZXZlbEZvcm1hdC5CVUxMRVQsXG4gICAgICAgIHRleHQ6IFwi4pagXCIsXG4gICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDQzMjAsIGhhbmdpbmc6IGNvbnZlcnRJbmNoZXNUb1R3aXAoMC4yNSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGV2ZWw6IDYsXG4gICAgICAgIGZvcm1hdDogTGV2ZWxGb3JtYXQuQlVMTEVULFxuICAgICAgICB0ZXh0OiBcIuKXj1wiLFxuICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFR5cGUuTEVGVCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgICAgIGluZGVudDogeyBsZWZ0OiA1MDQwLCBoYW5naW5nOiBjb252ZXJ0SW5jaGVzVG9Ud2lwKDAuMjUpIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGxldmVsOiA3LFxuICAgICAgICBmb3JtYXQ6IExldmVsRm9ybWF0LkJVTExFVCxcbiAgICAgICAgdGV4dDogXCLil49cIixcbiAgICAgICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlLkxFRlQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgICAgICBpbmRlbnQ6IHsgbGVmdDogNTc2MCwgaGFuZ2luZzogY29udmVydEluY2hlc1RvVHdpcCgwLjI1KSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBsZXZlbDogOCxcbiAgICAgICAgZm9ybWF0OiBMZXZlbEZvcm1hdC5CVUxMRVQsXG4gICAgICAgIHRleHQ6IFwi4pePXCIsXG4gICAgICAgIGFsaWdubWVudDogQWxpZ25tZW50VHlwZS5MRUZULFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgaW5kZW50OiB7IGxlZnQ6IDY0ODAsIGhhbmdpbmc6IGNvbnZlcnRJbmNoZXNUb1R3aXAoMC4yNSkgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF0pO1xuICAgIHRoaXMuY29uY3JldGVOdW1iZXJpbmdNYXAuc2V0KFxuICAgICAgXCJkZWZhdWx0LWJ1bGxldC1udW1iZXJpbmdcIixcbiAgICAgIG5ldyBDb25jcmV0ZU51bWJlcmluZyh7XG4gICAgICAgIG51bUlkOiAxLFxuICAgICAgICBhYnN0cmFjdE51bUlkOiBhYnN0cmFjdE51bWJlcmluZy5pZCxcbiAgICAgICAgcmVmZXJlbmNlOiBcImRlZmF1bHQtYnVsbGV0LW51bWJlcmluZ1wiLFxuICAgICAgICBpbnN0YW5jZTogMCxcbiAgICAgICAgb3ZlcnJpZGVMZXZlbHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBudW06IDAsXG4gICAgICAgICAgICBzdGFydDogMVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMuYWJzdHJhY3ROdW1iZXJpbmdNYXAuc2V0KFwiZGVmYXVsdC1idWxsZXQtbnVtYmVyaW5nXCIsIGFic3RyYWN0TnVtYmVyaW5nKTtcbiAgICBmb3IgKGNvbnN0IGNvbiBvZiBvcHRpb25zMi5jb25maWcpIHtcbiAgICAgIHRoaXMuYWJzdHJhY3ROdW1iZXJpbmdNYXAuc2V0KGNvbi5yZWZlcmVuY2UsIG5ldyBBYnN0cmFjdE51bWJlcmluZyh0aGlzLmFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkKCksIGNvbi5sZXZlbHMpKTtcbiAgICAgIHRoaXMucmVmZXJlbmNlQ29uZmlnTWFwLnNldChjb24ucmVmZXJlbmNlLCBjb24ubGV2ZWxzKTtcbiAgICB9XG4gIH1cbiAgcHJlcEZvclhtbChjb250ZXh0KSB7XG4gICAgZm9yIChjb25zdCBudW1iZXJpbmcgb2YgdGhpcy5hYnN0cmFjdE51bWJlcmluZ01hcC52YWx1ZXMoKSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobnVtYmVyaW5nKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBudW1iZXJpbmcgb2YgdGhpcy5jb25jcmV0ZU51bWJlcmluZ01hcC52YWx1ZXMoKSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobnVtYmVyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnByZXBGb3JYbWwoY29udGV4dCk7XG4gIH1cbiAgY3JlYXRlQ29uY3JldGVOdW1iZXJpbmdJbnN0YW5jZShyZWZlcmVuY2UsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgYWJzdHJhY3ROdW1iZXJpbmcgPSB0aGlzLmFic3RyYWN0TnVtYmVyaW5nTWFwLmdldChyZWZlcmVuY2UpO1xuICAgIGlmICghYWJzdHJhY3ROdW1iZXJpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZnVsbFJlZmVyZW5jZSA9IGAke3JlZmVyZW5jZX0tJHtpbnN0YW5jZX1gO1xuICAgIGlmICh0aGlzLmNvbmNyZXRlTnVtYmVyaW5nTWFwLmhhcyhmdWxsUmVmZXJlbmNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZWZlcmVuY2VDb25maWdMZXZlbHMgPSB0aGlzLnJlZmVyZW5jZUNvbmZpZ01hcC5nZXQocmVmZXJlbmNlKTtcbiAgICBjb25zdCBmaXJzdExldmVsU3RhcnROdW1iZXIgPSByZWZlcmVuY2VDb25maWdMZXZlbHMgJiYgcmVmZXJlbmNlQ29uZmlnTGV2ZWxzWzBdLnN0YXJ0O1xuICAgIGNvbnN0IGNvbmNyZXRlTnVtYmVyaW5nU2V0dGluZ3MgPSB7XG4gICAgICBudW1JZDogdGhpcy5jb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZCgpLFxuICAgICAgYWJzdHJhY3ROdW1JZDogYWJzdHJhY3ROdW1iZXJpbmcuaWQsXG4gICAgICByZWZlcmVuY2UsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIG92ZXJyaWRlTGV2ZWxzOiBbXG4gICAgICAgIGZpcnN0TGV2ZWxTdGFydE51bWJlciAmJiBOdW1iZXIuaXNJbnRlZ2VyKGZpcnN0TGV2ZWxTdGFydE51bWJlcikgPyB7XG4gICAgICAgICAgbnVtOiAwLFxuICAgICAgICAgIHN0YXJ0OiBmaXJzdExldmVsU3RhcnROdW1iZXJcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICBudW06IDAsXG4gICAgICAgICAgc3RhcnQ6IDFcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gICAgdGhpcy5jb25jcmV0ZU51bWJlcmluZ01hcC5zZXQoZnVsbFJlZmVyZW5jZSwgbmV3IENvbmNyZXRlTnVtYmVyaW5nKGNvbmNyZXRlTnVtYmVyaW5nU2V0dGluZ3MpKTtcbiAgfVxuICBnZXQgQ29uY3JldGVOdW1iZXJpbmcoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jb25jcmV0ZU51bWJlcmluZ01hcC52YWx1ZXMoKSk7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgZ2V0IFJlZmVyZW5jZUNvbmZpZygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnJlZmVyZW5jZUNvbmZpZ01hcC52YWx1ZXMoKSk7XG4gIH1cbn1cbmNsYXNzIENvbXBhdGliaWxpdHlTZXR0aW5nQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgdmVyc2lvbjogXCJ3OnZhbFwiLFxuICAgICAgbmFtZTogXCJ3Om5hbWVcIixcbiAgICAgIHVyaTogXCJ3OnVyaVwiXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIENvbXBhdGliaWxpdHlTZXR0aW5nIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IodmVyc2lvbikge1xuICAgIHN1cGVyKFwidzpjb21wYXRTZXR0aW5nXCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKFxuICAgICAgbmV3IENvbXBhdGliaWxpdHlTZXR0aW5nQXR0cmlidXRlcyh7XG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHVyaTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkXCIsXG4gICAgICAgIG5hbWU6IFwiY29tcGF0aWJpbGl0eU1vZGVcIlxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBDb21wYXRpYmlsaXR5IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6Y29tcGF0XCIpO1xuICAgIGlmIChvcHRpb25zMi52ZXJzaW9uKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ29tcGF0aWJpbGl0eVNldHRpbmcob3B0aW9uczIudmVyc2lvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlU2luZ2xlQm9yZGVyZm9yQ29udGlndW91c0NlbGxzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1c2VTaW5nbGVCb3JkZXJmb3JDb250aWd1b3VzQ2VsbHNcIiwgb3B0aW9uczIudXNlU2luZ2xlQm9yZGVyZm9yQ29udGlndW91c0NlbGxzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi53b3JkUGVyZmVjdEp1c3RpZmljYXRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OndwSnVzdGlmaWNhdGlvblwiLCBvcHRpb25zMi53b3JkUGVyZmVjdEp1c3RpZmljYXRpb24pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLm5vVGFiU3RvcEZvckhhbmdpbmdJbmRlbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vVGFiSGFuZ0luZFwiLCBvcHRpb25zMi5ub1RhYlN0b3BGb3JIYW5naW5nSW5kZW50KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub0xlYWRpbmcpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vTGVhZGluZ1wiLCBvcHRpb25zMi5ub0xlYWRpbmcpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNwYWNlRm9yVW5kZXJsaW5lKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzcGFjZUZvclVMXCIsIG9wdGlvbnMyLnNwYWNlRm9yVW5kZXJsaW5lKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub0NvbHVtbkJhbGFuY2UpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3Om5vQ29sdW1uQmFsYW5jZVwiLCBvcHRpb25zMi5ub0NvbHVtbkJhbGFuY2UpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJhbGFuY2VTaW5nbGVCeXRlRG91YmxlQnl0ZVdpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpiYWxhbmNlU2luZ2xlQnl0ZURvdWJsZUJ5dGVXaWR0aFwiLCBvcHRpb25zMi5iYWxhbmNlU2luZ2xlQnl0ZURvdWJsZUJ5dGVXaWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubm9FeHRyYUxpbmVTcGFjaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpub0V4dHJhTGluZVNwYWNpbmdcIiwgb3B0aW9uczIubm9FeHRyYUxpbmVTcGFjaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdExlYXZlQmFja3NsYXNoQWxvbmUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90TGVhdmVCYWNrc2xhc2hBbG9uZVwiLCBvcHRpb25zMi5kb05vdExlYXZlQmFja3NsYXNoQWxvbmUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVuZGVybGluZVRyYWlsaW5nU3BhY2VzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1bFRyYWlsU3BhY2VcIiwgb3B0aW9uczIudW5kZXJsaW5lVHJhaWxpbmdTcGFjZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90RXhwYW5kU2hpZnRSZXR1cm4pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90RXhwYW5kU2hpZnRSZXR1cm5cIiwgb3B0aW9uczIuZG9Ob3RFeHBhbmRTaGlmdFJldHVybikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BhY2luZ0luV2hvbGVQb2ludHMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnNwYWNpbmdJbldob2xlUG9pbnRzXCIsIG9wdGlvbnMyLnNwYWNpbmdJbldob2xlUG9pbnRzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5saW5lV3JhcExpa2VXb3JkNikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bGluZVdyYXBMaWtlV29yZDZcIiwgb3B0aW9uczIubGluZVdyYXBMaWtlV29yZDYpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnByaW50Qm9keVRleHRCZWZvcmVIZWFkZXIpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnByaW50Qm9keVRleHRCZWZvcmVIZWFkZXJcIiwgb3B0aW9uczIucHJpbnRCb2R5VGV4dEJlZm9yZUhlYWRlcikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIucHJpbnRDb2xvcnNCbGFjaykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6cHJpbnRDb2xCbGFja1wiLCBvcHRpb25zMi5wcmludENvbG9yc0JsYWNrKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zcGFjZVdpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp3cFNwYWNlV2lkdGhcIiwgb3B0aW9uczIuc3BhY2VXaWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc2hvd0JyZWFrc0luRnJhbWVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzaG93QnJlYWtzSW5GcmFtZXNcIiwgb3B0aW9uczIuc2hvd0JyZWFrc0luRnJhbWVzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdWJGb250QnlTaXplKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdWJGb250QnlTaXplXCIsIG9wdGlvbnMyLnN1YkZvbnRCeVNpemUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN1cHByZXNzQm90dG9tU3BhY2luZykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3VwcHJlc3NCb3R0b21TcGFjaW5nXCIsIG9wdGlvbnMyLnN1cHByZXNzQm90dG9tU3BhY2luZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3VwcHJlc3NUb3BTcGFjaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdXBwcmVzc1RvcFNwYWNpbmdcIiwgb3B0aW9uczIuc3VwcHJlc3NUb3BTcGFjaW5nKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zdXBwcmVzc1NwYWNpbmdBdFRvcE9mUGFnZSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3VwcHJlc3NTcGFjaW5nQXRUb3BPZlBhZ2VcIiwgb3B0aW9uczIuc3VwcHJlc3NTcGFjaW5nQXRUb3BPZlBhZ2UpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnN1cHByZXNzVG9wU3BhY2luZ1dQKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzdXBwcmVzc1RvcFNwYWNpbmdXUFwiLCBvcHRpb25zMi5zdXBwcmVzc1RvcFNwYWNpbmdXUCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3VwcHJlc3NTcEJmQWZ0ZXJQZ0Jyaykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c3VwcHJlc3NTcEJmQWZ0ZXJQZ0Jya1wiLCBvcHRpb25zMi5zdXBwcmVzc1NwQmZBZnRlclBnQnJrKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5zd2FwQm9yZGVyc0ZhY2luZ1BhZ2VzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzd2FwQm9yZGVyc0ZhY2luZ1BhZ2VzXCIsIG9wdGlvbnMyLnN3YXBCb3JkZXJzRmFjaW5nUGFnZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmNvbnZlcnRNYWlsTWVyZ2VFc2MpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmNvbnZNYWlsTWVyZ2VFc2NcIiwgb3B0aW9uczIuY29udmVydE1haWxNZXJnZUVzYykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudHJ1bmNhdGVGb250SGVpZ2h0c0xpa2VXUDYpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnRydW5jYXRlRm9udEhlaWdodHNMaWtlV1A2XCIsIG9wdGlvbnMyLnRydW5jYXRlRm9udEhlaWdodHNMaWtlV1A2KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5tYWNXb3JkU21hbGxDYXBzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzptd1NtYWxsQ2Fwc1wiLCBvcHRpb25zMi5tYWNXb3JkU21hbGxDYXBzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51c2VQcmludGVyTWV0cmljcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXNlUHJpbnRlck1ldHJpY3NcIiwgb3B0aW9uczIudXNlUHJpbnRlck1ldHJpY3MpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90U3VwcHJlc3NQYXJhZ3JhcGhCb3JkZXJzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFN1cHByZXNzUGFyYWdyYXBoQm9yZGVyc1wiLCBvcHRpb25zMi5kb05vdFN1cHByZXNzUGFyYWdyYXBoQm9yZGVycykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIud3JhcFRyYWlsU3BhY2VzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp3cmFwVHJhaWxTcGFjZXNcIiwgb3B0aW9uczIud3JhcFRyYWlsU3BhY2VzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mb290bm90ZUxheW91dExpa2VXVzgpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmZvb3Rub3RlTGF5b3V0TGlrZVdXOFwiLCBvcHRpb25zMi5mb290bm90ZUxheW91dExpa2VXVzgpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNoYXBlTGF5b3V0TGlrZVdXOCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6c2hhcGVMYXlvdXRMaWtlV1c4XCIsIG9wdGlvbnMyLnNoYXBlTGF5b3V0TGlrZVdXOCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYWxpZ25UYWJsZXNSb3dCeVJvdykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YWxpZ25UYWJsZXNSb3dCeVJvd1wiLCBvcHRpb25zMi5hbGlnblRhYmxlc1Jvd0J5Um93KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5mb3JnZXRMYXN0VGFiQWxpZ25tZW50KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpmb3JnZXRMYXN0VGFiQWxpZ25tZW50XCIsIG9wdGlvbnMyLmZvcmdldExhc3RUYWJBbGlnbm1lbnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmFkanVzdExpbmVIZWlnaHRJblRhYmxlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzphZGp1c3RMaW5lSGVpZ2h0SW5UYWJsZVwiLCBvcHRpb25zMi5hZGp1c3RMaW5lSGVpZ2h0SW5UYWJsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYXV0b1NwYWNlTGlrZVdvcmQ5NSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YXV0b1NwYWNlTGlrZVdvcmQ5NVwiLCBvcHRpb25zMi5hdXRvU3BhY2VMaWtlV29yZDk1KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5ub1NwYWNlUmFpc2VMb3dlcikge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bm9TcGFjZVJhaXNlTG93ZXJcIiwgb3B0aW9uczIubm9TcGFjZVJhaXNlTG93ZXIpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90VXNlSFRNTFBhcmFncmFwaEF1dG9TcGFjaW5nKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFVzZUhUTUxQYXJhZ3JhcGhBdXRvU3BhY2luZ1wiLCBvcHRpb25zMi5kb05vdFVzZUhUTUxQYXJhZ3JhcGhBdXRvU3BhY2luZykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubGF5b3V0UmF3VGFibGVXaWR0aCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bGF5b3V0UmF3VGFibGVXaWR0aFwiLCBvcHRpb25zMi5sYXlvdXRSYXdUYWJsZVdpZHRoKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5sYXlvdXRUYWJsZVJvd3NBcGFydCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6bGF5b3V0VGFibGVSb3dzQXBhcnRcIiwgb3B0aW9uczIubGF5b3V0VGFibGVSb3dzQXBhcnQpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVzZVdvcmQ5N0xpbmVCcmVha1J1bGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1c2VXb3JkOTdMaW5lQnJlYWtSdWxlc1wiLCBvcHRpb25zMi51c2VXb3JkOTdMaW5lQnJlYWtSdWxlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZG9Ob3RCcmVha1dyYXBwZWRUYWJsZXMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90QnJlYWtXcmFwcGVkVGFibGVzXCIsIG9wdGlvbnMyLmRvTm90QnJlYWtXcmFwcGVkVGFibGVzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdFNuYXBUb0dyaWRJbkNlbGwpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90U25hcFRvR3JpZEluQ2VsbFwiLCBvcHRpb25zMi5kb05vdFNuYXBUb0dyaWRJbkNlbGwpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnNlbGVjdEZpZWxkV2l0aEZpcnN0T3JMYXN0Q2hhcmFjdGVyKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzZWxlY3RGbGRXaXRoRmlyc3RPckxhc3RDaGFyXCIsIG9wdGlvbnMyLnNlbGVjdEZpZWxkV2l0aEZpcnN0T3JMYXN0Q2hhcmFjdGVyKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5hcHBseUJyZWFraW5nUnVsZXMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmFwcGx5QnJlYWtpbmdSdWxlc1wiLCBvcHRpb25zMi5hcHBseUJyZWFraW5nUnVsZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90V3JhcFRleHRXaXRoUHVuY3R1YXRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90V3JhcFRleHRXaXRoUHVuY3RcIiwgb3B0aW9uczIuZG9Ob3RXcmFwVGV4dFdpdGhQdW5jdHVhdGlvbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZG9Ob3RVc2VFYXN0QXNpYW5CcmVha1J1bGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFVzZUVhc3RBc2lhbkJyZWFrUnVsZXNcIiwgb3B0aW9uczIuZG9Ob3RVc2VFYXN0QXNpYW5CcmVha1J1bGVzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51c2VXb3JkMjAwMlRhYmxlU3R5bGVSdWxlcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXNlV29yZDIwMDJUYWJsZVN0eWxlUnVsZXNcIiwgb3B0aW9uczIudXNlV29yZDIwMDJUYWJsZVN0eWxlUnVsZXMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmdyb3dBdXRvZml0KSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpncm93QXV0b2ZpdFwiLCBvcHRpb25zMi5ncm93QXV0b2ZpdCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlRkVMYXlvdXQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVzZUZFTGF5b3V0XCIsIG9wdGlvbnMyLnVzZUZFTGF5b3V0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51c2VOb3JtYWxTdHlsZUZvckxpc3QpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVzZU5vcm1hbFN0eWxlRm9yTGlzdFwiLCBvcHRpb25zMi51c2VOb3JtYWxTdHlsZUZvckxpc3QpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90VXNlSW5kZW50QXNOdW1iZXJpbmdUYWJTdG9wKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdFVzZUluZGVudEFzTnVtYmVyaW5nVGFiU3RvcFwiLCBvcHRpb25zMi5kb05vdFVzZUluZGVudEFzTnVtYmVyaW5nVGFiU3RvcCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlQWx0ZXJuYXRlRWFzdEFzaWFuTGluZUJyZWFrUnVsZXMpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVzZUFsdEtpbnNva3VMaW5lQnJlYWtSdWxlc1wiLCBvcHRpb25zMi51c2VBbHRlcm5hdGVFYXN0QXNpYW5MaW5lQnJlYWtSdWxlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYWxsb3dTcGFjZU9mU2FtZVN0eWxlSW5UYWJsZSkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YWxsb3dTcGFjZU9mU2FtZVN0eWxlSW5UYWJsZVwiLCBvcHRpb25zMi5hbGxvd1NwYWNlT2ZTYW1lU3R5bGVJblRhYmxlKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdFN1cHByZXNzSW5kZW50YXRpb24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90U3VwcHJlc3NJbmRlbnRhdGlvblwiLCBvcHRpb25zMi5kb05vdFN1cHByZXNzSW5kZW50YXRpb24pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90QXV0b2ZpdENvbnN0cmFpbmVkVGFibGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdEF1dG9maXRDb25zdHJhaW5lZFRhYmxlc1wiLCBvcHRpb25zMi5kb05vdEF1dG9maXRDb25zdHJhaW5lZFRhYmxlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuYXV0b2ZpdFRvRmlyc3RGaXhlZFdpZHRoQ2VsbCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6YXV0b2ZpdFRvRmlyc3RGaXhlZFdpZHRoQ2VsbFwiLCBvcHRpb25zMi5hdXRvZml0VG9GaXJzdEZpeGVkV2lkdGhDZWxsKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi51bmRlcmxpbmVUYWJJbk51bWJlcmluZ0xpc3QpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVuZGVybGluZVRhYkluTnVtTGlzdFwiLCBvcHRpb25zMi51bmRlcmxpbmVUYWJJbk51bWJlcmluZ0xpc3QpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRpc3BsYXlIYW5ndWxGaXhlZFdpZHRoKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkaXNwbGF5SGFuZ3VsRml4ZWRXaWR0aFwiLCBvcHRpb25zMi5kaXNwbGF5SGFuZ3VsRml4ZWRXaWR0aCkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc3BsaXRQZ0JyZWFrQW5kUGFyYU1hcmspIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnNwbGl0UGdCcmVha0FuZFBhcmFNYXJrXCIsIG9wdGlvbnMyLnNwbGl0UGdCcmVha0FuZFBhcmFNYXJrKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kb05vdFZlcnRpY2FsbHlBbGlnbkNlbGxXaXRoU3ApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRvTm90VmVydEFsaWduQ2VsbFdpdGhTcFwiLCBvcHRpb25zMi5kb05vdFZlcnRpY2FsbHlBbGlnbkNlbGxXaXRoU3ApKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmRvTm90QnJlYWtDb25zdHJhaW5lZEZvcmNlZFRhYmxlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpkb05vdEJyZWFrQ29uc3RyYWluZWRGb3JjZWRUYWJsZVwiLCBvcHRpb25zMi5kb05vdEJyZWFrQ29uc3RyYWluZWRGb3JjZWRUYWJsZSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuaWdub3JlVmVydGljYWxBbGlnbm1lbnRJblRleHRib3hlcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6ZG9Ob3RWZXJ0QWxpZ25JblR4YnhcIiwgb3B0aW9uczIuaWdub3JlVmVydGljYWxBbGlnbm1lbnRJblRleHRib3hlcykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIudXNlQW5zaUtlcm5pbmdQYWlycykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6dXNlQW5zaUtlcm5pbmdQYWlyc1wiLCBvcHRpb25zMi51c2VBbnNpS2VybmluZ1BhaXJzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jYWNoZWRDb2x1bW5CYWxhbmNlKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpjYWNoZWRDb2xCYWxhbmNlXCIsIG9wdGlvbnMyLmNhY2hlZENvbHVtbkJhbGFuY2UpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFNldHRpbmdzQXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwge1xuICAgICAgd3BjOiBcInhtbG5zOndwY1wiLFxuICAgICAgbWM6IFwieG1sbnM6bWNcIixcbiAgICAgIG86IFwieG1sbnM6b1wiLFxuICAgICAgcjogXCJ4bWxuczpyXCIsXG4gICAgICBtOiBcInhtbG5zOm1cIixcbiAgICAgIHY6IFwieG1sbnM6dlwiLFxuICAgICAgd3AxNDogXCJ4bWxuczp3cDE0XCIsXG4gICAgICB3cDogXCJ4bWxuczp3cFwiLFxuICAgICAgdzEwOiBcInhtbG5zOncxMFwiLFxuICAgICAgdzogXCJ4bWxuczp3XCIsXG4gICAgICB3MTQ6IFwieG1sbnM6dzE0XCIsXG4gICAgICB3MTU6IFwieG1sbnM6dzE1XCIsXG4gICAgICB3cGc6IFwieG1sbnM6d3BnXCIsXG4gICAgICB3cGk6IFwieG1sbnM6d3BpXCIsXG4gICAgICB3bmU6IFwieG1sbnM6d25lXCIsXG4gICAgICB3cHM6IFwieG1sbnM6d3BzXCIsXG4gICAgICBJZ25vcmFibGU6IFwibWM6SWdub3JhYmxlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU2V0dGluZ3MgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBzdXBlcihcInc6c2V0dGluZ3NcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgU2V0dGluZ3NBdHRyaWJ1dGVzKHtcbiAgICAgICAgd3BjOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0NhbnZhc1wiLFxuICAgICAgICBtYzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvbWFya3VwLWNvbXBhdGliaWxpdHkvMjAwNlwiLFxuICAgICAgICBvOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZVwiLFxuICAgICAgICByOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHNcIixcbiAgICAgICAgbTogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9tYXRoXCIsXG4gICAgICAgIHY6IFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWxcIixcbiAgICAgICAgd3AxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdEcmF3aW5nXCIsXG4gICAgICAgIHdwOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi93b3JkcHJvY2Vzc2luZ0RyYXdpbmdcIixcbiAgICAgICAgdzEwOiBcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmRcIixcbiAgICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcbiAgICAgICAgdzE0OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIixcbiAgICAgICAgdzE1OiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMi93b3JkbWxcIixcbiAgICAgICAgd3BnOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ0dyb3VwXCIsXG4gICAgICAgIHdwaTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZHByb2Nlc3NpbmdJbmtcIixcbiAgICAgICAgd25lOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAwNi93b3JkbWxcIixcbiAgICAgICAgd3BzOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkcHJvY2Vzc2luZ1NoYXBlXCIsXG4gICAgICAgIElnbm9yYWJsZTogXCJ3MTQgdzE1IHdwMTRcIlxuICAgICAgfSlcbiAgICApO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OmRpc3BsYXlCYWNrZ3JvdW5kU2hhcGVcIiwgdHJ1ZSkpO1xuICAgIGlmIChvcHRpb25zMi50cmFja1JldmlzaW9ucyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp0cmFja1JldmlzaW9uc1wiLCBvcHRpb25zMi50cmFja1JldmlzaW9ucykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZXZlbkFuZE9kZEhlYWRlcnMgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IE9uT2ZmRWxlbWVudChcInc6ZXZlbkFuZE9kZEhlYWRlcnNcIiwgb3B0aW9uczIuZXZlbkFuZE9kZEhlYWRlcnMpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVwZGF0ZUZpZWxkcyAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzp1cGRhdGVGaWVsZHNcIiwgb3B0aW9uczIudXBkYXRlRmllbGRzKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5kZWZhdWx0VGFiU3RvcCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgTnVtYmVyVmFsdWVFbGVtZW50KFwidzpkZWZhdWx0VGFiU3RvcFwiLCBvcHRpb25zMi5kZWZhdWx0VGFiU3RvcCkpO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBDb21wYXRpYmlsaXR5KF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIChfYSA9IG9wdGlvbnMyLmNvbXBhdGliaWxpdHkpICE9IG51bGwgPyBfYSA6IHt9KSwge1xuICAgICAgICB2ZXJzaW9uOiAoX2QgPSAoX2MgPSAoX2IgPSBvcHRpb25zMi5jb21wYXRpYmlsaXR5KSA9PSBudWxsID8gdm9pZCAwIDogX2IudmVyc2lvbikgIT0gbnVsbCA/IF9jIDogb3B0aW9uczIuY29tcGF0aWJpbGl0eU1vZGVWZXJzaW9uKSAhPSBudWxsID8gX2QgOiAxNVxuICAgICAgfSkpXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgQ29tcG9uZW50QXR0cmlidXRlcyBleHRlbmRzIFhtbEF0dHJpYnV0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInhtbEtleXNcIiwgeyB2YWw6IFwidzp2YWxcIiB9KTtcbiAgfVxufVxuY2xhc3MgTmFtZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3Om5hbWVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbXBvbmVudEF0dHJpYnV0ZXMoeyB2YWw6IHZhbHVlIH0pKTtcbiAgfVxufVxuY2xhc3MgVWlQcmlvcml0eSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoXCJ3OnVpUHJpb3JpdHlcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENvbXBvbmVudEF0dHJpYnV0ZXMoeyB2YWw6IGRlY2ltYWxOdW1iZXIodmFsdWUpIH0pKTtcbiAgfVxufVxuY2xhc3MgU3R5bGVBdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICB0eXBlOiBcInc6dHlwZVwiLFxuICAgICAgc3R5bGVJZDogXCJ3OnN0eWxlSWRcIixcbiAgICAgIGRlZmF1bHQ6IFwidzpkZWZhdWx0XCIsXG4gICAgICBjdXN0b21TdHlsZTogXCJ3OmN1c3RvbVN0eWxlXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgU3R5bGUyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoYXR0cmlidXRlcywgb3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6c3R5bGVcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFN0eWxlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSk7XG4gICAgaWYgKG9wdGlvbnMyLm5hbWUpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBOYW1lKG9wdGlvbnMyLm5hbWUpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmJhc2VkT24pIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHJpbmdWYWx1ZUVsZW1lbnQoXCJ3OmJhc2VkT25cIiwgb3B0aW9uczIuYmFzZWRPbikpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIubmV4dCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ1ZhbHVlRWxlbWVudChcInc6bmV4dFwiLCBvcHRpb25zMi5uZXh0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5saW5rKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RyaW5nVmFsdWVFbGVtZW50KFwidzpsaW5rXCIsIG9wdGlvbnMyLmxpbmspKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVpUHJpb3JpdHkgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFVpUHJpb3JpdHkob3B0aW9uczIudWlQcmlvcml0eSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuc2VtaUhpZGRlbiAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpzZW1pSGlkZGVuXCIsIG9wdGlvbnMyLnNlbWlIaWRkZW4pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnVuaGlkZVdoZW5Vc2VkICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBPbk9mZkVsZW1lbnQoXCJ3OnVuaGlkZVdoZW5Vc2VkXCIsIG9wdGlvbnMyLnVuaGlkZVdoZW5Vc2VkKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5xdWlja0Zvcm1hdCAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgT25PZmZFbGVtZW50KFwidzpxRm9ybWF0XCIsIG9wdGlvbnMyLnF1aWNrRm9ybWF0KSk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBTdHlsZUZvclBhcmFncmFwaCBleHRlbmRzIFN0eWxlMiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoeyB0eXBlOiBcInBhcmFncmFwaFwiLCBzdHlsZUlkOiBvcHRpb25zMi5pZCB9LCBvcHRpb25zMik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInBhcmFncmFwaFByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJ1blByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzID0gbmV3IFBhcmFncmFwaFByb3BlcnRpZXMob3B0aW9uczIucGFyYWdyYXBoKTtcbiAgICB0aGlzLnJ1blByb3BlcnRpZXMgPSBuZXcgUnVuUHJvcGVydGllcyhvcHRpb25zMi5ydW4pO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllcyk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzKTtcbiAgfVxufVxuY2xhc3MgU3R5bGVGb3JDaGFyYWN0ZXIgZXh0ZW5kcyBTdHlsZTIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFxuICAgICAgeyB0eXBlOiBcImNoYXJhY3RlclwiLCBzdHlsZUlkOiBvcHRpb25zMi5pZCB9LFxuICAgICAgX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICB1aVByaW9yaXR5OiA5OSxcbiAgICAgICAgdW5oaWRlV2hlblVzZWQ6IHRydWVcbiAgICAgIH0sIG9wdGlvbnMyKVxuICAgICk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJ1blByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5ydW5Qcm9wZXJ0aWVzID0gbmV3IFJ1blByb3BlcnRpZXMob3B0aW9uczIucnVuKTtcbiAgICB0aGlzLnJvb3QucHVzaCh0aGlzLnJ1blByb3BlcnRpZXMpO1xuICB9XG59XG5jbGFzcyBIZWFkaW5nU3R5bGUgZXh0ZW5kcyBTdHlsZUZvclBhcmFncmFwaCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgYmFzZWRPbjogXCJOb3JtYWxcIixcbiAgICAgIG5leHQ6IFwiTm9ybWFsXCIsXG4gICAgICBxdWlja0Zvcm1hdDogdHJ1ZVxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIFRpdGxlU3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIlRpdGxlXCIsXG4gICAgICBuYW1lOiBcIlRpdGxlXCJcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBIZWFkaW5nMVN0eWxlIGV4dGVuZHMgSGVhZGluZ1N0eWxlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBpZDogXCJIZWFkaW5nMVwiLFxuICAgICAgbmFtZTogXCJIZWFkaW5nIDFcIlxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIEhlYWRpbmcyU3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIkhlYWRpbmcyXCIsXG4gICAgICBuYW1lOiBcIkhlYWRpbmcgMlwiXG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgSGVhZGluZzNTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiSGVhZGluZzNcIixcbiAgICAgIG5hbWU6IFwiSGVhZGluZyAzXCJcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBIZWFkaW5nNFN0eWxlIGV4dGVuZHMgSGVhZGluZ1N0eWxlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBpZDogXCJIZWFkaW5nNFwiLFxuICAgICAgbmFtZTogXCJIZWFkaW5nIDRcIlxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIEhlYWRpbmc1U3R5bGUgZXh0ZW5kcyBIZWFkaW5nU3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIkhlYWRpbmc1XCIsXG4gICAgICBuYW1lOiBcIkhlYWRpbmcgNVwiXG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgSGVhZGluZzZTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiSGVhZGluZzZcIixcbiAgICAgIG5hbWU6IFwiSGVhZGluZyA2XCJcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBTdHJvbmdTdHlsZSBleHRlbmRzIEhlYWRpbmdTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiU3Ryb25nXCIsXG4gICAgICBuYW1lOiBcIlN0cm9uZ1wiXG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgTGlzdFBhcmFncmFwaCBleHRlbmRzIFN0eWxlRm9yUGFyYWdyYXBoIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBpZDogXCJMaXN0UGFyYWdyYXBoXCIsXG4gICAgICBuYW1lOiBcIkxpc3QgUGFyYWdyYXBoXCIsXG4gICAgICBiYXNlZE9uOiBcIk5vcm1hbFwiLFxuICAgICAgcXVpY2tGb3JtYXQ6IHRydWVcbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVRleHQgZXh0ZW5kcyBTdHlsZUZvclBhcmFncmFwaCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiRm9vdG5vdGVUZXh0XCIsXG4gICAgICBuYW1lOiBcImZvb3Rub3RlIHRleHRcIixcbiAgICAgIGxpbms6IFwiRm9vdG5vdGVUZXh0Q2hhclwiLFxuICAgICAgYmFzZWRPbjogXCJOb3JtYWxcIixcbiAgICAgIHVpUHJpb3JpdHk6IDk5LFxuICAgICAgc2VtaUhpZGRlbjogdHJ1ZSxcbiAgICAgIHVuaGlkZVdoZW5Vc2VkOiB0cnVlLFxuICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgIHNwYWNpbmc6IHtcbiAgICAgICAgICBhZnRlcjogMCxcbiAgICAgICAgICBsaW5lOiAyNDAsXG4gICAgICAgICAgbGluZVJ1bGU6IExpbmVSdWxlVHlwZS5BVVRPXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydW46IHtcbiAgICAgICAgc2l6ZTogMjBcbiAgICAgIH1cbiAgICB9LCBvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVJlZmVyZW5jZVN0eWxlIGV4dGVuZHMgU3R5bGVGb3JDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGlkOiBcIkZvb3Rub3RlUmVmZXJlbmNlXCIsXG4gICAgICBuYW1lOiBcImZvb3Rub3RlIHJlZmVyZW5jZVwiLFxuICAgICAgYmFzZWRPbjogXCJEZWZhdWx0UGFyYWdyYXBoRm9udFwiLFxuICAgICAgc2VtaUhpZGRlbjogdHJ1ZSxcbiAgICAgIHJ1bjoge1xuICAgICAgICBzdXBlclNjcmlwdDogdHJ1ZVxuICAgICAgfVxuICAgIH0sIG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIEZvb3Rub3RlVGV4dENoYXIgZXh0ZW5kcyBTdHlsZUZvckNoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiRm9vdG5vdGVUZXh0Q2hhclwiLFxuICAgICAgbmFtZTogXCJGb290bm90ZSBUZXh0IENoYXJcIixcbiAgICAgIGJhc2VkT246IFwiRGVmYXVsdFBhcmFncmFwaEZvbnRcIixcbiAgICAgIGxpbms6IFwiRm9vdG5vdGVUZXh0XCIsXG4gICAgICBzZW1pSGlkZGVuOiB0cnVlLFxuICAgICAgcnVuOiB7XG4gICAgICAgIHNpemU6IDIwXG4gICAgICB9XG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgSHlwZXJsaW5rU3R5bGUgZXh0ZW5kcyBTdHlsZUZvckNoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgc3VwZXIoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgaWQ6IFwiSHlwZXJsaW5rXCIsXG4gICAgICBuYW1lOiBcIkh5cGVybGlua1wiLFxuICAgICAgYmFzZWRPbjogXCJEZWZhdWx0UGFyYWdyYXBoRm9udFwiLFxuICAgICAgcnVuOiB7XG4gICAgICAgIGNvbG9yOiBcIjA1NjNDMVwiLFxuICAgICAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgICB0eXBlOiBVbmRlcmxpbmVUeXBlLlNJTkdMRVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgb3B0aW9uczIpKTtcbiAgfVxufVxuY2xhc3MgU3R5bGVzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6c3R5bGVzXCIpO1xuICAgIGlmIChvcHRpb25zMi5pbml0aWFsU3R5bGVzKSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChvcHRpb25zMi5pbml0aWFsU3R5bGVzKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLmltcG9ydGVkU3R5bGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHN0eWxlIG9mIG9wdGlvbnMyLmltcG9ydGVkU3R5bGVzKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMyLnBhcmFncmFwaFN0eWxlcykge1xuICAgICAgZm9yIChjb25zdCBzdHlsZSBvZiBvcHRpb25zMi5wYXJhZ3JhcGhTdHlsZXMpIHtcbiAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0eWxlRm9yUGFyYWdyYXBoKHN0eWxlKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5jaGFyYWN0ZXJTdHlsZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgc3R5bGUgb2Ygb3B0aW9uczIuY2hhcmFjdGVyU3R5bGVzKSB7XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTdHlsZUZvckNoYXJhY3RlcihzdHlsZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY2xhc3MgUGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6cFByRGVmYXVsdFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUGFyYWdyYXBoUHJvcGVydGllcyhvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBSdW5Qcm9wZXJ0aWVzRGVmYXVsdHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpyUHJEZWZhdWx0XCIpO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBSdW5Qcm9wZXJ0aWVzKG9wdGlvbnMyKSk7XG4gIH1cbn1cbmNsYXNzIERvY3VtZW50RGVmYXVsdHMgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzpkb2NEZWZhdWx0c1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicnVuUHJvcGVydGllc0RlZmF1bHRzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHNcIik7XG4gICAgdGhpcy5ydW5Qcm9wZXJ0aWVzRGVmYXVsdHMgPSBuZXcgUnVuUHJvcGVydGllc0RlZmF1bHRzKG9wdGlvbnMyLnJ1bik7XG4gICAgdGhpcy5wYXJhZ3JhcGhQcm9wZXJ0aWVzRGVmYXVsdHMgPSBuZXcgUGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzKG9wdGlvbnMyLnBhcmFncmFwaCk7XG4gICAgdGhpcy5yb290LnB1c2godGhpcy5ydW5Qcm9wZXJ0aWVzRGVmYXVsdHMpO1xuICAgIHRoaXMucm9vdC5wdXNoKHRoaXMucGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzKTtcbiAgfVxufVxuY2xhc3MgRXh0ZXJuYWxTdHlsZXNGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbmV3IFN0eWxlIGJhc2VkIG9uIHRoZSBnaXZlbiBzdHlsZXMuXG4gICAqIFBhcnNlcyB0aGUgc3R5bGVzIGFuZCBjb252ZXJ0IHRoZW0gdG8gWG1sQ29tcG9uZW50LlxuICAgKiBFeGFtcGxlIGNvbnRlbnQgZnJvbSBzdHlsZXMueG1sOlxuICAgKiA8P3htbCB2ZXJzaW9uPVwiMS4wXCI+XG4gICAqIDx3OnN0eWxlcyB4bWxuczptYz1cInNvbWUgc2NoZW1hXCIgLi4uPlxuICAgKlxuICAgKiAgIDx3OnN0eWxlIHc6dHlwZT1cInBhcmFncmFwaFwiIHc6c3R5bGVJZD1cIkhlYWRpbmcxXCI+XG4gICAqICAgICAgICAgICA8dzpuYW1lIHc6dmFsPVwiaGVhZGluZyAxXCIvPlxuICAgKiAgICAgICAgICAgLi4uLi5cbiAgICogICA8L3c6c3R5bGU+XG4gICAqXG4gICAqICAgPHc6c3R5bGUgdzp0eXBlPVwicGFyYWdyYXBoXCIgdzpzdHlsZUlkPVwiSGVhZGluZzJcIj5cbiAgICogICAgICAgICAgIDx3Om5hbWUgdzp2YWw9XCJoZWFkaW5nIDJcIi8+XG4gICAqICAgICAgICAgICAuLi4uLlxuICAgKiAgIDwvdzpzdHlsZT5cbiAgICpcbiAgICogICA8dzpkb2NEZWZhdWx0cz5PciBhbnkgb3RoZXIgZWxlbWVudCB3aWxsIGJlIHBhcnNlZCB0bzwvdzpkb2NEZWZhdWx0cz5cbiAgICpcbiAgICogPC93OnN0eWxlcz5cbiAgICpcbiAgICogQHBhcmFtIGV4dGVybmFsU3R5bGVzIGNvbnRleHQgZnJvbSBzdHlsZXMueG1sXG4gICAqL1xuICBuZXdJbnN0YW5jZSh4bWxEYXRhKSB7XG4gICAgY29uc3QgeG1sT2JqID0gbGliLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IGZhbHNlIH0pO1xuICAgIGxldCBzdHlsZXNYbWxFbGVtZW50O1xuICAgIGZvciAoY29uc3QgeG1sRWxtIG9mIHhtbE9iai5lbGVtZW50cyB8fCBbXSkge1xuICAgICAgaWYgKHhtbEVsbS5uYW1lID09PSBcInc6c3R5bGVzXCIpIHtcbiAgICAgICAgc3R5bGVzWG1sRWxlbWVudCA9IHhtbEVsbTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlc1htbEVsZW1lbnQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBmaW5kIHN0eWxlcyBlbGVtZW50XCIpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZXNFbGVtZW50cyA9IHN0eWxlc1htbEVsZW1lbnQuZWxlbWVudHMgfHwgW107XG4gICAgY29uc3QgaW1wb3J0ZWRTdHlsZSA9IG5ldyBTdHlsZXMoe1xuICAgICAgaW5pdGlhbFN0eWxlczogbmV3IEltcG9ydGVkUm9vdEVsZW1lbnRBdHRyaWJ1dGVzKHN0eWxlc1htbEVsZW1lbnQuYXR0cmlidXRlcyksXG4gICAgICBpbXBvcnRlZFN0eWxlczogc3R5bGVzRWxlbWVudHMubWFwKChjaGlsZEVsbSkgPT4gY29udmVydFRvWG1sQ29tcG9uZW50KGNoaWxkRWxtKSlcbiAgICB9KTtcbiAgICByZXR1cm4gaW1wb3J0ZWRTdHlsZTtcbiAgfVxufVxuY2xhc3MgRGVmYXVsdFN0eWxlc0ZhY3Rvcnkge1xuICBuZXdJbnN0YW5jZShvcHRpb25zMiA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGRvY3VtZW50QXR0cmlidXRlcyA9IG5ldyBEb2N1bWVudEF0dHJpYnV0ZXMoe1xuICAgICAgbWM6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIixcbiAgICAgIHI6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwc1wiLFxuICAgICAgdzogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvd29yZHByb2Nlc3NpbmdtbC8yMDA2L21haW5cIixcbiAgICAgIHcxNDogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTAvd29yZG1sXCIsXG4gICAgICB3MTU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiLFxuICAgICAgSWdub3JhYmxlOiBcIncxNCB3MTVcIlxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsU3R5bGVzOiBkb2N1bWVudEF0dHJpYnV0ZXMsXG4gICAgICBpbXBvcnRlZFN0eWxlczogW1xuICAgICAgICBuZXcgRG9jdW1lbnREZWZhdWx0cygoX2EgPSBvcHRpb25zMi5kb2N1bWVudCkgIT0gbnVsbCA/IF9hIDoge30pLFxuICAgICAgICBuZXcgVGl0bGVTdHlsZShfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcnVuOiB7XG4gICAgICAgICAgICBzaXplOiA1NlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIudGl0bGUpKSxcbiAgICAgICAgbmV3IEhlYWRpbmcxU3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXG4gICAgICAgICAgICBzaXplOiAzMlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzEpKSxcbiAgICAgICAgbmV3IEhlYWRpbmcyU3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXG4gICAgICAgICAgICBzaXplOiAyNlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzIpKSxcbiAgICAgICAgbmV3IEhlYWRpbmczU3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMUY0RDc4XCIsXG4gICAgICAgICAgICBzaXplOiAyNFxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzMpKSxcbiAgICAgICAgbmV3IEhlYWRpbmc0U3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMkU3NEI1XCIsXG4gICAgICAgICAgICBpdGFsaWNzOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zMi5oZWFkaW5nNCkpLFxuICAgICAgICBuZXcgSGVhZGluZzVTdHlsZShfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcnVuOiB7XG4gICAgICAgICAgICBjb2xvcjogXCIyRTc0QjVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9uczIuaGVhZGluZzUpKSxcbiAgICAgICAgbmV3IEhlYWRpbmc2U3R5bGUoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgIHJ1bjoge1xuICAgICAgICAgICAgY29sb3I6IFwiMUY0RDc4XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMyLmhlYWRpbmc2KSksXG4gICAgICAgIG5ldyBTdHJvbmdTdHlsZShfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcnVuOiB7XG4gICAgICAgICAgICBib2xkOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zMi5zdHJvbmcpKSxcbiAgICAgICAgbmV3IExpc3RQYXJhZ3JhcGgob3B0aW9uczIubGlzdFBhcmFncmFwaCB8fCB7fSksXG4gICAgICAgIG5ldyBIeXBlcmxpbmtTdHlsZShvcHRpb25zMi5oeXBlcmxpbmsgfHwge30pLFxuICAgICAgICBuZXcgRm9vdG5vdGVSZWZlcmVuY2VTdHlsZShvcHRpb25zMi5mb290bm90ZVJlZmVyZW5jZSB8fCB7fSksXG4gICAgICAgIG5ldyBGb290bm90ZVRleHQob3B0aW9uczIuZm9vdG5vdGVUZXh0IHx8IHt9KSxcbiAgICAgICAgbmV3IEZvb3Rub3RlVGV4dENoYXIob3B0aW9uczIuZm9vdG5vdGVUZXh0Q2hhciB8fCB7fSlcbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG5jb25zdCBDaGFyYWN0ZXJTZXQgPSB7XG4gIEFOU0k6IFwiMDBcIixcbiAgREVGQVVMVDogXCIwMVwiLFxuICBTWU1CT0w6IFwiMDJcIixcbiAgTUFDOiBcIjREXCIsXG4gIEpJUzogXCI4MFwiLFxuICBIQU5HVUw6IFwiODFcIixcbiAgSk9IQUI6IFwiODJcIixcbiAgR0JfMjMxMjogXCI4NlwiLFxuICBDSElORVNFQklHNTogXCI4OFwiLFxuICBHUkVFSzogXCJBMVwiLFxuICBUVVJLSVNIOiBcIkEyXCIsXG4gIFZJRVROQU1FU0U6IFwiQTNcIixcbiAgSEVCUkVXOiBcIkIxXCIsXG4gIEFSQUJJQzogXCJCMlwiLFxuICBCQUxUSUM6IFwiQkFcIixcbiAgUlVTU0lBTjogXCJDQ1wiLFxuICBUSEFJOiBcIkRFXCIsXG4gIEVBU1RFVVJPUEU6IFwiRUVcIixcbiAgT0VNOiBcIkZGXCJcbn07XG5jb25zdCBjcmVhdGVGb250UmVsYXRpb25zaGlwID0gKHsgaWQsIGZvbnRLZXksIHN1YnNldHRlZCB9LCBuYW1lKSA9PiBuZXcgQnVpbGRlckVsZW1lbnQoe1xuICBuYW1lLFxuICBhdHRyaWJ1dGVzOiBfX3NwcmVhZFZhbHVlcyh7XG4gICAgaWQ6IHsga2V5OiBcInI6aWRcIiwgdmFsdWU6IGlkIH1cbiAgfSwgZm9udEtleSA/IHsgZm9udEtleTogeyBrZXk6IFwidzpmb250S2V5XCIsIHZhbHVlOiBgeyR7Zm9udEtleX19YCB9IH0gOiB7fSksXG4gIGNoaWxkcmVuOiBbLi4uc3Vic2V0dGVkID8gW25ldyBPbk9mZkVsZW1lbnQoXCJ3OnN1YnNldHRlZFwiLCBzdWJzZXR0ZWQpXSA6IFtdXVxufSk7XG5jb25zdCBjcmVhdGVGb250ID0gKHtcbiAgbmFtZSxcbiAgYWx0TmFtZSxcbiAgcGFub3NlMSxcbiAgY2hhcnNldCxcbiAgZmFtaWx5LFxuICBub3RUcnVlVHlwZSxcbiAgcGl0Y2gsXG4gIHNpZyxcbiAgZW1iZWRSZWd1bGFyLFxuICBlbWJlZEJvbGQsXG4gIGVtYmVkSXRhbGljLFxuICBlbWJlZEJvbGRJdGFsaWNcbn0pID0+IChcbiAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfZm9udC0xLmh0bWxcbiAgbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgICBuYW1lOiBcInc6Zm9udFwiLFxuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgIG5hbWU6IHsga2V5OiBcInc6bmFtZVwiLCB2YWx1ZTogbmFtZSB9XG4gICAgfSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfYWx0TmFtZS0xLmh0bWxcbiAgICAgIC4uLmFsdE5hbWUgPyBbY3JlYXRlU3RyaW5nRWxlbWVudChcInc6YWx0TmFtZVwiLCBhbHROYW1lKV0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X3Bhbm9zZTEtMS5odG1sXG4gICAgICAuLi5wYW5vc2UxID8gW2NyZWF0ZVN0cmluZ0VsZW1lbnQoXCJ3OnBhbm9zZTFcIiwgcGFub3NlMSldIDogW10sXG4gICAgICAvLyBodHRwOi8vd3d3LmRhdHlwaWMuY29tL3NjL29veG1sL2Utd19jaGFyc2V0LTEuaHRtbFxuICAgICAgLi4uY2hhcnNldCA/IFtjcmVhdGVTdHJpbmdFbGVtZW50KFwidzpjaGFyc2V0XCIsIGNoYXJzZXQpXSA6IFtdLFxuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfZmFtaWx5LTEuaHRtbFxuICAgICAgLi4uZmFtaWx5ID8gW2NyZWF0ZVN0cmluZ0VsZW1lbnQoXCJ3OmZhbWlseVwiLCBmYW1pbHkpXSA6IFtdLFxuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfbm90VHJ1ZVR5cGUtMS5odG1sXG4gICAgICAuLi5ub3RUcnVlVHlwZSA/IFtuZXcgT25PZmZFbGVtZW50KFwidzpub3RUcnVlVHlwZVwiLCBub3RUcnVlVHlwZSldIDogW10sXG4gICAgICAuLi5waXRjaCA/IFtjcmVhdGVTdHJpbmdFbGVtZW50KFwidzpwaXRjaFwiLCBwaXRjaCldIDogW10sXG4gICAgICAvLyBodHRwOi8vd3d3LmRhdHlwaWMuY29tL3NjL29veG1sL2Utd19zaWctMS5odG1sXG4gICAgICAuLi5zaWcgPyBbXG4gICAgICAgIG5ldyBCdWlsZGVyRWxlbWVudCh7XG4gICAgICAgICAgbmFtZTogXCJ3OnNpZ1wiLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHVzYjA6IHsga2V5OiBcInc6dXNiMFwiLCB2YWx1ZTogc2lnLnVzYjAgfSxcbiAgICAgICAgICAgIHVzYjE6IHsga2V5OiBcInc6dXNiMVwiLCB2YWx1ZTogc2lnLnVzYjEgfSxcbiAgICAgICAgICAgIHVzYjI6IHsga2V5OiBcInc6dXNiMlwiLCB2YWx1ZTogc2lnLnVzYjIgfSxcbiAgICAgICAgICAgIHVzYjM6IHsga2V5OiBcInc6dXNiM1wiLCB2YWx1ZTogc2lnLnVzYjMgfSxcbiAgICAgICAgICAgIGNzYjA6IHsga2V5OiBcInc6Y3NiMFwiLCB2YWx1ZTogc2lnLmNzYjAgfSxcbiAgICAgICAgICAgIGNzYjE6IHsga2V5OiBcInc6Y3NiMVwiLCB2YWx1ZTogc2lnLmNzYjEgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2VtYmVkUmVndWxhci0xLmh0bWxcbiAgICAgIC4uLmVtYmVkUmVndWxhciA/IFtjcmVhdGVGb250UmVsYXRpb25zaGlwKGVtYmVkUmVndWxhciwgXCJ3OmVtYmVkUmVndWxhclwiKV0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2VtYmVkQm9sZC0xLmh0bWxcbiAgICAgIC4uLmVtYmVkQm9sZCA/IFtjcmVhdGVGb250UmVsYXRpb25zaGlwKGVtYmVkQm9sZCwgXCJ3OmVtYmVkQm9sZFwiKV0gOiBbXSxcbiAgICAgIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2VtYmVkSXRhbGljLTEuaHRtbFxuICAgICAgLi4uZW1iZWRJdGFsaWMgPyBbY3JlYXRlRm9udFJlbGF0aW9uc2hpcChlbWJlZEl0YWxpYywgXCJ3OmVtYmVkSXRhbGljXCIpXSA6IFtdLFxuICAgICAgLy8gaHR0cDovL3d3dy5kYXR5cGljLmNvbS9zYy9vb3htbC9lLXdfZW1iZWRCb2xkSXRhbGljLTEuaHRtbFxuICAgICAgLi4uZW1iZWRCb2xkSXRhbGljID8gW2NyZWF0ZUZvbnRSZWxhdGlvbnNoaXAoZW1iZWRCb2xkSXRhbGljLCBcInc6ZW1iZWRCb2xkSXRhbGljXCIpXSA6IFtdXG4gICAgXVxuICB9KVxuKTtcbmNvbnN0IGNyZWF0ZVJlZ3VsYXJGb250ID0gKHtcbiAgbmFtZSxcbiAgaW5kZXgsXG4gIGZvbnRLZXksXG4gIGNoYXJhY3RlclNldFxufSkgPT4gY3JlYXRlRm9udCh7XG4gIG5hbWUsXG4gIHNpZzoge1xuICAgIHVzYjA6IFwiRTAwMDJBRkZcIixcbiAgICB1c2IxOiBcIkMwMDAyNDdCXCIsXG4gICAgdXNiMjogXCIwMDAwMDAwOVwiLFxuICAgIHVzYjM6IFwiMDAwMDAwMDBcIixcbiAgICBjc2IwOiBcIjAwMDAwMUZGXCIsXG4gICAgY3NiMTogXCIwMDAwMDAwMFwiXG4gIH0sXG4gIGNoYXJzZXQ6IGNoYXJhY3RlclNldCxcbiAgZmFtaWx5OiBcImF1dG9cIixcbiAgcGl0Y2g6IFwidmFyaWFibGVcIixcbiAgZW1iZWRSZWd1bGFyOiB7XG4gICAgZm9udEtleSxcbiAgICBpZDogYHJJZCR7aW5kZXh9YFxuICB9XG59KTtcbmNvbnN0IGNyZWF0ZUZvbnRUYWJsZSA9IChmb250cykgPT4gKFxuICAvLyBodHRwczovL2MtcmV4Lm5ldC9wcm9qZWN0cy9zYW1wbGVzL29veG1sL2UxL1BhcnQ0L09PWE1MX1A0X0RPQ1hfRm9udF90b3BpY19JRDBFUk5DVS5odG1sXG4gIC8vIGh0dHA6Ly93d3cuZGF0eXBpYy5jb20vc2Mvb294bWwvZS13X2ZvbnRzLmh0bWxcbiAgbmV3IEJ1aWxkZXJFbGVtZW50KHtcbiAgICBuYW1lOiBcInc6Zm9udHNcIixcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBtYzogeyBrZXk6IFwieG1sbnM6bWNcIiwgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL21hcmt1cC1jb21wYXRpYmlsaXR5LzIwMDZcIiB9LFxuICAgICAgcjogeyBrZXk6IFwieG1sbnM6clwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzXCIgfSxcbiAgICAgIHc6IHsga2V5OiBcInhtbG5zOndcIiwgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3dvcmRwcm9jZXNzaW5nbWwvMjAwNi9tYWluXCIgfSxcbiAgICAgIHcxNDogeyBrZXk6IFwieG1sbnM6dzE0XCIsIHZhbHVlOiBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL3dvcmQvMjAxMC93b3JkbWxcIiB9LFxuICAgICAgdzE1OiB7IGtleTogXCJ4bWxuczp3MTVcIiwgdmFsdWU6IFwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2Uvd29yZC8yMDEyL3dvcmRtbFwiIH0sXG4gICAgICB3MTZjZXg6IHsga2V5OiBcInhtbG5zOncxNmNleFwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sL2NleFwiIH0sXG4gICAgICB3MTZjaWQ6IHsga2V5OiBcInhtbG5zOncxNmNpZFwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTYvd29yZG1sL2NpZFwiIH0sXG4gICAgICB3MTY6IHsga2V5OiBcInhtbG5zOncxNlwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTgvd29yZG1sXCIgfSxcbiAgICAgIHcxNnNkdGRoOiB7IGtleTogXCJ4bWxuczp3MTZzZHRkaFwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMjAvd29yZG1sL3NkdGRhdGFoYXNoXCIgfSxcbiAgICAgIHcxNnNlOiB7IGtleTogXCJ4bWxuczp3MTZzZVwiLCB2YWx1ZTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS93b3JkLzIwMTUvd29yZG1sL3N5bWV4XCIgfSxcbiAgICAgIElnbm9yYWJsZTogeyBrZXk6IFwibWM6SWdub3JhYmxlXCIsIHZhbHVlOiBcIncxNCB3MTUgdzE2c2UgdzE2Y2lkIHcxNiB3MTZjZXggdzE2c2R0ZGhcIiB9XG4gICAgfSxcbiAgICBjaGlsZHJlbjogZm9udHMubWFwKFxuICAgICAgKGZvbnQsIGkpID0+IGNyZWF0ZVJlZ3VsYXJGb250KHtcbiAgICAgICAgbmFtZTogZm9udC5uYW1lLFxuICAgICAgICBpbmRleDogaSArIDEsXG4gICAgICAgIGZvbnRLZXk6IGZvbnQuZm9udEtleVxuICAgICAgfSlcbiAgICApXG4gIH0pXG4pO1xuY2xhc3MgRm9udFdyYXBwZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmb250VGFibGVcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbGF0aW9uc2hpcHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvbnRPcHRpb25zV2l0aEtleVwiLCBbXSk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczI7XG4gICAgdGhpcy5mb250T3B0aW9uc1dpdGhLZXkgPSBvcHRpb25zMi5tYXAoKG8pID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG8pLCB7IGZvbnRLZXk6IHVuaXF1ZVV1aWQoKSB9KSk7XG4gICAgdGhpcy5mb250VGFibGUgPSBjcmVhdGVGb250VGFibGUodGhpcy5mb250T3B0aW9uc1dpdGhLZXkpO1xuICAgIHRoaXMucmVsYXRpb25zaGlwcyA9IG5ldyBSZWxhdGlvbnNoaXBzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgICAgaSArIDEsXG4gICAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9mb250XCIsXG4gICAgICAgIGBmb250cy8ke29wdGlvbnMyW2ldLm5hbWV9Lm9kdHRmYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgZ2V0IFZpZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9udFRhYmxlO1xuICB9XG4gIGdldCBSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbGF0aW9uc2hpcHM7XG4gIH1cbn1cbmNsYXNzIEZpbGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImN1cnJlbnRSZWxhdGlvbnNoaXBJZFwiLCAxKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZG9jdW1lbnRXcmFwcGVyXCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImhlYWRlcnNcIiwgW10pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL3ByZWZlci1yZWFkb25seS10eXBlXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvb3RlcnNcIiwgW10pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb3JlUHJvcGVydGllc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibnVtYmVyaW5nXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtZWRpYVwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZmlsZVJlbGF0aW9uc2hpcHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvb3Rub3Rlc1dyYXBwZXJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInNldHRpbmdzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb250ZW50VHlwZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImN1c3RvbVByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImFwcFByb3BlcnRpZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN0eWxlc1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY29tbWVudHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZvbnRXcmFwcGVyXCIpO1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgdGhpcy5jb3JlUHJvcGVydGllcyA9IG5ldyBDb3JlUHJvcGVydGllcyhfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBvcHRpb25zMiksIHtcbiAgICAgIGNyZWF0b3I6IChfYSA9IG9wdGlvbnMyLmNyZWF0b3IpICE9IG51bGwgPyBfYSA6IFwiVW4tbmFtZWRcIixcbiAgICAgIHJldmlzaW9uOiAoX2IgPSBvcHRpb25zMi5yZXZpc2lvbikgIT0gbnVsbCA/IF9iIDogMSxcbiAgICAgIGxhc3RNb2RpZmllZEJ5OiAoX2MgPSBvcHRpb25zMi5sYXN0TW9kaWZpZWRCeSkgIT0gbnVsbCA/IF9jIDogXCJVbi1uYW1lZFwiXG4gICAgfSkpO1xuICAgIHRoaXMubnVtYmVyaW5nID0gbmV3IE51bWJlcmluZyhvcHRpb25zMi5udW1iZXJpbmcgPyBvcHRpb25zMi5udW1iZXJpbmcgOiB7IGNvbmZpZzogW10gfSk7XG4gICAgdGhpcy5jb21tZW50cyA9IG5ldyBDb21tZW50cygoX2QgPSBvcHRpb25zMi5jb21tZW50cykgIT0gbnVsbCA/IF9kIDogeyBjaGlsZHJlbjogW10gfSk7XG4gICAgdGhpcy5maWxlUmVsYXRpb25zaGlwcyA9IG5ldyBSZWxhdGlvbnNoaXBzKCk7XG4gICAgdGhpcy5jdXN0b21Qcm9wZXJ0aWVzID0gbmV3IEN1c3RvbVByb3BlcnRpZXMoKF9lID0gb3B0aW9uczIuY3VzdG9tUHJvcGVydGllcykgIT0gbnVsbCA/IF9lIDogW10pO1xuICAgIHRoaXMuYXBwUHJvcGVydGllcyA9IG5ldyBBcHBQcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy5mb290bm90ZXNXcmFwcGVyID0gbmV3IEZvb3Rub3Rlc1dyYXBwZXIoKTtcbiAgICB0aGlzLmNvbnRlbnRUeXBlcyA9IG5ldyBDb250ZW50VHlwZXMoKTtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlciA9IG5ldyBEb2N1bWVudFdyYXBwZXIoeyBiYWNrZ3JvdW5kOiBvcHRpb25zMi5iYWNrZ3JvdW5kIH0pO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3Moe1xuICAgICAgY29tcGF0aWJpbGl0eU1vZGVWZXJzaW9uOiBvcHRpb25zMi5jb21wYXRhYmlsaXR5TW9kZVZlcnNpb24sXG4gICAgICBjb21wYXRpYmlsaXR5OiBvcHRpb25zMi5jb21wYXRpYmlsaXR5LFxuICAgICAgZXZlbkFuZE9kZEhlYWRlcnM6IG9wdGlvbnMyLmV2ZW5BbmRPZGRIZWFkZXJBbmRGb290ZXJzID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgdHJhY2tSZXZpc2lvbnM6IChfZiA9IG9wdGlvbnMyLmZlYXR1cmVzKSA9PSBudWxsID8gdm9pZCAwIDogX2YudHJhY2tSZXZpc2lvbnMsXG4gICAgICB1cGRhdGVGaWVsZHM6IChfZyA9IG9wdGlvbnMyLmZlYXR1cmVzKSA9PSBudWxsID8gdm9pZCAwIDogX2cudXBkYXRlRmllbGRzLFxuICAgICAgZGVmYXVsdFRhYlN0b3A6IG9wdGlvbnMyLmRlZmF1bHRUYWJTdG9wXG4gICAgfSk7XG4gICAgdGhpcy5tZWRpYSA9IG5ldyBNZWRpYSgpO1xuICAgIGlmIChvcHRpb25zMi5leHRlcm5hbFN0eWxlcykge1xuICAgICAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IG5ldyBFeHRlcm5hbFN0eWxlc0ZhY3RvcnkoKTtcbiAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzRmFjdG9yeS5uZXdJbnN0YW5jZShvcHRpb25zMi5leHRlcm5hbFN0eWxlcyk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zMi5zdHlsZXMpIHtcbiAgICAgIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBuZXcgRGVmYXVsdFN0eWxlc0ZhY3RvcnkoKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRTdHlsZXMgPSBzdHlsZXNGYWN0b3J5Lm5ld0luc3RhbmNlKG9wdGlvbnMyLnN0eWxlcy5kZWZhdWx0KTtcbiAgICAgIHRoaXMuc3R5bGVzID0gbmV3IFN0eWxlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZGVmYXVsdFN0eWxlcyksIG9wdGlvbnMyLnN0eWxlcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gbmV3IERlZmF1bHRTdHlsZXNGYWN0b3J5KCk7XG4gICAgICB0aGlzLnN0eWxlcyA9IG5ldyBTdHlsZXMoc3R5bGVzRmFjdG9yeS5uZXdJbnN0YW5jZSgpKTtcbiAgICB9XG4gICAgdGhpcy5hZGREZWZhdWx0UmVsYXRpb25zaGlwcygpO1xuICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiBvcHRpb25zMi5zZWN0aW9ucykge1xuICAgICAgdGhpcy5hZGRTZWN0aW9uKHNlY3Rpb24pO1xuICAgIH1cbiAgICBpZiAob3B0aW9uczIuZm9vdG5vdGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zMi5mb290bm90ZXMpIHtcbiAgICAgICAgdGhpcy5mb290bm90ZXNXcmFwcGVyLlZpZXcuY3JlYXRlRm9vdE5vdGUocGFyc2VGbG9hdChrZXkpLCBvcHRpb25zMi5mb290bm90ZXNba2V5XS5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZm9udFdyYXBwZXIgPSBuZXcgRm9udFdyYXBwZXIoKF9oID0gb3B0aW9uczIuZm9udHMpICE9IG51bGwgPyBfaCA6IFtdKTtcbiAgfVxuICBhZGRTZWN0aW9uKHsgaGVhZGVycyA9IHt9LCBmb290ZXJzID0ge30sIGNoaWxkcmVuLCBwcm9wZXJ0aWVzIH0pIHtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5WaWV3LkJvZHkuYWRkU2VjdGlvbihfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBwcm9wZXJ0aWVzKSwge1xuICAgICAgaGVhZGVyV3JhcHBlckdyb3VwOiB7XG4gICAgICAgIGRlZmF1bHQ6IGhlYWRlcnMuZGVmYXVsdCA/IHRoaXMuY3JlYXRlSGVhZGVyKGhlYWRlcnMuZGVmYXVsdCkgOiB2b2lkIDAsXG4gICAgICAgIGZpcnN0OiBoZWFkZXJzLmZpcnN0ID8gdGhpcy5jcmVhdGVIZWFkZXIoaGVhZGVycy5maXJzdCkgOiB2b2lkIDAsXG4gICAgICAgIGV2ZW46IGhlYWRlcnMuZXZlbiA/IHRoaXMuY3JlYXRlSGVhZGVyKGhlYWRlcnMuZXZlbikgOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICBmb290ZXJXcmFwcGVyR3JvdXA6IHtcbiAgICAgICAgZGVmYXVsdDogZm9vdGVycy5kZWZhdWx0ID8gdGhpcy5jcmVhdGVGb290ZXIoZm9vdGVycy5kZWZhdWx0KSA6IHZvaWQgMCxcbiAgICAgICAgZmlyc3Q6IGZvb3RlcnMuZmlyc3QgPyB0aGlzLmNyZWF0ZUZvb3Rlcihmb290ZXJzLmZpcnN0KSA6IHZvaWQgMCxcbiAgICAgICAgZXZlbjogZm9vdGVycy5ldmVuID8gdGhpcy5jcmVhdGVGb290ZXIoZm9vdGVycy5ldmVuKSA6IHZvaWQgMFxuICAgICAgfVxuICAgIH0pKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5WaWV3LmFkZChjaGlsZCk7XG4gICAgfVxuICB9XG4gIGNyZWF0ZUhlYWRlcihoZWFkZXIpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gbmV3IEhlYWRlcldyYXBwZXIodGhpcy5tZWRpYSwgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQrKyk7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBoZWFkZXIub3B0aW9ucy5jaGlsZHJlbikge1xuICAgICAgd3JhcHBlci5hZGQoY2hpbGQpO1xuICAgIH1cbiAgICB0aGlzLmFkZEhlYWRlclRvRG9jdW1lbnQod3JhcHBlcik7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cbiAgY3JlYXRlRm9vdGVyKGZvb3Rlcikge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgRm9vdGVyV3JhcHBlcih0aGlzLm1lZGlhLCB0aGlzLmN1cnJlbnRSZWxhdGlvbnNoaXBJZCsrKTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGZvb3Rlci5vcHRpb25zLmNoaWxkcmVuKSB7XG4gICAgICB3cmFwcGVyLmFkZChjaGlsZCk7XG4gICAgfVxuICAgIHRoaXMuYWRkRm9vdGVyVG9Eb2N1bWVudCh3cmFwcGVyKTtcbiAgICByZXR1cm4gd3JhcHBlcjtcbiAgfVxuICBhZGRIZWFkZXJUb0RvY3VtZW50KGhlYWRlciwgdHlwZSA9IEhlYWRlckZvb3RlclJlZmVyZW5jZVR5cGUuREVGQVVMVCkge1xuICAgIHRoaXMuaGVhZGVycy5wdXNoKHsgaGVhZGVyLCB0eXBlIH0pO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgaGVhZGVyLlZpZXcuUmVmZXJlbmNlSWQsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaGVhZGVyXCIsXG4gICAgICBgaGVhZGVyJHt0aGlzLmhlYWRlcnMubGVuZ3RofS54bWxgXG4gICAgKTtcbiAgICB0aGlzLmNvbnRlbnRUeXBlcy5hZGRIZWFkZXIodGhpcy5oZWFkZXJzLmxlbmd0aCk7XG4gIH1cbiAgYWRkRm9vdGVyVG9Eb2N1bWVudChmb290ZXIsIHR5cGUgPSBIZWFkZXJGb290ZXJSZWZlcmVuY2VUeXBlLkRFRkFVTFQpIHtcbiAgICB0aGlzLmZvb3RlcnMucHVzaCh7IGZvb3RlciwgdHlwZSB9KTtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIGZvb3Rlci5WaWV3LlJlZmVyZW5jZUlkLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2Zvb3RlclwiLFxuICAgICAgYGZvb3RlciR7dGhpcy5mb290ZXJzLmxlbmd0aH0ueG1sYFxuICAgICk7XG4gICAgdGhpcy5jb250ZW50VHlwZXMuYWRkRm9vdGVyKHRoaXMuZm9vdGVycy5sZW5ndGgpO1xuICB9XG4gIGFkZERlZmF1bHRSZWxhdGlvbnNoaXBzKCkge1xuICAgIHRoaXMuZmlsZVJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgMSxcbiAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudFwiLFxuICAgICAgXCJ3b3JkL2RvY3VtZW50LnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmZpbGVSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIDIsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwcy9tZXRhZGF0YS9jb3JlLXByb3BlcnRpZXNcIixcbiAgICAgIFwiZG9jUHJvcHMvY29yZS54bWxcIlxuICAgICk7XG4gICAgdGhpcy5maWxlUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAzLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2V4dGVuZGVkLXByb3BlcnRpZXNcIixcbiAgICAgIFwiZG9jUHJvcHMvYXBwLnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmZpbGVSZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIDQsXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvY3VzdG9tLXByb3BlcnRpZXNcIixcbiAgICAgIFwiZG9jUHJvcHMvY3VzdG9tLnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXG4gICAgICB0aGlzLmN1cnJlbnRSZWxhdGlvbnNoaXBJZCsrLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3N0eWxlc1wiLFxuICAgICAgXCJzdHlsZXMueG1sXCJcbiAgICApO1xuICAgIHRoaXMuZG9jdW1lbnRXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmN0aW9uYWwvaW1tdXRhYmxlLWRhdGFcbiAgICAgIHRoaXMuY3VycmVudFJlbGF0aW9uc2hpcElkKyssXG4gICAgICBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvbnVtYmVyaW5nXCIsXG4gICAgICBcIm51bWJlcmluZy54bWxcIlxuICAgICk7XG4gICAgdGhpcy5kb2N1bWVudFdyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuY3Rpb25hbC9pbW11dGFibGUtZGF0YVxuICAgICAgdGhpcy5jdXJyZW50UmVsYXRpb25zaGlwSWQrKyxcbiAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9mb290bm90ZXNcIixcbiAgICAgIFwiZm9vdG5vdGVzLnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXG4gICAgICB0aGlzLmN1cnJlbnRSZWxhdGlvbnNoaXBJZCsrLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3NldHRpbmdzXCIsXG4gICAgICBcInNldHRpbmdzLnhtbFwiXG4gICAgKTtcbiAgICB0aGlzLmRvY3VtZW50V3JhcHBlci5SZWxhdGlvbnNoaXBzLmNyZWF0ZVJlbGF0aW9uc2hpcChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jdGlvbmFsL2ltbXV0YWJsZS1kYXRhXG4gICAgICB0aGlzLmN1cnJlbnRSZWxhdGlvbnNoaXBJZCsrLFxuICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2NvbW1lbnRzXCIsXG4gICAgICBcImNvbW1lbnRzLnhtbFwiXG4gICAgKTtcbiAgfVxuICBnZXQgRG9jdW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRXcmFwcGVyO1xuICB9XG4gIGdldCBTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3R5bGVzO1xuICB9XG4gIGdldCBDb3JlUHJvcGVydGllcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb3JlUHJvcGVydGllcztcbiAgfVxuICBnZXQgTnVtYmVyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm51bWJlcmluZztcbiAgfVxuICBnZXQgTWVkaWEoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVkaWE7XG4gIH1cbiAgZ2V0IEZpbGVSZWxhdGlvbnNoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGVSZWxhdGlvbnNoaXBzO1xuICB9XG4gIGdldCBIZWFkZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlcnMubWFwKChpdGVtKSA9PiBpdGVtLmhlYWRlcik7XG4gIH1cbiAgZ2V0IEZvb3RlcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9vdGVycy5tYXAoKGl0ZW0pID0+IGl0ZW0uZm9vdGVyKTtcbiAgfVxuICBnZXQgQ29udGVudFR5cGVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRUeXBlcztcbiAgfVxuICBnZXQgQ3VzdG9tUHJvcGVydGllcygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXN0b21Qcm9wZXJ0aWVzO1xuICB9XG4gIGdldCBBcHBQcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLmFwcFByb3BlcnRpZXM7XG4gIH1cbiAgZ2V0IEZvb3ROb3RlcygpIHtcbiAgICByZXR1cm4gdGhpcy5mb290bm90ZXNXcmFwcGVyO1xuICB9XG4gIGdldCBTZXR0aW5ncygpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5ncztcbiAgfVxuICBnZXQgQ29tbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tbWVudHM7XG4gIH1cbiAgZ2V0IEZvbnRUYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5mb250V3JhcHBlcjtcbiAgfVxufVxuY2xhc3MgRmllbGRJbnN0cnVjdGlvbiBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMgPSB7fSkge1xuICAgIHN1cGVyKFwidzppbnN0clRleHRcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInByb3BlcnRpZXNcIik7XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICBsZXQgaW5zdHJ1Y3Rpb24gPSBcIlRPQ1wiO1xuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuY2FwdGlvbkxhYmVsKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcYSBcIiR7dGhpcy5wcm9wZXJ0aWVzLmNhcHRpb25MYWJlbH1cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuZW50cmllc0Zyb21Cb29rbWFyaykge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGIgXCIke3RoaXMucHJvcGVydGllcy5lbnRyaWVzRnJvbUJvb2ttYXJrfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5jYXB0aW9uTGFiZWxJbmNsdWRpbmdOdW1iZXJzKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcYyBcIiR7dGhpcy5wcm9wZXJ0aWVzLmNhcHRpb25MYWJlbEluY2x1ZGluZ051bWJlcnN9XCJgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnNlcXVlbmNlQW5kUGFnZU51bWJlcnNTZXBhcmF0b3IpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxkIFwiJHt0aGlzLnByb3BlcnRpZXMuc2VxdWVuY2VBbmRQYWdlTnVtYmVyc1NlcGFyYXRvcn1cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMudGNGaWVsZElkZW50aWZpZXIpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxmIFwiJHt0aGlzLnByb3BlcnRpZXMudGNGaWVsZElkZW50aWZpZXJ9XCJgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmh5cGVybGluaykge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXGhgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnRjRmllbGRMZXZlbFJhbmdlKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxcbCBcIiR7dGhpcy5wcm9wZXJ0aWVzLnRjRmllbGRMZXZlbFJhbmdlfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5wYWdlTnVtYmVyc0VudHJ5TGV2ZWxzUmFuZ2UpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFxuIFwiJHt0aGlzLnByb3BlcnRpZXMucGFnZU51bWJlcnNFbnRyeUxldmVsc1JhbmdlfVwiYDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5oZWFkaW5nU3R5bGVSYW5nZSkge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXG8gXCIke3RoaXMucHJvcGVydGllcy5oZWFkaW5nU3R5bGVSYW5nZX1cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuZW50cnlBbmRQYWdlTnVtYmVyU2VwYXJhdG9yKSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxccCBcIiR7dGhpcy5wcm9wZXJ0aWVzLmVudHJ5QW5kUGFnZU51bWJlclNlcGFyYXRvcn1cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuc2VxRmllbGRJZGVudGlmaWVyRm9yUHJlZml4KSB7XG4gICAgICBpbnN0cnVjdGlvbiA9IGAke2luc3RydWN0aW9ufSBcXFxccyBcIiR7dGhpcy5wcm9wZXJ0aWVzLnNlcUZpZWxkSWRlbnRpZmllckZvclByZWZpeH1cImA7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BlcnRpZXMuc3R5bGVzV2l0aExldmVscyAmJiB0aGlzLnByb3BlcnRpZXMuc3R5bGVzV2l0aExldmVscy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMucHJvcGVydGllcy5zdHlsZXNXaXRoTGV2ZWxzLm1hcCgoc2wpID0+IGAke3NsLnN0eWxlTmFtZX0sJHtzbC5sZXZlbH1gKS5qb2luKFwiLFwiKTtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFx0IFwiJHtzdHlsZXN9XCJgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnVzZUFwcGxpZWRQYXJhZ3JhcGhPdXRsaW5lTGV2ZWwpIHtcbiAgICAgIGluc3RydWN0aW9uID0gYCR7aW5zdHJ1Y3Rpb259IFxcXFx1YDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcGVydGllcy5wcmVzZXJ2ZVRhYkluRW50cmllcykge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHdgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnByZXNlcnZlTmV3TGluZUluRW50cmllcykge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHhgO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmhpZGVUYWJBbmRQYWdlTnVtYmVyc0luV2ViVmlldykge1xuICAgICAgaW5zdHJ1Y3Rpb24gPSBgJHtpbnN0cnVjdGlvbn0gXFxcXHpgO1xuICAgIH1cbiAgICB0aGlzLnJvb3QucHVzaChpbnN0cnVjdGlvbik7XG4gIH1cbn1cbmNsYXNzIFN0cnVjdHVyZWREb2N1bWVudFRhZ0NvbnRlbnQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcInc6c2R0Q29udGVudFwiKTtcbiAgfVxufVxuY2xhc3MgU3RydWN0dXJlZERvY3VtZW50VGFnUHJvcGVydGllcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGFsaWFzKSB7XG4gICAgc3VwZXIoXCJ3OnNkdFByXCIpO1xuICAgIGlmIChhbGlhcykge1xuICAgICAgdGhpcy5yb290LnB1c2gobmV3IFN0cmluZ1ZhbHVlRWxlbWVudChcInc6YWxpYXNcIiwgYWxpYXMpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFRhYmxlT2ZDb250ZW50cyBleHRlbmRzIEZpbGVDaGlsZCB7XG4gIGNvbnN0cnVjdG9yKGFsaWFzID0gXCJUYWJsZSBvZiBDb250ZW50c1wiLCBwcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIoXCJ3OnNkdFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgU3RydWN0dXJlZERvY3VtZW50VGFnUHJvcGVydGllcyhhbGlhcykpO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgU3RydWN0dXJlZERvY3VtZW50VGFnQ29udGVudCgpO1xuICAgIGNvbnN0IGJlZ2luUGFyYWdyYXBoID0gbmV3IFBhcmFncmFwaCh7XG4gICAgICBjaGlsZHJlbjogW1xuICAgICAgICBuZXcgUnVuKHtcbiAgICAgICAgICBjaGlsZHJlbjogW25ldyBCZWdpbih0cnVlKSwgbmV3IEZpZWxkSW5zdHJ1Y3Rpb24ocHJvcGVydGllcyksIG5ldyBTZXBhcmF0ZSgpXVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH0pO1xuICAgIGNvbnRlbnQuYWRkQ2hpbGRFbGVtZW50KGJlZ2luUGFyYWdyYXBoKTtcbiAgICBjb25zdCBlbmRQYXJhZ3JhcGggPSBuZXcgUGFyYWdyYXBoKHtcbiAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgIG5ldyBSdW4oe1xuICAgICAgICAgIGNoaWxkcmVuOiBbbmV3IEVuZCgpXVxuICAgICAgICB9KVxuICAgICAgXVxuICAgIH0pO1xuICAgIGNvbnRlbnQuYWRkQ2hpbGRFbGVtZW50KGVuZFBhcmFncmFwaCk7XG4gICAgdGhpcy5yb290LnB1c2goY29udGVudCk7XG4gIH1cbn1cbmNsYXNzIFN0eWxlTGV2ZWwge1xuICBjb25zdHJ1Y3RvcihzdHlsZU5hbWUsIGxldmVsKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN0eWxlTmFtZVwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibGV2ZWxcIik7XG4gICAgdGhpcy5zdHlsZU5hbWUgPSBzdHlsZU5hbWU7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB9XG59XG5jbGFzcyBIZWFkZXIyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIgPSB7IGNoaWxkcmVuOiBbXSB9KSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9wdGlvbnNcIik7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczI7XG4gIH1cbn1cbmNsYXNzIEZvb3RlcjIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMiA9IHsgY2hpbGRyZW46IFtdIH0pIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib3B0aW9uc1wiKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zMjtcbiAgfVxufVxuY2xhc3MgRm9vdE5vdGVSZWZlcmVuY2VSdW5BdHRyaWJ1dGVzIGV4dGVuZHMgWG1sQXR0cmlidXRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwieG1sS2V5c1wiLCB7XG4gICAgICBpZDogXCJ3OmlkXCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRm9vdG5vdGVSZWZlcmVuY2UgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHN1cGVyKFwidzpmb290bm90ZVJlZmVyZW5jZVwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChcbiAgICAgIG5ldyBGb290Tm90ZVJlZmVyZW5jZVJ1bkF0dHJpYnV0ZXMoe1xuICAgICAgICBpZFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBGb290bm90ZVJlZmVyZW5jZVJ1biBleHRlbmRzIFJ1biB7XG4gIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgc3VwZXIoeyBzdHlsZTogXCJGb290bm90ZVJlZmVyZW5jZVwiIH0pO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBGb290bm90ZVJlZmVyZW5jZShpZCkpO1xuICB9XG59XG5jbGFzcyBJbnNlcnRlZFRleHRSdW4gZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHN1cGVyKFwidzppbnNcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQ2hhbmdlQXR0cmlidXRlcyh7XG4gICAgICAgIGlkOiBvcHRpb25zMi5pZCxcbiAgICAgICAgYXV0aG9yOiBvcHRpb25zMi5hdXRob3IsXG4gICAgICAgIGRhdGU6IG9wdGlvbnMyLmRhdGVcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmFkZENoaWxkRWxlbWVudChuZXcgVGV4dFJ1bihvcHRpb25zMikpO1xuICB9XG59XG5jbGFzcyBEZWxldGVkUGFnZSBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpkZWxJbnN0clRleHRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IFNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XG4gICAgdGhpcy5yb290LnB1c2goXCJQQUdFXCIpO1xuICB9XG59XG5jbGFzcyBEZWxldGVkTnVtYmVyT2ZQYWdlcyBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwidzpkZWxJbnN0clRleHRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IFNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XG4gICAgdGhpcy5yb290LnB1c2goXCJOVU1QQUdFU1wiKTtcbiAgfVxufVxuY2xhc3MgRGVsZXRlZE51bWJlck9mUGFnZXNTZWN0aW9uIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXCJ3OmRlbEluc3RyVGV4dFwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgVGV4dEF0dHJpYnV0ZXMoeyBzcGFjZTogU3BhY2VUeXBlLlBSRVNFUlZFIH0pKTtcbiAgICB0aGlzLnJvb3QucHVzaChcIlNFQ1RJT05QQUdFU1wiKTtcbiAgfVxufVxuY2xhc3MgRGVsZXRlZFRleHQgZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih0ZXh0KSB7XG4gICAgc3VwZXIoXCJ3OmRlbFRleHRcIik7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IFRleHRBdHRyaWJ1dGVzKHsgc3BhY2U6IFNwYWNlVHlwZS5QUkVTRVJWRSB9KSk7XG4gICAgdGhpcy5yb290LnB1c2godGV4dCk7XG4gIH1cbn1cbmNsYXNzIERlbGV0ZWRUZXh0UnVuIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6ZGVsXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkZWxldGVkVGV4dFJ1bldyYXBwZXJcIik7XG4gICAgdGhpcy5yb290LnB1c2goXG4gICAgICBuZXcgQ2hhbmdlQXR0cmlidXRlcyh7XG4gICAgICAgIGlkOiBvcHRpb25zMi5pZCxcbiAgICAgICAgYXV0aG9yOiBvcHRpb25zMi5hdXRob3IsXG4gICAgICAgIGRhdGU6IG9wdGlvbnMyLmRhdGVcbiAgICAgIH0pXG4gICAgKTtcbiAgICB0aGlzLmRlbGV0ZWRUZXh0UnVuV3JhcHBlciA9IG5ldyBEZWxldGVkVGV4dFJ1bldyYXBwZXIob3B0aW9uczIpO1xuICAgIHRoaXMuYWRkQ2hpbGRFbGVtZW50KHRoaXMuZGVsZXRlZFRleHRSdW5XcmFwcGVyKTtcbiAgfVxufVxuY2xhc3MgRGVsZXRlZFRleHRSdW5XcmFwcGVyIGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczIpIHtcbiAgICBzdXBlcihcInc6clwiKTtcbiAgICB0aGlzLnJvb3QucHVzaChuZXcgUnVuUHJvcGVydGllcyhvcHRpb25zMikpO1xuICAgIGlmIChvcHRpb25zMi5jaGlsZHJlbikge1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBvcHRpb25zMi5jaGlsZHJlbikge1xuICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgc3dpdGNoIChjaGlsZCkge1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLkNVUlJFTlQ6XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBCZWdpbigpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IERlbGV0ZWRQYWdlKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgU2VwYXJhdGUoKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBFbmQoKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWdlTnVtYmVyLlRPVEFMX1BBR0VTOlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQmVnaW4oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWxldGVkTnVtYmVyT2ZQYWdlcygpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IFNlcGFyYXRlKCkpO1xuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgRW5kKCkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGFnZU51bWJlci5UT1RBTF9QQUdFU19JTl9TRUNUSU9OOlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgQmVnaW4oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWxldGVkTnVtYmVyT2ZQYWdlc1NlY3Rpb24oKSk7XG4gICAgICAgICAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBTZXBhcmF0ZSgpKTtcbiAgICAgICAgICAgICAgdGhpcy5yb290LnB1c2gobmV3IEVuZCgpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLnJvb3QucHVzaChuZXcgRGVsZXRlZFRleHQoY2hpbGQpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm9vdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMyLnRleHQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBEZWxldGVkVGV4dChvcHRpb25zMi50ZXh0KSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zMi5icmVhaykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zMi5icmVhazsgaSsrKSB7XG4gICAgICAgIHRoaXMucm9vdC5zcGxpY2UoMSwgMCwgbmV3IEJyZWFrJDEoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5jbGFzcyBDaGVja2JveFN5bWJvbEF0dHJpYnV0ZXMgZXh0ZW5kcyBYbWxBdHRyaWJ1dGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJ4bWxLZXlzXCIsIHtcbiAgICAgIHZhbDogXCJ3MTQ6dmFsXCIsXG4gICAgICBzeW1ib2xmb250OiBcIncxNDpmb250XCJcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgQ2hlY2tCb3hTeW1ib2xFbGVtZW50IGV4dGVuZHMgWG1sQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmFsLCBmb250KSB7XG4gICAgc3VwZXIobmFtZSk7XG4gICAgaWYgKGZvbnQpIHtcbiAgICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDaGVja2JveFN5bWJvbEF0dHJpYnV0ZXMoeyB2YWw6IHNob3J0SGV4TnVtYmVyKHZhbCksIHN5bWJvbGZvbnQ6IGZvbnQgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucHVzaChuZXcgQ2hlY2tib3hTeW1ib2xBdHRyaWJ1dGVzKHsgdmFsIH0pKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIENoZWNrQm94VXRpbCBleHRlbmRzIFhtbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMyKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICBzdXBlcihcIncxNDpjaGVja2JveFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiREVGQVVMVF9VTkNIRUNLRURfU1lNQk9MXCIsIFwiMjYxMFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiREVGQVVMVF9DSEVDS0VEX1NZTUJPTFwiLCBcIjI2MTJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIkRFRkFVTFRfRk9OVFwiLCBcIk1TIEdvdGhpY1wiKTtcbiAgICBjb25zdCB2YWx1ZSA9IChvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIuY2hlY2tlZCkgPyBcIjFcIiA6IFwiMFwiO1xuICAgIGxldCBzeW1ib2w7XG4gICAgbGV0IGZvbnQ7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENoZWNrQm94U3ltYm9sRWxlbWVudChcIncxNDpjaGVja2VkXCIsIHZhbHVlKSk7XG4gICAgc3ltYm9sID0gKChfYSA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYS52YWx1ZSkgPyAoX2IgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2IudmFsdWUgOiB0aGlzLkRFRkFVTFRfQ0hFQ0tFRF9TWU1CT0w7XG4gICAgZm9udCA9ICgoX2MgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZm9udCkgPyAoX2QgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2QuZm9udCA6IHRoaXMuREVGQVVMVF9GT05UO1xuICAgIHRoaXMucm9vdC5wdXNoKG5ldyBDaGVja0JveFN5bWJvbEVsZW1lbnQoXCJ3MTQ6Y2hlY2tlZFN0YXRlXCIsIHN5bWJvbCwgZm9udCkpO1xuICAgIHN5bWJvbCA9ICgoX2UgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudW5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZS52YWx1ZSkgPyAoX2YgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudW5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZi52YWx1ZSA6IHRoaXMuREVGQVVMVF9VTkNIRUNLRURfU1lNQk9MO1xuICAgIGZvbnQgPSAoKF9nID0gb3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLnVuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2cuZm9udCkgPyAoX2ggPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIudW5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfaC5mb250IDogdGhpcy5ERUZBVUxUX0ZPTlQ7XG4gICAgdGhpcy5yb290LnB1c2gobmV3IENoZWNrQm94U3ltYm9sRWxlbWVudChcIncxNDp1bmNoZWNrZWRTdGF0ZVwiLCBzeW1ib2wsIGZvbnQpKTtcbiAgfVxufVxuY2xhc3MgQ2hlY2tCb3ggZXh0ZW5kcyBYbWxDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zMikge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBzdXBlcihcInc6c2R0XCIpO1xuICAgIC8vIGRlZmF1bHQgdmFsdWVzIHBlciBNaWNyb3NvZnRcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiREVGQVVMVF9VTkNIRUNLRURfU1lNQk9MXCIsIFwiMjYxMFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiREVGQVVMVF9DSEVDS0VEX1NZTUJPTFwiLCBcIjI2MTJcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIkRFRkFVTFRfRk9OVFwiLCBcIk1TIEdvdGhpY1wiKTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gbmV3IFN0cnVjdHVyZWREb2N1bWVudFRhZ1Byb3BlcnRpZXMob3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLmFsaWFzKTtcbiAgICBwcm9wZXJ0aWVzLmFkZENoaWxkRWxlbWVudChuZXcgQ2hlY2tCb3hVdGlsKG9wdGlvbnMyKSk7XG4gICAgdGhpcy5yb290LnB1c2gocHJvcGVydGllcyk7XG4gICAgY29uc3QgY29udGVudCA9IG5ldyBTdHJ1Y3R1cmVkRG9jdW1lbnRUYWdDb250ZW50KCk7XG4gICAgY29uc3QgY2hlY2tlZEZvbnQgPSAoX2EgPSBvcHRpb25zMiA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9uczIuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuZm9udDtcbiAgICBjb25zdCBjaGVja2VkVGV4dCA9IChfYiA9IG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi52YWx1ZTtcbiAgICBjb25zdCB1bmNoZWNrZWRGb250ID0gKF9jID0gb3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLnVuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZm9udDtcbiAgICBjb25zdCB1bmNoZWNrZWRUZXh0ID0gKF9kID0gb3B0aW9uczIgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMyLnVuY2hlY2tlZFN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2QudmFsdWU7XG4gICAgbGV0IHN5bWJvbEZvbnQ7XG4gICAgbGV0IGNoYXI7XG4gICAgaWYgKG9wdGlvbnMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zMi5jaGVja2VkKSB7XG4gICAgICBzeW1ib2xGb250ID0gY2hlY2tlZEZvbnQgPyBjaGVja2VkRm9udCA6IHRoaXMuREVGQVVMVF9GT05UO1xuICAgICAgY2hhciA9IGNoZWNrZWRUZXh0ID8gY2hlY2tlZFRleHQgOiB0aGlzLkRFRkFVTFRfQ0hFQ0tFRF9TWU1CT0w7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN5bWJvbEZvbnQgPSB1bmNoZWNrZWRGb250ID8gdW5jaGVja2VkRm9udCA6IHRoaXMuREVGQVVMVF9GT05UO1xuICAgICAgY2hhciA9IHVuY2hlY2tlZFRleHQgPyB1bmNoZWNrZWRUZXh0IDogdGhpcy5ERUZBVUxUX1VOQ0hFQ0tFRF9TWU1CT0w7XG4gICAgfVxuICAgIGNvbnN0IGluaXRpYWxSZW5kZXJlZENoYXIgPSBuZXcgU3ltYm9sUnVuKHtcbiAgICAgIGNoYXIsXG4gICAgICBzeW1ib2xmb250OiBzeW1ib2xGb250XG4gICAgfSk7XG4gICAgY29udGVudC5hZGRDaGlsZEVsZW1lbnQoaW5pdGlhbFJlbmRlcmVkQ2hhcik7XG4gICAgdGhpcy5yb290LnB1c2goY29udGVudCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1vbmpzUmVxdWlyZShwYXRoKSB7XG4gIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGR5bmFtaWNhbGx5IHJlcXVpcmUgXCInICsgcGF0aCArICdcIi4gUGxlYXNlIGNvbmZpZ3VyZSB0aGUgZHluYW1pY1JlcXVpcmVUYXJnZXRzIG9yL2FuZCBpZ25vcmVEeW5hbWljUmVxdWlyZXMgb3B0aW9uIG9mIEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzIGFwcHJvcHJpYXRlbHkgZm9yIHRoaXMgcmVxdWlyZSBjYWxsIHRvIHdvcmsuJyk7XG59XG52YXIganN6aXBfbWluID0geyBleHBvcnRzOiB7fSB9O1xuKGZ1bmN0aW9uKG1vZHVsZTIsIGV4cG9ydHMyKSB7XG4gICFmdW5jdGlvbihlKSB7XG4gICAgbW9kdWxlMi5leHBvcnRzID0gZSgpO1xuICB9KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzKGEsIG8sIGgpIHtcbiAgICAgIGZ1bmN0aW9uIHUociwgZTIpIHtcbiAgICAgICAgaWYgKCFvW3JdKSB7XG4gICAgICAgICAgaWYgKCFhW3JdKSB7XG4gICAgICAgICAgICB2YXIgdCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgY29tbW9uanNSZXF1aXJlICYmIGNvbW1vbmpzUmVxdWlyZTtcbiAgICAgICAgICAgIGlmICghZTIgJiYgdClcbiAgICAgICAgICAgICAgcmV0dXJuIHQociwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobClcbiAgICAgICAgICAgICAgcmV0dXJuIGwociwgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgbiA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByICsgXCInXCIpO1xuICAgICAgICAgICAgdGhyb3cgbi5jb2RlID0gXCJNT0RVTEVfTk9UX0ZPVU5EXCIsIG47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpID0gb1tyXSA9IHsgZXhwb3J0czoge30gfTtcbiAgICAgICAgICBhW3JdWzBdLmNhbGwoaS5leHBvcnRzLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgICAgdmFyIHQyID0gYVtyXVsxXVtlM107XG4gICAgICAgICAgICByZXR1cm4gdSh0MiB8fCBlMyk7XG4gICAgICAgICAgfSwgaSwgaS5leHBvcnRzLCBzLCBhLCBvLCBoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb1tyXS5leHBvcnRzO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgY29tbW9uanNSZXF1aXJlICYmIGNvbW1vbmpzUmVxdWlyZSwgZSA9IDA7IGUgPCBoLmxlbmd0aDsgZSsrKVxuICAgICAgICB1KGhbZV0pO1xuICAgICAgcmV0dXJuIHU7XG4gICAgfSh7IDE6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgZCA9IGUoXCIuL3V0aWxzXCIpLCBjID0gZShcIi4vc3VwcG9ydFwiKSwgcCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcbiAgICAgIHIuZW5jb2RlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgZm9yICh2YXIgdDIsIHIyLCBuLCBpLCBzLCBhLCBvLCBoID0gW10sIHUgPSAwLCBsID0gZTIubGVuZ3RoLCBmID0gbCwgYzIgPSBcInN0cmluZ1wiICE9PSBkLmdldFR5cGVPZihlMik7IHUgPCBlMi5sZW5ndGg7IClcbiAgICAgICAgICBmID0gbCAtIHUsIG4gPSBjMiA/ICh0MiA9IGUyW3UrK10sIHIyID0gdSA8IGwgPyBlMlt1KytdIDogMCwgdSA8IGwgPyBlMlt1KytdIDogMCkgOiAodDIgPSBlMi5jaGFyQ29kZUF0KHUrKyksIHIyID0gdSA8IGwgPyBlMi5jaGFyQ29kZUF0KHUrKykgOiAwLCB1IDwgbCA/IGUyLmNoYXJDb2RlQXQodSsrKSA6IDApLCBpID0gdDIgPj4gMiwgcyA9ICgzICYgdDIpIDw8IDQgfCByMiA+PiA0LCBhID0gMSA8IGYgPyAoMTUgJiByMikgPDwgMiB8IG4gPj4gNiA6IDY0LCBvID0gMiA8IGYgPyA2MyAmIG4gOiA2NCwgaC5wdXNoKHAuY2hhckF0KGkpICsgcC5jaGFyQXQocykgKyBwLmNoYXJBdChhKSArIHAuY2hhckF0KG8pKTtcbiAgICAgICAgcmV0dXJuIGguam9pbihcIlwiKTtcbiAgICAgIH0sIHIuZGVjb2RlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMiwgbiwgaSwgcywgYSwgbyA9IDAsIGggPSAwLCB1ID0gXCJkYXRhOlwiO1xuICAgICAgICBpZiAoZTIuc3Vic3RyKDAsIHUubGVuZ3RoKSA9PT0gdSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBpbnB1dCwgaXQgbG9va3MgbGlrZSBhIGRhdGEgdXJsLlwiKTtcbiAgICAgICAgdmFyIGwsIGYgPSAzICogKGUyID0gZTIucmVwbGFjZSgvW15BLVphLXowLTkrLz1dL2csIFwiXCIpKS5sZW5ndGggLyA0O1xuICAgICAgICBpZiAoZTIuY2hhckF0KGUyLmxlbmd0aCAtIDEpID09PSBwLmNoYXJBdCg2NCkgJiYgZi0tLCBlMi5jaGFyQXQoZTIubGVuZ3RoIC0gMikgPT09IHAuY2hhckF0KDY0KSAmJiBmLS0sIGYgJSAxICE9IDApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgaW5wdXQsIGJhZCBjb250ZW50IGxlbmd0aC5cIik7XG4gICAgICAgIGZvciAobCA9IGMudWludDhhcnJheSA/IG5ldyBVaW50OEFycmF5KDAgfCBmKSA6IG5ldyBBcnJheSgwIHwgZik7IG8gPCBlMi5sZW5ndGg7IClcbiAgICAgICAgICB0MiA9IHAuaW5kZXhPZihlMi5jaGFyQXQobysrKSkgPDwgMiB8IChpID0gcC5pbmRleE9mKGUyLmNoYXJBdChvKyspKSkgPj4gNCwgcjIgPSAoMTUgJiBpKSA8PCA0IHwgKHMgPSBwLmluZGV4T2YoZTIuY2hhckF0KG8rKykpKSA+PiAyLCBuID0gKDMgJiBzKSA8PCA2IHwgKGEgPSBwLmluZGV4T2YoZTIuY2hhckF0KG8rKykpKSwgbFtoKytdID0gdDIsIDY0ICE9PSBzICYmIChsW2grK10gPSByMiksIDY0ICE9PSBhICYmIChsW2grK10gPSBuKTtcbiAgICAgICAgcmV0dXJuIGw7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL3N1cHBvcnRcIjogMzAsIFwiLi91dGlsc1wiOiAzMiB9XSwgMjogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vZXh0ZXJuYWxcIiksIGkgPSBlKFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiKSwgcyA9IGUoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpLCBhID0gZShcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiKTtcbiAgICAgIGZ1bmN0aW9uIG8oZTIsIHQyLCByMiwgbjIsIGkyKSB7XG4gICAgICAgIHRoaXMuY29tcHJlc3NlZFNpemUgPSBlMiwgdGhpcy51bmNvbXByZXNzZWRTaXplID0gdDIsIHRoaXMuY3JjMzIgPSByMiwgdGhpcy5jb21wcmVzc2lvbiA9IG4yLCB0aGlzLmNvbXByZXNzZWRDb250ZW50ID0gaTI7XG4gICAgICB9XG4gICAgICBvLnByb3RvdHlwZSA9IHsgZ2V0Q29udGVudFdvcmtlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlMiA9IG5ldyBpKG4uUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29tcHJlc3NlZENvbnRlbnQpKS5waXBlKHRoaXMuY29tcHJlc3Npb24udW5jb21wcmVzc1dvcmtlcigpKS5waXBlKG5ldyBhKFwiZGF0YV9sZW5ndGhcIikpLCB0MiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBlMi5vbihcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdHJlYW1JbmZvLmRhdGFfbGVuZ3RoICE9PSB0Mi51bmNvbXByZXNzZWRTaXplKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnVnIDogdW5jb21wcmVzc2VkIGRhdGEgc2l6ZSBtaXNtYXRjaFwiKTtcbiAgICAgICAgfSksIGUyO1xuICAgICAgfSwgZ2V0Q29tcHJlc3NlZFdvcmtlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgaShuLlByb21pc2UucmVzb2x2ZSh0aGlzLmNvbXByZXNzZWRDb250ZW50KSkud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2VkU2l6ZVwiLCB0aGlzLmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcInVuY29tcHJlc3NlZFNpemVcIiwgdGhpcy51bmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcImNyYzMyXCIsIHRoaXMuY3JjMzIpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIiwgdGhpcy5jb21wcmVzc2lvbik7XG4gICAgICB9IH0sIG8uY3JlYXRlV29ya2VyRnJvbSA9IGZ1bmN0aW9uKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgcmV0dXJuIGUyLnBpcGUobmV3IHMoKSkucGlwZShuZXcgYShcInVuY29tcHJlc3NlZFNpemVcIikpLnBpcGUodDIuY29tcHJlc3NXb3JrZXIocjIpKS5waXBlKG5ldyBhKFwiY29tcHJlc3NlZFNpemVcIikpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3Npb25cIiwgdDIpO1xuICAgICAgfSwgdC5leHBvcnRzID0gbztcbiAgICB9LCB7IFwiLi9leHRlcm5hbFwiOiA2LCBcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjogMjUsIFwiLi9zdHJlYW0vRGF0YUxlbmd0aFByb2JlXCI6IDI2LCBcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjogMjcgfV0sIDM6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO1xuICAgICAgci5TVE9SRSA9IHsgbWFnaWM6IFwiXFwwXFwwXCIsIGNvbXByZXNzV29ya2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBuKFwiU1RPUkUgY29tcHJlc3Npb25cIik7XG4gICAgICB9LCB1bmNvbXByZXNzV29ya2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBuKFwiU1RPUkUgZGVjb21wcmVzc2lvblwiKTtcbiAgICAgIH0gfSwgci5ERUZMQVRFID0gZShcIi4vZmxhdGVcIik7XG4gICAgfSwgeyBcIi4vZmxhdGVcIjogNywgXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6IDI4IH1dLCA0OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBlKFwiLi91dGlsc1wiKTtcbiAgICAgIHZhciBvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGUyLCB0MiA9IFtdLCByMiA9IDA7IHIyIDwgMjU2OyByMisrKSB7XG4gICAgICAgICAgZTIgPSByMjtcbiAgICAgICAgICBmb3IgKHZhciBuMiA9IDA7IG4yIDwgODsgbjIrKylcbiAgICAgICAgICAgIGUyID0gMSAmIGUyID8gMzk4ODI5MjM4NCBeIGUyID4+PiAxIDogZTIgPj4+IDE7XG4gICAgICAgICAgdDJbcjJdID0gZTI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQyO1xuICAgICAgfSgpO1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDAgIT09IGUyICYmIGUyLmxlbmd0aCA/IFwic3RyaW5nXCIgIT09IG4uZ2V0VHlwZU9mKGUyKSA/IGZ1bmN0aW9uKGUzLCB0MywgcjIsIG4yKSB7XG4gICAgICAgICAgdmFyIGkgPSBvLCBzID0gbjIgKyByMjtcbiAgICAgICAgICBlMyBePSAtMTtcbiAgICAgICAgICBmb3IgKHZhciBhID0gbjI7IGEgPCBzOyBhKyspXG4gICAgICAgICAgICBlMyA9IGUzID4+PiA4IF4gaVsyNTUgJiAoZTMgXiB0M1thXSldO1xuICAgICAgICAgIHJldHVybiAtMSBeIGUzO1xuICAgICAgICB9KDAgfCB0MiwgZTIsIGUyLmxlbmd0aCwgMCkgOiBmdW5jdGlvbihlMywgdDMsIHIyLCBuMikge1xuICAgICAgICAgIHZhciBpID0gbywgcyA9IG4yICsgcjI7XG4gICAgICAgICAgZTMgXj0gLTE7XG4gICAgICAgICAgZm9yICh2YXIgYSA9IG4yOyBhIDwgczsgYSsrKVxuICAgICAgICAgICAgZTMgPSBlMyA+Pj4gOCBeIGlbMjU1ICYgKGUzIF4gdDMuY2hhckNvZGVBdChhKSldO1xuICAgICAgICAgIHJldHVybiAtMSBeIGUzO1xuICAgICAgICB9KDAgfCB0MiwgZTIsIGUyLmxlbmd0aCwgMCkgOiAwO1xuICAgICAgfTtcbiAgICB9LCB7IFwiLi91dGlsc1wiOiAzMiB9XSwgNTogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHIuYmFzZTY0ID0gZmFsc2UsIHIuYmluYXJ5ID0gZmFsc2UsIHIuZGlyID0gZmFsc2UsIHIuY3JlYXRlRm9sZGVycyA9IHRydWUsIHIuZGF0ZSA9IG51bGwsIHIuY29tcHJlc3Npb24gPSBudWxsLCByLmNvbXByZXNzaW9uT3B0aW9ucyA9IG51bGwsIHIuY29tbWVudCA9IG51bGwsIHIudW5peFBlcm1pc3Npb25zID0gbnVsbCwgci5kb3NQZXJtaXNzaW9ucyA9IG51bGw7XG4gICAgfSwge31dLCA2OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBudWxsO1xuICAgICAgbiA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFByb21pc2UgPyBQcm9taXNlIDogZShcImxpZVwiKSwgdC5leHBvcnRzID0geyBQcm9taXNlOiBuIH07XG4gICAgfSwgeyBsaWU6IDM3IH1dLCA3OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBVaW50OEFycmF5ICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQxNkFycmF5ICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQzMkFycmF5LCBpID0gZShcInBha29cIiksIHMgPSBlKFwiLi91dGlsc1wiKSwgYSA9IGUoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLCBvID0gbiA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiO1xuICAgICAgZnVuY3Rpb24gaChlMiwgdDIpIHtcbiAgICAgICAgYS5jYWxsKHRoaXMsIFwiRmxhdGVXb3JrZXIvXCIgKyBlMiksIHRoaXMuX3Bha28gPSBudWxsLCB0aGlzLl9wYWtvQWN0aW9uID0gZTIsIHRoaXMuX3Bha29PcHRpb25zID0gdDIsIHRoaXMubWV0YSA9IHt9O1xuICAgICAgfVxuICAgICAgci5tYWdpYyA9IFwiXFxiXFwwXCIsIHMuaW5oZXJpdHMoaCwgYSksIGgucHJvdG90eXBlLnByb2Nlc3NDaHVuayA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMubWV0YSA9IGUyLm1ldGEsIG51bGwgPT09IHRoaXMuX3Bha28gJiYgdGhpcy5fY3JlYXRlUGFrbygpLCB0aGlzLl9wYWtvLnB1c2gocy50cmFuc2Zvcm1UbyhvLCBlMi5kYXRhKSwgZmFsc2UpO1xuICAgICAgfSwgaC5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYS5wcm90b3R5cGUuZmx1c2guY2FsbCh0aGlzKSwgbnVsbCA9PT0gdGhpcy5fcGFrbyAmJiB0aGlzLl9jcmVhdGVQYWtvKCksIHRoaXMuX3Bha28ucHVzaChbXSwgdHJ1ZSk7XG4gICAgICB9LCBoLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGEucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSwgdGhpcy5fcGFrbyA9IG51bGw7XG4gICAgICB9LCBoLnByb3RvdHlwZS5fY3JlYXRlUGFrbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9wYWtvID0gbmV3IGlbdGhpcy5fcGFrb0FjdGlvbl0oeyByYXc6IHRydWUsIGxldmVsOiB0aGlzLl9wYWtvT3B0aW9ucy5sZXZlbCB8fCAtMSB9KTtcbiAgICAgICAgdmFyIHQyID0gdGhpcztcbiAgICAgICAgdGhpcy5fcGFrby5vbkRhdGEgPSBmdW5jdGlvbihlMikge1xuICAgICAgICAgIHQyLnB1c2goeyBkYXRhOiBlMiwgbWV0YTogdDIubWV0YSB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0sIHIuY29tcHJlc3NXb3JrZXIgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbmV3IGgoXCJEZWZsYXRlXCIsIGUyKTtcbiAgICAgIH0sIHIudW5jb21wcmVzc1dvcmtlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IGgoXCJJbmZsYXRlXCIsIHt9KTtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjogMjgsIFwiLi91dGlsc1wiOiAzMiwgcGFrbzogMzggfV0sIDg6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICBmdW5jdGlvbiBBKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIsIG4yID0gXCJcIjtcbiAgICAgICAgZm9yIChyMiA9IDA7IHIyIDwgdDI7IHIyKyspXG4gICAgICAgICAgbjIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUgJiBlMiksIGUyID4+Pj0gODtcbiAgICAgICAgcmV0dXJuIG4yO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbihlMiwgdDIsIHIyLCBuMiwgaTIsIHMyKSB7XG4gICAgICAgIHZhciBhLCBvLCBoID0gZTIuZmlsZSwgdSA9IGUyLmNvbXByZXNzaW9uLCBsID0gczIgIT09IE8udXRmOGVuY29kZSwgZiA9IEkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgczIoaC5uYW1lKSksIGMgPSBJLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIE8udXRmOGVuY29kZShoLm5hbWUpKSwgZCA9IGguY29tbWVudCwgcCA9IEkudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgczIoZCkpLCBtID0gSS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCBPLnV0ZjhlbmNvZGUoZCkpLCBfID0gYy5sZW5ndGggIT09IGgubmFtZS5sZW5ndGgsIGcgPSBtLmxlbmd0aCAhPT0gZC5sZW5ndGgsIGIgPSBcIlwiLCB2ID0gXCJcIiwgeSA9IFwiXCIsIHcgPSBoLmRpciwgayA9IGguZGF0ZSwgeCA9IHsgY3JjMzI6IDAsIGNvbXByZXNzZWRTaXplOiAwLCB1bmNvbXByZXNzZWRTaXplOiAwIH07XG4gICAgICAgIHQyICYmICFyMiB8fCAoeC5jcmMzMiA9IGUyLmNyYzMyLCB4LmNvbXByZXNzZWRTaXplID0gZTIuY29tcHJlc3NlZFNpemUsIHgudW5jb21wcmVzc2VkU2l6ZSA9IGUyLnVuY29tcHJlc3NlZFNpemUpO1xuICAgICAgICB2YXIgUyA9IDA7XG4gICAgICAgIHQyICYmIChTIHw9IDgpLCBsIHx8ICFfICYmICFnIHx8IChTIHw9IDIwNDgpO1xuICAgICAgICB2YXIgeiA9IDAsIEMgPSAwO1xuICAgICAgICB3ICYmICh6IHw9IDE2KSwgXCJVTklYXCIgPT09IGkyID8gKEMgPSA3OTgsIHogfD0gZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgdmFyIHIzID0gZTM7XG4gICAgICAgICAgcmV0dXJuIGUzIHx8IChyMyA9IHQzID8gMTY4OTMgOiAzMzIwNCksICg2NTUzNSAmIHIzKSA8PCAxNjtcbiAgICAgICAgfShoLnVuaXhQZXJtaXNzaW9ucywgdykpIDogKEMgPSAyMCwgeiB8PSBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHJldHVybiA2MyAmIChlMyB8fCAwKTtcbiAgICAgICAgfShoLmRvc1Blcm1pc3Npb25zKSksIGEgPSBrLmdldFVUQ0hvdXJzKCksIGEgPDw9IDYsIGEgfD0gay5nZXRVVENNaW51dGVzKCksIGEgPDw9IDUsIGEgfD0gay5nZXRVVENTZWNvbmRzKCkgLyAyLCBvID0gay5nZXRVVENGdWxsWWVhcigpIC0gMTk4MCwgbyA8PD0gNCwgbyB8PSBrLmdldFVUQ01vbnRoKCkgKyAxLCBvIDw8PSA1LCBvIHw9IGsuZ2V0VVRDRGF0ZSgpLCBfICYmICh2ID0gQSgxLCAxKSArIEEoQihmKSwgNCkgKyBjLCBiICs9IFwidXBcIiArIEEodi5sZW5ndGgsIDIpICsgdiksIGcgJiYgKHkgPSBBKDEsIDEpICsgQShCKHApLCA0KSArIG0sIGIgKz0gXCJ1Y1wiICsgQSh5Lmxlbmd0aCwgMikgKyB5KTtcbiAgICAgICAgdmFyIEUgPSBcIlwiO1xuICAgICAgICByZXR1cm4gRSArPSBcIlxcblxcMFwiLCBFICs9IEEoUywgMiksIEUgKz0gdS5tYWdpYywgRSArPSBBKGEsIDIpLCBFICs9IEEobywgMiksIEUgKz0gQSh4LmNyYzMyLCA0KSwgRSArPSBBKHguY29tcHJlc3NlZFNpemUsIDQpLCBFICs9IEEoeC51bmNvbXByZXNzZWRTaXplLCA0KSwgRSArPSBBKGYubGVuZ3RoLCAyKSwgRSArPSBBKGIubGVuZ3RoLCAyKSwgeyBmaWxlUmVjb3JkOiBSMi5MT0NBTF9GSUxFX0hFQURFUiArIEUgKyBmICsgYiwgZGlyUmVjb3JkOiBSMi5DRU5UUkFMX0ZJTEVfSEVBREVSICsgQShDLCAyKSArIEUgKyBBKHAubGVuZ3RoLCAyKSArIFwiXFwwXFwwXFwwXFwwXCIgKyBBKHosIDQpICsgQShuMiwgNCkgKyBmICsgYiArIHAgfTtcbiAgICAgIH1cbiAgICAgIHZhciBJID0gZShcIi4uL3V0aWxzXCIpLCBpID0gZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLCBPID0gZShcIi4uL3V0ZjhcIiksIEIgPSBlKFwiLi4vY3JjMzJcIiksIFIyID0gZShcIi4uL3NpZ25hdHVyZVwiKTtcbiAgICAgIGZ1bmN0aW9uIHMoZTIsIHQyLCByMiwgbjIpIHtcbiAgICAgICAgaS5jYWxsKHRoaXMsIFwiWmlwRmlsZVdvcmtlclwiKSwgdGhpcy5ieXRlc1dyaXR0ZW4gPSAwLCB0aGlzLnppcENvbW1lbnQgPSB0MiwgdGhpcy56aXBQbGF0Zm9ybSA9IHIyLCB0aGlzLmVuY29kZUZpbGVOYW1lID0gbjIsIHRoaXMuc3RyZWFtRmlsZXMgPSBlMiwgdGhpcy5hY2N1bXVsYXRlID0gZmFsc2UsIHRoaXMuY29udGVudEJ1ZmZlciA9IFtdLCB0aGlzLmRpclJlY29yZHMgPSBbXSwgdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0ID0gMCwgdGhpcy5lbnRyaWVzQ291bnQgPSAwLCB0aGlzLmN1cnJlbnRGaWxlID0gbnVsbCwgdGhpcy5fc291cmNlcyA9IFtdO1xuICAgICAgfVxuICAgICAgSS5pbmhlcml0cyhzLCBpKSwgcy5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiA9IGUyLm1ldGEucGVyY2VudCB8fCAwLCByMiA9IHRoaXMuZW50cmllc0NvdW50LCBuMiA9IHRoaXMuX3NvdXJjZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmFjY3VtdWxhdGUgPyB0aGlzLmNvbnRlbnRCdWZmZXIucHVzaChlMikgOiAodGhpcy5ieXRlc1dyaXR0ZW4gKz0gZTIuZGF0YS5sZW5ndGgsIGkucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCB7IGRhdGE6IGUyLmRhdGEsIG1ldGE6IHsgY3VycmVudEZpbGU6IHRoaXMuY3VycmVudEZpbGUsIHBlcmNlbnQ6IHIyID8gKHQyICsgMTAwICogKHIyIC0gbjIgLSAxKSkgLyByMiA6IDEwMCB9IH0pKTtcbiAgICAgIH0sIHMucHJvdG90eXBlLm9wZW5lZFNvdXJjZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCA9IHRoaXMuYnl0ZXNXcml0dGVuLCB0aGlzLmN1cnJlbnRGaWxlID0gZTIuZmlsZS5uYW1lO1xuICAgICAgICB2YXIgdDIgPSB0aGlzLnN0cmVhbUZpbGVzICYmICFlMi5maWxlLmRpcjtcbiAgICAgICAgaWYgKHQyKSB7XG4gICAgICAgICAgdmFyIHIyID0gbihlMiwgdDIsIGZhbHNlLCB0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsIHRoaXMuemlwUGxhdGZvcm0sIHRoaXMuZW5jb2RlRmlsZU5hbWUpO1xuICAgICAgICAgIHRoaXMucHVzaCh7IGRhdGE6IHIyLmZpbGVSZWNvcmQsIG1ldGE6IHsgcGVyY2VudDogMCB9IH0pO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICB0aGlzLmFjY3VtdWxhdGUgPSB0cnVlO1xuICAgICAgfSwgcy5wcm90b3R5cGUuY2xvc2VkU291cmNlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRlID0gZmFsc2U7XG4gICAgICAgIHZhciB0MiA9IHRoaXMuc3RyZWFtRmlsZXMgJiYgIWUyLmZpbGUuZGlyLCByMiA9IG4oZTIsIHQyLCB0cnVlLCB0aGlzLmN1cnJlbnRTb3VyY2VPZmZzZXQsIHRoaXMuemlwUGxhdGZvcm0sIHRoaXMuZW5jb2RlRmlsZU5hbWUpO1xuICAgICAgICBpZiAodGhpcy5kaXJSZWNvcmRzLnB1c2gocjIuZGlyUmVjb3JkKSwgdDIpXG4gICAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICAgIHJldHVybiBSMi5EQVRBX0RFU0NSSVBUT1IgKyBBKGUzLmNyYzMyLCA0KSArIEEoZTMuY29tcHJlc3NlZFNpemUsIDQpICsgQShlMy51bmNvbXByZXNzZWRTaXplLCA0KTtcbiAgICAgICAgICB9KGUyKSwgbWV0YTogeyBwZXJjZW50OiAxMDAgfSB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGZvciAodGhpcy5wdXNoKHsgZGF0YTogcjIuZmlsZVJlY29yZCwgbWV0YTogeyBwZXJjZW50OiAwIH0gfSk7IHRoaXMuY29udGVudEJ1ZmZlci5sZW5ndGg7IClcbiAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLmNvbnRlbnRCdWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIHRoaXMuY3VycmVudEZpbGUgPSBudWxsO1xuICAgICAgfSwgcy5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgZTIgPSB0aGlzLmJ5dGVzV3JpdHRlbiwgdDIgPSAwOyB0MiA8IHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGg7IHQyKyspXG4gICAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogdGhpcy5kaXJSZWNvcmRzW3QyXSwgbWV0YTogeyBwZXJjZW50OiAxMDAgfSB9KTtcbiAgICAgICAgdmFyIHIyID0gdGhpcy5ieXRlc1dyaXR0ZW4gLSBlMiwgbjIgPSBmdW5jdGlvbihlMywgdDMsIHIzLCBuMywgaTIpIHtcbiAgICAgICAgICB2YXIgczIgPSBJLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIGkyKG4zKSk7XG4gICAgICAgICAgcmV0dXJuIFIyLkNFTlRSQUxfRElSRUNUT1JZX0VORCArIFwiXFwwXFwwXFwwXFwwXCIgKyBBKGUzLCAyKSArIEEoZTMsIDIpICsgQSh0MywgNCkgKyBBKHIzLCA0KSArIEEoczIubGVuZ3RoLCAyKSArIHMyO1xuICAgICAgICB9KHRoaXMuZGlyUmVjb3Jkcy5sZW5ndGgsIHIyLCBlMiwgdGhpcy56aXBDb21tZW50LCB0aGlzLmVuY29kZUZpbGVOYW1lKTtcbiAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogbjIsIG1ldGE6IHsgcGVyY2VudDogMTAwIH0gfSk7XG4gICAgICB9LCBzLnByb3RvdHlwZS5wcmVwYXJlTmV4dFNvdXJjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzID0gdGhpcy5fc291cmNlcy5zaGlmdCgpLCB0aGlzLm9wZW5lZFNvdXJjZSh0aGlzLnByZXZpb3VzLnN0cmVhbUluZm8pLCB0aGlzLmlzUGF1c2VkID8gdGhpcy5wcmV2aW91cy5wYXVzZSgpIDogdGhpcy5wcmV2aW91cy5yZXN1bWUoKTtcbiAgICAgIH0sIHMucHJvdG90eXBlLnJlZ2lzdGVyUHJldmlvdXMgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLl9zb3VyY2VzLnB1c2goZTIpO1xuICAgICAgICB2YXIgdDIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZTIub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIucHJvY2Vzc0NodW5rKGUzKTtcbiAgICAgICAgfSksIGUyLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHQyLmNsb3NlZFNvdXJjZSh0Mi5wcmV2aW91cy5zdHJlYW1JbmZvKSwgdDIuX3NvdXJjZXMubGVuZ3RoID8gdDIucHJlcGFyZU5leHRTb3VyY2UoKSA6IHQyLmVuZCgpO1xuICAgICAgICB9KSwgZTIub24oXCJlcnJvclwiLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHQyLmVycm9yKGUzKTtcbiAgICAgICAgfSksIHRoaXM7XG4gICAgICB9LCBzLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhaS5wcm90b3R5cGUucmVzdW1lLmNhbGwodGhpcykgJiYgKCF0aGlzLnByZXZpb3VzICYmIHRoaXMuX3NvdXJjZXMubGVuZ3RoID8gKHRoaXMucHJlcGFyZU5leHRTb3VyY2UoKSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzIHx8IHRoaXMuX3NvdXJjZXMubGVuZ3RoIHx8IHRoaXMuZ2VuZXJhdGVkRXJyb3IgPyB2b2lkIDAgOiAodGhpcy5lbmQoKSwgdHJ1ZSkpO1xuICAgICAgfSwgcy5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIgPSB0aGlzLl9zb3VyY2VzO1xuICAgICAgICBpZiAoIWkucHJvdG90eXBlLmVycm9yLmNhbGwodGhpcywgZTIpKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgcjIgPSAwOyByMiA8IHQyLmxlbmd0aDsgcjIrKylcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdDJbcjJdLmVycm9yKGUyKTtcbiAgICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LCBzLnByb3RvdHlwZS5sb2NrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGkucHJvdG90eXBlLmxvY2suY2FsbCh0aGlzKTtcbiAgICAgICAgZm9yICh2YXIgZTIgPSB0aGlzLl9zb3VyY2VzLCB0MiA9IDA7IHQyIDwgZTIubGVuZ3RoOyB0MisrKVxuICAgICAgICAgIGUyW3QyXS5sb2NrKCk7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBzO1xuICAgIH0sIHsgXCIuLi9jcmMzMlwiOiA0LCBcIi4uL3NpZ25hdHVyZVwiOiAyMywgXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOiAyOCwgXCIuLi91dGY4XCI6IDMxLCBcIi4uL3V0aWxzXCI6IDMyIH1dLCA5OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIHUgPSBlKFwiLi4vY29tcHJlc3Npb25zXCIpLCBuID0gZShcIi4vWmlwRmlsZVdvcmtlclwiKTtcbiAgICAgIHIuZ2VuZXJhdGVXb3JrZXIgPSBmdW5jdGlvbihlMiwgYSwgdDIpIHtcbiAgICAgICAgdmFyIG8gPSBuZXcgbihhLnN0cmVhbUZpbGVzLCB0MiwgYS5wbGF0Zm9ybSwgYS5lbmNvZGVGaWxlTmFtZSksIGggPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGUyLmZvckVhY2goZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgICBoKys7XG4gICAgICAgICAgICB2YXIgcjIgPSBmdW5jdGlvbihlNCwgdDQpIHtcbiAgICAgICAgICAgICAgdmFyIHIzID0gZTQgfHwgdDQsIG4zID0gdVtyM107XG4gICAgICAgICAgICAgIGlmICghbjMpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHIzICsgXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7XG4gICAgICAgICAgICAgIHJldHVybiBuMztcbiAgICAgICAgICAgIH0odDMub3B0aW9ucy5jb21wcmVzc2lvbiwgYS5jb21wcmVzc2lvbiksIG4yID0gdDMub3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnMgfHwgYS5jb21wcmVzc2lvbk9wdGlvbnMgfHwge30sIGkgPSB0My5kaXIsIHMgPSB0My5kYXRlO1xuICAgICAgICAgICAgdDMuX2NvbXByZXNzV29ya2VyKHIyLCBuMikud2l0aFN0cmVhbUluZm8oXCJmaWxlXCIsIHsgbmFtZTogZTMsIGRpcjogaSwgZGF0ZTogcywgY29tbWVudDogdDMuY29tbWVudCB8fCBcIlwiLCB1bml4UGVybWlzc2lvbnM6IHQzLnVuaXhQZXJtaXNzaW9ucywgZG9zUGVybWlzc2lvbnM6IHQzLmRvc1Blcm1pc3Npb25zIH0pLnBpcGUobyk7XG4gICAgICAgICAgfSksIG8uZW50cmllc0NvdW50ID0gaDtcbiAgICAgICAgfSBjYXRjaCAoZTMpIHtcbiAgICAgICAgICBvLmVycm9yKGUzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbztcbiAgICAgIH07XG4gICAgfSwgeyBcIi4uL2NvbXByZXNzaW9uc1wiOiAzLCBcIi4vWmlwRmlsZVdvcmtlclwiOiA4IH1dLCAxMDogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBuKSlcbiAgICAgICAgICByZXR1cm4gbmV3IG4oKTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycyBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTtcbiAgICAgICAgdGhpcy5maWxlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB0aGlzLmNvbW1lbnQgPSBudWxsLCB0aGlzLnJvb3QgPSBcIlwiLCB0aGlzLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGUyID0gbmV3IG4oKTtcbiAgICAgICAgICBmb3IgKHZhciB0MiBpbiB0aGlzKVxuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0aGlzW3QyXSAmJiAoZTJbdDJdID0gdGhpc1t0Ml0pO1xuICAgICAgICAgIHJldHVybiBlMjtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIChuLnByb3RvdHlwZSA9IGUoXCIuL29iamVjdFwiKSkubG9hZEFzeW5jID0gZShcIi4vbG9hZFwiKSwgbi5zdXBwb3J0ID0gZShcIi4vc3VwcG9ydFwiKSwgbi5kZWZhdWx0cyA9IGUoXCIuL2RlZmF1bHRzXCIpLCBuLnZlcnNpb24gPSBcIjMuMTAuMVwiLCBuLmxvYWRBc3luYyA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gbmV3IG4oKS5sb2FkQXN5bmMoZTIsIHQyKTtcbiAgICAgIH0sIG4uZXh0ZXJuYWwgPSBlKFwiLi9leHRlcm5hbFwiKSwgdC5leHBvcnRzID0gbjtcbiAgICB9LCB7IFwiLi9kZWZhdWx0c1wiOiA1LCBcIi4vZXh0ZXJuYWxcIjogNiwgXCIuL2xvYWRcIjogMTEsIFwiLi9vYmplY3RcIjogMTUsIFwiLi9zdXBwb3J0XCI6IDMwIH1dLCAxMTogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciB1ID0gZShcIi4vdXRpbHNcIiksIGkgPSBlKFwiLi9leHRlcm5hbFwiKSwgbiA9IGUoXCIuL3V0ZjhcIiksIHMgPSBlKFwiLi96aXBFbnRyaWVzXCIpLCBhID0gZShcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIiksIGwgPSBlKFwiLi9ub2RlanNVdGlsc1wiKTtcbiAgICAgIGZ1bmN0aW9uIGYobjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBpLlByb21pc2UoZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgICAgdmFyIHIyID0gbjIuZGVjb21wcmVzc2VkLmdldENvbnRlbnRXb3JrZXIoKS5waXBlKG5ldyBhKCkpO1xuICAgICAgICAgIHIyLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICAgIHQyKGUzKTtcbiAgICAgICAgICB9KS5vbihcImVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHIyLnN0cmVhbUluZm8uY3JjMzIgIT09IG4yLmRlY29tcHJlc3NlZC5jcmMzMiA/IHQyKG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBDUkMzMiBtaXNtYXRjaFwiKSkgOiBlMigpO1xuICAgICAgICAgIH0pLnJlc3VtZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGUyLCBvKSB7XG4gICAgICAgIHZhciBoID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG8gPSB1LmV4dGVuZChvIHx8IHt9LCB7IGJhc2U2NDogZmFsc2UsIGNoZWNrQ1JDMzI6IGZhbHNlLCBvcHRpbWl6ZWRCaW5hcnlTdHJpbmc6IGZhbHNlLCBjcmVhdGVGb2xkZXJzOiBmYWxzZSwgZGVjb2RlRmlsZU5hbWU6IG4udXRmOGRlY29kZSB9KSwgbC5pc05vZGUgJiYgbC5pc1N0cmVhbShlMikgPyBpLlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkpTWmlwIGNhbid0IGFjY2VwdCBhIHN0cmVhbSB3aGVuIGxvYWRpbmcgYSB6aXAgZmlsZS5cIikpIDogdS5wcmVwYXJlQ29udGVudChcInRoZSBsb2FkZWQgemlwIGZpbGVcIiwgZTIsIHRydWUsIG8ub3B0aW1pemVkQmluYXJ5U3RyaW5nLCBvLmJhc2U2NCkudGhlbihmdW5jdGlvbihlMykge1xuICAgICAgICAgIHZhciB0MiA9IG5ldyBzKG8pO1xuICAgICAgICAgIHJldHVybiB0Mi5sb2FkKGUzKSwgdDI7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB2YXIgdDIgPSBbaS5Qcm9taXNlLnJlc29sdmUoZTMpXSwgcjIgPSBlMy5maWxlcztcbiAgICAgICAgICBpZiAoby5jaGVja0NSQzMyKVxuICAgICAgICAgICAgZm9yICh2YXIgbjIgPSAwOyBuMiA8IHIyLmxlbmd0aDsgbjIrKylcbiAgICAgICAgICAgICAgdDIucHVzaChmKHIyW24yXSkpO1xuICAgICAgICAgIHJldHVybiBpLlByb21pc2UuYWxsKHQyKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihlMykge1xuICAgICAgICAgIGZvciAodmFyIHQyID0gZTMuc2hpZnQoKSwgcjIgPSB0Mi5maWxlcywgbjIgPSAwOyBuMiA8IHIyLmxlbmd0aDsgbjIrKykge1xuICAgICAgICAgICAgdmFyIGkyID0gcjJbbjJdLCBzMiA9IGkyLmZpbGVOYW1lU3RyLCBhMiA9IHUucmVzb2x2ZShpMi5maWxlTmFtZVN0cik7XG4gICAgICAgICAgICBoLmZpbGUoYTIsIGkyLmRlY29tcHJlc3NlZCwgeyBiaW5hcnk6IHRydWUsIG9wdGltaXplZEJpbmFyeVN0cmluZzogdHJ1ZSwgZGF0ZTogaTIuZGF0ZSwgZGlyOiBpMi5kaXIsIGNvbW1lbnQ6IGkyLmZpbGVDb21tZW50U3RyLmxlbmd0aCA/IGkyLmZpbGVDb21tZW50U3RyIDogbnVsbCwgdW5peFBlcm1pc3Npb25zOiBpMi51bml4UGVybWlzc2lvbnMsIGRvc1Blcm1pc3Npb25zOiBpMi5kb3NQZXJtaXNzaW9ucywgY3JlYXRlRm9sZGVyczogby5jcmVhdGVGb2xkZXJzIH0pLCBpMi5kaXIgfHwgKGguZmlsZShhMikudW5zYWZlT3JpZ2luYWxOYW1lID0gczIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdDIuemlwQ29tbWVudC5sZW5ndGggJiYgKGguY29tbWVudCA9IHQyLnppcENvbW1lbnQpLCBoO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4vZXh0ZXJuYWxcIjogNiwgXCIuL25vZGVqc1V0aWxzXCI6IDE0LCBcIi4vc3RyZWFtL0NyYzMyUHJvYmVcIjogMjUsIFwiLi91dGY4XCI6IDMxLCBcIi4vdXRpbHNcIjogMzIsIFwiLi96aXBFbnRyaWVzXCI6IDMzIH1dLCAxMjogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBuID0gZShcIi4uL3V0aWxzXCIpLCBpID0gZShcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO1xuICAgICAgZnVuY3Rpb24gcyhlMiwgdDIpIHtcbiAgICAgICAgaS5jYWxsKHRoaXMsIFwiTm9kZWpzIHN0cmVhbSBpbnB1dCBhZGFwdGVyIGZvciBcIiArIGUyKSwgdGhpcy5fdXBzdHJlYW1FbmRlZCA9IGZhbHNlLCB0aGlzLl9iaW5kU3RyZWFtKHQyKTtcbiAgICAgIH1cbiAgICAgIG4uaW5oZXJpdHMocywgaSksIHMucHJvdG90eXBlLl9iaW5kU3RyZWFtID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gdGhpcztcbiAgICAgICAgKHRoaXMuX3N0cmVhbSA9IGUyKS5wYXVzZSgpLCBlMi5vbihcImRhdGFcIiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5wdXNoKHsgZGF0YTogZTMsIG1ldGE6IHsgcGVyY2VudDogMCB9IH0pO1xuICAgICAgICB9KS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIuaXNQYXVzZWQgPyB0aGlzLmdlbmVyYXRlZEVycm9yID0gZTMgOiB0Mi5lcnJvcihlMyk7XG4gICAgICAgIH0pLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHQyLmlzUGF1c2VkID8gdDIuX3Vwc3RyZWFtRW5kZWQgPSB0cnVlIDogdDIuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgcy5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhaS5wcm90b3R5cGUucGF1c2UuY2FsbCh0aGlzKSAmJiAodGhpcy5fc3RyZWFtLnBhdXNlKCksIHRydWUpO1xuICAgICAgfSwgcy5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhIWkucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpICYmICh0aGlzLl91cHN0cmVhbUVuZGVkID8gdGhpcy5lbmQoKSA6IHRoaXMuX3N0cmVhbS5yZXN1bWUoKSwgdHJ1ZSk7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBzO1xuICAgIH0sIHsgXCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOiAyOCwgXCIuLi91dGlsc1wiOiAzMiB9XSwgMTM6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgaSA9IGUoXCJyZWFkYWJsZS1zdHJlYW1cIikuUmVhZGFibGU7XG4gICAgICBmdW5jdGlvbiBuKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgaS5jYWxsKHRoaXMsIHQyKSwgdGhpcy5faGVscGVyID0gZTI7XG4gICAgICAgIHZhciBuMiA9IHRoaXM7XG4gICAgICAgIGUyLm9uKFwiZGF0YVwiLCBmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICBuMi5wdXNoKGUzKSB8fCBuMi5faGVscGVyLnBhdXNlKCksIHIyICYmIHIyKHQzKTtcbiAgICAgICAgfSkub24oXCJlcnJvclwiLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIG4yLmVtaXQoXCJlcnJvclwiLCBlMyk7XG4gICAgICAgIH0pLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG4yLnB1c2gobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4sIGkpLCBuLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9oZWxwZXIucmVzdW1lKCk7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBuO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCJyZWFkYWJsZS1zdHJlYW1cIjogMTYgfV0sIDE0OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdC5leHBvcnRzID0geyBpc05vZGU6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEJ1ZmZlciwgbmV3QnVmZmVyRnJvbTogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIGlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuZnJvbSAhPT0gVWludDhBcnJheS5mcm9tKVxuICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShlMiwgdDIpO1xuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgZTIpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgXCJkYXRhXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoZTIsIHQyKTtcbiAgICAgIH0sIGFsbG9jQnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAoQnVmZmVyLmFsbG9jKVxuICAgICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoZTIpO1xuICAgICAgICB2YXIgdDIgPSBuZXcgQnVmZmVyKGUyKTtcbiAgICAgICAgcmV0dXJuIHQyLmZpbGwoMCksIHQyO1xuICAgICAgfSwgaXNCdWZmZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIoZTIpO1xuICAgICAgfSwgaXNTdHJlYW06IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBlMiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUyLm9uICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZTIucGF1c2UgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlMi5yZXN1bWU7XG4gICAgICB9IH07XG4gICAgfSwge31dLCAxNTogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIGZ1bmN0aW9uIHMoZTIsIHQyLCByMikge1xuICAgICAgICB2YXIgbjIsIGkyID0gdS5nZXRUeXBlT2YodDIpLCBzMiA9IHUuZXh0ZW5kKHIyIHx8IHt9LCBmKTtcbiAgICAgICAgczIuZGF0ZSA9IHMyLmRhdGUgfHwgLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksIG51bGwgIT09IHMyLmNvbXByZXNzaW9uICYmIChzMi5jb21wcmVzc2lvbiA9IHMyLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCkpLCBcInN0cmluZ1wiID09IHR5cGVvZiBzMi51bml4UGVybWlzc2lvbnMgJiYgKHMyLnVuaXhQZXJtaXNzaW9ucyA9IHBhcnNlSW50KHMyLnVuaXhQZXJtaXNzaW9ucywgOCkpLCBzMi51bml4UGVybWlzc2lvbnMgJiYgMTYzODQgJiBzMi51bml4UGVybWlzc2lvbnMgJiYgKHMyLmRpciA9IHRydWUpLCBzMi5kb3NQZXJtaXNzaW9ucyAmJiAxNiAmIHMyLmRvc1Blcm1pc3Npb25zICYmIChzMi5kaXIgPSB0cnVlKSwgczIuZGlyICYmIChlMiA9IGcoZTIpKSwgczIuY3JlYXRlRm9sZGVycyAmJiAobjIgPSBfKGUyKSkgJiYgYi5jYWxsKHRoaXMsIG4yLCB0cnVlKTtcbiAgICAgICAgdmFyIGEyID0gXCJzdHJpbmdcIiA9PT0gaTIgJiYgZmFsc2UgPT09IHMyLmJpbmFyeSAmJiBmYWxzZSA9PT0gczIuYmFzZTY0O1xuICAgICAgICByMiAmJiB2b2lkIDAgIT09IHIyLmJpbmFyeSB8fCAoczIuYmluYXJ5ID0gIWEyKSwgKHQyIGluc3RhbmNlb2YgYyAmJiAwID09PSB0Mi51bmNvbXByZXNzZWRTaXplIHx8IHMyLmRpciB8fCAhdDIgfHwgMCA9PT0gdDIubGVuZ3RoKSAmJiAoczIuYmFzZTY0ID0gZmFsc2UsIHMyLmJpbmFyeSA9IHRydWUsIHQyID0gXCJcIiwgczIuY29tcHJlc3Npb24gPSBcIlNUT1JFXCIsIGkyID0gXCJzdHJpbmdcIik7XG4gICAgICAgIHZhciBvMiA9IG51bGw7XG4gICAgICAgIG8yID0gdDIgaW5zdGFuY2VvZiBjIHx8IHQyIGluc3RhbmNlb2YgbCA/IHQyIDogcC5pc05vZGUgJiYgcC5pc1N0cmVhbSh0MikgPyBuZXcgbShlMiwgdDIpIDogdS5wcmVwYXJlQ29udGVudChlMiwgdDIsIHMyLmJpbmFyeSwgczIub3B0aW1pemVkQmluYXJ5U3RyaW5nLCBzMi5iYXNlNjQpO1xuICAgICAgICB2YXIgaDIgPSBuZXcgZChlMiwgbzIsIHMyKTtcbiAgICAgICAgdGhpcy5maWxlc1tlMl0gPSBoMjtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gZShcIi4vdXRmOFwiKSwgdSA9IGUoXCIuL3V0aWxzXCIpLCBsID0gZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksIGEgPSBlKFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCIpLCBmID0gZShcIi4vZGVmYXVsdHNcIiksIGMgPSBlKFwiLi9jb21wcmVzc2VkT2JqZWN0XCIpLCBkID0gZShcIi4vemlwT2JqZWN0XCIpLCBvID0gZShcIi4vZ2VuZXJhdGVcIiksIHAgPSBlKFwiLi9ub2RlanNVdGlsc1wiKSwgbSA9IGUoXCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXJcIiksIF8gPSBmdW5jdGlvbihlMikge1xuICAgICAgICBcIi9cIiA9PT0gZTIuc2xpY2UoLTEpICYmIChlMiA9IGUyLnN1YnN0cmluZygwLCBlMi5sZW5ndGggLSAxKSk7XG4gICAgICAgIHZhciB0MiA9IGUyLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICAgICAgcmV0dXJuIDAgPCB0MiA/IGUyLnN1YnN0cmluZygwLCB0MikgOiBcIlwiO1xuICAgICAgfSwgZyA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBcIi9cIiAhPT0gZTIuc2xpY2UoLTEpICYmIChlMiArPSBcIi9cIiksIGUyO1xuICAgICAgfSwgYiA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gdDIgPSB2b2lkIDAgIT09IHQyID8gdDIgOiBmLmNyZWF0ZUZvbGRlcnMsIGUyID0gZyhlMiksIHRoaXMuZmlsZXNbZTJdIHx8IHMuY2FsbCh0aGlzLCBlMiwgbnVsbCwgeyBkaXI6IHRydWUsIGNyZWF0ZUZvbGRlcnM6IHQyIH0pLCB0aGlzLmZpbGVzW2UyXTtcbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBoKGUyKSB7XG4gICAgICAgIHJldHVybiBcIltvYmplY3QgUmVnRXhwXVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZTIpO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSB7IGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIG1ldGhvZCBoYXMgYmVlbiByZW1vdmVkIGluIEpTWmlwIDMuMCwgcGxlYXNlIGNoZWNrIHRoZSB1cGdyYWRlIGd1aWRlLlwiKTtcbiAgICAgIH0sIGZvckVhY2g6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiwgcjIsIG4yO1xuICAgICAgICBmb3IgKHQyIGluIHRoaXMuZmlsZXMpXG4gICAgICAgICAgbjIgPSB0aGlzLmZpbGVzW3QyXSwgKHIyID0gdDIuc2xpY2UodGhpcy5yb290Lmxlbmd0aCwgdDIubGVuZ3RoKSkgJiYgdDIuc2xpY2UoMCwgdGhpcy5yb290Lmxlbmd0aCkgPT09IHRoaXMucm9vdCAmJiBlMihyMiwgbjIpO1xuICAgICAgfSwgZmlsdGVyOiBmdW5jdGlvbihyMikge1xuICAgICAgICB2YXIgbjIgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yRWFjaChmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgICByMihlMiwgdDIpICYmIG4yLnB1c2godDIpO1xuICAgICAgICB9KSwgbjI7XG4gICAgICB9LCBmaWxlOiBmdW5jdGlvbihlMiwgdDIsIHIyKSB7XG4gICAgICAgIGlmICgxICE9PSBhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiBlMiA9IHRoaXMucm9vdCArIGUyLCBzLmNhbGwodGhpcywgZTIsIHQyLCByMiksIHRoaXM7XG4gICAgICAgIGlmIChoKGUyKSkge1xuICAgICAgICAgIHZhciBuMiA9IGUyO1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICAgIHJldHVybiAhdDMuZGlyICYmIG4yLnRlc3QoZTMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpMiA9IHRoaXMuZmlsZXNbdGhpcy5yb290ICsgZTJdO1xuICAgICAgICByZXR1cm4gaTIgJiYgIWkyLmRpciA/IGkyIDogbnVsbDtcbiAgICAgIH0sIGZvbGRlcjogZnVuY3Rpb24ocjIpIHtcbiAgICAgICAgaWYgKCFyMilcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgaWYgKGgocjIpKVxuICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICAgIHJldHVybiB0My5kaXIgJiYgcjIudGVzdChlMyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHZhciBlMiA9IHRoaXMucm9vdCArIHIyLCB0MiA9IGIuY2FsbCh0aGlzLCBlMiksIG4yID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gbjIucm9vdCA9IHQyLm5hbWUsIG4yO1xuICAgICAgfSwgcmVtb3ZlOiBmdW5jdGlvbihyMikge1xuICAgICAgICByMiA9IHRoaXMucm9vdCArIHIyO1xuICAgICAgICB2YXIgZTIgPSB0aGlzLmZpbGVzW3IyXTtcbiAgICAgICAgaWYgKGUyIHx8IChcIi9cIiAhPT0gcjIuc2xpY2UoLTEpICYmIChyMiArPSBcIi9cIiksIGUyID0gdGhpcy5maWxlc1tyMl0pLCBlMiAmJiAhZTIuZGlyKVxuICAgICAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzW3IyXTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGZvciAodmFyIHQyID0gdGhpcy5maWx0ZXIoZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgICByZXR1cm4gdDMubmFtZS5zbGljZSgwLCByMi5sZW5ndGgpID09PSByMjtcbiAgICAgICAgICB9KSwgbjIgPSAwOyBuMiA8IHQyLmxlbmd0aDsgbjIrKylcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzW3QyW24yXS5uYW1lXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LCBnZW5lcmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO1xuICAgICAgfSwgZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMiA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICgocjIgPSB1LmV4dGVuZChlMiB8fCB7fSwgeyBzdHJlYW1GaWxlczogZmFsc2UsIGNvbXByZXNzaW9uOiBcIlNUT1JFXCIsIGNvbXByZXNzaW9uT3B0aW9uczogbnVsbCwgdHlwZTogXCJcIiwgcGxhdGZvcm06IFwiRE9TXCIsIGNvbW1lbnQ6IG51bGwsIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ppcFwiLCBlbmNvZGVGaWxlTmFtZTogaS51dGY4ZW5jb2RlIH0pKS50eXBlID0gcjIudHlwZS50b0xvd2VyQ2FzZSgpLCByMi5jb21wcmVzc2lvbiA9IHIyLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCksIFwiYmluYXJ5c3RyaW5nXCIgPT09IHIyLnR5cGUgJiYgKHIyLnR5cGUgPSBcInN0cmluZ1wiKSwgIXIyLnR5cGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO1xuICAgICAgICAgIHUuY2hlY2tTdXBwb3J0KHIyLnR5cGUpLCBcImRhcndpblwiICE9PSByMi5wbGF0Zm9ybSAmJiBcImZyZWVic2RcIiAhPT0gcjIucGxhdGZvcm0gJiYgXCJsaW51eFwiICE9PSByMi5wbGF0Zm9ybSAmJiBcInN1bm9zXCIgIT09IHIyLnBsYXRmb3JtIHx8IChyMi5wbGF0Zm9ybSA9IFwiVU5JWFwiKSwgXCJ3aW4zMlwiID09PSByMi5wbGF0Zm9ybSAmJiAocjIucGxhdGZvcm0gPSBcIkRPU1wiKTtcbiAgICAgICAgICB2YXIgbjIgPSByMi5jb21tZW50IHx8IHRoaXMuY29tbWVudCB8fCBcIlwiO1xuICAgICAgICAgIHQyID0gby5nZW5lcmF0ZVdvcmtlcih0aGlzLCByMiwgbjIpO1xuICAgICAgICB9IGNhdGNoIChlMykge1xuICAgICAgICAgICh0MiA9IG5ldyBsKFwiZXJyb3JcIikpLmVycm9yKGUzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGEodDIsIHIyLnR5cGUgfHwgXCJzdHJpbmdcIiwgcjIubWltZVR5cGUpO1xuICAgICAgfSwgZ2VuZXJhdGVBc3luYzogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlSW50ZXJuYWxTdHJlYW0oZTIpLmFjY3VtdWxhdGUodDIpO1xuICAgICAgfSwgZ2VuZXJhdGVOb2RlU3RyZWFtOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuIChlMiA9IGUyIHx8IHt9KS50eXBlIHx8IChlMi50eXBlID0gXCJub2RlYnVmZmVyXCIpLCB0aGlzLmdlbmVyYXRlSW50ZXJuYWxTdHJlYW0oZTIpLnRvTm9kZWpzU3RyZWFtKHQyKTtcbiAgICAgIH0gfTtcbiAgICAgIHQuZXhwb3J0cyA9IG47XG4gICAgfSwgeyBcIi4vY29tcHJlc3NlZE9iamVjdFwiOiAyLCBcIi4vZGVmYXVsdHNcIjogNSwgXCIuL2dlbmVyYXRlXCI6IDksIFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCI6IDEyLCBcIi4vbm9kZWpzVXRpbHNcIjogMTQsIFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOiAyOCwgXCIuL3N0cmVhbS9TdHJlYW1IZWxwZXJcIjogMjksIFwiLi91dGY4XCI6IDMxLCBcIi4vdXRpbHNcIjogMzIsIFwiLi96aXBPYmplY3RcIjogMzUgfV0sIDE2OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdC5leHBvcnRzID0gZShcInN0cmVhbVwiKTtcbiAgICB9LCB7IHN0cmVhbTogdm9pZCAwIH1dLCAxNzogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vRGF0YVJlYWRlclwiKTtcbiAgICAgIGZ1bmN0aW9uIGkoZTIpIHtcbiAgICAgICAgbi5jYWxsKHRoaXMsIGUyKTtcbiAgICAgICAgZm9yICh2YXIgdDIgPSAwOyB0MiA8IHRoaXMuZGF0YS5sZW5ndGg7IHQyKyspXG4gICAgICAgICAgZTJbdDJdID0gMjU1ICYgZTJbdDJdO1xuICAgICAgfVxuICAgICAgZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksIG4pLCBpLnByb3RvdHlwZS5ieXRlQXQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3RoaXMuemVybyArIGUyXTtcbiAgICAgIH0sIGkucHJvdG90eXBlLmxhc3RJbmRleE9mU2lnbmF0dXJlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgZm9yICh2YXIgdDIgPSBlMi5jaGFyQ29kZUF0KDApLCByMiA9IGUyLmNoYXJDb2RlQXQoMSksIG4yID0gZTIuY2hhckNvZGVBdCgyKSwgaTIgPSBlMi5jaGFyQ29kZUF0KDMpLCBzID0gdGhpcy5sZW5ndGggLSA0OyAwIDw9IHM7IC0tcylcbiAgICAgICAgICBpZiAodGhpcy5kYXRhW3NdID09PSB0MiAmJiB0aGlzLmRhdGFbcyArIDFdID09PSByMiAmJiB0aGlzLmRhdGFbcyArIDJdID09PSBuMiAmJiB0aGlzLmRhdGFbcyArIDNdID09PSBpMilcbiAgICAgICAgICAgIHJldHVybiBzIC0gdGhpcy56ZXJvO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9LCBpLnByb3RvdHlwZS5yZWFkQW5kQ2hlY2tTaWduYXR1cmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIgPSBlMi5jaGFyQ29kZUF0KDApLCByMiA9IGUyLmNoYXJDb2RlQXQoMSksIG4yID0gZTIuY2hhckNvZGVBdCgyKSwgaTIgPSBlMi5jaGFyQ29kZUF0KDMpLCBzID0gdGhpcy5yZWFkRGF0YSg0KTtcbiAgICAgICAgcmV0dXJuIHQyID09PSBzWzBdICYmIHIyID09PSBzWzFdICYmIG4yID09PSBzWzJdICYmIGkyID09PSBzWzNdO1xuICAgICAgfSwgaS5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAodGhpcy5jaGVja09mZnNldChlMiksIDAgPT09IGUyKVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgdmFyIHQyID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMuemVybyArIHRoaXMuaW5kZXgsIHRoaXMuemVybyArIHRoaXMuaW5kZXggKyBlMik7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ICs9IGUyLCB0MjtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IGk7XG4gICAgfSwgeyBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vRGF0YVJlYWRlclwiOiAxOCB9XSwgMTg6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuLi91dGlsc1wiKTtcbiAgICAgIGZ1bmN0aW9uIGkoZTIpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZTIsIHRoaXMubGVuZ3RoID0gZTIubGVuZ3RoLCB0aGlzLmluZGV4ID0gMCwgdGhpcy56ZXJvID0gMDtcbiAgICAgIH1cbiAgICAgIGkucHJvdG90eXBlID0geyBjaGVja09mZnNldDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5jaGVja0luZGV4KHRoaXMuaW5kZXggKyBlMik7XG4gICAgICB9LCBjaGVja0luZGV4OiBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggPCB0aGlzLnplcm8gKyBlMiB8fCBlMiA8IDApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW5kIG9mIGRhdGEgcmVhY2hlZCAoZGF0YSBsZW5ndGggPSBcIiArIHRoaXMubGVuZ3RoICsgXCIsIGFza2VkIGluZGV4ID0gXCIgKyBlMiArIFwiKS4gQ29ycnVwdGVkIHppcCA/XCIpO1xuICAgICAgfSwgc2V0SW5kZXg6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuY2hlY2tJbmRleChlMiksIHRoaXMuaW5kZXggPSBlMjtcbiAgICAgIH0sIHNraXA6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuc2V0SW5kZXgodGhpcy5pbmRleCArIGUyKTtcbiAgICAgIH0sIGJ5dGVBdDogZnVuY3Rpb24oKSB7XG4gICAgICB9LCByZWFkSW50OiBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIsIHIyID0gMDtcbiAgICAgICAgZm9yICh0aGlzLmNoZWNrT2Zmc2V0KGUyKSwgdDIgPSB0aGlzLmluZGV4ICsgZTIgLSAxOyB0MiA+PSB0aGlzLmluZGV4OyB0Mi0tKVxuICAgICAgICAgIHIyID0gKHIyIDw8IDgpICsgdGhpcy5ieXRlQXQodDIpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCArPSBlMiwgcjI7XG4gICAgICB9LCByZWFkU3RyaW5nOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbi50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCB0aGlzLnJlYWREYXRhKGUyKSk7XG4gICAgICB9LCByZWFkRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICB9LCBsYXN0SW5kZXhPZlNpZ25hdHVyZTogZnVuY3Rpb24oKSB7XG4gICAgICB9LCByZWFkQW5kQ2hlY2tTaWduYXR1cmU6IGZ1bmN0aW9uKCkge1xuICAgICAgfSwgcmVhZERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB0aGlzLnJlYWRJbnQoNCk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQygxOTgwICsgKGUyID4+IDI1ICYgMTI3KSwgKGUyID4+IDIxICYgMTUpIC0gMSwgZTIgPj4gMTYgJiAzMSwgZTIgPj4gMTEgJiAzMSwgZTIgPj4gNSAmIDYzLCAoMzEgJiBlMikgPDwgMSkpO1xuICAgICAgfSB9LCB0LmV4cG9ydHMgPSBpO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiB9XSwgMTk6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7XG4gICAgICBmdW5jdGlvbiBpKGUyKSB7XG4gICAgICAgIG4uY2FsbCh0aGlzLCBlMik7XG4gICAgICB9XG4gICAgICBlKFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSwgbiksIGkucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5jaGVja09mZnNldChlMik7XG4gICAgICAgIHZhciB0MiA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0aGlzLmluZGV4ICsgZTIpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCArPSBlMiwgdDI7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBpO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjogMjEgfV0sIDIwOiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9EYXRhUmVhZGVyXCIpO1xuICAgICAgZnVuY3Rpb24gaShlMikge1xuICAgICAgICBuLmNhbGwodGhpcywgZTIpO1xuICAgICAgfVxuICAgICAgZShcIi4uL3V0aWxzXCIpLmluaGVyaXRzKGksIG4pLCBpLnByb3RvdHlwZS5ieXRlQXQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvICsgZTIpO1xuICAgICAgfSwgaS5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxhc3RJbmRleE9mKGUyKSAtIHRoaXMuemVybztcbiAgICAgIH0sIGkucHJvdG90eXBlLnJlYWRBbmRDaGVja1NpZ25hdHVyZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBlMiA9PT0gdGhpcy5yZWFkRGF0YSg0KTtcbiAgICAgIH0sIGkucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5jaGVja09mZnNldChlMik7XG4gICAgICAgIHZhciB0MiA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8gKyB0aGlzLmluZGV4LCB0aGlzLnplcm8gKyB0aGlzLmluZGV4ICsgZTIpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleCArPSBlMiwgdDI7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBpO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0RhdGFSZWFkZXJcIjogMTggfV0sIDIxOiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9BcnJheVJlYWRlclwiKTtcbiAgICAgIGZ1bmN0aW9uIGkoZTIpIHtcbiAgICAgICAgbi5jYWxsKHRoaXMsIGUyKTtcbiAgICAgIH1cbiAgICAgIGUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhpLCBuKSwgaS5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAodGhpcy5jaGVja09mZnNldChlMiksIDAgPT09IGUyKVxuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgdmFyIHQyID0gdGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuemVybyArIHRoaXMuaW5kZXgsIHRoaXMuemVybyArIHRoaXMuaW5kZXggKyBlMik7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ICs9IGUyLCB0MjtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IGk7XG4gICAgfSwgeyBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vQXJyYXlSZWFkZXJcIjogMTcgfV0sIDIyOiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBlKFwiLi4vdXRpbHNcIiksIGkgPSBlKFwiLi4vc3VwcG9ydFwiKSwgcyA9IGUoXCIuL0FycmF5UmVhZGVyXCIpLCBhID0gZShcIi4vU3RyaW5nUmVhZGVyXCIpLCBvID0gZShcIi4vTm9kZUJ1ZmZlclJlYWRlclwiKSwgaCA9IGUoXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIik7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIgPSBuLmdldFR5cGVPZihlMik7XG4gICAgICAgIHJldHVybiBuLmNoZWNrU3VwcG9ydCh0MiksIFwic3RyaW5nXCIgIT09IHQyIHx8IGkudWludDhhcnJheSA/IFwibm9kZWJ1ZmZlclwiID09PSB0MiA/IG5ldyBvKGUyKSA6IGkudWludDhhcnJheSA/IG5ldyBoKG4udHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsIGUyKSkgOiBuZXcgcyhuLnRyYW5zZm9ybVRvKFwiYXJyYXlcIiwgZTIpKSA6IG5ldyBhKGUyKTtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4uL3N1cHBvcnRcIjogMzAsIFwiLi4vdXRpbHNcIjogMzIsIFwiLi9BcnJheVJlYWRlclwiOiAxNywgXCIuL05vZGVCdWZmZXJSZWFkZXJcIjogMTksIFwiLi9TdHJpbmdSZWFkZXJcIjogMjAsIFwiLi9VaW50OEFycmF5UmVhZGVyXCI6IDIxIH1dLCAyMzogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHIuTE9DQUxfRklMRV9IRUFERVIgPSBcIlBLXHUwMDAzXHUwMDA0XCIsIHIuQ0VOVFJBTF9GSUxFX0hFQURFUiA9IFwiUEtcdTAwMDFcdTAwMDJcIiwgci5DRU5UUkFMX0RJUkVDVE9SWV9FTkQgPSBcIlBLXHUwMDA1XHUwMDA2XCIsIHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiA9IFwiUEtcdTAwMDZcXHgwN1wiLCByLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCA9IFwiUEtcdTAwMDZcdTAwMDZcIiwgci5EQVRBX0RFU0NSSVBUT1IgPSBcIlBLXFx4MDdcXGJcIjtcbiAgICB9LCB7fV0sIDI0OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9HZW5lcmljV29ya2VyXCIpLCBpID0gZShcIi4uL3V0aWxzXCIpO1xuICAgICAgZnVuY3Rpb24gcyhlMikge1xuICAgICAgICBuLmNhbGwodGhpcywgXCJDb252ZXJ0V29ya2VyIHRvIFwiICsgZTIpLCB0aGlzLmRlc3RUeXBlID0gZTI7XG4gICAgICB9XG4gICAgICBpLmluaGVyaXRzKHMsIG4pLCBzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLnB1c2goeyBkYXRhOiBpLnRyYW5zZm9ybVRvKHRoaXMuZGVzdFR5cGUsIGUyLmRhdGEpLCBtZXRhOiBlMi5tZXRhIH0pO1xuICAgICAgfSwgdC5leHBvcnRzID0gcztcbiAgICB9LCB7IFwiLi4vdXRpbHNcIjogMzIsIFwiLi9HZW5lcmljV29ya2VyXCI6IDI4IH1dLCAyNTogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBuID0gZShcIi4vR2VuZXJpY1dvcmtlclwiKSwgaSA9IGUoXCIuLi9jcmMzMlwiKTtcbiAgICAgIGZ1bmN0aW9uIHMoKSB7XG4gICAgICAgIG4uY2FsbCh0aGlzLCBcIkNyYzMyUHJvYmVcIiksIHRoaXMud2l0aFN0cmVhbUluZm8oXCJjcmMzMlwiLCAwKTtcbiAgICAgIH1cbiAgICAgIGUoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhzLCBuKSwgcy5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1JbmZvLmNyYzMyID0gaShlMi5kYXRhLCB0aGlzLnN0cmVhbUluZm8uY3JjMzIgfHwgMCksIHRoaXMucHVzaChlMik7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBzO1xuICAgIH0sIHsgXCIuLi9jcmMzMlwiOiA0LCBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vR2VuZXJpY1dvcmtlclwiOiAyOCB9XSwgMjY6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuLi91dGlsc1wiKSwgaSA9IGUoXCIuL0dlbmVyaWNXb3JrZXJcIik7XG4gICAgICBmdW5jdGlvbiBzKGUyKSB7XG4gICAgICAgIGkuY2FsbCh0aGlzLCBcIkRhdGFMZW5ndGhQcm9iZSBmb3IgXCIgKyBlMiksIHRoaXMucHJvcE5hbWUgPSBlMiwgdGhpcy53aXRoU3RyZWFtSW5mbyhlMiwgMCk7XG4gICAgICB9XG4gICAgICBuLmluaGVyaXRzKHMsIGkpLCBzLnByb3RvdHlwZS5wcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAoZTIpIHtcbiAgICAgICAgICB2YXIgdDIgPSB0aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV0gfHwgMDtcbiAgICAgICAgICB0aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV0gPSB0MiArIGUyLmRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGkucHJvdG90eXBlLnByb2Nlc3NDaHVuay5jYWxsKHRoaXMsIGUyKTtcbiAgICAgIH0sIHQuZXhwb3J0cyA9IHM7XG4gICAgfSwgeyBcIi4uL3V0aWxzXCI6IDMyLCBcIi4vR2VuZXJpY1dvcmtlclwiOiAyOCB9XSwgMjc6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuLi91dGlsc1wiKSwgaSA9IGUoXCIuL0dlbmVyaWNXb3JrZXJcIik7XG4gICAgICBmdW5jdGlvbiBzKGUyKSB7XG4gICAgICAgIGkuY2FsbCh0aGlzLCBcIkRhdGFXb3JrZXJcIik7XG4gICAgICAgIHZhciB0MiA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGF0YUlzUmVhZHkgPSBmYWxzZSwgdGhpcy5pbmRleCA9IDAsIHRoaXMubWF4ID0gMCwgdGhpcy5kYXRhID0gbnVsbCwgdGhpcy50eXBlID0gXCJcIiwgdGhpcy5fdGlja1NjaGVkdWxlZCA9IGZhbHNlLCBlMi50aGVuKGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIuZGF0YUlzUmVhZHkgPSB0cnVlLCB0Mi5kYXRhID0gZTMsIHQyLm1heCA9IGUzICYmIGUzLmxlbmd0aCB8fCAwLCB0Mi50eXBlID0gbi5nZXRUeXBlT2YoZTMpLCB0Mi5pc1BhdXNlZCB8fCB0Mi5fdGlja0FuZFJlcGVhdCgpO1xuICAgICAgICB9LCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHQyLmVycm9yKGUzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBuLmluaGVyaXRzKHMsIGkpLCBzLnByb3RvdHlwZS5jbGVhblVwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGkucHJvdG90eXBlLmNsZWFuVXAuY2FsbCh0aGlzKSwgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgIH0sIHMucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gISFpLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSAmJiAoIXRoaXMuX3RpY2tTY2hlZHVsZWQgJiYgdGhpcy5kYXRhSXNSZWFkeSAmJiAodGhpcy5fdGlja1NjaGVkdWxlZCA9IHRydWUsIG4uZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCwgW10sIHRoaXMpKSwgdHJ1ZSk7XG4gICAgICB9LCBzLnByb3RvdHlwZS5fdGlja0FuZFJlcGVhdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90aWNrU2NoZWR1bGVkID0gZmFsc2UsIHRoaXMuaXNQYXVzZWQgfHwgdGhpcy5pc0ZpbmlzaGVkIHx8ICh0aGlzLl90aWNrKCksIHRoaXMuaXNGaW5pc2hlZCB8fCAobi5kZWxheSh0aGlzLl90aWNrQW5kUmVwZWF0LCBbXSwgdGhpcyksIHRoaXMuX3RpY2tTY2hlZHVsZWQgPSB0cnVlKSk7XG4gICAgICB9LCBzLnByb3RvdHlwZS5fdGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pc1BhdXNlZCB8fCB0aGlzLmlzRmluaXNoZWQpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZTIgPSBudWxsLCB0MiA9IE1hdGgubWluKHRoaXMubWF4LCB0aGlzLmluZGV4ICsgMTYzODQpO1xuICAgICAgICBpZiAodGhpcy5pbmRleCA+PSB0aGlzLm1heClcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbmQoKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICBlMiA9IHRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5pbmRleCwgdDIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInVpbnQ4YXJyYXlcIjpcbiAgICAgICAgICAgIGUyID0gdGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuaW5kZXgsIHQyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCI6XG4gICAgICAgICAgICBlMiA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LCB0Mik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggPSB0MiwgdGhpcy5wdXNoKHsgZGF0YTogZTIsIG1ldGE6IHsgcGVyY2VudDogdGhpcy5tYXggPyB0aGlzLmluZGV4IC8gdGhpcy5tYXggKiAxMDAgOiAwIH0gfSk7XG4gICAgICB9LCB0LmV4cG9ydHMgPSBzO1xuICAgIH0sIHsgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0dlbmVyaWNXb3JrZXJcIjogMjggfV0sIDI4OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgZnVuY3Rpb24gbihlMikge1xuICAgICAgICB0aGlzLm5hbWUgPSBlMiB8fCBcImRlZmF1bHRcIiwgdGhpcy5zdHJlYW1JbmZvID0ge30sIHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBudWxsLCB0aGlzLmV4dHJhU3RyZWFtSW5mbyA9IHt9LCB0aGlzLmlzUGF1c2VkID0gdHJ1ZSwgdGhpcy5pc0ZpbmlzaGVkID0gZmFsc2UsIHRoaXMuaXNMb2NrZWQgPSBmYWxzZSwgdGhpcy5fbGlzdGVuZXJzID0geyBkYXRhOiBbXSwgZW5kOiBbXSwgZXJyb3I6IFtdIH0sIHRoaXMucHJldmlvdXMgPSBudWxsO1xuICAgICAgfVxuICAgICAgbi5wcm90b3R5cGUgPSB7IHB1c2g6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgZTIpO1xuICAgICAgfSwgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNGaW5pc2hlZClcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIiksIHRoaXMuY2xlYW5VcCgpLCB0aGlzLmlzRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGUyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sIGVycm9yOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNGaW5pc2hlZCAmJiAodGhpcy5pc1BhdXNlZCA/IHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSBlMiA6ICh0aGlzLmlzRmluaXNoZWQgPSB0cnVlLCB0aGlzLmVtaXQoXCJlcnJvclwiLCBlMiksIHRoaXMucHJldmlvdXMgJiYgdGhpcy5wcmV2aW91cy5lcnJvcihlMiksIHRoaXMuY2xlYW5VcCgpKSwgdHJ1ZSk7XG4gICAgICB9LCBvbjogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnNbZTJdLnB1c2godDIpLCB0aGlzO1xuICAgICAgfSwgY2xlYW5VcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtSW5mbyA9IHRoaXMuZ2VuZXJhdGVkRXJyb3IgPSB0aGlzLmV4dHJhU3RyZWFtSW5mbyA9IG51bGwsIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xuICAgICAgfSwgZW1pdDogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbZTJdKVxuICAgICAgICAgIGZvciAodmFyIHIyID0gMDsgcjIgPCB0aGlzLl9saXN0ZW5lcnNbZTJdLmxlbmd0aDsgcjIrKylcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1tlMl1bcjJdLmNhbGwodGhpcywgdDIpO1xuICAgICAgfSwgcGlwZTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGUyLnJlZ2lzdGVyUHJldmlvdXModGhpcyk7XG4gICAgICB9LCByZWdpc3RlclByZXZpb3VzOiBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAodGhpcy5pc0xvY2tlZClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3RyZWFtICdcIiArIHRoaXMgKyBcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTtcbiAgICAgICAgdGhpcy5zdHJlYW1JbmZvID0gZTIuc3RyZWFtSW5mbywgdGhpcy5tZXJnZVN0cmVhbUluZm8oKSwgdGhpcy5wcmV2aW91cyA9IGUyO1xuICAgICAgICB2YXIgdDIgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZTIub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdDIucHJvY2Vzc0NodW5rKGUzKTtcbiAgICAgICAgfSksIGUyLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHQyLmVuZCgpO1xuICAgICAgICB9KSwgZTIub24oXCJlcnJvclwiLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHQyLmVycm9yKGUzKTtcbiAgICAgICAgfSksIHRoaXM7XG4gICAgICB9LCBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc1BhdXNlZCAmJiAhdGhpcy5pc0ZpbmlzaGVkICYmICh0aGlzLmlzUGF1c2VkID0gdHJ1ZSwgdGhpcy5wcmV2aW91cyAmJiB0aGlzLnByZXZpb3VzLnBhdXNlKCksIHRydWUpO1xuICAgICAgfSwgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VkIHx8IHRoaXMuaXNGaW5pc2hlZClcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBlMiA9IHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVkRXJyb3IgJiYgKHRoaXMuZXJyb3IodGhpcy5nZW5lcmF0ZWRFcnJvciksIGUyID0gdHJ1ZSksIHRoaXMucHJldmlvdXMgJiYgdGhpcy5wcmV2aW91cy5yZXN1bWUoKSwgIWUyO1xuICAgICAgfSwgZmx1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgfSwgcHJvY2Vzc0NodW5rOiBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLnB1c2goZTIpO1xuICAgICAgfSwgd2l0aFN0cmVhbUluZm86IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRyYVN0cmVhbUluZm9bZTJdID0gdDIsIHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksIHRoaXM7XG4gICAgICB9LCBtZXJnZVN0cmVhbUluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBlMiBpbiB0aGlzLmV4dHJhU3RyZWFtSW5mbylcbiAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5leHRyYVN0cmVhbUluZm8sIGUyKSAmJiAodGhpcy5zdHJlYW1JbmZvW2UyXSA9IHRoaXMuZXh0cmFTdHJlYW1JbmZvW2UyXSk7XG4gICAgICB9LCBsb2NrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMb2NrZWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIgKyB0aGlzICsgXCInIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC5cIik7XG4gICAgICAgIHRoaXMuaXNMb2NrZWQgPSB0cnVlLCB0aGlzLnByZXZpb3VzICYmIHRoaXMucHJldmlvdXMubG9jaygpO1xuICAgICAgfSwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSBcIldvcmtlciBcIiArIHRoaXMubmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMgPyB0aGlzLnByZXZpb3VzICsgXCIgLT4gXCIgKyBlMiA6IGUyO1xuICAgICAgfSB9LCB0LmV4cG9ydHMgPSBuO1xuICAgIH0sIHt9XSwgMjk6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgaCA9IGUoXCIuLi91dGlsc1wiKSwgaSA9IGUoXCIuL0NvbnZlcnRXb3JrZXJcIiksIHMgPSBlKFwiLi9HZW5lcmljV29ya2VyXCIpLCB1ID0gZShcIi4uL2Jhc2U2NFwiKSwgbiA9IGUoXCIuLi9zdXBwb3J0XCIpLCBhID0gZShcIi4uL2V4dGVybmFsXCIpLCBvID0gbnVsbDtcbiAgICAgIGlmIChuLm5vZGVzdHJlYW0pXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbyA9IGUoXCIuLi9ub2RlanMvTm9kZWpzU3RyZWFtT3V0cHV0QWRhcHRlclwiKTtcbiAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgfVxuICAgICAgZnVuY3Rpb24gbChlMiwgbzIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhLlByb21pc2UoZnVuY3Rpb24odDIsIHIyKSB7XG4gICAgICAgICAgdmFyIG4yID0gW10sIGkyID0gZTIuX2ludGVybmFsVHlwZSwgczIgPSBlMi5fb3V0cHV0VHlwZSwgYTIgPSBlMi5fbWltZVR5cGU7XG4gICAgICAgICAgZTIub24oXCJkYXRhXCIsIGZ1bmN0aW9uKGUzLCB0Mykge1xuICAgICAgICAgICAgbjIucHVzaChlMyksIG8yICYmIG8yKHQzKTtcbiAgICAgICAgICB9KS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgICBuMiA9IFtdLCByMihlMyk7XG4gICAgICAgICAgfSkub24oXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgZTMgPSBmdW5jdGlvbihlNCwgdDMsIHIzKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlNCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgubmV3QmxvYihoLnRyYW5zZm9ybVRvKFwiYXJyYXlidWZmZXJcIiwgdDMpLCByMyk7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiYmFzZTY0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1LmVuY29kZSh0Myk7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC50cmFuc2Zvcm1UbyhlNCwgdDMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfShzMiwgZnVuY3Rpb24oZTQsIHQzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIzLCBuMyA9IDAsIGkzID0gbnVsbCwgczMgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAocjMgPSAwOyByMyA8IHQzLmxlbmd0aDsgcjMrKylcbiAgICAgICAgICAgICAgICAgIHMzICs9IHQzW3IzXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChlNCkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDMuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgdDMpO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInVpbnQ4YXJyYXlcIjpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpMyA9IG5ldyBVaW50OEFycmF5KHMzKSwgcjMgPSAwOyByMyA8IHQzLmxlbmd0aDsgcjMrKylcbiAgICAgICAgICAgICAgICAgICAgICBpMy5zZXQodDNbcjNdLCBuMyksIG4zICs9IHQzW3IzXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpMztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KHQzKTtcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbmNhdCA6IHVuc3VwcG9ydGVkIHR5cGUgJ1wiICsgZTQgKyBcIidcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KGkyLCBuMiksIGEyKTtcbiAgICAgICAgICAgICAgdDIoZTMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZTQpIHtcbiAgICAgICAgICAgICAgcjIoZTQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbjIgPSBbXTtcbiAgICAgICAgICB9KS5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBmKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgdmFyIG4yID0gdDI7XG4gICAgICAgIHN3aXRjaCAodDIpIHtcbiAgICAgICAgICBjYXNlIFwiYmxvYlwiOlxuICAgICAgICAgIGNhc2UgXCJhcnJheWJ1ZmZlclwiOlxuICAgICAgICAgICAgbjIgPSBcInVpbnQ4YXJyYXlcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgICAgIG4yID0gXCJzdHJpbmdcIjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuX2ludGVybmFsVHlwZSA9IG4yLCB0aGlzLl9vdXRwdXRUeXBlID0gdDIsIHRoaXMuX21pbWVUeXBlID0gcjIsIGguY2hlY2tTdXBwb3J0KG4yKSwgdGhpcy5fd29ya2VyID0gZTIucGlwZShuZXcgaShuMikpLCBlMi5sb2NrKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgdGhpcy5fd29ya2VyID0gbmV3IHMoXCJlcnJvclwiKSwgdGhpcy5fd29ya2VyLmVycm9yKGUzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZi5wcm90b3R5cGUgPSB7IGFjY3VtdWxhdGU6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBsKHRoaXMsIGUyKTtcbiAgICAgIH0sIG9uOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIyID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFwiZGF0YVwiID09PSBlMiA/IHRoaXMuX3dvcmtlci5vbihlMiwgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB0Mi5jYWxsKHIyLCBlMy5kYXRhLCBlMy5tZXRhKTtcbiAgICAgICAgfSkgOiB0aGlzLl93b3JrZXIub24oZTIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGguZGVsYXkodDIsIGFyZ3VtZW50cywgcjIpO1xuICAgICAgICB9KSwgdGhpcztcbiAgICAgIH0sIHJlc3VtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoLmRlbGF5KHRoaXMuX3dvcmtlci5yZXN1bWUsIFtdLCB0aGlzLl93b3JrZXIpLCB0aGlzO1xuICAgICAgfSwgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya2VyLnBhdXNlKCksIHRoaXM7XG4gICAgICB9LCB0b05vZGVqc1N0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgaWYgKGguY2hlY2tTdXBwb3J0KFwibm9kZXN0cmVhbVwiKSwgXCJub2RlYnVmZmVyXCIgIT09IHRoaXMuX291dHB1dFR5cGUpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuX291dHB1dFR5cGUgKyBcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbWV0aG9kXCIpO1xuICAgICAgICByZXR1cm4gbmV3IG8odGhpcywgeyBvYmplY3RNb2RlOiBcIm5vZGVidWZmZXJcIiAhPT0gdGhpcy5fb3V0cHV0VHlwZSB9LCBlMik7XG4gICAgICB9IH0sIHQuZXhwb3J0cyA9IGY7XG4gICAgfSwgeyBcIi4uL2Jhc2U2NFwiOiAxLCBcIi4uL2V4dGVybmFsXCI6IDYsIFwiLi4vbm9kZWpzL05vZGVqc1N0cmVhbU91dHB1dEFkYXB0ZXJcIjogMTMsIFwiLi4vc3VwcG9ydFwiOiAzMCwgXCIuLi91dGlsc1wiOiAzMiwgXCIuL0NvbnZlcnRXb3JrZXJcIjogMjQsIFwiLi9HZW5lcmljV29ya2VyXCI6IDI4IH1dLCAzMDogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIGlmIChyLmJhc2U2NCA9IHRydWUsIHIuYXJyYXkgPSB0cnVlLCByLnN0cmluZyA9IHRydWUsIHIuYXJyYXlidWZmZXIgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBBcnJheUJ1ZmZlciAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBVaW50OEFycmF5LCByLm5vZGVidWZmZXIgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBCdWZmZXIsIHIudWludDhhcnJheSA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQ4QXJyYXksIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICByLmJsb2IgPSBmYWxzZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgbiA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByLmJsb2IgPSAwID09PSBuZXcgQmxvYihbbl0sIHsgdHlwZTogXCJhcHBsaWNhdGlvbi96aXBcIiB9KS5zaXplO1xuICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaSA9IG5ldyAoc2VsZi5CbG9iQnVpbGRlciB8fCBzZWxmLldlYktpdEJsb2JCdWlsZGVyIHx8IHNlbGYuTW96QmxvYkJ1aWxkZXIgfHwgc2VsZi5NU0Jsb2JCdWlsZGVyKSgpO1xuICAgICAgICAgICAgaS5hcHBlbmQobiksIHIuYmxvYiA9IDAgPT09IGkuZ2V0QmxvYihcImFwcGxpY2F0aW9uL3ppcFwiKS5zaXplO1xuICAgICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgICByLmJsb2IgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHIubm9kZXN0cmVhbSA9ICEhZShcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZTtcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIHIubm9kZXN0cmVhbSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHsgXCJyZWFkYWJsZS1zdHJlYW1cIjogMTYgfV0sIDMxOiBbZnVuY3Rpb24oZSwgdCwgcykge1xuICAgICAgZm9yICh2YXIgbyA9IGUoXCIuL3V0aWxzXCIpLCBoID0gZShcIi4vc3VwcG9ydFwiKSwgciA9IGUoXCIuL25vZGVqc1V0aWxzXCIpLCBuID0gZShcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksIHUgPSBuZXcgQXJyYXkoMjU2KSwgaSA9IDA7IGkgPCAyNTY7IGkrKylcbiAgICAgICAgdVtpXSA9IDI1MiA8PSBpID8gNiA6IDI0OCA8PSBpID8gNSA6IDI0MCA8PSBpID8gNCA6IDIyNCA8PSBpID8gMyA6IDE5MiA8PSBpID8gMiA6IDE7XG4gICAgICB1WzI1NF0gPSB1WzI1NF0gPSAxO1xuICAgICAgZnVuY3Rpb24gYSgpIHtcbiAgICAgICAgbi5jYWxsKHRoaXMsIFwidXRmLTggZGVjb2RlXCIpLCB0aGlzLmxlZnRPdmVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGwoKSB7XG4gICAgICAgIG4uY2FsbCh0aGlzLCBcInV0Zi04IGVuY29kZVwiKTtcbiAgICAgIH1cbiAgICAgIHMudXRmOGVuY29kZSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBoLm5vZGVidWZmZXIgPyByLm5ld0J1ZmZlckZyb20oZTIsIFwidXRmLThcIikgOiBmdW5jdGlvbihlMykge1xuICAgICAgICAgIHZhciB0MiwgcjIsIG4yLCBpMiwgczIsIGEyID0gZTMubGVuZ3RoLCBvMiA9IDA7XG4gICAgICAgICAgZm9yIChpMiA9IDA7IGkyIDwgYTI7IGkyKyspXG4gICAgICAgICAgICA1NTI5NiA9PSAoNjQ1MTIgJiAocjIgPSBlMy5jaGFyQ29kZUF0KGkyKSkpICYmIGkyICsgMSA8IGEyICYmIDU2MzIwID09ICg2NDUxMiAmIChuMiA9IGUzLmNoYXJDb2RlQXQoaTIgKyAxKSkpICYmIChyMiA9IDY1NTM2ICsgKHIyIC0gNTUyOTYgPDwgMTApICsgKG4yIC0gNTYzMjApLCBpMisrKSwgbzIgKz0gcjIgPCAxMjggPyAxIDogcjIgPCAyMDQ4ID8gMiA6IHIyIDwgNjU1MzYgPyAzIDogNDtcbiAgICAgICAgICBmb3IgKHQyID0gaC51aW50OGFycmF5ID8gbmV3IFVpbnQ4QXJyYXkobzIpIDogbmV3IEFycmF5KG8yKSwgaTIgPSBzMiA9IDA7IHMyIDwgbzI7IGkyKyspXG4gICAgICAgICAgICA1NTI5NiA9PSAoNjQ1MTIgJiAocjIgPSBlMy5jaGFyQ29kZUF0KGkyKSkpICYmIGkyICsgMSA8IGEyICYmIDU2MzIwID09ICg2NDUxMiAmIChuMiA9IGUzLmNoYXJDb2RlQXQoaTIgKyAxKSkpICYmIChyMiA9IDY1NTM2ICsgKHIyIC0gNTUyOTYgPDwgMTApICsgKG4yIC0gNTYzMjApLCBpMisrKSwgcjIgPCAxMjggPyB0MltzMisrXSA9IHIyIDogKHIyIDwgMjA0OCA/IHQyW3MyKytdID0gMTkyIHwgcjIgPj4+IDYgOiAocjIgPCA2NTUzNiA/IHQyW3MyKytdID0gMjI0IHwgcjIgPj4+IDEyIDogKHQyW3MyKytdID0gMjQwIHwgcjIgPj4+IDE4LCB0MltzMisrXSA9IDEyOCB8IHIyID4+PiAxMiAmIDYzKSwgdDJbczIrK10gPSAxMjggfCByMiA+Pj4gNiAmIDYzKSwgdDJbczIrK10gPSAxMjggfCA2MyAmIHIyKTtcbiAgICAgICAgICByZXR1cm4gdDI7XG4gICAgICAgIH0oZTIpO1xuICAgICAgfSwgcy51dGY4ZGVjb2RlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGgubm9kZWJ1ZmZlciA/IG8udHJhbnNmb3JtVG8oXCJub2RlYnVmZmVyXCIsIGUyKS50b1N0cmluZyhcInV0Zi04XCIpIDogZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB2YXIgdDIsIHIyLCBuMiwgaTIsIHMyID0gZTMubGVuZ3RoLCBhMiA9IG5ldyBBcnJheSgyICogczIpO1xuICAgICAgICAgIGZvciAodDIgPSByMiA9IDA7IHQyIDwgczI7IClcbiAgICAgICAgICAgIGlmICgobjIgPSBlM1t0MisrXSkgPCAxMjgpXG4gICAgICAgICAgICAgIGEyW3IyKytdID0gbjI7XG4gICAgICAgICAgICBlbHNlIGlmICg0IDwgKGkyID0gdVtuMl0pKVxuICAgICAgICAgICAgICBhMltyMisrXSA9IDY1NTMzLCB0MiArPSBpMiAtIDE7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yIChuMiAmPSAyID09PSBpMiA/IDMxIDogMyA9PT0gaTIgPyAxNSA6IDc7IDEgPCBpMiAmJiB0MiA8IHMyOyApXG4gICAgICAgICAgICAgICAgbjIgPSBuMiA8PCA2IHwgNjMgJiBlM1t0MisrXSwgaTItLTtcbiAgICAgICAgICAgICAgMSA8IGkyID8gYTJbcjIrK10gPSA2NTUzMyA6IG4yIDwgNjU1MzYgPyBhMltyMisrXSA9IG4yIDogKG4yIC09IDY1NTM2LCBhMltyMisrXSA9IDU1Mjk2IHwgbjIgPj4gMTAgJiAxMDIzLCBhMltyMisrXSA9IDU2MzIwIHwgMTAyMyAmIG4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYTIubGVuZ3RoICE9PSByMiAmJiAoYTIuc3ViYXJyYXkgPyBhMiA9IGEyLnN1YmFycmF5KDAsIHIyKSA6IGEyLmxlbmd0aCA9IHIyKSwgby5hcHBseUZyb21DaGFyQ29kZShhMik7XG4gICAgICAgIH0oZTIgPSBvLnRyYW5zZm9ybVRvKGgudWludDhhcnJheSA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiLCBlMikpO1xuICAgICAgfSwgby5pbmhlcml0cyhhLCBuKSwgYS5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gby50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIiwgZTIuZGF0YSk7XG4gICAgICAgIGlmICh0aGlzLmxlZnRPdmVyICYmIHRoaXMubGVmdE92ZXIubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGgudWludDhhcnJheSkge1xuICAgICAgICAgICAgdmFyIHIyID0gdDI7XG4gICAgICAgICAgICAodDIgPSBuZXcgVWludDhBcnJheShyMi5sZW5ndGggKyB0aGlzLmxlZnRPdmVyLmxlbmd0aCkpLnNldCh0aGlzLmxlZnRPdmVyLCAwKSwgdDIuc2V0KHIyLCB0aGlzLmxlZnRPdmVyLmxlbmd0aCk7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICB0MiA9IHRoaXMubGVmdE92ZXIuY29uY2F0KHQyKTtcbiAgICAgICAgICB0aGlzLmxlZnRPdmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbjIgPSBmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICB2YXIgcjM7XG4gICAgICAgICAgZm9yICgodDMgPSB0MyB8fCBlMy5sZW5ndGgpID4gZTMubGVuZ3RoICYmICh0MyA9IGUzLmxlbmd0aCksIHIzID0gdDMgLSAxOyAwIDw9IHIzICYmIDEyOCA9PSAoMTkyICYgZTNbcjNdKTsgKVxuICAgICAgICAgICAgcjMtLTtcbiAgICAgICAgICByZXR1cm4gcjMgPCAwID8gdDMgOiAwID09PSByMyA/IHQzIDogcjMgKyB1W2UzW3IzXV0gPiB0MyA/IHIzIDogdDM7XG4gICAgICAgIH0odDIpLCBpMiA9IHQyO1xuICAgICAgICBuMiAhPT0gdDIubGVuZ3RoICYmIChoLnVpbnQ4YXJyYXkgPyAoaTIgPSB0Mi5zdWJhcnJheSgwLCBuMiksIHRoaXMubGVmdE92ZXIgPSB0Mi5zdWJhcnJheShuMiwgdDIubGVuZ3RoKSkgOiAoaTIgPSB0Mi5zbGljZSgwLCBuMiksIHRoaXMubGVmdE92ZXIgPSB0Mi5zbGljZShuMiwgdDIubGVuZ3RoKSkpLCB0aGlzLnB1c2goeyBkYXRhOiBzLnV0ZjhkZWNvZGUoaTIpLCBtZXRhOiBlMi5tZXRhIH0pO1xuICAgICAgfSwgYS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5sZWZ0T3ZlciAmJiB0aGlzLmxlZnRPdmVyLmxlbmd0aCAmJiAodGhpcy5wdXNoKHsgZGF0YTogcy51dGY4ZGVjb2RlKHRoaXMubGVmdE92ZXIpLCBtZXRhOiB7fSB9KSwgdGhpcy5sZWZ0T3ZlciA9IG51bGwpO1xuICAgICAgfSwgcy5VdGY4RGVjb2RlV29ya2VyID0gYSwgby5pbmhlcml0cyhsLCBuKSwgbC5wcm90b3R5cGUucHJvY2Vzc0NodW5rID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5wdXNoKHsgZGF0YTogcy51dGY4ZW5jb2RlKGUyLmRhdGEpLCBtZXRhOiBlMi5tZXRhIH0pO1xuICAgICAgfSwgcy5VdGY4RW5jb2RlV29ya2VyID0gbDtcbiAgICB9LCB7IFwiLi9ub2RlanNVdGlsc1wiOiAxNCwgXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6IDI4LCBcIi4vc3VwcG9ydFwiOiAzMCwgXCIuL3V0aWxzXCI6IDMyIH1dLCAzMjogW2Z1bmN0aW9uKGUsIHQsIGEpIHtcbiAgICAgIHZhciBvID0gZShcIi4vc3VwcG9ydFwiKSwgaCA9IGUoXCIuL2Jhc2U2NFwiKSwgciA9IGUoXCIuL25vZGVqc1V0aWxzXCIpLCB1ID0gZShcIi4vZXh0ZXJuYWxcIik7XG4gICAgICBmdW5jdGlvbiBuKGUyKSB7XG4gICAgICAgIHJldHVybiBlMjtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGwoZTIsIHQyKSB7XG4gICAgICAgIGZvciAodmFyIHIyID0gMDsgcjIgPCBlMi5sZW5ndGg7ICsrcjIpXG4gICAgICAgICAgdDJbcjJdID0gMjU1ICYgZTIuY2hhckNvZGVBdChyMik7XG4gICAgICAgIHJldHVybiB0MjtcbiAgICAgIH1cbiAgICAgIGUoXCJzZXRpbW1lZGlhdGVcIiksIGEubmV3QmxvYiA9IGZ1bmN0aW9uKHQyLCByMikge1xuICAgICAgICBhLmNoZWNrU3VwcG9ydChcImJsb2JcIik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFt0Ml0sIHsgdHlwZTogcjIgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBuMiA9IG5ldyAoc2VsZi5CbG9iQnVpbGRlciB8fCBzZWxmLldlYktpdEJsb2JCdWlsZGVyIHx8IHNlbGYuTW96QmxvYkJ1aWxkZXIgfHwgc2VsZi5NU0Jsb2JCdWlsZGVyKSgpO1xuICAgICAgICAgICAgcmV0dXJuIG4yLmFwcGVuZCh0MiksIG4yLmdldEJsb2IocjIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWcgOiBjYW4ndCBjb25zdHJ1Y3QgdGhlIEJsb2IuXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBpID0geyBzdHJpbmdpZnlCeUNodW5rOiBmdW5jdGlvbihlMiwgdDIsIHIyKSB7XG4gICAgICAgIHZhciBuMiA9IFtdLCBpMiA9IDAsIHMyID0gZTIubGVuZ3RoO1xuICAgICAgICBpZiAoczIgPD0gcjIpXG4gICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZTIpO1xuICAgICAgICBmb3IgKDsgaTIgPCBzMjsgKVxuICAgICAgICAgIFwiYXJyYXlcIiA9PT0gdDIgfHwgXCJub2RlYnVmZmVyXCIgPT09IHQyID8gbjIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGUyLnNsaWNlKGkyLCBNYXRoLm1pbihpMiArIHIyLCBzMikpKSkgOiBuMi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZTIuc3ViYXJyYXkoaTIsIE1hdGgubWluKGkyICsgcjIsIHMyKSkpKSwgaTIgKz0gcjI7XG4gICAgICAgIHJldHVybiBuMi5qb2luKFwiXCIpO1xuICAgICAgfSwgc3RyaW5naWZ5QnlDaGFyOiBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IFwiXCIsIHIyID0gMDsgcjIgPCBlMi5sZW5ndGg7IHIyKyspXG4gICAgICAgICAgdDIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlMltyMl0pO1xuICAgICAgICByZXR1cm4gdDI7XG4gICAgICB9LCBhcHBseUNhbkJlVXNlZDogeyB1aW50OGFycmF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gby51aW50OGFycmF5ICYmIDEgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoMSkpLmxlbmd0aDtcbiAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0oKSwgbm9kZWJ1ZmZlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIG8ubm9kZWJ1ZmZlciAmJiAxID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHIuYWxsb2NCdWZmZXIoMSkpLmxlbmd0aDtcbiAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0oKSB9IH07XG4gICAgICBmdW5jdGlvbiBzKGUyKSB7XG4gICAgICAgIHZhciB0MiA9IDY1NTM2LCByMiA9IGEuZ2V0VHlwZU9mKGUyKSwgbjIgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ1aW50OGFycmF5XCIgPT09IHIyID8gbjIgPSBpLmFwcGx5Q2FuQmVVc2VkLnVpbnQ4YXJyYXkgOiBcIm5vZGVidWZmZXJcIiA9PT0gcjIgJiYgKG4yID0gaS5hcHBseUNhbkJlVXNlZC5ub2RlYnVmZmVyKSwgbjIpXG4gICAgICAgICAgZm9yICg7IDEgPCB0MjsgKVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGkuc3RyaW5naWZ5QnlDaHVuayhlMiwgcjIsIHQyKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgICAgIHQyID0gTWF0aC5mbG9vcih0MiAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gaS5zdHJpbmdpZnlCeUNoYXIoZTIpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZihlMiwgdDIpIHtcbiAgICAgICAgZm9yICh2YXIgcjIgPSAwOyByMiA8IGUyLmxlbmd0aDsgcjIrKylcbiAgICAgICAgICB0MltyMl0gPSBlMltyMl07XG4gICAgICAgIHJldHVybiB0MjtcbiAgICAgIH1cbiAgICAgIGEuYXBwbHlGcm9tQ2hhckNvZGUgPSBzO1xuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIGMuc3RyaW5nID0geyBzdHJpbmc6IG4sIGFycmF5OiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbChlMiwgbmV3IEFycmF5KGUyLmxlbmd0aCkpO1xuICAgICAgfSwgYXJyYXlidWZmZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBjLnN0cmluZy51aW50OGFycmF5KGUyKS5idWZmZXI7XG4gICAgICB9LCB1aW50OGFycmF5OiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbChlMiwgbmV3IFVpbnQ4QXJyYXkoZTIubGVuZ3RoKSk7XG4gICAgICB9LCBub2RlYnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gbChlMiwgci5hbGxvY0J1ZmZlcihlMi5sZW5ndGgpKTtcbiAgICAgIH0gfSwgYy5hcnJheSA9IHsgc3RyaW5nOiBzLCBhcnJheTogbiwgYXJyYXlidWZmZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShlMikuYnVmZmVyO1xuICAgICAgfSwgdWludDhhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGUyKTtcbiAgICAgIH0sIG5vZGVidWZmZXI6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiByLm5ld0J1ZmZlckZyb20oZTIpO1xuICAgICAgfSB9LCBjLmFycmF5YnVmZmVyID0geyBzdHJpbmc6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBzKG5ldyBVaW50OEFycmF5KGUyKSk7XG4gICAgICB9LCBhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGYobmV3IFVpbnQ4QXJyYXkoZTIpLCBuZXcgQXJyYXkoZTIuYnl0ZUxlbmd0aCkpO1xuICAgICAgfSwgYXJyYXlidWZmZXI6IG4sIHVpbnQ4YXJyYXk6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShlMik7XG4gICAgICB9LCBub2RlYnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gci5uZXdCdWZmZXJGcm9tKG5ldyBVaW50OEFycmF5KGUyKSk7XG4gICAgICB9IH0sIGMudWludDhhcnJheSA9IHsgc3RyaW5nOiBzLCBhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGYoZTIsIG5ldyBBcnJheShlMi5sZW5ndGgpKTtcbiAgICAgIH0sIGFycmF5YnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gZTIuYnVmZmVyO1xuICAgICAgfSwgdWludDhhcnJheTogbiwgbm9kZWJ1ZmZlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIHIubmV3QnVmZmVyRnJvbShlMik7XG4gICAgICB9IH0sIGMubm9kZWJ1ZmZlciA9IHsgc3RyaW5nOiBzLCBhcnJheTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGYoZTIsIG5ldyBBcnJheShlMi5sZW5ndGgpKTtcbiAgICAgIH0sIGFycmF5YnVmZmVyOiBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gYy5ub2RlYnVmZmVyLnVpbnQ4YXJyYXkoZTIpLmJ1ZmZlcjtcbiAgICAgIH0sIHVpbnQ4YXJyYXk6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBmKGUyLCBuZXcgVWludDhBcnJheShlMi5sZW5ndGgpKTtcbiAgICAgIH0sIG5vZGVidWZmZXI6IG4gfSwgYS50cmFuc2Zvcm1UbyA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICBpZiAodDIgPSB0MiB8fCBcIlwiLCAhZTIpXG4gICAgICAgICAgcmV0dXJuIHQyO1xuICAgICAgICBhLmNoZWNrU3VwcG9ydChlMik7XG4gICAgICAgIHZhciByMiA9IGEuZ2V0VHlwZU9mKHQyKTtcbiAgICAgICAgcmV0dXJuIGNbcjJdW2UyXSh0Mik7XG4gICAgICB9LCBhLnJlc29sdmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IGUyLnNwbGl0KFwiL1wiKSwgcjIgPSBbXSwgbjIgPSAwOyBuMiA8IHQyLmxlbmd0aDsgbjIrKykge1xuICAgICAgICAgIHZhciBpMiA9IHQyW24yXTtcbiAgICAgICAgICBcIi5cIiA9PT0gaTIgfHwgXCJcIiA9PT0gaTIgJiYgMCAhPT0gbjIgJiYgbjIgIT09IHQyLmxlbmd0aCAtIDEgfHwgKFwiLi5cIiA9PT0gaTIgPyByMi5wb3AoKSA6IHIyLnB1c2goaTIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjIuam9pbihcIi9cIik7XG4gICAgICB9LCBhLmdldFR5cGVPZiA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBlMiA/IFwic3RyaW5nXCIgOiBcIltvYmplY3QgQXJyYXldXCIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlMikgPyBcImFycmF5XCIgOiBvLm5vZGVidWZmZXIgJiYgci5pc0J1ZmZlcihlMikgPyBcIm5vZGVidWZmZXJcIiA6IG8udWludDhhcnJheSAmJiBlMiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IG8uYXJyYXlidWZmZXIgJiYgZTIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IFwiYXJyYXlidWZmZXJcIiA6IHZvaWQgMDtcbiAgICAgIH0sIGEuY2hlY2tTdXBwb3J0ID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgaWYgKCFvW2UyLnRvTG93ZXJDYXNlKCldKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlMiArIFwiIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBwbGF0Zm9ybVwiKTtcbiAgICAgIH0sIGEuTUFYX1ZBTFVFXzE2QklUUyA9IDY1NTM1LCBhLk1BWF9WQUxVRV8zMkJJVFMgPSAtMSwgYS5wcmV0dHkgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIsIHIyLCBuMiA9IFwiXCI7XG4gICAgICAgIGZvciAocjIgPSAwOyByMiA8IChlMiB8fCBcIlwiKS5sZW5ndGg7IHIyKyspXG4gICAgICAgICAgbjIgKz0gXCJcXFxceFwiICsgKCh0MiA9IGUyLmNoYXJDb2RlQXQocjIpKSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHQyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gbjI7XG4gICAgICB9LCBhLmRlbGF5ID0gZnVuY3Rpb24oZTIsIHQyLCByMikge1xuICAgICAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZTIuYXBwbHkocjIgfHwgbnVsbCwgdDIgfHwgW10pO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGEuaW5oZXJpdHMgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgZnVuY3Rpb24gcjIoKSB7XG4gICAgICAgIH1cbiAgICAgICAgcjIucHJvdG90eXBlID0gdDIucHJvdG90eXBlLCBlMi5wcm90b3R5cGUgPSBuZXcgcjIoKTtcbiAgICAgIH0sIGEuZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlMiwgdDIsIHIyID0ge307XG4gICAgICAgIGZvciAoZTIgPSAwOyBlMiA8IGFyZ3VtZW50cy5sZW5ndGg7IGUyKyspXG4gICAgICAgICAgZm9yICh0MiBpbiBhcmd1bWVudHNbZTJdKVxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tlMl0sIHQyKSAmJiB2b2lkIDAgPT09IHIyW3QyXSAmJiAocjJbdDJdID0gYXJndW1lbnRzW2UyXVt0Ml0pO1xuICAgICAgICByZXR1cm4gcjI7XG4gICAgICB9LCBhLnByZXBhcmVDb250ZW50ID0gZnVuY3Rpb24ocjIsIGUyLCBuMiwgaTIsIHMyKSB7XG4gICAgICAgIHJldHVybiB1LlByb21pc2UucmVzb2x2ZShlMikudGhlbihmdW5jdGlvbihuMykge1xuICAgICAgICAgIHJldHVybiBvLmJsb2IgJiYgKG4zIGluc3RhbmNlb2YgQmxvYiB8fCAtMSAhPT0gW1wiW29iamVjdCBGaWxlXVwiLCBcIltvYmplY3QgQmxvYl1cIl0uaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobjMpKSkgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgRmlsZVJlYWRlciA/IG5ldyB1LlByb21pc2UoZnVuY3Rpb24odDIsIHIzKSB7XG4gICAgICAgICAgICB2YXIgZTMgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgZTMub25sb2FkID0gZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgdDIoZTQudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICB9LCBlMy5vbmVycm9yID0gZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgcjMoZTQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIH0sIGUzLnJlYWRBc0FycmF5QnVmZmVyKG4zKTtcbiAgICAgICAgICB9KSA6IG4zO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdmFyIHQyID0gYS5nZXRUeXBlT2YoZTMpO1xuICAgICAgICAgIHJldHVybiB0MiA/IChcImFycmF5YnVmZmVyXCIgPT09IHQyID8gZTMgPSBhLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLCBlMykgOiBcInN0cmluZ1wiID09PSB0MiAmJiAoczIgPyBlMyA9IGguZGVjb2RlKGUzKSA6IG4yICYmIHRydWUgIT09IGkyICYmIChlMyA9IGZ1bmN0aW9uKGU0KSB7XG4gICAgICAgICAgICByZXR1cm4gbChlNCwgby51aW50OGFycmF5ID8gbmV3IFVpbnQ4QXJyYXkoZTQubGVuZ3RoKSA6IG5ldyBBcnJheShlNC5sZW5ndGgpKTtcbiAgICAgICAgICB9KGUzKSkpLCBlMykgOiB1LlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbid0IHJlYWQgdGhlIGRhdGEgb2YgJ1wiICsgcjIgKyBcIicuIElzIGl0IGluIGEgc3VwcG9ydGVkIEphdmFTY3JpcHQgdHlwZSAoU3RyaW5nLCBCbG9iLCBBcnJheUJ1ZmZlciwgZXRjKSA/XCIpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL2Jhc2U2NFwiOiAxLCBcIi4vZXh0ZXJuYWxcIjogNiwgXCIuL25vZGVqc1V0aWxzXCI6IDE0LCBcIi4vc3VwcG9ydFwiOiAzMCwgc2V0aW1tZWRpYXRlOiA1NCB9XSwgMzM6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgbiA9IGUoXCIuL3JlYWRlci9yZWFkZXJGb3JcIiksIGkgPSBlKFwiLi91dGlsc1wiKSwgcyA9IGUoXCIuL3NpZ25hdHVyZVwiKSwgYSA9IGUoXCIuL3ppcEVudHJ5XCIpLCBvID0gZShcIi4vc3VwcG9ydFwiKTtcbiAgICAgIGZ1bmN0aW9uIGgoZTIpIHtcbiAgICAgICAgdGhpcy5maWxlcyA9IFtdLCB0aGlzLmxvYWRPcHRpb25zID0gZTI7XG4gICAgICB9XG4gICAgICBoLnByb3RvdHlwZSA9IHsgY2hlY2tTaWduYXR1cmU6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKGUyKSkge1xuICAgICAgICAgIHRoaXMucmVhZGVyLmluZGV4IC09IDQ7XG4gICAgICAgICAgdmFyIHQyID0gdGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIG9yIGJ1ZzogdW5leHBlY3RlZCBzaWduYXR1cmUgKFwiICsgaS5wcmV0dHkodDIpICsgXCIsIGV4cGVjdGVkIFwiICsgaS5wcmV0dHkoZTIpICsgXCIpXCIpO1xuICAgICAgICB9XG4gICAgICB9LCBpc1NpZ25hdHVyZTogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiA9IHRoaXMucmVhZGVyLmluZGV4O1xuICAgICAgICB0aGlzLnJlYWRlci5zZXRJbmRleChlMik7XG4gICAgICAgIHZhciBuMiA9IHRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCkgPT09IHQyO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkZXIuc2V0SW5kZXgocjIpLCBuMjtcbiAgICAgIH0sIHJlYWRCbG9ja0VuZE9mQ2VudHJhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlza051bWJlciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMiksIHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpLCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMiksIHRoaXMuY2VudHJhbERpclJlY29yZHMgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpLCB0aGlzLmNlbnRyYWxEaXJTaXplID0gdGhpcy5yZWFkZXIucmVhZEludCg0KSwgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KSwgdGhpcy56aXBDb21tZW50TGVuZ3RoID0gdGhpcy5yZWFkZXIucmVhZEludCgyKTtcbiAgICAgICAgdmFyIGUyID0gdGhpcy5yZWFkZXIucmVhZERhdGEodGhpcy56aXBDb21tZW50TGVuZ3RoKSwgdDIgPSBvLnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIiwgcjIgPSBpLnRyYW5zZm9ybVRvKHQyLCBlMik7XG4gICAgICAgIHRoaXMuemlwQ29tbWVudCA9IHRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocjIpO1xuICAgICAgfSwgcmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZSA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCksIHRoaXMucmVhZGVyLnNraXAoNCksIHRoaXMuZGlza051bWJlciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpLCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCksIHRoaXMuY2VudHJhbERpclJlY29yZHMgPSB0aGlzLnJlYWRlci5yZWFkSW50KDgpLCB0aGlzLmNlbnRyYWxEaXJTaXplID0gdGhpcy5yZWFkZXIucmVhZEludCg4KSwgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID0gdGhpcy5yZWFkZXIucmVhZEludCg4KSwgdGhpcy56aXA2NEV4dGVuc2libGVEYXRhID0ge307XG4gICAgICAgIGZvciAodmFyIGUyLCB0MiwgcjIsIG4yID0gdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUgLSA0NDsgMCA8IG4yOyApXG4gICAgICAgICAgZTIgPSB0aGlzLnJlYWRlci5yZWFkSW50KDIpLCB0MiA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIHIyID0gdGhpcy5yZWFkZXIucmVhZERhdGEodDIpLCB0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbZTJdID0geyBpZDogZTIsIGxlbmd0aDogdDIsIHZhbHVlOiByMiB9O1xuICAgICAgfSwgcmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCksIHRoaXMuZGlza3NDb3VudCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCksIDEgPCB0aGlzLmRpc2tzQ291bnQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGktdm9sdW1lcyB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICB9LCByZWFkTG9jYWxGaWxlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlMiwgdDI7XG4gICAgICAgIGZvciAoZTIgPSAwOyBlMiA8IHRoaXMuZmlsZXMubGVuZ3RoOyBlMisrKVxuICAgICAgICAgIHQyID0gdGhpcy5maWxlc1tlMl0sIHRoaXMucmVhZGVyLnNldEluZGV4KHQyLmxvY2FsSGVhZGVyT2Zmc2V0KSwgdGhpcy5jaGVja1NpZ25hdHVyZShzLkxPQ0FMX0ZJTEVfSEVBREVSKSwgdDIucmVhZExvY2FsUGFydCh0aGlzLnJlYWRlciksIHQyLmhhbmRsZVVURjgoKSwgdDIucHJvY2Vzc0F0dHJpYnV0ZXMoKTtcbiAgICAgIH0sIHJlYWRDZW50cmFsRGlyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGUyO1xuICAgICAgICBmb3IgKHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMuY2VudHJhbERpck9mZnNldCk7IHRoaXMucmVhZGVyLnJlYWRBbmRDaGVja1NpZ25hdHVyZShzLkNFTlRSQUxfRklMRV9IRUFERVIpOyApXG4gICAgICAgICAgKGUyID0gbmV3IGEoeyB6aXA2NDogdGhpcy56aXA2NCB9LCB0aGlzLmxvYWRPcHRpb25zKSkucmVhZENlbnRyYWxQYXJ0KHRoaXMucmVhZGVyKSwgdGhpcy5maWxlcy5wdXNoKGUyKTtcbiAgICAgICAgaWYgKHRoaXMuY2VudHJhbERpclJlY29yZHMgIT09IHRoaXMuZmlsZXMubGVuZ3RoICYmIDAgIT09IHRoaXMuY2VudHJhbERpclJlY29yZHMgJiYgMCA9PT0gdGhpcy5maWxlcy5sZW5ndGgpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiICsgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyArIFwiIHJlY29yZHMgaW4gY2VudHJhbCBkaXIsIGdvdCBcIiArIHRoaXMuZmlsZXMubGVuZ3RoKTtcbiAgICAgIH0sIHJlYWRFbmRPZkNlbnRyYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLkNFTlRSQUxfRElSRUNUT1JZX0VORCk7XG4gICAgICAgIGlmIChlMiA8IDApXG4gICAgICAgICAgdGhyb3cgIXRoaXMuaXNTaWduYXR1cmUoMCwgcy5MT0NBTF9GSUxFX0hFQURFUikgPyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSA6IGlzIHRoaXMgYSB6aXAgZmlsZSA/IElmIGl0IGlzLCBzZWUgaHR0cHM6Ly9zdHVrLmdpdGh1Yi5pby9qc3ppcC9kb2N1bWVudGF0aW9uL2hvd3RvL3JlYWRfemlwLmh0bWxcIikgOiBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTtcbiAgICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgoZTIpO1xuICAgICAgICB2YXIgdDIgPSBlMjtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLCB0aGlzLnJlYWRCbG9ja0VuZE9mQ2VudHJhbCgpLCB0aGlzLmRpc2tOdW1iZXIgPT09IGkuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0ID09PSBpLk1BWF9WQUxVRV8xNkJJVFMgfHwgdGhpcy5jZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2sgPT09IGkuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzID09PSBpLk1BWF9WQUxVRV8xNkJJVFMgfHwgdGhpcy5jZW50cmFsRGlyU2l6ZSA9PT0gaS5NQVhfVkFMVUVfMzJCSVRTIHx8IHRoaXMuY2VudHJhbERpck9mZnNldCA9PT0gaS5NQVhfVkFMVUVfMzJCSVRTKSB7XG4gICAgICAgICAgaWYgKHRoaXMuemlwNjQgPSB0cnVlLCAoZTIgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpKSA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvclwiKTtcbiAgICAgICAgICBpZiAodGhpcy5yZWFkZXIuc2V0SW5kZXgoZTIpLCB0aGlzLmNoZWNrU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiksIHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yKCksICF0aGlzLmlzU2lnbmF0dXJlKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciwgcy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpICYmICh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIgPSB0aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksIHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciA8IDApKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5XCIpO1xuICAgICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciksIHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLCB0aGlzLnJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIyID0gdGhpcy5jZW50cmFsRGlyT2Zmc2V0ICsgdGhpcy5jZW50cmFsRGlyU2l6ZTtcbiAgICAgICAgdGhpcy56aXA2NCAmJiAocjIgKz0gMjAsIHIyICs9IDEyICsgdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUpO1xuICAgICAgICB2YXIgbjIgPSB0MiAtIHIyO1xuICAgICAgICBpZiAoMCA8IG4yKVxuICAgICAgICAgIHRoaXMuaXNTaWduYXR1cmUodDIsIHMuQ0VOVFJBTF9GSUxFX0hFQURFUikgfHwgKHRoaXMucmVhZGVyLnplcm8gPSBuMik7XG4gICAgICAgIGVsc2UgaWYgKG4yIDwgMClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBtaXNzaW5nIFwiICsgTWF0aC5hYnMobjIpICsgXCIgYnl0ZXMuXCIpO1xuICAgICAgfSwgcHJlcGFyZVJlYWRlcjogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy5yZWFkZXIgPSBuKGUyKTtcbiAgICAgIH0sIGxvYWQ6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMucHJlcGFyZVJlYWRlcihlMiksIHRoaXMucmVhZEVuZE9mQ2VudHJhbCgpLCB0aGlzLnJlYWRDZW50cmFsRGlyKCksIHRoaXMucmVhZExvY2FsRmlsZXMoKTtcbiAgICAgIH0gfSwgdC5leHBvcnRzID0gaDtcbiAgICB9LCB7IFwiLi9yZWFkZXIvcmVhZGVyRm9yXCI6IDIyLCBcIi4vc2lnbmF0dXJlXCI6IDIzLCBcIi4vc3VwcG9ydFwiOiAzMCwgXCIuL3V0aWxzXCI6IDMyLCBcIi4vemlwRW50cnlcIjogMzQgfV0sIDM0OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBlKFwiLi9yZWFkZXIvcmVhZGVyRm9yXCIpLCBzID0gZShcIi4vdXRpbHNcIiksIGkgPSBlKFwiLi9jb21wcmVzc2VkT2JqZWN0XCIpLCBhID0gZShcIi4vY3JjMzJcIiksIG8gPSBlKFwiLi91dGY4XCIpLCBoID0gZShcIi4vY29tcHJlc3Npb25zXCIpLCB1ID0gZShcIi4vc3VwcG9ydFwiKTtcbiAgICAgIGZ1bmN0aW9uIGwoZTIsIHQyKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGUyLCB0aGlzLmxvYWRPcHRpb25zID0gdDI7XG4gICAgICB9XG4gICAgICBsLnByb3RvdHlwZSA9IHsgaXNFbmNyeXB0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMSA9PSAoMSAmIHRoaXMuYml0RmxhZyk7XG4gICAgICB9LCB1c2VVVEY4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDIwNDggPT0gKDIwNDggJiB0aGlzLmJpdEZsYWcpO1xuICAgICAgfSwgcmVhZExvY2FsUGFydDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyLCByMjtcbiAgICAgICAgaWYgKGUyLnNraXAoMjIpLCB0aGlzLmZpbGVOYW1lTGVuZ3RoID0gZTIucmVhZEludCgyKSwgcjIgPSBlMi5yZWFkSW50KDIpLCB0aGlzLmZpbGVOYW1lID0gZTIucmVhZERhdGEodGhpcy5maWxlTmFtZUxlbmd0aCksIGUyLnNraXAocjIpLCAtMSA9PT0gdGhpcy5jb21wcmVzc2VkU2l6ZSB8fCAtMSA9PT0gdGhpcy51bmNvbXByZXNzZWRTaXplKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyBvciBjb3JydXB0ZWQgemlwIDogZGlkbid0IGdldCBlbm91Z2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgY2VudHJhbCBkaXJlY3RvcnkgKGNvbXByZXNzZWRTaXplID09PSAtMSB8fCB1bmNvbXByZXNzZWRTaXplID09PSAtMSlcIik7XG4gICAgICAgIGlmIChudWxsID09PSAodDIgPSBmdW5jdGlvbihlMykge1xuICAgICAgICAgIGZvciAodmFyIHQzIGluIGgpXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGgsIHQzKSAmJiBoW3QzXS5tYWdpYyA9PT0gZTMpXG4gICAgICAgICAgICAgIHJldHVybiBoW3QzXTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSh0aGlzLmNvbXByZXNzaW9uTWV0aG9kKSkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCA6IGNvbXByZXNzaW9uIFwiICsgcy5wcmV0dHkodGhpcy5jb21wcmVzc2lvbk1ldGhvZCkgKyBcIiB1bmtub3duIChpbm5lciBmaWxlIDogXCIgKyBzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIHRoaXMuZmlsZU5hbWUpICsgXCIpXCIpO1xuICAgICAgICB0aGlzLmRlY29tcHJlc3NlZCA9IG5ldyBpKHRoaXMuY29tcHJlc3NlZFNpemUsIHRoaXMudW5jb21wcmVzc2VkU2l6ZSwgdGhpcy5jcmMzMiwgdDIsIGUyLnJlYWREYXRhKHRoaXMuY29tcHJlc3NlZFNpemUpKTtcbiAgICAgIH0sIHJlYWRDZW50cmFsUGFydDogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uTWFkZUJ5ID0gZTIucmVhZEludCgyKSwgZTIuc2tpcCgyKSwgdGhpcy5iaXRGbGFnID0gZTIucmVhZEludCgyKSwgdGhpcy5jb21wcmVzc2lvbk1ldGhvZCA9IGUyLnJlYWRTdHJpbmcoMiksIHRoaXMuZGF0ZSA9IGUyLnJlYWREYXRlKCksIHRoaXMuY3JjMzIgPSBlMi5yZWFkSW50KDQpLCB0aGlzLmNvbXByZXNzZWRTaXplID0gZTIucmVhZEludCg0KSwgdGhpcy51bmNvbXByZXNzZWRTaXplID0gZTIucmVhZEludCg0KTtcbiAgICAgICAgdmFyIHQyID0gZTIucmVhZEludCgyKTtcbiAgICAgICAgaWYgKHRoaXMuZXh0cmFGaWVsZHNMZW5ndGggPSBlMi5yZWFkSW50KDIpLCB0aGlzLmZpbGVDb21tZW50TGVuZ3RoID0gZTIucmVhZEludCgyKSwgdGhpcy5kaXNrTnVtYmVyU3RhcnQgPSBlMi5yZWFkSW50KDIpLCB0aGlzLmludGVybmFsRmlsZUF0dHJpYnV0ZXMgPSBlMi5yZWFkSW50KDIpLCB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgPSBlMi5yZWFkSW50KDQpLCB0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0ID0gZTIucmVhZEludCg0KSwgdGhpcy5pc0VuY3J5cHRlZCgpKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRlZCB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIGUyLnNraXAodDIpLCB0aGlzLnJlYWRFeHRyYUZpZWxkcyhlMiksIHRoaXMucGFyc2VaSVA2NEV4dHJhRmllbGQoZTIpLCB0aGlzLmZpbGVDb21tZW50ID0gZTIucmVhZERhdGEodGhpcy5maWxlQ29tbWVudExlbmd0aCk7XG4gICAgICB9LCBwcm9jZXNzQXR0cmlidXRlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudW5peFBlcm1pc3Npb25zID0gbnVsbCwgdGhpcy5kb3NQZXJtaXNzaW9ucyA9IG51bGw7XG4gICAgICAgIHZhciBlMiA9IHRoaXMudmVyc2lvbk1hZGVCeSA+PiA4O1xuICAgICAgICB0aGlzLmRpciA9ICEhKDE2ICYgdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwgMCA9PSBlMiAmJiAodGhpcy5kb3NQZXJtaXNzaW9ucyA9IDYzICYgdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzKSwgMyA9PSBlMiAmJiAodGhpcy51bml4UGVybWlzc2lvbnMgPSB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgPj4gMTYgJiA2NTUzNSksIHRoaXMuZGlyIHx8IFwiL1wiICE9PSB0aGlzLmZpbGVOYW1lU3RyLnNsaWNlKC0xKSB8fCAodGhpcy5kaXIgPSB0cnVlKTtcbiAgICAgIH0sIHBhcnNlWklQNjRFeHRyYUZpZWxkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZXh0cmFGaWVsZHNbMV0pIHtcbiAgICAgICAgICB2YXIgZTIgPSBuKHRoaXMuZXh0cmFGaWVsZHNbMV0udmFsdWUpO1xuICAgICAgICAgIHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9PT0gcy5NQVhfVkFMVUVfMzJCSVRTICYmICh0aGlzLnVuY29tcHJlc3NlZFNpemUgPSBlMi5yZWFkSW50KDgpKSwgdGhpcy5jb21wcmVzc2VkU2l6ZSA9PT0gcy5NQVhfVkFMVUVfMzJCSVRTICYmICh0aGlzLmNvbXByZXNzZWRTaXplID0gZTIucmVhZEludCg4KSksIHRoaXMubG9jYWxIZWFkZXJPZmZzZXQgPT09IHMuTUFYX1ZBTFVFXzMyQklUUyAmJiAodGhpcy5sb2NhbEhlYWRlck9mZnNldCA9IGUyLnJlYWRJbnQoOCkpLCB0aGlzLmRpc2tOdW1iZXJTdGFydCA9PT0gcy5NQVhfVkFMVUVfMzJCSVRTICYmICh0aGlzLmRpc2tOdW1iZXJTdGFydCA9IGUyLnJlYWRJbnQoNCkpO1xuICAgICAgICB9XG4gICAgICB9LCByZWFkRXh0cmFGaWVsZHM6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiwgcjIsIG4yLCBpMiA9IGUyLmluZGV4ICsgdGhpcy5leHRyYUZpZWxkc0xlbmd0aDtcbiAgICAgICAgZm9yICh0aGlzLmV4dHJhRmllbGRzIHx8ICh0aGlzLmV4dHJhRmllbGRzID0ge30pOyBlMi5pbmRleCArIDQgPCBpMjsgKVxuICAgICAgICAgIHQyID0gZTIucmVhZEludCgyKSwgcjIgPSBlMi5yZWFkSW50KDIpLCBuMiA9IGUyLnJlYWREYXRhKHIyKSwgdGhpcy5leHRyYUZpZWxkc1t0Ml0gPSB7IGlkOiB0MiwgbGVuZ3RoOiByMiwgdmFsdWU6IG4yIH07XG4gICAgICAgIGUyLnNldEluZGV4KGkyKTtcbiAgICAgIH0sIGhhbmRsZVVURjg6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB1LnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIjtcbiAgICAgICAgaWYgKHRoaXMudXNlVVRGOCgpKVxuICAgICAgICAgIHRoaXMuZmlsZU5hbWVTdHIgPSBvLnV0ZjhkZWNvZGUodGhpcy5maWxlTmFtZSksIHRoaXMuZmlsZUNvbW1lbnRTdHIgPSBvLnV0ZjhkZWNvZGUodGhpcy5maWxlQ29tbWVudCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciB0MiA9IHRoaXMuZmluZEV4dHJhRmllbGRVbmljb2RlUGF0aCgpO1xuICAgICAgICAgIGlmIChudWxsICE9PSB0MilcbiAgICAgICAgICAgIHRoaXMuZmlsZU5hbWVTdHIgPSB0MjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByMiA9IHMudHJhbnNmb3JtVG8oZTIsIHRoaXMuZmlsZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy5maWxlTmFtZVN0ciA9IHRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocjIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbjIgPSB0aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKTtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gbjIpXG4gICAgICAgICAgICB0aGlzLmZpbGVDb21tZW50U3RyID0gbjI7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgaTIgPSBzLnRyYW5zZm9ybVRvKGUyLCB0aGlzLmZpbGVDb21tZW50KTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUNvbW1lbnRTdHIgPSB0aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKGkyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZTIgPSB0aGlzLmV4dHJhRmllbGRzWzI4Nzg5XTtcbiAgICAgICAgaWYgKGUyKSB7XG4gICAgICAgICAgdmFyIHQyID0gbihlMi52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIDEgIT09IHQyLnJlYWRJbnQoMSkgPyBudWxsIDogYSh0aGlzLmZpbGVOYW1lKSAhPT0gdDIucmVhZEludCg0KSA/IG51bGwgOiBvLnV0ZjhkZWNvZGUodDIucmVhZERhdGEoZTIubGVuZ3RoIC0gNSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSwgZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlMiA9IHRoaXMuZXh0cmFGaWVsZHNbMjU0NjFdO1xuICAgICAgICBpZiAoZTIpIHtcbiAgICAgICAgICB2YXIgdDIgPSBuKGUyLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gMSAhPT0gdDIucmVhZEludCgxKSA/IG51bGwgOiBhKHRoaXMuZmlsZUNvbW1lbnQpICE9PSB0Mi5yZWFkSW50KDQpID8gbnVsbCA6IG8udXRmOGRlY29kZSh0Mi5yZWFkRGF0YShlMi5sZW5ndGggLSA1KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IH0sIHQuZXhwb3J0cyA9IGw7XG4gICAgfSwgeyBcIi4vY29tcHJlc3NlZE9iamVjdFwiOiAyLCBcIi4vY29tcHJlc3Npb25zXCI6IDMsIFwiLi9jcmMzMlwiOiA0LCBcIi4vcmVhZGVyL3JlYWRlckZvclwiOiAyMiwgXCIuL3N1cHBvcnRcIjogMzAsIFwiLi91dGY4XCI6IDMxLCBcIi4vdXRpbHNcIjogMzIgfV0sIDM1OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgZnVuY3Rpb24gbihlMiwgdDIsIHIyKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IGUyLCB0aGlzLmRpciA9IHIyLmRpciwgdGhpcy5kYXRlID0gcjIuZGF0ZSwgdGhpcy5jb21tZW50ID0gcjIuY29tbWVudCwgdGhpcy51bml4UGVybWlzc2lvbnMgPSByMi51bml4UGVybWlzc2lvbnMsIHRoaXMuZG9zUGVybWlzc2lvbnMgPSByMi5kb3NQZXJtaXNzaW9ucywgdGhpcy5fZGF0YSA9IHQyLCB0aGlzLl9kYXRhQmluYXJ5ID0gcjIuYmluYXJ5LCB0aGlzLm9wdGlvbnMgPSB7IGNvbXByZXNzaW9uOiByMi5jb21wcmVzc2lvbiwgY29tcHJlc3Npb25PcHRpb25zOiByMi5jb21wcmVzc2lvbk9wdGlvbnMgfTtcbiAgICAgIH1cbiAgICAgIHZhciBzID0gZShcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSwgaSA9IGUoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLCBhID0gZShcIi4vdXRmOFwiKSwgbyA9IGUoXCIuL2NvbXByZXNzZWRPYmplY3RcIiksIGggPSBlKFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtcbiAgICAgIG4ucHJvdG90eXBlID0geyBpbnRlcm5hbFN0cmVhbTogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gbnVsbCwgcjIgPSBcInN0cmluZ1wiO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZTIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBvdXRwdXQgdHlwZSBzcGVjaWZpZWQuXCIpO1xuICAgICAgICAgIHZhciBuMiA9IFwic3RyaW5nXCIgPT09IChyMiA9IGUyLnRvTG93ZXJDYXNlKCkpIHx8IFwidGV4dFwiID09PSByMjtcbiAgICAgICAgICBcImJpbmFyeXN0cmluZ1wiICE9PSByMiAmJiBcInRleHRcIiAhPT0gcjIgfHwgKHIyID0gXCJzdHJpbmdcIiksIHQyID0gdGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO1xuICAgICAgICAgIHZhciBpMiA9ICF0aGlzLl9kYXRhQmluYXJ5O1xuICAgICAgICAgIGkyICYmICFuMiAmJiAodDIgPSB0Mi5waXBlKG5ldyBhLlV0ZjhFbmNvZGVXb3JrZXIoKSkpLCAhaTIgJiYgbjIgJiYgKHQyID0gdDIucGlwZShuZXcgYS5VdGY4RGVjb2RlV29ya2VyKCkpKTtcbiAgICAgICAgfSBjYXRjaCAoZTMpIHtcbiAgICAgICAgICAodDIgPSBuZXcgaChcImVycm9yXCIpKS5lcnJvcihlMyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBzKHQyLCByMiwgXCJcIik7XG4gICAgICB9LCBhc3luYzogZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsU3RyZWFtKGUyKS5hY2N1bXVsYXRlKHQyKTtcbiAgICAgIH0sIG5vZGVTdHJlYW06IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFN0cmVhbShlMiB8fCBcIm5vZGVidWZmZXJcIikudG9Ob2RlanNTdHJlYW0odDIpO1xuICAgICAgfSwgX2NvbXByZXNzV29ya2VyOiBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEgaW5zdGFuY2VvZiBvICYmIHRoaXMuX2RhdGEuY29tcHJlc3Npb24ubWFnaWMgPT09IGUyLm1hZ2ljKVxuICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldENvbXByZXNzZWRXb3JrZXIoKTtcbiAgICAgICAgdmFyIHIyID0gdGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUJpbmFyeSB8fCAocjIgPSByMi5waXBlKG5ldyBhLlV0ZjhFbmNvZGVXb3JrZXIoKSkpLCBvLmNyZWF0ZVdvcmtlckZyb20ocjIsIGUyLCB0Mik7XG4gICAgICB9LCBfZGVjb21wcmVzc1dvcmtlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhIGluc3RhbmNlb2YgbyA/IHRoaXMuX2RhdGEuZ2V0Q29udGVudFdvcmtlcigpIDogdGhpcy5fZGF0YSBpbnN0YW5jZW9mIGggPyB0aGlzLl9kYXRhIDogbmV3IGkodGhpcy5fZGF0YSk7XG4gICAgICB9IH07XG4gICAgICBmb3IgKHZhciB1ID0gW1wiYXNUZXh0XCIsIFwiYXNCaW5hcnlcIiwgXCJhc05vZGVCdWZmZXJcIiwgXCJhc1VpbnQ4QXJyYXlcIiwgXCJhc0FycmF5QnVmZmVyXCJdLCBsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO1xuICAgICAgfSwgZiA9IDA7IGYgPCB1Lmxlbmd0aDsgZisrKVxuICAgICAgICBuLnByb3RvdHlwZVt1W2ZdXSA9IGw7XG4gICAgICB0LmV4cG9ydHMgPSBuO1xuICAgIH0sIHsgXCIuL2NvbXByZXNzZWRPYmplY3RcIjogMiwgXCIuL3N0cmVhbS9EYXRhV29ya2VyXCI6IDI3LCBcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjogMjgsIFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCI6IDI5LCBcIi4vdXRmOFwiOiAzMSB9XSwgMzY6IFtmdW5jdGlvbihlLCBsLCB0KSB7XG4gICAgICAoZnVuY3Rpb24odDIpIHtcbiAgICAgICAgdmFyIHIsIG4sIGUyID0gdDIuTXV0YXRpb25PYnNlcnZlciB8fCB0Mi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgICAgICBpZiAoZTIpIHtcbiAgICAgICAgICB2YXIgaSA9IDAsIHMgPSBuZXcgZTIodSksIGEgPSB0Mi5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtcbiAgICAgICAgICBzLm9ic2VydmUoYSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pLCByID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhLmRhdGEgPSBpID0gKytpICUgMjtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHQyLnNldEltbWVkaWF0ZSB8fCB2b2lkIDAgPT09IHQyLk1lc3NhZ2VDaGFubmVsKVxuICAgICAgICAgIHIgPSBcImRvY3VtZW50XCIgaW4gdDIgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiB0Mi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZTMgPSB0Mi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgZTMub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHUoKSwgZTMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCwgZTMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlMyksIGUzID0gbnVsbDtcbiAgICAgICAgICAgIH0sIHQyLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChlMyk7XG4gICAgICAgICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCh1LCAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbyA9IG5ldyB0Mi5NZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICAgIG8ucG9ydDEub25tZXNzYWdlID0gdSwgciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgby5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBoID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHUoKSB7XG4gICAgICAgICAgdmFyIGUzLCB0MztcbiAgICAgICAgICBuID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKHZhciByMiA9IGgubGVuZ3RoOyByMjsgKSB7XG4gICAgICAgICAgICBmb3IgKHQzID0gaCwgaCA9IFtdLCBlMyA9IC0xOyArK2UzIDwgcjI7IClcbiAgICAgICAgICAgICAgdDNbZTNdKCk7XG4gICAgICAgICAgICByMiA9IGgubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbC5leHBvcnRzID0gZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICAxICE9PSBoLnB1c2goZTMpIHx8IG4gfHwgcigpO1xuICAgICAgICB9O1xuICAgICAgfSkuY2FsbCh0aGlzLCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBjb21tb25qc0dsb2JhbCA/IGNvbW1vbmpzR2xvYmFsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB7fSk7XG4gICAgfSwge31dLCAzNzogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBpID0gZShcImltbWVkaWF0ZVwiKTtcbiAgICAgIGZ1bmN0aW9uIHUoKSB7XG4gICAgICB9XG4gICAgICB2YXIgbCA9IHt9LCBzID0gW1wiUkVKRUNURURcIl0sIGEgPSBbXCJGVUxGSUxMRURcIl0sIG4gPSBbXCJQRU5ESU5HXCJdO1xuICAgICAgZnVuY3Rpb24gbyhlMikge1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlMilcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVzb2x2ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB0aGlzLnN0YXRlID0gbiwgdGhpcy5xdWV1ZSA9IFtdLCB0aGlzLm91dGNvbWUgPSB2b2lkIDAsIGUyICE9PSB1ICYmIGQodGhpcywgZTIpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaChlMiwgdDIsIHIyKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IGUyLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQyICYmICh0aGlzLm9uRnVsZmlsbGVkID0gdDIsIHRoaXMuY2FsbEZ1bGZpbGxlZCA9IHRoaXMub3RoZXJDYWxsRnVsZmlsbGVkKSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiByMiAmJiAodGhpcy5vblJlamVjdGVkID0gcjIsIHRoaXMuY2FsbFJlamVjdGVkID0gdGhpcy5vdGhlckNhbGxSZWplY3RlZCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBmKHQyLCByMiwgbjIpIHtcbiAgICAgICAgaShmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZTI7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGUyID0gcjIobjIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgICByZXR1cm4gbC5yZWplY3QodDIsIGUzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZTIgPT09IHQyID8gbC5yZWplY3QodDIsIG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKSA6IGwucmVzb2x2ZSh0MiwgZTIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGMoZTIpIHtcbiAgICAgICAgdmFyIHQyID0gZTIgJiYgZTIudGhlbjtcbiAgICAgICAgaWYgKGUyICYmIChcIm9iamVjdFwiID09IHR5cGVvZiBlMiB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUyKSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQyKVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHQyLmFwcGx5KGUyLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBkKHQyLCBlMikge1xuICAgICAgICB2YXIgcjIgPSBmYWxzZTtcbiAgICAgICAgZnVuY3Rpb24gbjIoZTMpIHtcbiAgICAgICAgICByMiB8fCAocjIgPSB0cnVlLCBsLnJlamVjdCh0MiwgZTMpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpMihlMykge1xuICAgICAgICAgIHIyIHx8IChyMiA9IHRydWUsIGwucmVzb2x2ZSh0MiwgZTMpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgczIgPSBwKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGUyKGkyLCBuMik7XG4gICAgICAgIH0pO1xuICAgICAgICBcImVycm9yXCIgPT09IHMyLnN0YXR1cyAmJiBuMihzMi52YWx1ZSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIgPSB7fTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByMi52YWx1ZSA9IGUyKHQyKSwgcjIuc3RhdHVzID0gXCJzdWNjZXNzXCI7XG4gICAgICAgIH0gY2F0Y2ggKGUzKSB7XG4gICAgICAgICAgcjIuc3RhdHVzID0gXCJlcnJvclwiLCByMi52YWx1ZSA9IGUzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByMjtcbiAgICAgIH1cbiAgICAgICh0LmV4cG9ydHMgPSBvKS5wcm90b3R5cGUuZmluYWxseSA9IGZ1bmN0aW9uKHQyKSB7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQyKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB2YXIgcjIgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgICAgcmV0dXJuIHIyLnJlc29sdmUodDIoKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBlMjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgICByZXR1cm4gcjIucmVzb2x2ZSh0MigpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgZTI7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgby5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihlMikge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIGUyKTtcbiAgICAgIH0sIG8ucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZTIgJiYgdGhpcy5zdGF0ZSA9PT0gYSB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHQyICYmIHRoaXMuc3RhdGUgPT09IHMpXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHZhciByMiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHUpO1xuICAgICAgICB0aGlzLnN0YXRlICE9PSBuID8gZihyMiwgdGhpcy5zdGF0ZSA9PT0gYSA/IGUyIDogdDIsIHRoaXMub3V0Y29tZSkgOiB0aGlzLnF1ZXVlLnB1c2gobmV3IGgocjIsIGUyLCB0MikpO1xuICAgICAgICByZXR1cm4gcjI7XG4gICAgICB9LCBoLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgbC5yZXNvbHZlKHRoaXMucHJvbWlzZSwgZTIpO1xuICAgICAgfSwgaC5wcm90b3R5cGUub3RoZXJDYWxsRnVsZmlsbGVkID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgZih0aGlzLnByb21pc2UsIHRoaXMub25GdWxmaWxsZWQsIGUyKTtcbiAgICAgIH0sIGgucHJvdG90eXBlLmNhbGxSZWplY3RlZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGwucmVqZWN0KHRoaXMucHJvbWlzZSwgZTIpO1xuICAgICAgfSwgaC5wcm90b3R5cGUub3RoZXJDYWxsUmVqZWN0ZWQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBmKHRoaXMucHJvbWlzZSwgdGhpcy5vblJlamVjdGVkLCBlMik7XG4gICAgICB9LCBsLnJlc29sdmUgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIyID0gcChjLCB0Mik7XG4gICAgICAgIGlmIChcImVycm9yXCIgPT09IHIyLnN0YXR1cylcbiAgICAgICAgICByZXR1cm4gbC5yZWplY3QoZTIsIHIyLnZhbHVlKTtcbiAgICAgICAgdmFyIG4yID0gcjIudmFsdWU7XG4gICAgICAgIGlmIChuMilcbiAgICAgICAgICBkKGUyLCBuMik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGUyLnN0YXRlID0gYSwgZTIub3V0Y29tZSA9IHQyO1xuICAgICAgICAgIGZvciAodmFyIGkyID0gLTEsIHMyID0gZTIucXVldWUubGVuZ3RoOyArK2kyIDwgczI7IClcbiAgICAgICAgICAgIGUyLnF1ZXVlW2kyXS5jYWxsRnVsZmlsbGVkKHQyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTI7XG4gICAgICB9LCBsLnJlamVjdCA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICBlMi5zdGF0ZSA9IHMsIGUyLm91dGNvbWUgPSB0MjtcbiAgICAgICAgZm9yICh2YXIgcjIgPSAtMSwgbjIgPSBlMi5xdWV1ZS5sZW5ndGg7ICsrcjIgPCBuMjsgKVxuICAgICAgICAgIGUyLnF1ZXVlW3IyXS5jYWxsUmVqZWN0ZWQodDIpO1xuICAgICAgICByZXR1cm4gZTI7XG4gICAgICB9LCBvLnJlc29sdmUgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBpZiAoZTIgaW5zdGFuY2VvZiB0aGlzKVxuICAgICAgICAgIHJldHVybiBlMjtcbiAgICAgICAgcmV0dXJuIGwucmVzb2x2ZShuZXcgdGhpcyh1KSwgZTIpO1xuICAgICAgfSwgby5yZWplY3QgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDIgPSBuZXcgdGhpcyh1KTtcbiAgICAgICAgcmV0dXJuIGwucmVqZWN0KHQyLCBlMik7XG4gICAgICB9LCBvLmFsbCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciByMiA9IHRoaXM7XG4gICAgICAgIGlmIChcIltvYmplY3QgQXJyYXldXCIgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlMikpXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJtdXN0IGJlIGFuIGFycmF5XCIpKTtcbiAgICAgICAgdmFyIG4yID0gZTIubGVuZ3RoLCBpMiA9IGZhbHNlO1xuICAgICAgICBpZiAoIW4yKVxuICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmUoW10pO1xuICAgICAgICB2YXIgczIgPSBuZXcgQXJyYXkobjIpLCBhMiA9IDAsIHQyID0gLTEsIG8yID0gbmV3IHRoaXModSk7XG4gICAgICAgIGZvciAoOyArK3QyIDwgbjI7IClcbiAgICAgICAgICBoMihlMlt0Ml0sIHQyKTtcbiAgICAgICAgcmV0dXJuIG8yO1xuICAgICAgICBmdW5jdGlvbiBoMihlMywgdDMpIHtcbiAgICAgICAgICByMi5yZXNvbHZlKGUzKS50aGVuKGZ1bmN0aW9uKGU0KSB7XG4gICAgICAgICAgICBzMlt0M10gPSBlNCwgKythMiAhPT0gbjIgfHwgaTIgfHwgKGkyID0gdHJ1ZSwgbC5yZXNvbHZlKG8yLCBzMikpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGU0KSB7XG4gICAgICAgICAgICBpMiB8fCAoaTIgPSB0cnVlLCBsLnJlamVjdChvMiwgZTQpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgby5yYWNlID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgdmFyIHQyID0gdGhpcztcbiAgICAgICAgaWYgKFwiW29iamVjdCBBcnJheV1cIiAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUyKSlcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO1xuICAgICAgICB2YXIgcjIgPSBlMi5sZW5ndGgsIG4yID0gZmFsc2U7XG4gICAgICAgIGlmICghcjIpXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7XG4gICAgICAgIHZhciBpMiA9IC0xLCBzMiA9IG5ldyB0aGlzKHUpO1xuICAgICAgICBmb3IgKDsgKytpMiA8IHIyOyApXG4gICAgICAgICAgYTIgPSBlMltpMl0sIHQyLnJlc29sdmUoYTIpLnRoZW4oZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICAgIG4yIHx8IChuMiA9IHRydWUsIGwucmVzb2x2ZShzMiwgZTMpKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlMykge1xuICAgICAgICAgICAgbjIgfHwgKG4yID0gdHJ1ZSwgbC5yZWplY3QoczIsIGUzKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHZhciBhMjtcbiAgICAgICAgcmV0dXJuIHMyO1xuICAgICAgfTtcbiAgICB9LCB7IGltbWVkaWF0ZTogMzYgfV0sIDM4OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSB7fTtcbiAgICAgICgwLCBlKFwiLi9saWIvdXRpbHMvY29tbW9uXCIpLmFzc2lnbikobiwgZShcIi4vbGliL2RlZmxhdGVcIiksIGUoXCIuL2xpYi9pbmZsYXRlXCIpLCBlKFwiLi9saWIvemxpYi9jb25zdGFudHNcIikpLCB0LmV4cG9ydHMgPSBuO1xuICAgIH0sIHsgXCIuL2xpYi9kZWZsYXRlXCI6IDM5LCBcIi4vbGliL2luZmxhdGVcIjogNDAsIFwiLi9saWIvdXRpbHMvY29tbW9uXCI6IDQxLCBcIi4vbGliL3psaWIvY29uc3RhbnRzXCI6IDQ0IH1dLCAzOTogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBhID0gZShcIi4vemxpYi9kZWZsYXRlXCIpLCBvID0gZShcIi4vdXRpbHMvY29tbW9uXCIpLCBoID0gZShcIi4vdXRpbHMvc3RyaW5nc1wiKSwgaSA9IGUoXCIuL3psaWIvbWVzc2FnZXNcIiksIHMgPSBlKFwiLi96bGliL3pzdHJlYW1cIiksIHUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLCBsID0gMCwgZiA9IC0xLCBjID0gMCwgZCA9IDg7XG4gICAgICBmdW5jdGlvbiBwKGUyKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBwKSlcbiAgICAgICAgICByZXR1cm4gbmV3IHAoZTIpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvLmFzc2lnbih7IGxldmVsOiBmLCBtZXRob2Q6IGQsIGNodW5rU2l6ZTogMTYzODQsIHdpbmRvd0JpdHM6IDE1LCBtZW1MZXZlbDogOCwgc3RyYXRlZ3k6IGMsIHRvOiBcIlwiIH0sIGUyIHx8IHt9KTtcbiAgICAgICAgdmFyIHQyID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0Mi5yYXcgJiYgMCA8IHQyLndpbmRvd0JpdHMgPyB0Mi53aW5kb3dCaXRzID0gLXQyLndpbmRvd0JpdHMgOiB0Mi5nemlwICYmIDAgPCB0Mi53aW5kb3dCaXRzICYmIHQyLndpbmRvd0JpdHMgPCAxNiAmJiAodDIud2luZG93Qml0cyArPSAxNiksIHRoaXMuZXJyID0gMCwgdGhpcy5tc2cgPSBcIlwiLCB0aGlzLmVuZGVkID0gZmFsc2UsIHRoaXMuY2h1bmtzID0gW10sIHRoaXMuc3RybSA9IG5ldyBzKCksIHRoaXMuc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgICB2YXIgcjIgPSBhLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sIHQyLmxldmVsLCB0Mi5tZXRob2QsIHQyLndpbmRvd0JpdHMsIHQyLm1lbUxldmVsLCB0Mi5zdHJhdGVneSk7XG4gICAgICAgIGlmIChyMiAhPT0gbClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaVtyMl0pO1xuICAgICAgICBpZiAodDIuaGVhZGVyICYmIGEuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sIHQyLmhlYWRlciksIHQyLmRpY3Rpb25hcnkpIHtcbiAgICAgICAgICB2YXIgbjI7XG4gICAgICAgICAgaWYgKG4yID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDIuZGljdGlvbmFyeSA/IGguc3RyaW5nMmJ1Zih0Mi5kaWN0aW9uYXJ5KSA6IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiA9PT0gdS5jYWxsKHQyLmRpY3Rpb25hcnkpID8gbmV3IFVpbnQ4QXJyYXkodDIuZGljdGlvbmFyeSkgOiB0Mi5kaWN0aW9uYXJ5LCAocjIgPSBhLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgbjIpKSAhPT0gbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpW3IyXSk7XG4gICAgICAgICAgdGhpcy5fZGljdF9zZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBuKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIgPSBuZXcgcCh0Mik7XG4gICAgICAgIGlmIChyMi5wdXNoKGUyLCB0cnVlKSwgcjIuZXJyKVxuICAgICAgICAgIHRocm93IHIyLm1zZyB8fCBpW3IyLmVycl07XG4gICAgICAgIHJldHVybiByMi5yZXN1bHQ7XG4gICAgICB9XG4gICAgICBwLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiwgbjIsIGkyID0gdGhpcy5zdHJtLCBzMiA9IHRoaXMub3B0aW9ucy5jaHVua1NpemU7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbjIgPSB0MiA9PT0gfn50MiA/IHQyIDogdHJ1ZSA9PT0gdDIgPyA0IDogMCwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZTIgPyBpMi5pbnB1dCA9IGguc3RyaW5nMmJ1ZihlMikgOiBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCIgPT09IHUuY2FsbChlMikgPyBpMi5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGUyKSA6IGkyLmlucHV0ID0gZTIsIGkyLm5leHRfaW4gPSAwLCBpMi5hdmFpbF9pbiA9IGkyLmlucHV0Lmxlbmd0aDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICgwID09PSBpMi5hdmFpbF9vdXQgJiYgKGkyLm91dHB1dCA9IG5ldyBvLkJ1ZjgoczIpLCBpMi5uZXh0X291dCA9IDAsIGkyLmF2YWlsX291dCA9IHMyKSwgMSAhPT0gKHIyID0gYS5kZWZsYXRlKGkyLCBuMikpICYmIHIyICE9PSBsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub25FbmQocjIpLCAhKHRoaXMuZW5kZWQgPSB0cnVlKTtcbiAgICAgICAgICAwICE9PSBpMi5hdmFpbF9vdXQgJiYgKDAgIT09IGkyLmF2YWlsX2luIHx8IDQgIT09IG4yICYmIDIgIT09IG4yKSB8fCAoXCJzdHJpbmdcIiA9PT0gdGhpcy5vcHRpb25zLnRvID8gdGhpcy5vbkRhdGEoaC5idWYyYmluc3RyaW5nKG8uc2hyaW5rQnVmKGkyLm91dHB1dCwgaTIubmV4dF9vdXQpKSkgOiB0aGlzLm9uRGF0YShvLnNocmlua0J1ZihpMi5vdXRwdXQsIGkyLm5leHRfb3V0KSkpO1xuICAgICAgICB9IHdoaWxlICgoMCA8IGkyLmF2YWlsX2luIHx8IDAgPT09IGkyLmF2YWlsX291dCkgJiYgMSAhPT0gcjIpO1xuICAgICAgICByZXR1cm4gNCA9PT0gbjIgPyAocjIgPSBhLmRlZmxhdGVFbmQodGhpcy5zdHJtKSwgdGhpcy5vbkVuZChyMiksIHRoaXMuZW5kZWQgPSB0cnVlLCByMiA9PT0gbCkgOiAyICE9PSBuMiB8fCAodGhpcy5vbkVuZChsKSwgIShpMi5hdmFpbF9vdXQgPSAwKSk7XG4gICAgICB9LCBwLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGUyKTtcbiAgICAgIH0sIHAucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgZTIgPT09IGwgJiYgKFwic3RyaW5nXCIgPT09IHRoaXMub3B0aW9ucy50byA/IHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbihcIlwiKSA6IHRoaXMucmVzdWx0ID0gby5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksIHRoaXMuY2h1bmtzID0gW10sIHRoaXMuZXJyID0gZTIsIHRoaXMubXNnID0gdGhpcy5zdHJtLm1zZztcbiAgICAgIH0sIHIuRGVmbGF0ZSA9IHAsIHIuZGVmbGF0ZSA9IG4sIHIuZGVmbGF0ZVJhdyA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gKHQyID0gdDIgfHwge30pLnJhdyA9IHRydWUsIG4oZTIsIHQyKTtcbiAgICAgIH0sIHIuZ3ppcCA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gKHQyID0gdDIgfHwge30pLmd6aXAgPSB0cnVlLCBuKGUyLCB0Mik7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL3V0aWxzL2NvbW1vblwiOiA0MSwgXCIuL3V0aWxzL3N0cmluZ3NcIjogNDIsIFwiLi96bGliL2RlZmxhdGVcIjogNDYsIFwiLi96bGliL21lc3NhZ2VzXCI6IDUxLCBcIi4vemxpYi96c3RyZWFtXCI6IDUzIH1dLCA0MDogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBjID0gZShcIi4vemxpYi9pbmZsYXRlXCIpLCBkID0gZShcIi4vdXRpbHMvY29tbW9uXCIpLCBwID0gZShcIi4vdXRpbHMvc3RyaW5nc1wiKSwgbSA9IGUoXCIuL3psaWIvY29uc3RhbnRzXCIpLCBuID0gZShcIi4vemxpYi9tZXNzYWdlc1wiKSwgaSA9IGUoXCIuL3psaWIvenN0cmVhbVwiKSwgcyA9IGUoXCIuL3psaWIvZ3poZWFkZXJcIiksIF8gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgICAgZnVuY3Rpb24gYShlMikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgYSkpXG4gICAgICAgICAgcmV0dXJuIG5ldyBhKGUyKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZC5hc3NpZ24oeyBjaHVua1NpemU6IDE2Mzg0LCB3aW5kb3dCaXRzOiAwLCB0bzogXCJcIiB9LCBlMiB8fCB7fSk7XG4gICAgICAgIHZhciB0MiA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdDIucmF3ICYmIDAgPD0gdDIud2luZG93Qml0cyAmJiB0Mi53aW5kb3dCaXRzIDwgMTYgJiYgKHQyLndpbmRvd0JpdHMgPSAtdDIud2luZG93Qml0cywgMCA9PT0gdDIud2luZG93Qml0cyAmJiAodDIud2luZG93Qml0cyA9IC0xNSkpLCAhKDAgPD0gdDIud2luZG93Qml0cyAmJiB0Mi53aW5kb3dCaXRzIDwgMTYpIHx8IGUyICYmIGUyLndpbmRvd0JpdHMgfHwgKHQyLndpbmRvd0JpdHMgKz0gMzIpLCAxNSA8IHQyLndpbmRvd0JpdHMgJiYgdDIud2luZG93Qml0cyA8IDQ4ICYmIDAgPT0gKDE1ICYgdDIud2luZG93Qml0cykgJiYgKHQyLndpbmRvd0JpdHMgfD0gMTUpLCB0aGlzLmVyciA9IDAsIHRoaXMubXNnID0gXCJcIiwgdGhpcy5lbmRlZCA9IGZhbHNlLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLnN0cm0gPSBuZXcgaSgpLCB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICAgICAgdmFyIHIyID0gYy5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLCB0Mi53aW5kb3dCaXRzKTtcbiAgICAgICAgaWYgKHIyICE9PSBtLlpfT0spXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5bcjJdKTtcbiAgICAgICAgdGhpcy5oZWFkZXIgPSBuZXcgcygpLCBjLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLCB0aGlzLmhlYWRlcik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBvKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIgPSBuZXcgYSh0Mik7XG4gICAgICAgIGlmIChyMi5wdXNoKGUyLCB0cnVlKSwgcjIuZXJyKVxuICAgICAgICAgIHRocm93IHIyLm1zZyB8fCBuW3IyLmVycl07XG4gICAgICAgIHJldHVybiByMi5yZXN1bHQ7XG4gICAgICB9XG4gICAgICBhLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiwgbjIsIGkyLCBzMiwgYTIsIG8yLCBoID0gdGhpcy5zdHJtLCB1ID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZSwgbCA9IHRoaXMub3B0aW9ucy5kaWN0aW9uYXJ5LCBmID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbjIgPSB0MiA9PT0gfn50MiA/IHQyIDogdHJ1ZSA9PT0gdDIgPyBtLlpfRklOSVNIIDogbS5aX05PX0ZMVVNILCBcInN0cmluZ1wiID09IHR5cGVvZiBlMiA/IGguaW5wdXQgPSBwLmJpbnN0cmluZzJidWYoZTIpIDogXCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiID09PSBfLmNhbGwoZTIpID8gaC5pbnB1dCA9IG5ldyBVaW50OEFycmF5KGUyKSA6IGguaW5wdXQgPSBlMiwgaC5uZXh0X2luID0gMCwgaC5hdmFpbF9pbiA9IGguaW5wdXQubGVuZ3RoO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKDAgPT09IGguYXZhaWxfb3V0ICYmIChoLm91dHB1dCA9IG5ldyBkLkJ1ZjgodSksIGgubmV4dF9vdXQgPSAwLCBoLmF2YWlsX291dCA9IHUpLCAocjIgPSBjLmluZmxhdGUoaCwgbS5aX05PX0ZMVVNIKSkgPT09IG0uWl9ORUVEX0RJQ1QgJiYgbCAmJiAobzIgPSBcInN0cmluZ1wiID09IHR5cGVvZiBsID8gcC5zdHJpbmcyYnVmKGwpIDogXCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiID09PSBfLmNhbGwobCkgPyBuZXcgVWludDhBcnJheShsKSA6IGwsIHIyID0gYy5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sIG8yKSksIHIyID09PSBtLlpfQlVGX0VSUk9SICYmIHRydWUgPT09IGYgJiYgKHIyID0gbS5aX09LLCBmID0gZmFsc2UpLCByMiAhPT0gbS5aX1NUUkVBTV9FTkQgJiYgcjIgIT09IG0uWl9PSylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uRW5kKHIyKSwgISh0aGlzLmVuZGVkID0gdHJ1ZSk7XG4gICAgICAgICAgaC5uZXh0X291dCAmJiAoMCAhPT0gaC5hdmFpbF9vdXQgJiYgcjIgIT09IG0uWl9TVFJFQU1fRU5EICYmICgwICE9PSBoLmF2YWlsX2luIHx8IG4yICE9PSBtLlpfRklOSVNIICYmIG4yICE9PSBtLlpfU1lOQ19GTFVTSCkgfHwgKFwic3RyaW5nXCIgPT09IHRoaXMub3B0aW9ucy50byA/IChpMiA9IHAudXRmOGJvcmRlcihoLm91dHB1dCwgaC5uZXh0X291dCksIHMyID0gaC5uZXh0X291dCAtIGkyLCBhMiA9IHAuYnVmMnN0cmluZyhoLm91dHB1dCwgaTIpLCBoLm5leHRfb3V0ID0gczIsIGguYXZhaWxfb3V0ID0gdSAtIHMyLCBzMiAmJiBkLmFycmF5U2V0KGgub3V0cHV0LCBoLm91dHB1dCwgaTIsIHMyLCAwKSwgdGhpcy5vbkRhdGEoYTIpKSA6IHRoaXMub25EYXRhKGQuc2hyaW5rQnVmKGgub3V0cHV0LCBoLm5leHRfb3V0KSkpKSwgMCA9PT0gaC5hdmFpbF9pbiAmJiAwID09PSBoLmF2YWlsX291dCAmJiAoZiA9IHRydWUpO1xuICAgICAgICB9IHdoaWxlICgoMCA8IGguYXZhaWxfaW4gfHwgMCA9PT0gaC5hdmFpbF9vdXQpICYmIHIyICE9PSBtLlpfU1RSRUFNX0VORCk7XG4gICAgICAgIHJldHVybiByMiA9PT0gbS5aX1NUUkVBTV9FTkQgJiYgKG4yID0gbS5aX0ZJTklTSCksIG4yID09PSBtLlpfRklOSVNIID8gKHIyID0gYy5pbmZsYXRlRW5kKHRoaXMuc3RybSksIHRoaXMub25FbmQocjIpLCB0aGlzLmVuZGVkID0gdHJ1ZSwgcjIgPT09IG0uWl9PSykgOiBuMiAhPT0gbS5aX1NZTkNfRkxVU0ggfHwgKHRoaXMub25FbmQobS5aX09LKSwgIShoLmF2YWlsX291dCA9IDApKTtcbiAgICAgIH0sIGEucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2goZTIpO1xuICAgICAgfSwgYS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBlMiA9PT0gbS5aX09LICYmIChcInN0cmluZ1wiID09PSB0aGlzLm9wdGlvbnMudG8gPyB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oXCJcIikgOiB0aGlzLnJlc3VsdCA9IGQuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcykpLCB0aGlzLmNodW5rcyA9IFtdLCB0aGlzLmVyciA9IGUyLCB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG4gICAgICB9LCByLkluZmxhdGUgPSBhLCByLmluZmxhdGUgPSBvLCByLmluZmxhdGVSYXcgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuICh0MiA9IHQyIHx8IHt9KS5yYXcgPSB0cnVlLCBvKGUyLCB0Mik7XG4gICAgICB9LCByLnVuZ3ppcCA9IG87XG4gICAgfSwgeyBcIi4vdXRpbHMvY29tbW9uXCI6IDQxLCBcIi4vdXRpbHMvc3RyaW5nc1wiOiA0MiwgXCIuL3psaWIvY29uc3RhbnRzXCI6IDQ0LCBcIi4vemxpYi9nemhlYWRlclwiOiA0NywgXCIuL3psaWIvaW5mbGF0ZVwiOiA0OSwgXCIuL3psaWIvbWVzc2FnZXNcIjogNTEsIFwiLi96bGliL3pzdHJlYW1cIjogNTMgfV0sIDQxOiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG4gPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBVaW50OEFycmF5ICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQxNkFycmF5ICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEludDMyQXJyYXk7XG4gICAgICByLmFzc2lnbiA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGZvciAodmFyIHQyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsgdDIubGVuZ3RoOyApIHtcbiAgICAgICAgICB2YXIgcjIgPSB0Mi5zaGlmdCgpO1xuICAgICAgICAgIGlmIChyMikge1xuICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHIyKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHIyICsgXCJtdXN0IGJlIG5vbi1vYmplY3RcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBuMiBpbiByMilcbiAgICAgICAgICAgICAgcjIuaGFzT3duUHJvcGVydHkobjIpICYmIChlMltuMl0gPSByMltuMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTI7XG4gICAgICB9LCByLnNocmlua0J1ZiA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gZTIubGVuZ3RoID09PSB0MiA/IGUyIDogZTIuc3ViYXJyYXkgPyBlMi5zdWJhcnJheSgwLCB0MikgOiAoZTIubGVuZ3RoID0gdDIsIGUyKTtcbiAgICAgIH07XG4gICAgICB2YXIgaSA9IHsgYXJyYXlTZXQ6IGZ1bmN0aW9uKGUyLCB0MiwgcjIsIG4yLCBpMikge1xuICAgICAgICBpZiAodDIuc3ViYXJyYXkgJiYgZTIuc3ViYXJyYXkpXG4gICAgICAgICAgZTIuc2V0KHQyLnN1YmFycmF5KHIyLCByMiArIG4yKSwgaTIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgZm9yICh2YXIgczIgPSAwOyBzMiA8IG4yOyBzMisrKVxuICAgICAgICAgICAgZTJbaTIgKyBzMl0gPSB0MltyMiArIHMyXTtcbiAgICAgIH0sIGZsYXR0ZW5DaHVua3M6IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiwgcjIsIG4yLCBpMiwgczIsIGE7XG4gICAgICAgIGZvciAodDIgPSBuMiA9IDAsIHIyID0gZTIubGVuZ3RoOyB0MiA8IHIyOyB0MisrKVxuICAgICAgICAgIG4yICs9IGUyW3QyXS5sZW5ndGg7XG4gICAgICAgIGZvciAoYSA9IG5ldyBVaW50OEFycmF5KG4yKSwgdDIgPSBpMiA9IDAsIHIyID0gZTIubGVuZ3RoOyB0MiA8IHIyOyB0MisrKVxuICAgICAgICAgIHMyID0gZTJbdDJdLCBhLnNldChzMiwgaTIpLCBpMiArPSBzMi5sZW5ndGg7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSB9LCBzID0geyBhcnJheVNldDogZnVuY3Rpb24oZTIsIHQyLCByMiwgbjIsIGkyKSB7XG4gICAgICAgIGZvciAodmFyIHMyID0gMDsgczIgPCBuMjsgczIrKylcbiAgICAgICAgICBlMltpMiArIHMyXSA9IHQyW3IyICsgczJdO1xuICAgICAgfSwgZmxhdHRlbkNodW5rczogZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgZTIpO1xuICAgICAgfSB9O1xuICAgICAgci5zZXRUeXBlZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGUyID8gKHIuQnVmOCA9IFVpbnQ4QXJyYXksIHIuQnVmMTYgPSBVaW50MTZBcnJheSwgci5CdWYzMiA9IEludDMyQXJyYXksIHIuYXNzaWduKHIsIGkpKSA6IChyLkJ1ZjggPSBBcnJheSwgci5CdWYxNiA9IEFycmF5LCByLkJ1ZjMyID0gQXJyYXksIHIuYXNzaWduKHIsIHMpKTtcbiAgICAgIH0sIHIuc2V0VHlwZWQobik7XG4gICAgfSwge31dLCA0MjogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBoID0gZShcIi4vY29tbW9uXCIpLCBpID0gdHJ1ZSwgcyA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFswXSk7XG4gICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICBpID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KDEpKTtcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIHMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHUgPSBuZXcgaC5CdWY4KDI1NiksIG4gPSAwOyBuIDwgMjU2OyBuKyspXG4gICAgICAgIHVbbl0gPSAyNTIgPD0gbiA/IDYgOiAyNDggPD0gbiA/IDUgOiAyNDAgPD0gbiA/IDQgOiAyMjQgPD0gbiA/IDMgOiAxOTIgPD0gbiA/IDIgOiAxO1xuICAgICAgZnVuY3Rpb24gbChlMiwgdDIpIHtcbiAgICAgICAgaWYgKHQyIDwgNjU1MzcgJiYgKGUyLnN1YmFycmF5ICYmIHMgfHwgIWUyLnN1YmFycmF5ICYmIGkpKVxuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGguc2hyaW5rQnVmKGUyLCB0MikpO1xuICAgICAgICBmb3IgKHZhciByMiA9IFwiXCIsIG4yID0gMDsgbjIgPCB0MjsgbjIrKylcbiAgICAgICAgICByMiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUyW24yXSk7XG4gICAgICAgIHJldHVybiByMjtcbiAgICAgIH1cbiAgICAgIHVbMjU0XSA9IHVbMjU0XSA9IDEsIHIuc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHZhciB0MiwgcjIsIG4yLCBpMiwgczIsIGEgPSBlMi5sZW5ndGgsIG8gPSAwO1xuICAgICAgICBmb3IgKGkyID0gMDsgaTIgPCBhOyBpMisrKVxuICAgICAgICAgIDU1Mjk2ID09ICg2NDUxMiAmIChyMiA9IGUyLmNoYXJDb2RlQXQoaTIpKSkgJiYgaTIgKyAxIDwgYSAmJiA1NjMyMCA9PSAoNjQ1MTIgJiAobjIgPSBlMi5jaGFyQ29kZUF0KGkyICsgMSkpKSAmJiAocjIgPSA2NTUzNiArIChyMiAtIDU1Mjk2IDw8IDEwKSArIChuMiAtIDU2MzIwKSwgaTIrKyksIG8gKz0gcjIgPCAxMjggPyAxIDogcjIgPCAyMDQ4ID8gMiA6IHIyIDwgNjU1MzYgPyAzIDogNDtcbiAgICAgICAgZm9yICh0MiA9IG5ldyBoLkJ1ZjgobyksIGkyID0gczIgPSAwOyBzMiA8IG87IGkyKyspXG4gICAgICAgICAgNTUyOTYgPT0gKDY0NTEyICYgKHIyID0gZTIuY2hhckNvZGVBdChpMikpKSAmJiBpMiArIDEgPCBhICYmIDU2MzIwID09ICg2NDUxMiAmIChuMiA9IGUyLmNoYXJDb2RlQXQoaTIgKyAxKSkpICYmIChyMiA9IDY1NTM2ICsgKHIyIC0gNTUyOTYgPDwgMTApICsgKG4yIC0gNTYzMjApLCBpMisrKSwgcjIgPCAxMjggPyB0MltzMisrXSA9IHIyIDogKHIyIDwgMjA0OCA/IHQyW3MyKytdID0gMTkyIHwgcjIgPj4+IDYgOiAocjIgPCA2NTUzNiA/IHQyW3MyKytdID0gMjI0IHwgcjIgPj4+IDEyIDogKHQyW3MyKytdID0gMjQwIHwgcjIgPj4+IDE4LCB0MltzMisrXSA9IDEyOCB8IHIyID4+PiAxMiAmIDYzKSwgdDJbczIrK10gPSAxMjggfCByMiA+Pj4gNiAmIDYzKSwgdDJbczIrK10gPSAxMjggfCA2MyAmIHIyKTtcbiAgICAgICAgcmV0dXJuIHQyO1xuICAgICAgfSwgci5idWYyYmluc3RyaW5nID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIGwoZTIsIGUyLmxlbmd0aCk7XG4gICAgICB9LCByLmJpbnN0cmluZzJidWYgPSBmdW5jdGlvbihlMikge1xuICAgICAgICBmb3IgKHZhciB0MiA9IG5ldyBoLkJ1ZjgoZTIubGVuZ3RoKSwgcjIgPSAwLCBuMiA9IHQyLmxlbmd0aDsgcjIgPCBuMjsgcjIrKylcbiAgICAgICAgICB0MltyMl0gPSBlMi5jaGFyQ29kZUF0KHIyKTtcbiAgICAgICAgcmV0dXJuIHQyO1xuICAgICAgfSwgci5idWYyc3RyaW5nID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiwgbjIsIGkyLCBzMiwgYSA9IHQyIHx8IGUyLmxlbmd0aCwgbyA9IG5ldyBBcnJheSgyICogYSk7XG4gICAgICAgIGZvciAocjIgPSBuMiA9IDA7IHIyIDwgYTsgKVxuICAgICAgICAgIGlmICgoaTIgPSBlMltyMisrXSkgPCAxMjgpXG4gICAgICAgICAgICBvW24yKytdID0gaTI7XG4gICAgICAgICAgZWxzZSBpZiAoNCA8IChzMiA9IHVbaTJdKSlcbiAgICAgICAgICAgIG9bbjIrK10gPSA2NTUzMywgcjIgKz0gczIgLSAxO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpMiAmPSAyID09PSBzMiA/IDMxIDogMyA9PT0gczIgPyAxNSA6IDc7IDEgPCBzMiAmJiByMiA8IGE7IClcbiAgICAgICAgICAgICAgaTIgPSBpMiA8PCA2IHwgNjMgJiBlMltyMisrXSwgczItLTtcbiAgICAgICAgICAgIDEgPCBzMiA/IG9bbjIrK10gPSA2NTUzMyA6IGkyIDwgNjU1MzYgPyBvW24yKytdID0gaTIgOiAoaTIgLT0gNjU1MzYsIG9bbjIrK10gPSA1NTI5NiB8IGkyID4+IDEwICYgMTAyMywgb1tuMisrXSA9IDU2MzIwIHwgMTAyMyAmIGkyKTtcbiAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBsKG8sIG4yKTtcbiAgICAgIH0sIHIudXRmOGJvcmRlciA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjI7XG4gICAgICAgIGZvciAoKHQyID0gdDIgfHwgZTIubGVuZ3RoKSA+IGUyLmxlbmd0aCAmJiAodDIgPSBlMi5sZW5ndGgpLCByMiA9IHQyIC0gMTsgMCA8PSByMiAmJiAxMjggPT0gKDE5MiAmIGUyW3IyXSk7IClcbiAgICAgICAgICByMi0tO1xuICAgICAgICByZXR1cm4gcjIgPCAwID8gdDIgOiAwID09PSByMiA/IHQyIDogcjIgKyB1W2UyW3IyXV0gPiB0MiA/IHIyIDogdDI7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL2NvbW1vblwiOiA0MSB9XSwgNDM6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMiwgdDIsIHIyLCBuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSA2NTUzNSAmIGUyIHwgMCwgcyA9IGUyID4+PiAxNiAmIDY1NTM1IHwgMCwgYSA9IDA7IDAgIT09IHIyOyApIHtcbiAgICAgICAgICBmb3IgKHIyIC09IGEgPSAyZTMgPCByMiA/IDJlMyA6IHIyOyBzID0gcyArIChpID0gaSArIHQyW24rK10gfCAwKSB8IDAsIC0tYTsgKVxuICAgICAgICAgICAgO1xuICAgICAgICAgIGkgJT0gNjU1MjEsIHMgJT0gNjU1MjE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGkgfCBzIDw8IDE2IHwgMDtcbiAgICAgIH07XG4gICAgfSwge31dLCA0NDogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHQuZXhwb3J0cyA9IHsgWl9OT19GTFVTSDogMCwgWl9QQVJUSUFMX0ZMVVNIOiAxLCBaX1NZTkNfRkxVU0g6IDIsIFpfRlVMTF9GTFVTSDogMywgWl9GSU5JU0g6IDQsIFpfQkxPQ0s6IDUsIFpfVFJFRVM6IDYsIFpfT0s6IDAsIFpfU1RSRUFNX0VORDogMSwgWl9ORUVEX0RJQ1Q6IDIsIFpfRVJSTk86IC0xLCBaX1NUUkVBTV9FUlJPUjogLTIsIFpfREFUQV9FUlJPUjogLTMsIFpfQlVGX0VSUk9SOiAtNSwgWl9OT19DT01QUkVTU0lPTjogMCwgWl9CRVNUX1NQRUVEOiAxLCBaX0JFU1RfQ09NUFJFU1NJT046IDksIFpfREVGQVVMVF9DT01QUkVTU0lPTjogLTEsIFpfRklMVEVSRUQ6IDEsIFpfSFVGRk1BTl9PTkxZOiAyLCBaX1JMRTogMywgWl9GSVhFRDogNCwgWl9ERUZBVUxUX1NUUkFURUdZOiAwLCBaX0JJTkFSWTogMCwgWl9URVhUOiAxLCBaX1VOS05PV046IDIsIFpfREVGTEFURUQ6IDggfTtcbiAgICB9LCB7fV0sIDQ1OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgZTIsIHQyID0gW10sIHIyID0gMDsgcjIgPCAyNTY7IHIyKyspIHtcbiAgICAgICAgICBlMiA9IHIyO1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgODsgbisrKVxuICAgICAgICAgICAgZTIgPSAxICYgZTIgPyAzOTg4MjkyMzg0IF4gZTIgPj4+IDEgOiBlMiA+Pj4gMTtcbiAgICAgICAgICB0MltyMl0gPSBlMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDI7XG4gICAgICB9KCk7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihlMiwgdDIsIHIyLCBuKSB7XG4gICAgICAgIHZhciBpID0gbywgcyA9IG4gKyByMjtcbiAgICAgICAgZTIgXj0gLTE7XG4gICAgICAgIGZvciAodmFyIGEgPSBuOyBhIDwgczsgYSsrKVxuICAgICAgICAgIGUyID0gZTIgPj4+IDggXiBpWzI1NSAmIChlMiBeIHQyW2FdKV07XG4gICAgICAgIHJldHVybiAtMSBeIGUyO1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDQ2OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIGgsIGMgPSBlKFwiLi4vdXRpbHMvY29tbW9uXCIpLCB1ID0gZShcIi4vdHJlZXNcIiksIGQgPSBlKFwiLi9hZGxlcjMyXCIpLCBwID0gZShcIi4vY3JjMzJcIiksIG4gPSBlKFwiLi9tZXNzYWdlc1wiKSwgbCA9IDAsIGYgPSA0LCBtID0gMCwgXyA9IC0yLCBnID0gLTEsIGIgPSA0LCBpID0gMiwgdiA9IDgsIHkgPSA5LCBzID0gMjg2LCBhID0gMzAsIG8gPSAxOSwgdyA9IDIgKiBzICsgMSwgayA9IDE1LCB4ID0gMywgUyA9IDI1OCwgeiA9IFMgKyB4ICsgMSwgQyA9IDQyLCBFID0gMTEzLCBBID0gMSwgSSA9IDIsIE8gPSAzLCBCID0gNDtcbiAgICAgIGZ1bmN0aW9uIFIyKGUyLCB0Mikge1xuICAgICAgICByZXR1cm4gZTIubXNnID0gblt0Ml0sIHQyO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVChlMikge1xuICAgICAgICByZXR1cm4gKGUyIDw8IDEpIC0gKDQgPCBlMiA/IDkgOiAwKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIEQoZTIpIHtcbiAgICAgICAgZm9yICh2YXIgdDIgPSBlMi5sZW5ndGg7IDAgPD0gLS10MjsgKVxuICAgICAgICAgIGUyW3QyXSA9IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBGKGUyKSB7XG4gICAgICAgIHZhciB0MiA9IGUyLnN0YXRlLCByMiA9IHQyLnBlbmRpbmc7XG4gICAgICAgIHIyID4gZTIuYXZhaWxfb3V0ICYmIChyMiA9IGUyLmF2YWlsX291dCksIDAgIT09IHIyICYmIChjLmFycmF5U2V0KGUyLm91dHB1dCwgdDIucGVuZGluZ19idWYsIHQyLnBlbmRpbmdfb3V0LCByMiwgZTIubmV4dF9vdXQpLCBlMi5uZXh0X291dCArPSByMiwgdDIucGVuZGluZ19vdXQgKz0gcjIsIGUyLnRvdGFsX291dCArPSByMiwgZTIuYXZhaWxfb3V0IC09IHIyLCB0Mi5wZW5kaW5nIC09IHIyLCAwID09PSB0Mi5wZW5kaW5nICYmICh0Mi5wZW5kaW5nX291dCA9IDApKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIE4oZTIsIHQyKSB7XG4gICAgICAgIHUuX3RyX2ZsdXNoX2Jsb2NrKGUyLCAwIDw9IGUyLmJsb2NrX3N0YXJ0ID8gZTIuYmxvY2tfc3RhcnQgOiAtMSwgZTIuc3Ryc3RhcnQgLSBlMi5ibG9ja19zdGFydCwgdDIpLCBlMi5ibG9ja19zdGFydCA9IGUyLnN0cnN0YXJ0LCBGKGUyLnN0cm0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVShlMiwgdDIpIHtcbiAgICAgICAgZTIucGVuZGluZ19idWZbZTIucGVuZGluZysrXSA9IHQyO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gUChlMiwgdDIpIHtcbiAgICAgICAgZTIucGVuZGluZ19idWZbZTIucGVuZGluZysrXSA9IHQyID4+PiA4ICYgMjU1LCBlMi5wZW5kaW5nX2J1ZltlMi5wZW5kaW5nKytdID0gMjU1ICYgdDI7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBMKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIsIG4yLCBpMiA9IGUyLm1heF9jaGFpbl9sZW5ndGgsIHMyID0gZTIuc3Ryc3RhcnQsIGEyID0gZTIucHJldl9sZW5ndGgsIG8yID0gZTIubmljZV9tYXRjaCwgaDIgPSBlMi5zdHJzdGFydCA+IGUyLndfc2l6ZSAtIHogPyBlMi5zdHJzdGFydCAtIChlMi53X3NpemUgLSB6KSA6IDAsIHUyID0gZTIud2luZG93LCBsMiA9IGUyLndfbWFzaywgZjIgPSBlMi5wcmV2LCBjMiA9IGUyLnN0cnN0YXJ0ICsgUywgZDIgPSB1MltzMiArIGEyIC0gMV0sIHAyID0gdTJbczIgKyBhMl07XG4gICAgICAgIGUyLnByZXZfbGVuZ3RoID49IGUyLmdvb2RfbWF0Y2ggJiYgKGkyID4+PSAyKSwgbzIgPiBlMi5sb29rYWhlYWQgJiYgKG8yID0gZTIubG9va2FoZWFkKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh1MlsocjIgPSB0MikgKyBhMl0gPT09IHAyICYmIHUyW3IyICsgYTIgLSAxXSA9PT0gZDIgJiYgdTJbcjJdID09PSB1MltzMl0gJiYgdTJbKytyMl0gPT09IHUyW3MyICsgMV0pIHtcbiAgICAgICAgICAgIHMyICs9IDIsIHIyKys7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICB9IHdoaWxlICh1MlsrK3MyXSA9PT0gdTJbKytyMl0gJiYgdTJbKytzMl0gPT09IHUyWysrcjJdICYmIHUyWysrczJdID09PSB1MlsrK3IyXSAmJiB1MlsrK3MyXSA9PT0gdTJbKytyMl0gJiYgdTJbKytzMl0gPT09IHUyWysrcjJdICYmIHUyWysrczJdID09PSB1MlsrK3IyXSAmJiB1MlsrK3MyXSA9PT0gdTJbKytyMl0gJiYgdTJbKytzMl0gPT09IHUyWysrcjJdICYmIHMyIDwgYzIpO1xuICAgICAgICAgICAgaWYgKG4yID0gUyAtIChjMiAtIHMyKSwgczIgPSBjMiAtIFMsIGEyIDwgbjIpIHtcbiAgICAgICAgICAgICAgaWYgKGUyLm1hdGNoX3N0YXJ0ID0gdDIsIG8yIDw9IChhMiA9IG4yKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZDIgPSB1MltzMiArIGEyIC0gMV0sIHAyID0gdTJbczIgKyBhMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICgodDIgPSBmMlt0MiAmIGwyXSkgPiBoMiAmJiAwICE9IC0taTIpO1xuICAgICAgICByZXR1cm4gYTIgPD0gZTIubG9va2FoZWFkID8gYTIgOiBlMi5sb29rYWhlYWQ7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBqKGUyKSB7XG4gICAgICAgIHZhciB0MiwgcjIsIG4yLCBpMiwgczIsIGEyLCBvMiwgaDIsIHUyLCBsMiwgZjIgPSBlMi53X3NpemU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoaTIgPSBlMi53aW5kb3dfc2l6ZSAtIGUyLmxvb2thaGVhZCAtIGUyLnN0cnN0YXJ0LCBlMi5zdHJzdGFydCA+PSBmMiArIChmMiAtIHopKSB7XG4gICAgICAgICAgICBmb3IgKGMuYXJyYXlTZXQoZTIud2luZG93LCBlMi53aW5kb3csIGYyLCBmMiwgMCksIGUyLm1hdGNoX3N0YXJ0IC09IGYyLCBlMi5zdHJzdGFydCAtPSBmMiwgZTIuYmxvY2tfc3RhcnQgLT0gZjIsIHQyID0gcjIgPSBlMi5oYXNoX3NpemU7IG4yID0gZTIuaGVhZFstLXQyXSwgZTIuaGVhZFt0Ml0gPSBmMiA8PSBuMiA/IG4yIC0gZjIgOiAwLCAtLXIyOyApXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGZvciAodDIgPSByMiA9IGYyOyBuMiA9IGUyLnByZXZbLS10Ml0sIGUyLnByZXZbdDJdID0gZjIgPD0gbjIgPyBuMiAtIGYyIDogMCwgLS1yMjsgKVxuICAgICAgICAgICAgICA7XG4gICAgICAgICAgICBpMiArPSBmMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKDAgPT09IGUyLnN0cm0uYXZhaWxfaW4pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBpZiAoYTIgPSBlMi5zdHJtLCBvMiA9IGUyLndpbmRvdywgaDIgPSBlMi5zdHJzdGFydCArIGUyLmxvb2thaGVhZCwgdTIgPSBpMiwgbDIgPSB2b2lkIDAsIGwyID0gYTIuYXZhaWxfaW4sIHUyIDwgbDIgJiYgKGwyID0gdTIpLCByMiA9IDAgPT09IGwyID8gMCA6IChhMi5hdmFpbF9pbiAtPSBsMiwgYy5hcnJheVNldChvMiwgYTIuaW5wdXQsIGEyLm5leHRfaW4sIGwyLCBoMiksIDEgPT09IGEyLnN0YXRlLndyYXAgPyBhMi5hZGxlciA9IGQoYTIuYWRsZXIsIG8yLCBsMiwgaDIpIDogMiA9PT0gYTIuc3RhdGUud3JhcCAmJiAoYTIuYWRsZXIgPSBwKGEyLmFkbGVyLCBvMiwgbDIsIGgyKSksIGEyLm5leHRfaW4gKz0gbDIsIGEyLnRvdGFsX2luICs9IGwyLCBsMiksIGUyLmxvb2thaGVhZCArPSByMiwgZTIubG9va2FoZWFkICsgZTIuaW5zZXJ0ID49IHgpXG4gICAgICAgICAgICBmb3IgKHMyID0gZTIuc3Ryc3RhcnQgLSBlMi5pbnNlcnQsIGUyLmluc19oID0gZTIud2luZG93W3MyXSwgZTIuaW5zX2ggPSAoZTIuaW5zX2ggPDwgZTIuaGFzaF9zaGlmdCBeIGUyLndpbmRvd1tzMiArIDFdKSAmIGUyLmhhc2hfbWFzazsgZTIuaW5zZXJ0ICYmIChlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W3MyICsgeCAtIDFdKSAmIGUyLmhhc2hfbWFzaywgZTIucHJldltzMiAmIGUyLndfbWFza10gPSBlMi5oZWFkW2UyLmluc19oXSwgZTIuaGVhZFtlMi5pbnNfaF0gPSBzMiwgczIrKywgZTIuaW5zZXJ0LS0sICEoZTIubG9va2FoZWFkICsgZTIuaW5zZXJ0IDwgeCkpOyApXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgfSB3aGlsZSAoZTIubG9va2FoZWFkIDwgeiAmJiAwICE9PSBlMi5zdHJtLmF2YWlsX2luKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFooZTIsIHQyKSB7XG4gICAgICAgIGZvciAodmFyIHIyLCBuMjsgOyApIHtcbiAgICAgICAgICBpZiAoZTIubG9va2FoZWFkIDwgeikge1xuICAgICAgICAgICAgaWYgKGooZTIpLCBlMi5sb29rYWhlYWQgPCB6ICYmIHQyID09PSBsKVxuICAgICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgICAgIGlmICgwID09PSBlMi5sb29rYWhlYWQpXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocjIgPSAwLCBlMi5sb29rYWhlYWQgPj0geCAmJiAoZTIuaW5zX2ggPSAoZTIuaW5zX2ggPDwgZTIuaGFzaF9zaGlmdCBeIGUyLndpbmRvd1tlMi5zdHJzdGFydCArIHggLSAxXSkgJiBlMi5oYXNoX21hc2ssIHIyID0gZTIucHJldltlMi5zdHJzdGFydCAmIGUyLndfbWFza10gPSBlMi5oZWFkW2UyLmluc19oXSwgZTIuaGVhZFtlMi5pbnNfaF0gPSBlMi5zdHJzdGFydCksIDAgIT09IHIyICYmIGUyLnN0cnN0YXJ0IC0gcjIgPD0gZTIud19zaXplIC0geiAmJiAoZTIubWF0Y2hfbGVuZ3RoID0gTChlMiwgcjIpKSwgZTIubWF0Y2hfbGVuZ3RoID49IHgpXG4gICAgICAgICAgICBpZiAobjIgPSB1Ll90cl90YWxseShlMiwgZTIuc3Ryc3RhcnQgLSBlMi5tYXRjaF9zdGFydCwgZTIubWF0Y2hfbGVuZ3RoIC0geCksIGUyLmxvb2thaGVhZCAtPSBlMi5tYXRjaF9sZW5ndGgsIGUyLm1hdGNoX2xlbmd0aCA8PSBlMi5tYXhfbGF6eV9tYXRjaCAmJiBlMi5sb29rYWhlYWQgPj0geCkge1xuICAgICAgICAgICAgICBmb3IgKGUyLm1hdGNoX2xlbmd0aC0tOyBlMi5zdHJzdGFydCsrLCBlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W2UyLnN0cnN0YXJ0ICsgeCAtIDFdKSAmIGUyLmhhc2hfbWFzaywgcjIgPSBlMi5wcmV2W2UyLnN0cnN0YXJ0ICYgZTIud19tYXNrXSA9IGUyLmhlYWRbZTIuaW5zX2hdLCBlMi5oZWFkW2UyLmluc19oXSA9IGUyLnN0cnN0YXJ0LCAwICE9IC0tZTIubWF0Y2hfbGVuZ3RoOyApXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICBlMi5zdHJzdGFydCsrO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIGUyLnN0cnN0YXJ0ICs9IGUyLm1hdGNoX2xlbmd0aCwgZTIubWF0Y2hfbGVuZ3RoID0gMCwgZTIuaW5zX2ggPSBlMi53aW5kb3dbZTIuc3Ryc3RhcnRdLCBlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W2UyLnN0cnN0YXJ0ICsgMV0pICYgZTIuaGFzaF9tYXNrO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG4yID0gdS5fdHJfdGFsbHkoZTIsIDAsIGUyLndpbmRvd1tlMi5zdHJzdGFydF0pLCBlMi5sb29rYWhlYWQtLSwgZTIuc3Ryc3RhcnQrKztcbiAgICAgICAgICBpZiAobjIgJiYgKE4oZTIsIGZhbHNlKSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQpKVxuICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUyLmluc2VydCA9IGUyLnN0cnN0YXJ0IDwgeCAtIDEgPyBlMi5zdHJzdGFydCA6IHggLSAxLCB0MiA9PT0gZiA/IChOKGUyLCB0cnVlKSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQgPyBPIDogQikgOiBlMi5sYXN0X2xpdCAmJiAoTihlMiwgZmFsc2UpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCkgPyBBIDogSTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFcoZTIsIHQyKSB7XG4gICAgICAgIGZvciAodmFyIHIyLCBuMiwgaTI7IDsgKSB7XG4gICAgICAgICAgaWYgKGUyLmxvb2thaGVhZCA8IHopIHtcbiAgICAgICAgICAgIGlmIChqKGUyKSwgZTIubG9va2FoZWFkIDwgeiAmJiB0MiA9PT0gbClcbiAgICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgICAgICBpZiAoMCA9PT0gZTIubG9va2FoZWFkKVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHIyID0gMCwgZTIubG9va2FoZWFkID49IHggJiYgKGUyLmluc19oID0gKGUyLmluc19oIDw8IGUyLmhhc2hfc2hpZnQgXiBlMi53aW5kb3dbZTIuc3Ryc3RhcnQgKyB4IC0gMV0pICYgZTIuaGFzaF9tYXNrLCByMiA9IGUyLnByZXZbZTIuc3Ryc3RhcnQgJiBlMi53X21hc2tdID0gZTIuaGVhZFtlMi5pbnNfaF0sIGUyLmhlYWRbZTIuaW5zX2hdID0gZTIuc3Ryc3RhcnQpLCBlMi5wcmV2X2xlbmd0aCA9IGUyLm1hdGNoX2xlbmd0aCwgZTIucHJldl9tYXRjaCA9IGUyLm1hdGNoX3N0YXJ0LCBlMi5tYXRjaF9sZW5ndGggPSB4IC0gMSwgMCAhPT0gcjIgJiYgZTIucHJldl9sZW5ndGggPCBlMi5tYXhfbGF6eV9tYXRjaCAmJiBlMi5zdHJzdGFydCAtIHIyIDw9IGUyLndfc2l6ZSAtIHogJiYgKGUyLm1hdGNoX2xlbmd0aCA9IEwoZTIsIHIyKSwgZTIubWF0Y2hfbGVuZ3RoIDw9IDUgJiYgKDEgPT09IGUyLnN0cmF0ZWd5IHx8IGUyLm1hdGNoX2xlbmd0aCA9PT0geCAmJiA0MDk2IDwgZTIuc3Ryc3RhcnQgLSBlMi5tYXRjaF9zdGFydCkgJiYgKGUyLm1hdGNoX2xlbmd0aCA9IHggLSAxKSksIGUyLnByZXZfbGVuZ3RoID49IHggJiYgZTIubWF0Y2hfbGVuZ3RoIDw9IGUyLnByZXZfbGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGkyID0gZTIuc3Ryc3RhcnQgKyBlMi5sb29rYWhlYWQgLSB4LCBuMiA9IHUuX3RyX3RhbGx5KGUyLCBlMi5zdHJzdGFydCAtIDEgLSBlMi5wcmV2X21hdGNoLCBlMi5wcmV2X2xlbmd0aCAtIHgpLCBlMi5sb29rYWhlYWQgLT0gZTIucHJldl9sZW5ndGggLSAxLCBlMi5wcmV2X2xlbmd0aCAtPSAyOyArK2UyLnN0cnN0YXJ0IDw9IGkyICYmIChlMi5pbnNfaCA9IChlMi5pbnNfaCA8PCBlMi5oYXNoX3NoaWZ0IF4gZTIud2luZG93W2UyLnN0cnN0YXJ0ICsgeCAtIDFdKSAmIGUyLmhhc2hfbWFzaywgcjIgPSBlMi5wcmV2W2UyLnN0cnN0YXJ0ICYgZTIud19tYXNrXSA9IGUyLmhlYWRbZTIuaW5zX2hdLCBlMi5oZWFkW2UyLmluc19oXSA9IGUyLnN0cnN0YXJ0KSwgMCAhPSAtLWUyLnByZXZfbGVuZ3RoOyApXG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGlmIChlMi5tYXRjaF9hdmFpbGFibGUgPSAwLCBlMi5tYXRjaF9sZW5ndGggPSB4IC0gMSwgZTIuc3Ryc3RhcnQrKywgbjIgJiYgKE4oZTIsIGZhbHNlKSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQpKVxuICAgICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUyLm1hdGNoX2F2YWlsYWJsZSkge1xuICAgICAgICAgICAgaWYgKChuMiA9IHUuX3RyX3RhbGx5KGUyLCAwLCBlMi53aW5kb3dbZTIuc3Ryc3RhcnQgLSAxXSkpICYmIE4oZTIsIGZhbHNlKSwgZTIuc3Ryc3RhcnQrKywgZTIubG9va2FoZWFkLS0sIDAgPT09IGUyLnN0cm0uYXZhaWxfb3V0KVxuICAgICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIGUyLm1hdGNoX2F2YWlsYWJsZSA9IDEsIGUyLnN0cnN0YXJ0KyssIGUyLmxvb2thaGVhZC0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlMi5tYXRjaF9hdmFpbGFibGUgJiYgKG4yID0gdS5fdHJfdGFsbHkoZTIsIDAsIGUyLndpbmRvd1tlMi5zdHJzdGFydCAtIDFdKSwgZTIubWF0Y2hfYXZhaWxhYmxlID0gMCksIGUyLmluc2VydCA9IGUyLnN0cnN0YXJ0IDwgeCAtIDEgPyBlMi5zdHJzdGFydCA6IHggLSAxLCB0MiA9PT0gZiA/IChOKGUyLCB0cnVlKSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQgPyBPIDogQikgOiBlMi5sYXN0X2xpdCAmJiAoTihlMiwgZmFsc2UpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCkgPyBBIDogSTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIE0oZTIsIHQyLCByMiwgbjIsIGkyKSB7XG4gICAgICAgIHRoaXMuZ29vZF9sZW5ndGggPSBlMiwgdGhpcy5tYXhfbGF6eSA9IHQyLCB0aGlzLm5pY2VfbGVuZ3RoID0gcjIsIHRoaXMubWF4X2NoYWluID0gbjIsIHRoaXMuZnVuYyA9IGkyO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gSCgpIHtcbiAgICAgICAgdGhpcy5zdHJtID0gbnVsbCwgdGhpcy5zdGF0dXMgPSAwLCB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbCwgdGhpcy5wZW5kaW5nX2J1Zl9zaXplID0gMCwgdGhpcy5wZW5kaW5nX291dCA9IDAsIHRoaXMucGVuZGluZyA9IDAsIHRoaXMud3JhcCA9IDAsIHRoaXMuZ3poZWFkID0gbnVsbCwgdGhpcy5nemluZGV4ID0gMCwgdGhpcy5tZXRob2QgPSB2LCB0aGlzLmxhc3RfZmx1c2ggPSAtMSwgdGhpcy53X3NpemUgPSAwLCB0aGlzLndfYml0cyA9IDAsIHRoaXMud19tYXNrID0gMCwgdGhpcy53aW5kb3cgPSBudWxsLCB0aGlzLndpbmRvd19zaXplID0gMCwgdGhpcy5wcmV2ID0gbnVsbCwgdGhpcy5oZWFkID0gbnVsbCwgdGhpcy5pbnNfaCA9IDAsIHRoaXMuaGFzaF9zaXplID0gMCwgdGhpcy5oYXNoX2JpdHMgPSAwLCB0aGlzLmhhc2hfbWFzayA9IDAsIHRoaXMuaGFzaF9zaGlmdCA9IDAsIHRoaXMuYmxvY2tfc3RhcnQgPSAwLCB0aGlzLm1hdGNoX2xlbmd0aCA9IDAsIHRoaXMucHJldl9tYXRjaCA9IDAsIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMCwgdGhpcy5zdHJzdGFydCA9IDAsIHRoaXMubWF0Y2hfc3RhcnQgPSAwLCB0aGlzLmxvb2thaGVhZCA9IDAsIHRoaXMucHJldl9sZW5ndGggPSAwLCB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwLCB0aGlzLm1heF9sYXp5X21hdGNoID0gMCwgdGhpcy5sZXZlbCA9IDAsIHRoaXMuc3RyYXRlZ3kgPSAwLCB0aGlzLmdvb2RfbWF0Y2ggPSAwLCB0aGlzLm5pY2VfbWF0Y2ggPSAwLCB0aGlzLmR5bl9sdHJlZSA9IG5ldyBjLkJ1ZjE2KDIgKiB3KSwgdGhpcy5keW5fZHRyZWUgPSBuZXcgYy5CdWYxNigyICogKDIgKiBhICsgMSkpLCB0aGlzLmJsX3RyZWUgPSBuZXcgYy5CdWYxNigyICogKDIgKiBvICsgMSkpLCBEKHRoaXMuZHluX2x0cmVlKSwgRCh0aGlzLmR5bl9kdHJlZSksIEQodGhpcy5ibF90cmVlKSwgdGhpcy5sX2Rlc2MgPSBudWxsLCB0aGlzLmRfZGVzYyA9IG51bGwsIHRoaXMuYmxfZGVzYyA9IG51bGwsIHRoaXMuYmxfY291bnQgPSBuZXcgYy5CdWYxNihrICsgMSksIHRoaXMuaGVhcCA9IG5ldyBjLkJ1ZjE2KDIgKiBzICsgMSksIEQodGhpcy5oZWFwKSwgdGhpcy5oZWFwX2xlbiA9IDAsIHRoaXMuaGVhcF9tYXggPSAwLCB0aGlzLmRlcHRoID0gbmV3IGMuQnVmMTYoMiAqIHMgKyAxKSwgRCh0aGlzLmRlcHRoKSwgdGhpcy5sX2J1ZiA9IDAsIHRoaXMubGl0X2J1ZnNpemUgPSAwLCB0aGlzLmxhc3RfbGl0ID0gMCwgdGhpcy5kX2J1ZiA9IDAsIHRoaXMub3B0X2xlbiA9IDAsIHRoaXMuc3RhdGljX2xlbiA9IDAsIHRoaXMubWF0Y2hlcyA9IDAsIHRoaXMuaW5zZXJ0ID0gMCwgdGhpcy5iaV9idWYgPSAwLCB0aGlzLmJpX3ZhbGlkID0gMDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIEcoZTIpIHtcbiAgICAgICAgdmFyIHQyO1xuICAgICAgICByZXR1cm4gZTIgJiYgZTIuc3RhdGUgPyAoZTIudG90YWxfaW4gPSBlMi50b3RhbF9vdXQgPSAwLCBlMi5kYXRhX3R5cGUgPSBpLCAodDIgPSBlMi5zdGF0ZSkucGVuZGluZyA9IDAsIHQyLnBlbmRpbmdfb3V0ID0gMCwgdDIud3JhcCA8IDAgJiYgKHQyLndyYXAgPSAtdDIud3JhcCksIHQyLnN0YXR1cyA9IHQyLndyYXAgPyBDIDogRSwgZTIuYWRsZXIgPSAyID09PSB0Mi53cmFwID8gMCA6IDEsIHQyLmxhc3RfZmx1c2ggPSBsLCB1Ll90cl9pbml0KHQyKSwgbSkgOiBSMihlMiwgXyk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBLKGUyKSB7XG4gICAgICAgIHZhciB0MiA9IEcoZTIpO1xuICAgICAgICByZXR1cm4gdDIgPT09IG0gJiYgZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICBlMy53aW5kb3dfc2l6ZSA9IDIgKiBlMy53X3NpemUsIEQoZTMuaGVhZCksIGUzLm1heF9sYXp5X21hdGNoID0gaFtlMy5sZXZlbF0ubWF4X2xhenksIGUzLmdvb2RfbWF0Y2ggPSBoW2UzLmxldmVsXS5nb29kX2xlbmd0aCwgZTMubmljZV9tYXRjaCA9IGhbZTMubGV2ZWxdLm5pY2VfbGVuZ3RoLCBlMy5tYXhfY2hhaW5fbGVuZ3RoID0gaFtlMy5sZXZlbF0ubWF4X2NoYWluLCBlMy5zdHJzdGFydCA9IDAsIGUzLmJsb2NrX3N0YXJ0ID0gMCwgZTMubG9va2FoZWFkID0gMCwgZTMuaW5zZXJ0ID0gMCwgZTMubWF0Y2hfbGVuZ3RoID0gZTMucHJldl9sZW5ndGggPSB4IC0gMSwgZTMubWF0Y2hfYXZhaWxhYmxlID0gMCwgZTMuaW5zX2ggPSAwO1xuICAgICAgICB9KGUyLnN0YXRlKSwgdDI7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBZKGUyLCB0MiwgcjIsIG4yLCBpMiwgczIpIHtcbiAgICAgICAgaWYgKCFlMilcbiAgICAgICAgICByZXR1cm4gXztcbiAgICAgICAgdmFyIGEyID0gMTtcbiAgICAgICAgaWYgKHQyID09PSBnICYmICh0MiA9IDYpLCBuMiA8IDAgPyAoYTIgPSAwLCBuMiA9IC1uMikgOiAxNSA8IG4yICYmIChhMiA9IDIsIG4yIC09IDE2KSwgaTIgPCAxIHx8IHkgPCBpMiB8fCByMiAhPT0gdiB8fCBuMiA8IDggfHwgMTUgPCBuMiB8fCB0MiA8IDAgfHwgOSA8IHQyIHx8IHMyIDwgMCB8fCBiIDwgczIpXG4gICAgICAgICAgcmV0dXJuIFIyKGUyLCBfKTtcbiAgICAgICAgOCA9PT0gbjIgJiYgKG4yID0gOSk7XG4gICAgICAgIHZhciBvMiA9IG5ldyBIKCk7XG4gICAgICAgIHJldHVybiAoZTIuc3RhdGUgPSBvMikuc3RybSA9IGUyLCBvMi53cmFwID0gYTIsIG8yLmd6aGVhZCA9IG51bGwsIG8yLndfYml0cyA9IG4yLCBvMi53X3NpemUgPSAxIDw8IG8yLndfYml0cywgbzIud19tYXNrID0gbzIud19zaXplIC0gMSwgbzIuaGFzaF9iaXRzID0gaTIgKyA3LCBvMi5oYXNoX3NpemUgPSAxIDw8IG8yLmhhc2hfYml0cywgbzIuaGFzaF9tYXNrID0gbzIuaGFzaF9zaXplIC0gMSwgbzIuaGFzaF9zaGlmdCA9IH5+KChvMi5oYXNoX2JpdHMgKyB4IC0gMSkgLyB4KSwgbzIud2luZG93ID0gbmV3IGMuQnVmOCgyICogbzIud19zaXplKSwgbzIuaGVhZCA9IG5ldyBjLkJ1ZjE2KG8yLmhhc2hfc2l6ZSksIG8yLnByZXYgPSBuZXcgYy5CdWYxNihvMi53X3NpemUpLCBvMi5saXRfYnVmc2l6ZSA9IDEgPDwgaTIgKyA2LCBvMi5wZW5kaW5nX2J1Zl9zaXplID0gNCAqIG8yLmxpdF9idWZzaXplLCBvMi5wZW5kaW5nX2J1ZiA9IG5ldyBjLkJ1ZjgobzIucGVuZGluZ19idWZfc2l6ZSksIG8yLmRfYnVmID0gMSAqIG8yLmxpdF9idWZzaXplLCBvMi5sX2J1ZiA9IDMgKiBvMi5saXRfYnVmc2l6ZSwgbzIubGV2ZWwgPSB0MiwgbzIuc3RyYXRlZ3kgPSBzMiwgbzIubWV0aG9kID0gcjIsIEsoZTIpO1xuICAgICAgfVxuICAgICAgaCA9IFtuZXcgTSgwLCAwLCAwLCAwLCBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIyID0gNjU1MzU7XG4gICAgICAgIGZvciAocjIgPiBlMi5wZW5kaW5nX2J1Zl9zaXplIC0gNSAmJiAocjIgPSBlMi5wZW5kaW5nX2J1Zl9zaXplIC0gNSk7IDsgKSB7XG4gICAgICAgICAgaWYgKGUyLmxvb2thaGVhZCA8PSAxKSB7XG4gICAgICAgICAgICBpZiAoaihlMiksIDAgPT09IGUyLmxvb2thaGVhZCAmJiB0MiA9PT0gbClcbiAgICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgICAgICBpZiAoMCA9PT0gZTIubG9va2FoZWFkKVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZTIuc3Ryc3RhcnQgKz0gZTIubG9va2FoZWFkLCBlMi5sb29rYWhlYWQgPSAwO1xuICAgICAgICAgIHZhciBuMiA9IGUyLmJsb2NrX3N0YXJ0ICsgcjI7XG4gICAgICAgICAgaWYgKCgwID09PSBlMi5zdHJzdGFydCB8fCBlMi5zdHJzdGFydCA+PSBuMikgJiYgKGUyLmxvb2thaGVhZCA9IGUyLnN0cnN0YXJ0IC0gbjIsIGUyLnN0cnN0YXJ0ID0gbjIsIE4oZTIsIGZhbHNlKSwgMCA9PT0gZTIuc3RybS5hdmFpbF9vdXQpKVxuICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgICAgaWYgKGUyLnN0cnN0YXJ0IC0gZTIuYmxvY2tfc3RhcnQgPj0gZTIud19zaXplIC0geiAmJiAoTihlMiwgZmFsc2UpLCAwID09PSBlMi5zdHJtLmF2YWlsX291dCkpXG4gICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTIuaW5zZXJ0ID0gMCwgdDIgPT09IGYgPyAoTihlMiwgdHJ1ZSksIDAgPT09IGUyLnN0cm0uYXZhaWxfb3V0ID8gTyA6IEIpIDogKGUyLnN0cnN0YXJ0ID4gZTIuYmxvY2tfc3RhcnQgJiYgKE4oZTIsIGZhbHNlKSwgZTIuc3RybS5hdmFpbF9vdXQpLCBBKTtcbiAgICAgIH0pLCBuZXcgTSg0LCA0LCA4LCA0LCBaKSwgbmV3IE0oNCwgNSwgMTYsIDgsIFopLCBuZXcgTSg0LCA2LCAzMiwgMzIsIFopLCBuZXcgTSg0LCA0LCAxNiwgMTYsIFcpLCBuZXcgTSg4LCAxNiwgMzIsIDMyLCBXKSwgbmV3IE0oOCwgMTYsIDEyOCwgMTI4LCBXKSwgbmV3IE0oOCwgMzIsIDEyOCwgMjU2LCBXKSwgbmV3IE0oMzIsIDEyOCwgMjU4LCAxMDI0LCBXKSwgbmV3IE0oMzIsIDI1OCwgMjU4LCA0MDk2LCBXKV0sIHIuZGVmbGF0ZUluaXQgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgcmV0dXJuIFkoZTIsIHQyLCB2LCAxNSwgOCwgMCk7XG4gICAgICB9LCByLmRlZmxhdGVJbml0MiA9IFksIHIuZGVmbGF0ZVJlc2V0ID0gSywgci5kZWZsYXRlUmVzZXRLZWVwID0gRywgci5kZWZsYXRlU2V0SGVhZGVyID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/IDIgIT09IGUyLnN0YXRlLndyYXAgPyBfIDogKGUyLnN0YXRlLmd6aGVhZCA9IHQyLCBtKSA6IF87XG4gICAgICB9LCByLmRlZmxhdGUgPSBmdW5jdGlvbihlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIyLCBuMiwgaTIsIHMyO1xuICAgICAgICBpZiAoIWUyIHx8ICFlMi5zdGF0ZSB8fCA1IDwgdDIgfHwgdDIgPCAwKVxuICAgICAgICAgIHJldHVybiBlMiA/IFIyKGUyLCBfKSA6IF87XG4gICAgICAgIGlmIChuMiA9IGUyLnN0YXRlLCAhZTIub3V0cHV0IHx8ICFlMi5pbnB1dCAmJiAwICE9PSBlMi5hdmFpbF9pbiB8fCA2NjYgPT09IG4yLnN0YXR1cyAmJiB0MiAhPT0gZilcbiAgICAgICAgICByZXR1cm4gUjIoZTIsIDAgPT09IGUyLmF2YWlsX291dCA/IC01IDogXyk7XG4gICAgICAgIGlmIChuMi5zdHJtID0gZTIsIHIyID0gbjIubGFzdF9mbHVzaCwgbjIubGFzdF9mbHVzaCA9IHQyLCBuMi5zdGF0dXMgPT09IEMpXG4gICAgICAgICAgaWYgKDIgPT09IG4yLndyYXApXG4gICAgICAgICAgICBlMi5hZGxlciA9IDAsIFUobjIsIDMxKSwgVShuMiwgMTM5KSwgVShuMiwgOCksIG4yLmd6aGVhZCA/IChVKG4yLCAobjIuZ3poZWFkLnRleHQgPyAxIDogMCkgKyAobjIuZ3poZWFkLmhjcmMgPyAyIDogMCkgKyAobjIuZ3poZWFkLmV4dHJhID8gNCA6IDApICsgKG4yLmd6aGVhZC5uYW1lID8gOCA6IDApICsgKG4yLmd6aGVhZC5jb21tZW50ID8gMTYgOiAwKSksIFUobjIsIDI1NSAmIG4yLmd6aGVhZC50aW1lKSwgVShuMiwgbjIuZ3poZWFkLnRpbWUgPj4gOCAmIDI1NSksIFUobjIsIG4yLmd6aGVhZC50aW1lID4+IDE2ICYgMjU1KSwgVShuMiwgbjIuZ3poZWFkLnRpbWUgPj4gMjQgJiAyNTUpLCBVKG4yLCA5ID09PSBuMi5sZXZlbCA/IDIgOiAyIDw9IG4yLnN0cmF0ZWd5IHx8IG4yLmxldmVsIDwgMiA/IDQgOiAwKSwgVShuMiwgMjU1ICYgbjIuZ3poZWFkLm9zKSwgbjIuZ3poZWFkLmV4dHJhICYmIG4yLmd6aGVhZC5leHRyYS5sZW5ndGggJiYgKFUobjIsIDI1NSAmIG4yLmd6aGVhZC5leHRyYS5sZW5ndGgpLCBVKG4yLCBuMi5nemhlYWQuZXh0cmEubGVuZ3RoID4+IDggJiAyNTUpKSwgbjIuZ3poZWFkLmhjcmMgJiYgKGUyLmFkbGVyID0gcChlMi5hZGxlciwgbjIucGVuZGluZ19idWYsIG4yLnBlbmRpbmcsIDApKSwgbjIuZ3ppbmRleCA9IDAsIG4yLnN0YXR1cyA9IDY5KSA6IChVKG4yLCAwKSwgVShuMiwgMCksIFUobjIsIDApLCBVKG4yLCAwKSwgVShuMiwgMCksIFUobjIsIDkgPT09IG4yLmxldmVsID8gMiA6IDIgPD0gbjIuc3RyYXRlZ3kgfHwgbjIubGV2ZWwgPCAyID8gNCA6IDApLCBVKG4yLCAzKSwgbjIuc3RhdHVzID0gRSk7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgYTIgPSB2ICsgKG4yLndfYml0cyAtIDggPDwgNCkgPDwgODtcbiAgICAgICAgICAgIGEyIHw9ICgyIDw9IG4yLnN0cmF0ZWd5IHx8IG4yLmxldmVsIDwgMiA/IDAgOiBuMi5sZXZlbCA8IDYgPyAxIDogNiA9PT0gbjIubGV2ZWwgPyAyIDogMykgPDwgNiwgMCAhPT0gbjIuc3Ryc3RhcnQgJiYgKGEyIHw9IDMyKSwgYTIgKz0gMzEgLSBhMiAlIDMxLCBuMi5zdGF0dXMgPSBFLCBQKG4yLCBhMiksIDAgIT09IG4yLnN0cnN0YXJ0ICYmIChQKG4yLCBlMi5hZGxlciA+Pj4gMTYpLCBQKG4yLCA2NTUzNSAmIGUyLmFkbGVyKSksIGUyLmFkbGVyID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIGlmICg2OSA9PT0gbjIuc3RhdHVzKVxuICAgICAgICAgIGlmIChuMi5nemhlYWQuZXh0cmEpIHtcbiAgICAgICAgICAgIGZvciAoaTIgPSBuMi5wZW5kaW5nOyBuMi5nemluZGV4IDwgKDY1NTM1ICYgbjIuZ3poZWFkLmV4dHJhLmxlbmd0aCkgJiYgKG4yLnBlbmRpbmcgIT09IG4yLnBlbmRpbmdfYnVmX3NpemUgfHwgKG4yLmd6aGVhZC5oY3JjICYmIG4yLnBlbmRpbmcgPiBpMiAmJiAoZTIuYWRsZXIgPSBwKGUyLmFkbGVyLCBuMi5wZW5kaW5nX2J1ZiwgbjIucGVuZGluZyAtIGkyLCBpMikpLCBGKGUyKSwgaTIgPSBuMi5wZW5kaW5nLCBuMi5wZW5kaW5nICE9PSBuMi5wZW5kaW5nX2J1Zl9zaXplKSk7IClcbiAgICAgICAgICAgICAgVShuMiwgMjU1ICYgbjIuZ3poZWFkLmV4dHJhW24yLmd6aW5kZXhdKSwgbjIuZ3ppbmRleCsrO1xuICAgICAgICAgICAgbjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIG4yLmd6aW5kZXggPT09IG4yLmd6aGVhZC5leHRyYS5sZW5ndGggJiYgKG4yLmd6aW5kZXggPSAwLCBuMi5zdGF0dXMgPSA3Myk7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBuMi5zdGF0dXMgPSA3MztcbiAgICAgICAgaWYgKDczID09PSBuMi5zdGF0dXMpXG4gICAgICAgICAgaWYgKG4yLmd6aGVhZC5uYW1lKSB7XG4gICAgICAgICAgICBpMiA9IG4yLnBlbmRpbmc7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGlmIChuMi5wZW5kaW5nID09PSBuMi5wZW5kaW5nX2J1Zl9zaXplICYmIChuMi5nemhlYWQuaGNyYyAmJiBuMi5wZW5kaW5nID4gaTIgJiYgKGUyLmFkbGVyID0gcChlMi5hZGxlciwgbjIucGVuZGluZ19idWYsIG4yLnBlbmRpbmcgLSBpMiwgaTIpKSwgRihlMiksIGkyID0gbjIucGVuZGluZywgbjIucGVuZGluZyA9PT0gbjIucGVuZGluZ19idWZfc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICBzMiA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgczIgPSBuMi5nemluZGV4IDwgbjIuZ3poZWFkLm5hbWUubGVuZ3RoID8gMjU1ICYgbjIuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChuMi5nemluZGV4KyspIDogMCwgVShuMiwgczIpO1xuICAgICAgICAgICAgfSB3aGlsZSAoMCAhPT0gczIpO1xuICAgICAgICAgICAgbjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIDAgPT09IHMyICYmIChuMi5nemluZGV4ID0gMCwgbjIuc3RhdHVzID0gOTEpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgbjIuc3RhdHVzID0gOTE7XG4gICAgICAgIGlmICg5MSA9PT0gbjIuc3RhdHVzKVxuICAgICAgICAgIGlmIChuMi5nemhlYWQuY29tbWVudCkge1xuICAgICAgICAgICAgaTIgPSBuMi5wZW5kaW5nO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBpZiAobjIucGVuZGluZyA9PT0gbjIucGVuZGluZ19idWZfc2l6ZSAmJiAobjIuZ3poZWFkLmhjcmMgJiYgbjIucGVuZGluZyA+IGkyICYmIChlMi5hZGxlciA9IHAoZTIuYWRsZXIsIG4yLnBlbmRpbmdfYnVmLCBuMi5wZW5kaW5nIC0gaTIsIGkyKSksIEYoZTIpLCBpMiA9IG4yLnBlbmRpbmcsIG4yLnBlbmRpbmcgPT09IG4yLnBlbmRpbmdfYnVmX3NpemUpKSB7XG4gICAgICAgICAgICAgICAgczIgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHMyID0gbjIuZ3ppbmRleCA8IG4yLmd6aGVhZC5jb21tZW50Lmxlbmd0aCA/IDI1NSAmIG4yLmd6aGVhZC5jb21tZW50LmNoYXJDb2RlQXQobjIuZ3ppbmRleCsrKSA6IDAsIFUobjIsIHMyKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKDAgIT09IHMyKTtcbiAgICAgICAgICAgIG4yLmd6aGVhZC5oY3JjICYmIG4yLnBlbmRpbmcgPiBpMiAmJiAoZTIuYWRsZXIgPSBwKGUyLmFkbGVyLCBuMi5wZW5kaW5nX2J1ZiwgbjIucGVuZGluZyAtIGkyLCBpMikpLCAwID09PSBzMiAmJiAobjIuc3RhdHVzID0gMTAzKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIG4yLnN0YXR1cyA9IDEwMztcbiAgICAgICAgaWYgKDEwMyA9PT0gbjIuc3RhdHVzICYmIChuMi5nemhlYWQuaGNyYyA/IChuMi5wZW5kaW5nICsgMiA+IG4yLnBlbmRpbmdfYnVmX3NpemUgJiYgRihlMiksIG4yLnBlbmRpbmcgKyAyIDw9IG4yLnBlbmRpbmdfYnVmX3NpemUgJiYgKFUobjIsIDI1NSAmIGUyLmFkbGVyKSwgVShuMiwgZTIuYWRsZXIgPj4gOCAmIDI1NSksIGUyLmFkbGVyID0gMCwgbjIuc3RhdHVzID0gRSkpIDogbjIuc3RhdHVzID0gRSksIDAgIT09IG4yLnBlbmRpbmcpIHtcbiAgICAgICAgICBpZiAoRihlMiksIDAgPT09IGUyLmF2YWlsX291dClcbiAgICAgICAgICAgIHJldHVybiBuMi5sYXN0X2ZsdXNoID0gLTEsIG07XG4gICAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZTIuYXZhaWxfaW4gJiYgVCh0MikgPD0gVChyMikgJiYgdDIgIT09IGYpXG4gICAgICAgICAgcmV0dXJuIFIyKGUyLCAtNSk7XG4gICAgICAgIGlmICg2NjYgPT09IG4yLnN0YXR1cyAmJiAwICE9PSBlMi5hdmFpbF9pbilcbiAgICAgICAgICByZXR1cm4gUjIoZTIsIC01KTtcbiAgICAgICAgaWYgKDAgIT09IGUyLmF2YWlsX2luIHx8IDAgIT09IG4yLmxvb2thaGVhZCB8fCB0MiAhPT0gbCAmJiA2NjYgIT09IG4yLnN0YXR1cykge1xuICAgICAgICAgIHZhciBvMiA9IDIgPT09IG4yLnN0cmF0ZWd5ID8gZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciByMzsgOyApIHtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IGUzLmxvb2thaGVhZCAmJiAoaihlMyksIDAgPT09IGUzLmxvb2thaGVhZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodDMgPT09IGwpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZTMubWF0Y2hfbGVuZ3RoID0gMCwgcjMgPSB1Ll90cl90YWxseShlMywgMCwgZTMud2luZG93W2UzLnN0cnN0YXJ0XSksIGUzLmxvb2thaGVhZC0tLCBlMy5zdHJzdGFydCsrLCByMyAmJiAoTihlMywgZmFsc2UpLCAwID09PSBlMy5zdHJtLmF2YWlsX291dCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZTMuaW5zZXJ0ID0gMCwgdDMgPT09IGYgPyAoTihlMywgdHJ1ZSksIDAgPT09IGUzLnN0cm0uYXZhaWxfb3V0ID8gTyA6IEIpIDogZTMubGFzdF9saXQgJiYgKE4oZTMsIGZhbHNlKSwgMCA9PT0gZTMuc3RybS5hdmFpbF9vdXQpID8gQSA6IEk7XG4gICAgICAgICAgfShuMiwgdDIpIDogMyA9PT0gbjIuc3RyYXRlZ3kgPyBmdW5jdGlvbihlMywgdDMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHIzLCBuMywgaTMsIHMzLCBhMyA9IGUzLndpbmRvdzsgOyApIHtcbiAgICAgICAgICAgICAgaWYgKGUzLmxvb2thaGVhZCA8PSBTKSB7XG4gICAgICAgICAgICAgICAgaWYgKGooZTMpLCBlMy5sb29rYWhlYWQgPD0gUyAmJiB0MyA9PT0gbClcbiAgICAgICAgICAgICAgICAgIHJldHVybiBBO1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBlMy5sb29rYWhlYWQpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZTMubWF0Y2hfbGVuZ3RoID0gMCwgZTMubG9va2FoZWFkID49IHggJiYgMCA8IGUzLnN0cnN0YXJ0ICYmIChuMyA9IGEzW2kzID0gZTMuc3Ryc3RhcnQgLSAxXSkgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBuMyA9PT0gYTNbKytpM10pIHtcbiAgICAgICAgICAgICAgICBzMyA9IGUzLnN0cnN0YXJ0ICsgUztcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAobjMgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBuMyA9PT0gYTNbKytpM10gJiYgbjMgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBuMyA9PT0gYTNbKytpM10gJiYgbjMgPT09IGEzWysraTNdICYmIG4zID09PSBhM1srK2kzXSAmJiBpMyA8IHMzKTtcbiAgICAgICAgICAgICAgICBlMy5tYXRjaF9sZW5ndGggPSBTIC0gKHMzIC0gaTMpLCBlMy5tYXRjaF9sZW5ndGggPiBlMy5sb29rYWhlYWQgJiYgKGUzLm1hdGNoX2xlbmd0aCA9IGUzLmxvb2thaGVhZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGUzLm1hdGNoX2xlbmd0aCA+PSB4ID8gKHIzID0gdS5fdHJfdGFsbHkoZTMsIDEsIGUzLm1hdGNoX2xlbmd0aCAtIHgpLCBlMy5sb29rYWhlYWQgLT0gZTMubWF0Y2hfbGVuZ3RoLCBlMy5zdHJzdGFydCArPSBlMy5tYXRjaF9sZW5ndGgsIGUzLm1hdGNoX2xlbmd0aCA9IDApIDogKHIzID0gdS5fdHJfdGFsbHkoZTMsIDAsIGUzLndpbmRvd1tlMy5zdHJzdGFydF0pLCBlMy5sb29rYWhlYWQtLSwgZTMuc3Ryc3RhcnQrKyksIHIzICYmIChOKGUzLCBmYWxzZSksIDAgPT09IGUzLnN0cm0uYXZhaWxfb3V0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlMy5pbnNlcnQgPSAwLCB0MyA9PT0gZiA/IChOKGUzLCB0cnVlKSwgMCA9PT0gZTMuc3RybS5hdmFpbF9vdXQgPyBPIDogQikgOiBlMy5sYXN0X2xpdCAmJiAoTihlMywgZmFsc2UpLCAwID09PSBlMy5zdHJtLmF2YWlsX291dCkgPyBBIDogSTtcbiAgICAgICAgICB9KG4yLCB0MikgOiBoW24yLmxldmVsXS5mdW5jKG4yLCB0Mik7XG4gICAgICAgICAgaWYgKG8yICE9PSBPICYmIG8yICE9PSBCIHx8IChuMi5zdGF0dXMgPSA2NjYpLCBvMiA9PT0gQSB8fCBvMiA9PT0gTylcbiAgICAgICAgICAgIHJldHVybiAwID09PSBlMi5hdmFpbF9vdXQgJiYgKG4yLmxhc3RfZmx1c2ggPSAtMSksIG07XG4gICAgICAgICAgaWYgKG8yID09PSBJICYmICgxID09PSB0MiA/IHUuX3RyX2FsaWduKG4yKSA6IDUgIT09IHQyICYmICh1Ll90cl9zdG9yZWRfYmxvY2sobjIsIDAsIDAsIGZhbHNlKSwgMyA9PT0gdDIgJiYgKEQobjIuaGVhZCksIDAgPT09IG4yLmxvb2thaGVhZCAmJiAobjIuc3Ryc3RhcnQgPSAwLCBuMi5ibG9ja19zdGFydCA9IDAsIG4yLmluc2VydCA9IDApKSksIEYoZTIpLCAwID09PSBlMi5hdmFpbF9vdXQpKVxuICAgICAgICAgICAgcmV0dXJuIG4yLmxhc3RfZmx1c2ggPSAtMSwgbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDIgIT09IGYgPyBtIDogbjIud3JhcCA8PSAwID8gMSA6ICgyID09PSBuMi53cmFwID8gKFUobjIsIDI1NSAmIGUyLmFkbGVyKSwgVShuMiwgZTIuYWRsZXIgPj4gOCAmIDI1NSksIFUobjIsIGUyLmFkbGVyID4+IDE2ICYgMjU1KSwgVShuMiwgZTIuYWRsZXIgPj4gMjQgJiAyNTUpLCBVKG4yLCAyNTUgJiBlMi50b3RhbF9pbiksIFUobjIsIGUyLnRvdGFsX2luID4+IDggJiAyNTUpLCBVKG4yLCBlMi50b3RhbF9pbiA+PiAxNiAmIDI1NSksIFUobjIsIGUyLnRvdGFsX2luID4+IDI0ICYgMjU1KSkgOiAoUChuMiwgZTIuYWRsZXIgPj4+IDE2KSwgUChuMiwgNjU1MzUgJiBlMi5hZGxlcikpLCBGKGUyKSwgMCA8IG4yLndyYXAgJiYgKG4yLndyYXAgPSAtbjIud3JhcCksIDAgIT09IG4yLnBlbmRpbmcgPyBtIDogMSk7XG4gICAgICB9LCByLmRlZmxhdGVFbmQgPSBmdW5jdGlvbihlMikge1xuICAgICAgICB2YXIgdDI7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/ICh0MiA9IGUyLnN0YXRlLnN0YXR1cykgIT09IEMgJiYgNjkgIT09IHQyICYmIDczICE9PSB0MiAmJiA5MSAhPT0gdDIgJiYgMTAzICE9PSB0MiAmJiB0MiAhPT0gRSAmJiA2NjYgIT09IHQyID8gUjIoZTIsIF8pIDogKGUyLnN0YXRlID0gbnVsbCwgdDIgPT09IEUgPyBSMihlMiwgLTMpIDogbSkgOiBfO1xuICAgICAgfSwgci5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIsIG4yLCBpMiwgczIsIGEyLCBvMiwgaDIsIHUyLCBsMiA9IHQyLmxlbmd0aDtcbiAgICAgICAgaWYgKCFlMiB8fCAhZTIuc3RhdGUpXG4gICAgICAgICAgcmV0dXJuIF87XG4gICAgICAgIGlmICgyID09PSAoczIgPSAocjIgPSBlMi5zdGF0ZSkud3JhcCkgfHwgMSA9PT0gczIgJiYgcjIuc3RhdHVzICE9PSBDIHx8IHIyLmxvb2thaGVhZClcbiAgICAgICAgICByZXR1cm4gXztcbiAgICAgICAgZm9yICgxID09PSBzMiAmJiAoZTIuYWRsZXIgPSBkKGUyLmFkbGVyLCB0MiwgbDIsIDApKSwgcjIud3JhcCA9IDAsIGwyID49IHIyLndfc2l6ZSAmJiAoMCA9PT0gczIgJiYgKEQocjIuaGVhZCksIHIyLnN0cnN0YXJ0ID0gMCwgcjIuYmxvY2tfc3RhcnQgPSAwLCByMi5pbnNlcnQgPSAwKSwgdTIgPSBuZXcgYy5CdWY4KHIyLndfc2l6ZSksIGMuYXJyYXlTZXQodTIsIHQyLCBsMiAtIHIyLndfc2l6ZSwgcjIud19zaXplLCAwKSwgdDIgPSB1MiwgbDIgPSByMi53X3NpemUpLCBhMiA9IGUyLmF2YWlsX2luLCBvMiA9IGUyLm5leHRfaW4sIGgyID0gZTIuaW5wdXQsIGUyLmF2YWlsX2luID0gbDIsIGUyLm5leHRfaW4gPSAwLCBlMi5pbnB1dCA9IHQyLCBqKHIyKTsgcjIubG9va2FoZWFkID49IHg7ICkge1xuICAgICAgICAgIGZvciAobjIgPSByMi5zdHJzdGFydCwgaTIgPSByMi5sb29rYWhlYWQgLSAoeCAtIDEpOyByMi5pbnNfaCA9IChyMi5pbnNfaCA8PCByMi5oYXNoX3NoaWZ0IF4gcjIud2luZG93W24yICsgeCAtIDFdKSAmIHIyLmhhc2hfbWFzaywgcjIucHJldltuMiAmIHIyLndfbWFza10gPSByMi5oZWFkW3IyLmluc19oXSwgcjIuaGVhZFtyMi5pbnNfaF0gPSBuMiwgbjIrKywgLS1pMjsgKVxuICAgICAgICAgICAgO1xuICAgICAgICAgIHIyLnN0cnN0YXJ0ID0gbjIsIHIyLmxvb2thaGVhZCA9IHggLSAxLCBqKHIyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjIuc3Ryc3RhcnQgKz0gcjIubG9va2FoZWFkLCByMi5ibG9ja19zdGFydCA9IHIyLnN0cnN0YXJ0LCByMi5pbnNlcnQgPSByMi5sb29rYWhlYWQsIHIyLmxvb2thaGVhZCA9IDAsIHIyLm1hdGNoX2xlbmd0aCA9IHIyLnByZXZfbGVuZ3RoID0geCAtIDEsIHIyLm1hdGNoX2F2YWlsYWJsZSA9IDAsIGUyLm5leHRfaW4gPSBvMiwgZTIuaW5wdXQgPSBoMiwgZTIuYXZhaWxfaW4gPSBhMiwgcjIud3JhcCA9IHMyLCBtO1xuICAgICAgfSwgci5kZWZsYXRlSW5mbyA9IFwicGFrbyBkZWZsYXRlIChmcm9tIE5vZGVjYSBwcm9qZWN0KVwiO1xuICAgIH0sIHsgXCIuLi91dGlscy9jb21tb25cIjogNDEsIFwiLi9hZGxlcjMyXCI6IDQzLCBcIi4vY3JjMzJcIjogNDUsIFwiLi9tZXNzYWdlc1wiOiA1MSwgXCIuL3RyZWVzXCI6IDUyIH1dLCA0NzogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRleHQgPSAwLCB0aGlzLnRpbWUgPSAwLCB0aGlzLnhmbGFncyA9IDAsIHRoaXMub3MgPSAwLCB0aGlzLmV4dHJhID0gbnVsbCwgdGhpcy5leHRyYV9sZW4gPSAwLCB0aGlzLm5hbWUgPSBcIlwiLCB0aGlzLmNvbW1lbnQgPSBcIlwiLCB0aGlzLmhjcmMgPSAwLCB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfSwge31dLCA0ODogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIsIG4sIGksIHMsIGEsIG8sIGgsIHUsIGwsIGYsIGMsIGQsIHAsIG0sIF8sIGcsIGIsIHYsIHksIHcsIGssIHgsIFMsIHosIEM7XG4gICAgICAgIHIyID0gZTIuc3RhdGUsIG4gPSBlMi5uZXh0X2luLCB6ID0gZTIuaW5wdXQsIGkgPSBuICsgKGUyLmF2YWlsX2luIC0gNSksIHMgPSBlMi5uZXh0X291dCwgQyA9IGUyLm91dHB1dCwgYSA9IHMgLSAodDIgLSBlMi5hdmFpbF9vdXQpLCBvID0gcyArIChlMi5hdmFpbF9vdXQgLSAyNTcpLCBoID0gcjIuZG1heCwgdSA9IHIyLndzaXplLCBsID0gcjIud2hhdmUsIGYgPSByMi53bmV4dCwgYyA9IHIyLndpbmRvdywgZCA9IHIyLmhvbGQsIHAgPSByMi5iaXRzLCBtID0gcjIubGVuY29kZSwgXyA9IHIyLmRpc3Rjb2RlLCBnID0gKDEgPDwgcjIubGVuYml0cykgLSAxLCBiID0gKDEgPDwgcjIuZGlzdGJpdHMpIC0gMTtcbiAgICAgICAgZTpcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBwIDwgMTUgJiYgKGQgKz0geltuKytdIDw8IHAsIHAgKz0gOCwgZCArPSB6W24rK10gPDwgcCwgcCArPSA4KSwgdiA9IG1bZCAmIGddO1xuICAgICAgICAgICAgdDpcbiAgICAgICAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgPj4+PSB5ID0gdiA+Pj4gMjQsIHAgLT0geSwgMCA9PT0gKHkgPSB2ID4+PiAxNiAmIDI1NSkpXG4gICAgICAgICAgICAgICAgICBDW3MrK10gPSA2NTUzNSAmIHY7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoISgxNiAmIHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgwID09ICg2NCAmIHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdiA9IG1bKDY1NTM1ICYgdikgKyAoZCAmICgxIDw8IHkpIC0gMSldO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKDMyICYgeSkge1xuICAgICAgICAgICAgICAgICAgICAgIHIyLm1vZGUgPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHcgPSA2NTUzNSAmIHYsICh5ICY9IDE1KSAmJiAocCA8IHkgJiYgKGQgKz0geltuKytdIDw8IHAsIHAgKz0gOCksIHcgKz0gZCAmICgxIDw8IHkpIC0gMSwgZCA+Pj49IHksIHAgLT0geSksIHAgPCAxNSAmJiAoZCArPSB6W24rK10gPDwgcCwgcCArPSA4LCBkICs9IHpbbisrXSA8PCBwLCBwICs9IDgpLCB2ID0gX1tkICYgYl07XG4gICAgICAgICAgICAgICAgICByOlxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgOyApIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA+Pj49IHkgPSB2ID4+PiAyNCwgcCAtPSB5LCAhKDE2ICYgKHkgPSB2ID4+PiAxNiAmIDI1NSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSAoNjQgJiB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gX1soNjU1MzUgJiB2KSArIChkICYgKDEgPDwgeSkgLSAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgY29kZVwiLCByMi5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoayA9IDY1NTM1ICYgdiwgcCA8ICh5ICY9IDE1KSAmJiAoZCArPSB6W24rK10gPDwgcCwgKHAgKz0gOCkgPCB5ICYmIChkICs9IHpbbisrXSA8PCBwLCBwICs9IDgpKSwgaCA8IChrICs9IGQgJiAoMSA8PCB5KSAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChkID4+Pj0geSwgcCAtPSB5LCAoeSA9IHMgLSBhKSA8IGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsIDwgKHkgPSBrIC0geSkgJiYgcjIuc2FuZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTID0gYywgKHggPSAwKSA9PT0gZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCArPSB1IC0geSwgeSA8IHcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHcgLT0geTsgQ1tzKytdID0gY1t4KytdLCAtLXk7IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gcyAtIGssIFMgPSBDO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGYgPCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4ICs9IHUgKyBmIC0geSwgKHkgLT0gZikgPCB3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh3IC09IHk7IENbcysrXSA9IGNbeCsrXSwgLS15OyApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPSAwLCBmIDwgdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh3IC09IHkgPSBmOyBDW3MrK10gPSBjW3grK10sIC0teTsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gcyAtIGssIFMgPSBDO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ICs9IGYgLSB5LCB5IDwgdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHcgLT0geTsgQ1tzKytdID0gY1t4KytdLCAtLXk7IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBzIC0gaywgUyA9IEM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgMiA8IHc7IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQ1tzKytdID0gU1t4KytdLCBDW3MrK10gPSBTW3grK10sIENbcysrXSA9IFNbeCsrXSwgdyAtPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdyAmJiAoQ1tzKytdID0gU1t4KytdLCAxIDwgdyAmJiAoQ1tzKytdID0gU1t4KytdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoeCA9IHMgLSBrOyBDW3MrK10gPSBDW3grK10sIENbcysrXSA9IENbeCsrXSwgQ1tzKytdID0gQ1t4KytdLCAyIDwgKHcgLT0gMyk7IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAgICAgdyAmJiAoQ1tzKytdID0gQ1t4KytdLCAxIDwgdyAmJiAoQ1tzKytdID0gQ1t4KytdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobiA8IGkgJiYgcyA8IG8pO1xuICAgICAgICBuIC09IHcgPSBwID4+IDMsIGQgJj0gKDEgPDwgKHAgLT0gdyA8PCAzKSkgLSAxLCBlMi5uZXh0X2luID0gbiwgZTIubmV4dF9vdXQgPSBzLCBlMi5hdmFpbF9pbiA9IG4gPCBpID8gaSAtIG4gKyA1IDogNSAtIChuIC0gaSksIGUyLmF2YWlsX291dCA9IHMgPCBvID8gbyAtIHMgKyAyNTcgOiAyNTcgLSAocyAtIG8pLCByMi5ob2xkID0gZCwgcjIuYml0cyA9IHA7XG4gICAgICB9O1xuICAgIH0sIHt9XSwgNDk6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB2YXIgSSA9IGUoXCIuLi91dGlscy9jb21tb25cIiksIE8gPSBlKFwiLi9hZGxlcjMyXCIpLCBCID0gZShcIi4vY3JjMzJcIiksIFIyID0gZShcIi4vaW5mZmFzdFwiKSwgVCA9IGUoXCIuL2luZnRyZWVzXCIpLCBEID0gMSwgRiA9IDIsIE4gPSAwLCBVID0gLTIsIFAgPSAxLCBuID0gODUyLCBpID0gNTkyO1xuICAgICAgZnVuY3Rpb24gTChlMikge1xuICAgICAgICByZXR1cm4gKGUyID4+PiAyNCAmIDI1NSkgKyAoZTIgPj4+IDggJiA2NTI4MCkgKyAoKDY1MjgwICYgZTIpIDw8IDgpICsgKCgyNTUgJiBlMikgPDwgMjQpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcygpIHtcbiAgICAgICAgdGhpcy5tb2RlID0gMCwgdGhpcy5sYXN0ID0gZmFsc2UsIHRoaXMud3JhcCA9IDAsIHRoaXMuaGF2ZWRpY3QgPSBmYWxzZSwgdGhpcy5mbGFncyA9IDAsIHRoaXMuZG1heCA9IDAsIHRoaXMuY2hlY2sgPSAwLCB0aGlzLnRvdGFsID0gMCwgdGhpcy5oZWFkID0gbnVsbCwgdGhpcy53Yml0cyA9IDAsIHRoaXMud3NpemUgPSAwLCB0aGlzLndoYXZlID0gMCwgdGhpcy53bmV4dCA9IDAsIHRoaXMud2luZG93ID0gbnVsbCwgdGhpcy5ob2xkID0gMCwgdGhpcy5iaXRzID0gMCwgdGhpcy5sZW5ndGggPSAwLCB0aGlzLm9mZnNldCA9IDAsIHRoaXMuZXh0cmEgPSAwLCB0aGlzLmxlbmNvZGUgPSBudWxsLCB0aGlzLmRpc3Rjb2RlID0gbnVsbCwgdGhpcy5sZW5iaXRzID0gMCwgdGhpcy5kaXN0Yml0cyA9IDAsIHRoaXMubmNvZGUgPSAwLCB0aGlzLm5sZW4gPSAwLCB0aGlzLm5kaXN0ID0gMCwgdGhpcy5oYXZlID0gMCwgdGhpcy5uZXh0ID0gbnVsbCwgdGhpcy5sZW5zID0gbmV3IEkuQnVmMTYoMzIwKSwgdGhpcy53b3JrID0gbmV3IEkuQnVmMTYoMjg4KSwgdGhpcy5sZW5keW4gPSBudWxsLCB0aGlzLmRpc3RkeW4gPSBudWxsLCB0aGlzLnNhbmUgPSAwLCB0aGlzLmJhY2sgPSAwLCB0aGlzLndhcyA9IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBhKGUyKSB7XG4gICAgICAgIHZhciB0MjtcbiAgICAgICAgcmV0dXJuIGUyICYmIGUyLnN0YXRlID8gKHQyID0gZTIuc3RhdGUsIGUyLnRvdGFsX2luID0gZTIudG90YWxfb3V0ID0gdDIudG90YWwgPSAwLCBlMi5tc2cgPSBcIlwiLCB0Mi53cmFwICYmIChlMi5hZGxlciA9IDEgJiB0Mi53cmFwKSwgdDIubW9kZSA9IFAsIHQyLmxhc3QgPSAwLCB0Mi5oYXZlZGljdCA9IDAsIHQyLmRtYXggPSAzMjc2OCwgdDIuaGVhZCA9IG51bGwsIHQyLmhvbGQgPSAwLCB0Mi5iaXRzID0gMCwgdDIubGVuY29kZSA9IHQyLmxlbmR5biA9IG5ldyBJLkJ1ZjMyKG4pLCB0Mi5kaXN0Y29kZSA9IHQyLmRpc3RkeW4gPSBuZXcgSS5CdWYzMihpKSwgdDIuc2FuZSA9IDEsIHQyLmJhY2sgPSAtMSwgTikgOiBVO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbyhlMikge1xuICAgICAgICB2YXIgdDI7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/ICgodDIgPSBlMi5zdGF0ZSkud3NpemUgPSAwLCB0Mi53aGF2ZSA9IDAsIHQyLnduZXh0ID0gMCwgYShlMikpIDogVTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGgoZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiwgbjI7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/IChuMiA9IGUyLnN0YXRlLCB0MiA8IDAgPyAocjIgPSAwLCB0MiA9IC10MikgOiAocjIgPSAxICsgKHQyID4+IDQpLCB0MiA8IDQ4ICYmICh0MiAmPSAxNSkpLCB0MiAmJiAodDIgPCA4IHx8IDE1IDwgdDIpID8gVSA6IChudWxsICE9PSBuMi53aW5kb3cgJiYgbjIud2JpdHMgIT09IHQyICYmIChuMi53aW5kb3cgPSBudWxsKSwgbjIud3JhcCA9IHIyLCBuMi53Yml0cyA9IHQyLCBvKGUyKSkpIDogVTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHUoZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiwgbjI7XG4gICAgICAgIHJldHVybiBlMiA/IChuMiA9IG5ldyBzKCksIChlMi5zdGF0ZSA9IG4yKS53aW5kb3cgPSBudWxsLCAocjIgPSBoKGUyLCB0MikpICE9PSBOICYmIChlMi5zdGF0ZSA9IG51bGwpLCByMikgOiBVO1xuICAgICAgfVxuICAgICAgdmFyIGwsIGYsIGMgPSB0cnVlO1xuICAgICAgZnVuY3Rpb24gaihlMikge1xuICAgICAgICBpZiAoYykge1xuICAgICAgICAgIHZhciB0MjtcbiAgICAgICAgICBmb3IgKGwgPSBuZXcgSS5CdWYzMig1MTIpLCBmID0gbmV3IEkuQnVmMzIoMzIpLCB0MiA9IDA7IHQyIDwgMTQ0OyApXG4gICAgICAgICAgICBlMi5sZW5zW3QyKytdID0gODtcbiAgICAgICAgICBmb3IgKDsgdDIgPCAyNTY7IClcbiAgICAgICAgICAgIGUyLmxlbnNbdDIrK10gPSA5O1xuICAgICAgICAgIGZvciAoOyB0MiA8IDI4MDsgKVxuICAgICAgICAgICAgZTIubGVuc1t0MisrXSA9IDc7XG4gICAgICAgICAgZm9yICg7IHQyIDwgMjg4OyApXG4gICAgICAgICAgICBlMi5sZW5zW3QyKytdID0gODtcbiAgICAgICAgICBmb3IgKFQoRCwgZTIubGVucywgMCwgMjg4LCBsLCAwLCBlMi53b3JrLCB7IGJpdHM6IDkgfSksIHQyID0gMDsgdDIgPCAzMjsgKVxuICAgICAgICAgICAgZTIubGVuc1t0MisrXSA9IDU7XG4gICAgICAgICAgVChGLCBlMi5sZW5zLCAwLCAzMiwgZiwgMCwgZTIud29yaywgeyBiaXRzOiA1IH0pLCBjID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZTIubGVuY29kZSA9IGwsIGUyLmxlbmJpdHMgPSA5LCBlMi5kaXN0Y29kZSA9IGYsIGUyLmRpc3RiaXRzID0gNTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFooZTIsIHQyLCByMiwgbjIpIHtcbiAgICAgICAgdmFyIGkyLCBzMiA9IGUyLnN0YXRlO1xuICAgICAgICByZXR1cm4gbnVsbCA9PT0gczIud2luZG93ICYmIChzMi53c2l6ZSA9IDEgPDwgczIud2JpdHMsIHMyLnduZXh0ID0gMCwgczIud2hhdmUgPSAwLCBzMi53aW5kb3cgPSBuZXcgSS5CdWY4KHMyLndzaXplKSksIG4yID49IHMyLndzaXplID8gKEkuYXJyYXlTZXQoczIud2luZG93LCB0MiwgcjIgLSBzMi53c2l6ZSwgczIud3NpemUsIDApLCBzMi53bmV4dCA9IDAsIHMyLndoYXZlID0gczIud3NpemUpIDogKG4yIDwgKGkyID0gczIud3NpemUgLSBzMi53bmV4dCkgJiYgKGkyID0gbjIpLCBJLmFycmF5U2V0KHMyLndpbmRvdywgdDIsIHIyIC0gbjIsIGkyLCBzMi53bmV4dCksIChuMiAtPSBpMikgPyAoSS5hcnJheVNldChzMi53aW5kb3csIHQyLCByMiAtIG4yLCBuMiwgMCksIHMyLnduZXh0ID0gbjIsIHMyLndoYXZlID0gczIud3NpemUpIDogKHMyLnduZXh0ICs9IGkyLCBzMi53bmV4dCA9PT0gczIud3NpemUgJiYgKHMyLnduZXh0ID0gMCksIHMyLndoYXZlIDwgczIud3NpemUgJiYgKHMyLndoYXZlICs9IGkyKSkpLCAwO1xuICAgICAgfVxuICAgICAgci5pbmZsYXRlUmVzZXQgPSBvLCByLmluZmxhdGVSZXNldDIgPSBoLCByLmluZmxhdGVSZXNldEtlZXAgPSBhLCByLmluZmxhdGVJbml0ID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgcmV0dXJuIHUoZTIsIDE1KTtcbiAgICAgIH0sIHIuaW5mbGF0ZUluaXQyID0gdSwgci5pbmZsYXRlID0gZnVuY3Rpb24oZTIsIHQyKSB7XG4gICAgICAgIHZhciByMiwgbjIsIGkyLCBzMiwgYTIsIG8yLCBoMiwgdTIsIGwyLCBmMiwgYzIsIGQsIHAsIG0sIF8sIGcsIGIsIHYsIHksIHcsIGssIHgsIFMsIHosIEMgPSAwLCBFID0gbmV3IEkuQnVmOCg0KSwgQSA9IFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XTtcbiAgICAgICAgaWYgKCFlMiB8fCAhZTIuc3RhdGUgfHwgIWUyLm91dHB1dCB8fCAhZTIuaW5wdXQgJiYgMCAhPT0gZTIuYXZhaWxfaW4pXG4gICAgICAgICAgcmV0dXJuIFU7XG4gICAgICAgIDEyID09PSAocjIgPSBlMi5zdGF0ZSkubW9kZSAmJiAocjIubW9kZSA9IDEzKSwgYTIgPSBlMi5uZXh0X291dCwgaTIgPSBlMi5vdXRwdXQsIGgyID0gZTIuYXZhaWxfb3V0LCBzMiA9IGUyLm5leHRfaW4sIG4yID0gZTIuaW5wdXQsIG8yID0gZTIuYXZhaWxfaW4sIHUyID0gcjIuaG9sZCwgbDIgPSByMi5iaXRzLCBmMiA9IG8yLCBjMiA9IGgyLCB4ID0gTjtcbiAgICAgICAgZTpcbiAgICAgICAgICBmb3IgKDsgOyApXG4gICAgICAgICAgICBzd2l0Y2ggKHIyLm1vZGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBQOlxuICAgICAgICAgICAgICAgIGlmICgwID09PSByMi53cmFwKSB7XG4gICAgICAgICAgICAgICAgICByMi5tb2RlID0gMTM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMTY7ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgyICYgcjIud3JhcCAmJiAzNTYxNSA9PT0gdTIpIHtcbiAgICAgICAgICAgICAgICAgIEVbcjIuY2hlY2sgPSAwXSA9IDI1NSAmIHUyLCBFWzFdID0gdTIgPj4+IDggJiAyNTUsIHIyLmNoZWNrID0gQihyMi5jaGVjaywgRSwgMiwgMCksIGwyID0gdTIgPSAwLCByMi5tb2RlID0gMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocjIuZmxhZ3MgPSAwLCByMi5oZWFkICYmIChyMi5oZWFkLmRvbmUgPSBmYWxzZSksICEoMSAmIHIyLndyYXApIHx8ICgoKDI1NSAmIHUyKSA8PCA4KSArICh1MiA+PiA4KSkgJSAzMSkge1xuICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoOCAhPSAoMTUgJiB1MikpIHtcbiAgICAgICAgICAgICAgICAgIGUyLm1zZyA9IFwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsMiAtPSA0LCBrID0gOCArICgxNSAmICh1MiA+Pj49IDQpKSwgMCA9PT0gcjIud2JpdHMpXG4gICAgICAgICAgICAgICAgICByMi53Yml0cyA9IGs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoayA+IHIyLndiaXRzKSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgd2luZG93IHNpemVcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLmRtYXggPSAxIDw8IGssIGUyLmFkbGVyID0gcjIuY2hlY2sgPSAxLCByMi5tb2RlID0gNTEyICYgdTIgPyAxMCA6IDEyLCBsMiA9IHUyID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGZvciAoOyBsMiA8IDE2OyApIHtcbiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBvMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MyKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocjIuZmxhZ3MgPSB1MiwgOCAhPSAoMjU1ICYgcjIuZmxhZ3MpKSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoNTczNDQgJiByMi5mbGFncykge1xuICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJ1bmtub3duIGhlYWRlciBmbGFncyBzZXRcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLmhlYWQgJiYgKHIyLmhlYWQudGV4dCA9IHUyID4+IDggJiAxKSwgNTEyICYgcjIuZmxhZ3MgJiYgKEVbMF0gPSAyNTUgJiB1MiwgRVsxXSA9IHUyID4+PiA4ICYgMjU1LCByMi5jaGVjayA9IEIocjIuY2hlY2ssIEUsIDIsIDApKSwgbDIgPSB1MiA9IDAsIHIyLm1vZGUgPSAzO1xuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMzI7ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLmhlYWQgJiYgKHIyLmhlYWQudGltZSA9IHUyKSwgNTEyICYgcjIuZmxhZ3MgJiYgKEVbMF0gPSAyNTUgJiB1MiwgRVsxXSA9IHUyID4+PiA4ICYgMjU1LCBFWzJdID0gdTIgPj4+IDE2ICYgMjU1LCBFWzNdID0gdTIgPj4+IDI0ICYgMjU1LCByMi5jaGVjayA9IEIocjIuY2hlY2ssIEUsIDQsIDApKSwgbDIgPSB1MiA9IDAsIHIyLm1vZGUgPSA0O1xuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMTY7ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLmhlYWQgJiYgKHIyLmhlYWQueGZsYWdzID0gMjU1ICYgdTIsIHIyLmhlYWQub3MgPSB1MiA+PiA4KSwgNTEyICYgcjIuZmxhZ3MgJiYgKEVbMF0gPSAyNTUgJiB1MiwgRVsxXSA9IHUyID4+PiA4ICYgMjU1LCByMi5jaGVjayA9IEIocjIuY2hlY2ssIEUsIDIsIDApKSwgbDIgPSB1MiA9IDAsIHIyLm1vZGUgPSA1O1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgaWYgKDEwMjQgJiByMi5mbGFncykge1xuICAgICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMTY7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByMi5sZW5ndGggPSB1MiwgcjIuaGVhZCAmJiAocjIuaGVhZC5leHRyYV9sZW4gPSB1MiksIDUxMiAmIHIyLmZsYWdzICYmIChFWzBdID0gMjU1ICYgdTIsIEVbMV0gPSB1MiA+Pj4gOCAmIDI1NSwgcjIuY2hlY2sgPSBCKHIyLmNoZWNrLCBFLCAyLCAwKSksIGwyID0gdTIgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgcjIuaGVhZCAmJiAocjIuaGVhZC5leHRyYSA9IG51bGwpO1xuICAgICAgICAgICAgICAgIHIyLm1vZGUgPSA2O1xuICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgaWYgKDEwMjQgJiByMi5mbGFncyAmJiAobzIgPCAoZCA9IHIyLmxlbmd0aCkgJiYgKGQgPSBvMiksIGQgJiYgKHIyLmhlYWQgJiYgKGsgPSByMi5oZWFkLmV4dHJhX2xlbiAtIHIyLmxlbmd0aCwgcjIuaGVhZC5leHRyYSB8fCAocjIuaGVhZC5leHRyYSA9IG5ldyBBcnJheShyMi5oZWFkLmV4dHJhX2xlbikpLCBJLmFycmF5U2V0KHIyLmhlYWQuZXh0cmEsIG4yLCBzMiwgZCwgaykpLCA1MTIgJiByMi5mbGFncyAmJiAocjIuY2hlY2sgPSBCKHIyLmNoZWNrLCBuMiwgZCwgczIpKSwgbzIgLT0gZCwgczIgKz0gZCwgcjIubGVuZ3RoIC09IGQpLCByMi5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICByMi5sZW5ndGggPSAwLCByMi5tb2RlID0gNztcbiAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGlmICgyMDQ4ICYgcjIuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBvMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgIGZvciAoZCA9IDA7IGsgPSBuMltzMiArIGQrK10sIHIyLmhlYWQgJiYgayAmJiByMi5sZW5ndGggPCA2NTUzNiAmJiAocjIuaGVhZC5uYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoaykpLCBrICYmIGQgPCBvMjsgKVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICBpZiAoNTEyICYgcjIuZmxhZ3MgJiYgKHIyLmNoZWNrID0gQihyMi5jaGVjaywgbjIsIGQsIHMyKSksIG8yIC09IGQsIHMyICs9IGQsIGspXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICByMi5oZWFkICYmIChyMi5oZWFkLm5hbWUgPSBudWxsKTtcbiAgICAgICAgICAgICAgICByMi5sZW5ndGggPSAwLCByMi5tb2RlID0gODtcbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGlmICg0MDk2ICYgcjIuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBvMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgIGZvciAoZCA9IDA7IGsgPSBuMltzMiArIGQrK10sIHIyLmhlYWQgJiYgayAmJiByMi5sZW5ndGggPCA2NTUzNiAmJiAocjIuaGVhZC5jb21tZW50ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoaykpLCBrICYmIGQgPCBvMjsgKVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICBpZiAoNTEyICYgcjIuZmxhZ3MgJiYgKHIyLmNoZWNrID0gQihyMi5jaGVjaywgbjIsIGQsIHMyKSksIG8yIC09IGQsIHMyICs9IGQsIGspXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICByMi5oZWFkICYmIChyMi5oZWFkLmNvbW1lbnQgPSBudWxsKTtcbiAgICAgICAgICAgICAgICByMi5tb2RlID0gOTtcbiAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGlmICg1MTIgJiByMi5mbGFncykge1xuICAgICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMTY7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodTIgIT09ICg2NTUzNSAmIHIyLmNoZWNrKSkge1xuICAgICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImhlYWRlciBjcmMgbWlzbWF0Y2hcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGwyID0gdTIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByMi5oZWFkICYmIChyMi5oZWFkLmhjcmMgPSByMi5mbGFncyA+PiA5ICYgMSwgcjIuaGVhZC5kb25lID0gdHJ1ZSksIGUyLmFkbGVyID0gcjIuY2hlY2sgPSAwLCByMi5tb2RlID0gMTI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMzI7ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGUyLmFkbGVyID0gcjIuY2hlY2sgPSBMKHUyKSwgbDIgPSB1MiA9IDAsIHIyLm1vZGUgPSAxMTtcbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcjIuaGF2ZWRpY3QpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZTIubmV4dF9vdXQgPSBhMiwgZTIuYXZhaWxfb3V0ID0gaDIsIGUyLm5leHRfaW4gPSBzMiwgZTIuYXZhaWxfaW4gPSBvMiwgcjIuaG9sZCA9IHUyLCByMi5iaXRzID0gbDIsIDI7XG4gICAgICAgICAgICAgICAgZTIuYWRsZXIgPSByMi5jaGVjayA9IDEsIHIyLm1vZGUgPSAxMjtcbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICBpZiAoNSA9PT0gdDIgfHwgNiA9PT0gdDIpXG4gICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGlmIChyMi5sYXN0KSB7XG4gICAgICAgICAgICAgICAgICB1MiA+Pj49IDcgJiBsMiwgbDIgLT0gNyAmIGwyLCByMi5tb2RlID0gMjc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICg7IGwyIDwgMzsgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMisrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChyMi5sYXN0ID0gMSAmIHUyLCBsMiAtPSAxLCAzICYgKHUyID4+Pj0gMSkpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcjIubW9kZSA9IDE0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGoocjIpLCByMi5tb2RlID0gMjAsIDYgIT09IHQyKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB1MiA+Pj49IDIsIGwyIC09IDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHIyLm1vZGUgPSAxNztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW52YWxpZCBibG9jayB0eXBlXCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdTIgPj4+PSAyLCBsMiAtPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgIGZvciAodTIgPj4+PSA3ICYgbDIsIGwyIC09IDcgJiBsMjsgbDIgPCAzMjsgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMisrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCg2NTUzNSAmIHUyKSAhPSAodTIgPj4+IDE2IF4gNjU1MzUpKSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHNcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyMi5sZW5ndGggPSA2NTUzNSAmIHUyLCBsMiA9IHUyID0gMCwgcjIubW9kZSA9IDE1LCA2ID09PSB0MilcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgcjIubW9kZSA9IDE2O1xuICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgIGlmIChkID0gcjIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobzIgPCBkICYmIChkID0gbzIpLCBoMiA8IGQgJiYgKGQgPSBoMiksIDAgPT09IGQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICBJLmFycmF5U2V0KGkyLCBuMiwgczIsIGQsIGEyKSwgbzIgLT0gZCwgczIgKz0gZCwgaDIgLT0gZCwgYTIgKz0gZCwgcjIubGVuZ3RoIC09IGQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcjIubW9kZSA9IDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgICAgIGZvciAoOyBsMiA8IDE0OyApIHtcbiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBvMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MyKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocjIubmxlbiA9IDI1NyArICgzMSAmIHUyKSwgdTIgPj4+PSA1LCBsMiAtPSA1LCByMi5uZGlzdCA9IDEgKyAoMzEgJiB1MiksIHUyID4+Pj0gNSwgbDIgLT0gNSwgcjIubmNvZGUgPSA0ICsgKDE1ICYgdTIpLCB1MiA+Pj49IDQsIGwyIC09IDQsIDI4NiA8IHIyLm5sZW4gfHwgMzAgPCByMi5uZGlzdCkge1xuICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJ0b28gbWFueSBsZW5ndGggb3IgZGlzdGFuY2Ugc3ltYm9sc1wiLCByMi5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcjIuaGF2ZSA9IDAsIHIyLm1vZGUgPSAxODtcbiAgICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgICBmb3IgKDsgcjIuaGF2ZSA8IHIyLm5jb2RlOyApIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBsMiA8IDM7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByMi5sZW5zW0FbcjIuaGF2ZSsrXV0gPSA3ICYgdTIsIHUyID4+Pj0gMywgbDIgLT0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICg7IHIyLmhhdmUgPCAxOTsgKVxuICAgICAgICAgICAgICAgICAgcjIubGVuc1tBW3IyLmhhdmUrK11dID0gMDtcbiAgICAgICAgICAgICAgICBpZiAocjIubGVuY29kZSA9IHIyLmxlbmR5biwgcjIubGVuYml0cyA9IDcsIFMgPSB7IGJpdHM6IHIyLmxlbmJpdHMgfSwgeCA9IFQoMCwgcjIubGVucywgMCwgMTksIHIyLmxlbmNvZGUsIDAsIHIyLndvcmssIFMpLCByMi5sZW5iaXRzID0gUy5iaXRzLCB4KSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgY29kZSBsZW5ndGhzIHNldFwiLCByMi5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcjIuaGF2ZSA9IDAsIHIyLm1vZGUgPSAxOTtcbiAgICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICBmb3IgKDsgcjIuaGF2ZSA8IHIyLm5sZW4gKyByMi5uZGlzdDsgKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgZyA9IChDID0gcjIubGVuY29kZVt1MiAmICgxIDw8IHIyLmxlbmJpdHMpIC0gMV0pID4+PiAxNiAmIDI1NSwgYiA9IDY1NTM1ICYgQywgISgoXyA9IEMgPj4+IDI0KSA8PSBsMik7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoYiA8IDE2KVxuICAgICAgICAgICAgICAgICAgICB1MiA+Pj49IF8sIGwyIC09IF8sIHIyLmxlbnNbcjIuaGF2ZSsrXSA9IGI7XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDE2ID09PSBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh6ID0gXyArIDI7IGwyIDwgejsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMisrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHUyID4+Pj0gXywgbDIgLT0gXywgMCA9PT0gcjIuaGF2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsIHIyLm1vZGUgPSAzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBrID0gcjIubGVuc1tyMi5oYXZlIC0gMV0sIGQgPSAzICsgKDMgJiB1MiksIHUyID4+Pj0gMiwgbDIgLT0gMjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgxNyA9PT0gYikge1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAoeiA9IF8gKyAzOyBsMiA8IHo7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGwyIC09IF8sIGsgPSAwLCBkID0gMyArICg3ICYgKHUyID4+Pj0gXykpLCB1MiA+Pj49IDMsIGwyIC09IDM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh6ID0gXyArIDc7IGwyIDwgejsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMisrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgbDIgLT0gXywgayA9IDAsIGQgPSAxMSArICgxMjcgJiAodTIgPj4+PSBfKSksIHUyID4+Pj0gNywgbDIgLT0gNztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocjIuaGF2ZSArIGQgPiByMi5ubGVuICsgcjIubmRpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBkLS07IClcbiAgICAgICAgICAgICAgICAgICAgICByMi5sZW5zW3IyLmhhdmUrK10gPSBrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoMzAgPT09IHIyLm1vZGUpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcjIubGVuc1syNTZdKSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9ja1wiLCByMi5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHIyLmxlbmJpdHMgPSA5LCBTID0geyBiaXRzOiByMi5sZW5iaXRzIH0sIHggPSBUKEQsIHIyLmxlbnMsIDAsIHIyLm5sZW4sIHIyLmxlbmNvZGUsIDAsIHIyLndvcmssIFMpLCByMi5sZW5iaXRzID0gUy5iaXRzLCB4KSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgbGl0ZXJhbC9sZW5ndGhzIHNldFwiLCByMi5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHIyLmRpc3RiaXRzID0gNiwgcjIuZGlzdGNvZGUgPSByMi5kaXN0ZHluLCBTID0geyBiaXRzOiByMi5kaXN0Yml0cyB9LCB4ID0gVChGLCByMi5sZW5zLCByMi5ubGVuLCByMi5uZGlzdCwgcjIuZGlzdGNvZGUsIDAsIHIyLndvcmssIFMpLCByMi5kaXN0Yml0cyA9IFMuYml0cywgeCkge1xuICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGRpc3RhbmNlcyBzZXRcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyMi5tb2RlID0gMjAsIDYgPT09IHQyKVxuICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICByMi5tb2RlID0gMjE7XG4gICAgICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICAgICAgaWYgKDYgPD0gbzIgJiYgMjU4IDw9IGgyKSB7XG4gICAgICAgICAgICAgICAgICBlMi5uZXh0X291dCA9IGEyLCBlMi5hdmFpbF9vdXQgPSBoMiwgZTIubmV4dF9pbiA9IHMyLCBlMi5hdmFpbF9pbiA9IG8yLCByMi5ob2xkID0gdTIsIHIyLmJpdHMgPSBsMiwgUjIoZTIsIGMyKSwgYTIgPSBlMi5uZXh0X291dCwgaTIgPSBlMi5vdXRwdXQsIGgyID0gZTIuYXZhaWxfb3V0LCBzMiA9IGUyLm5leHRfaW4sIG4yID0gZTIuaW5wdXQsIG8yID0gZTIuYXZhaWxfaW4sIHUyID0gcjIuaG9sZCwgbDIgPSByMi5iaXRzLCAxMiA9PT0gcjIubW9kZSAmJiAocjIuYmFjayA9IC0xKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHIyLmJhY2sgPSAwOyBnID0gKEMgPSByMi5sZW5jb2RlW3UyICYgKDEgPDwgcjIubGVuYml0cykgLSAxXSkgPj4+IDE2ICYgMjU1LCBiID0gNjU1MzUgJiBDLCAhKChfID0gQyA+Pj4gMjQpIDw9IGwyKTsgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICBvMi0tLCB1MiArPSBuMltzMisrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGcgJiYgMCA9PSAoMjQwICYgZykpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodiA9IF8sIHkgPSBnLCB3ID0gYjsgZyA9IChDID0gcjIubGVuY29kZVt3ICsgKCh1MiAmICgxIDw8IHYgKyB5KSAtIDEpID4+IHYpXSkgPj4+IDE2ICYgMjU1LCBiID0gNjU1MzUgJiBDLCAhKHYgKyAoXyA9IEMgPj4+IDI0KSA8PSBsMik7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB1MiA+Pj49IHYsIGwyIC09IHYsIHIyLmJhY2sgKz0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHUyID4+Pj0gXywgbDIgLT0gXywgcjIuYmFjayArPSBfLCByMi5sZW5ndGggPSBiLCAwID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICByMi5tb2RlID0gMjY7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKDMyICYgZykge1xuICAgICAgICAgICAgICAgICAgcjIuYmFjayA9IC0xLCByMi5tb2RlID0gMTI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKDY0ICYgZykge1xuICAgICAgICAgICAgICAgICAgZTIubXNnID0gXCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLmV4dHJhID0gMTUgJiBnLCByMi5tb2RlID0gMjI7XG4gICAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgICAgaWYgKHIyLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHogPSByMi5leHRyYTsgbDIgPCB6OyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MyKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcjIubGVuZ3RoICs9IHUyICYgKDEgPDwgcjIuZXh0cmEpIC0gMSwgdTIgPj4+PSByMi5leHRyYSwgbDIgLT0gcjIuZXh0cmEsIHIyLmJhY2sgKz0gcjIuZXh0cmE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLndhcyA9IHIyLmxlbmd0aCwgcjIubW9kZSA9IDIzO1xuICAgICAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgICAgICAgIGZvciAoOyBnID0gKEMgPSByMi5kaXN0Y29kZVt1MiAmICgxIDw8IHIyLmRpc3RiaXRzKSAtIDFdKSA+Pj4gMTYgJiAyNTUsIGIgPSA2NTUzNSAmIEMsICEoKF8gPSBDID4+PiAyNCkgPD0gbDIpOyApIHtcbiAgICAgICAgICAgICAgICAgIGlmICgwID09PSBvMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MyKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoMCA9PSAoMjQwICYgZykpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAodiA9IF8sIHkgPSBnLCB3ID0gYjsgZyA9IChDID0gcjIuZGlzdGNvZGVbdyArICgodTIgJiAoMSA8PCB2ICsgeSkgLSAxKSA+PiB2KV0pID4+PiAxNiAmIDI1NSwgYiA9IDY1NTM1ICYgQywgISh2ICsgKF8gPSBDID4+PiAyNCkgPD0gbDIpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MyKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdTIgPj4+PSB2LCBsMiAtPSB2LCByMi5iYWNrICs9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1MiA+Pj49IF8sIGwyIC09IF8sIHIyLmJhY2sgKz0gXywgNjQgJiBnKSB7XG4gICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImludmFsaWQgZGlzdGFuY2UgY29kZVwiLCByMi5tb2RlID0gMzA7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcjIub2Zmc2V0ID0gYiwgcjIuZXh0cmEgPSAxNSAmIGcsIHIyLm1vZGUgPSAyNDtcbiAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICBpZiAocjIuZXh0cmEpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoeiA9IHIyLmV4dHJhOyBsMiA8IHo7ICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gbzIpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICAgICAgbzItLSwgdTIgKz0gbjJbczIrK10gPDwgbDIsIGwyICs9IDg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByMi5vZmZzZXQgKz0gdTIgJiAoMSA8PCByMi5leHRyYSkgLSAxLCB1MiA+Pj49IHIyLmV4dHJhLCBsMiAtPSByMi5leHRyYSwgcjIuYmFjayArPSByMi5leHRyYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHIyLm9mZnNldCA+IHIyLmRtYXgpIHtcbiAgICAgICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHIyLm1vZGUgPSAyNTtcbiAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gaDIpXG4gICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgIGlmIChkID0gYzIgLSBoMiwgcjIub2Zmc2V0ID4gZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKChkID0gcjIub2Zmc2V0IC0gZCkgPiByMi53aGF2ZSAmJiByMi5zYW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHAgPSBkID4gcjIud25leHQgPyAoZCAtPSByMi53bmV4dCwgcjIud3NpemUgLSBkKSA6IHIyLnduZXh0IC0gZCwgZCA+IHIyLmxlbmd0aCAmJiAoZCA9IHIyLmxlbmd0aCksIG0gPSByMi53aW5kb3c7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICBtID0gaTIsIHAgPSBhMiAtIHIyLm9mZnNldCwgZCA9IHIyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGgyIDwgZCAmJiAoZCA9IGgyKSwgaDIgLT0gZCwgcjIubGVuZ3RoIC09IGQ7IGkyW2EyKytdID0gbVtwKytdLCAtLWQ7IClcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAwID09PSByMi5sZW5ndGggJiYgKHIyLm1vZGUgPSAyMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IGgyKVxuICAgICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgICBpMlthMisrXSA9IHIyLmxlbmd0aCwgaDItLSwgcjIubW9kZSA9IDIxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgIGlmIChyMi53cmFwKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbDIgPCAzMjsgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBvMilcbiAgICAgICAgICAgICAgICAgICAgICBicmVhayBlO1xuICAgICAgICAgICAgICAgICAgICBvMi0tLCB1MiB8PSBuMltzMisrXSA8PCBsMiwgbDIgKz0gODtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChjMiAtPSBoMiwgZTIudG90YWxfb3V0ICs9IGMyLCByMi50b3RhbCArPSBjMiwgYzIgJiYgKGUyLmFkbGVyID0gcjIuY2hlY2sgPSByMi5mbGFncyA/IEIocjIuY2hlY2ssIGkyLCBjMiwgYTIgLSBjMikgOiBPKHIyLmNoZWNrLCBpMiwgYzIsIGEyIC0gYzIpKSwgYzIgPSBoMiwgKHIyLmZsYWdzID8gdTIgOiBMKHUyKSkgIT09IHIyLmNoZWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGUyLm1zZyA9IFwiaW5jb3JyZWN0IGRhdGEgY2hlY2tcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGwyID0gdTIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByMi5tb2RlID0gMjg7XG4gICAgICAgICAgICAgIGNhc2UgMjg6XG4gICAgICAgICAgICAgICAgaWYgKHIyLndyYXAgJiYgcjIuZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBsMiA8IDMyOyApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IG8yKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGU7XG4gICAgICAgICAgICAgICAgICAgIG8yLS0sIHUyICs9IG4yW3MyKytdIDw8IGwyLCBsMiArPSA4O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHUyICE9PSAoNDI5NDk2NzI5NSAmIHIyLnRvdGFsKSkge1xuICAgICAgICAgICAgICAgICAgICBlMi5tc2cgPSBcImluY29ycmVjdCBsZW5ndGggY2hlY2tcIiwgcjIubW9kZSA9IDMwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGwyID0gdTIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByMi5tb2RlID0gMjk7XG4gICAgICAgICAgICAgIGNhc2UgMjk6XG4gICAgICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICAgICAgICB4ID0gLTM7XG4gICAgICAgICAgICAgICAgYnJlYWsgZTtcbiAgICAgICAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gLTQ7XG4gICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFU7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBlMi5uZXh0X291dCA9IGEyLCBlMi5hdmFpbF9vdXQgPSBoMiwgZTIubmV4dF9pbiA9IHMyLCBlMi5hdmFpbF9pbiA9IG8yLCByMi5ob2xkID0gdTIsIHIyLmJpdHMgPSBsMiwgKHIyLndzaXplIHx8IGMyICE9PSBlMi5hdmFpbF9vdXQgJiYgcjIubW9kZSA8IDMwICYmIChyMi5tb2RlIDwgMjcgfHwgNCAhPT0gdDIpKSAmJiBaKGUyLCBlMi5vdXRwdXQsIGUyLm5leHRfb3V0LCBjMiAtIGUyLmF2YWlsX291dCkgPyAocjIubW9kZSA9IDMxLCAtNCkgOiAoZjIgLT0gZTIuYXZhaWxfaW4sIGMyIC09IGUyLmF2YWlsX291dCwgZTIudG90YWxfaW4gKz0gZjIsIGUyLnRvdGFsX291dCArPSBjMiwgcjIudG90YWwgKz0gYzIsIHIyLndyYXAgJiYgYzIgJiYgKGUyLmFkbGVyID0gcjIuY2hlY2sgPSByMi5mbGFncyA/IEIocjIuY2hlY2ssIGkyLCBjMiwgZTIubmV4dF9vdXQgLSBjMikgOiBPKHIyLmNoZWNrLCBpMiwgYzIsIGUyLm5leHRfb3V0IC0gYzIpKSwgZTIuZGF0YV90eXBlID0gcjIuYml0cyArIChyMi5sYXN0ID8gNjQgOiAwKSArICgxMiA9PT0gcjIubW9kZSA/IDEyOCA6IDApICsgKDIwID09PSByMi5tb2RlIHx8IDE1ID09PSByMi5tb2RlID8gMjU2IDogMCksICgwID09IGYyICYmIDAgPT09IGMyIHx8IDQgPT09IHQyKSAmJiB4ID09PSBOICYmICh4ID0gLTUpLCB4KTtcbiAgICAgIH0sIHIuaW5mbGF0ZUVuZCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIGlmICghZTIgfHwgIWUyLnN0YXRlKVxuICAgICAgICAgIHJldHVybiBVO1xuICAgICAgICB2YXIgdDIgPSBlMi5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIHQyLndpbmRvdyAmJiAodDIud2luZG93ID0gbnVsbCksIGUyLnN0YXRlID0gbnVsbCwgTjtcbiAgICAgIH0sIHIuaW5mbGF0ZUdldEhlYWRlciA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjI7XG4gICAgICAgIHJldHVybiBlMiAmJiBlMi5zdGF0ZSA/IDAgPT0gKDIgJiAocjIgPSBlMi5zdGF0ZSkud3JhcCkgPyBVIDogKChyMi5oZWFkID0gdDIpLmRvbmUgPSBmYWxzZSwgTikgOiBVO1xuICAgICAgfSwgci5pbmZsYXRlU2V0RGljdGlvbmFyeSA9IGZ1bmN0aW9uKGUyLCB0Mikge1xuICAgICAgICB2YXIgcjIsIG4yID0gdDIubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZTIgJiYgZTIuc3RhdGUgPyAwICE9PSAocjIgPSBlMi5zdGF0ZSkud3JhcCAmJiAxMSAhPT0gcjIubW9kZSA/IFUgOiAxMSA9PT0gcjIubW9kZSAmJiBPKDEsIHQyLCBuMiwgMCkgIT09IHIyLmNoZWNrID8gLTMgOiBaKGUyLCB0MiwgbjIsIG4yKSA/IChyMi5tb2RlID0gMzEsIC00KSA6IChyMi5oYXZlZGljdCA9IDEsIE4pIDogVTtcbiAgICAgIH0sIHIuaW5mbGF0ZUluZm8gPSBcInBha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdClcIjtcbiAgICB9LCB7IFwiLi4vdXRpbHMvY29tbW9uXCI6IDQxLCBcIi4vYWRsZXIzMlwiOiA0MywgXCIuL2NyYzMyXCI6IDQ1LCBcIi4vaW5mZmFzdFwiOiA0OCwgXCIuL2luZnRyZWVzXCI6IDUwIH1dLCA1MDogW2Z1bmN0aW9uKGUsIHQsIHIpIHtcbiAgICAgIHZhciBEID0gZShcIi4uL3V0aWxzL2NvbW1vblwiKSwgRiA9IFszLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLCAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMF0sIE4gPSBbMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsIDE5LCAxOSwgMTksIDE5LCAyMCwgMjAsIDIwLCAyMCwgMjEsIDIxLCAyMSwgMjEsIDE2LCA3MiwgNzhdLCBVID0gWzEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MywgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LCA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3LCAwLCAwXSwgUCA9IFsxNiwgMTYsIDE2LCAxNiwgMTcsIDE3LCAxOCwgMTgsIDE5LCAxOSwgMjAsIDIwLCAyMSwgMjEsIDIyLCAyMiwgMjMsIDIzLCAyNCwgMjQsIDI1LCAyNSwgMjYsIDI2LCAyNywgMjcsIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRdO1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oZTIsIHQyLCByMiwgbiwgaSwgcywgYSwgbykge1xuICAgICAgICB2YXIgaCwgdSwgbCwgZiwgYywgZCwgcCwgbSwgXywgZyA9IG8uYml0cywgYiA9IDAsIHYgPSAwLCB5ID0gMCwgdyA9IDAsIGsgPSAwLCB4ID0gMCwgUyA9IDAsIHogPSAwLCBDID0gMCwgRSA9IDAsIEEgPSBudWxsLCBJID0gMCwgTyA9IG5ldyBELkJ1ZjE2KDE2KSwgQiA9IG5ldyBELkJ1ZjE2KDE2KSwgUjIgPSBudWxsLCBUID0gMDtcbiAgICAgICAgZm9yIChiID0gMDsgYiA8PSAxNTsgYisrKVxuICAgICAgICAgIE9bYl0gPSAwO1xuICAgICAgICBmb3IgKHYgPSAwOyB2IDwgbjsgdisrKVxuICAgICAgICAgIE9bdDJbcjIgKyB2XV0rKztcbiAgICAgICAgZm9yIChrID0gZywgdyA9IDE1OyAxIDw9IHcgJiYgMCA9PT0gT1t3XTsgdy0tKVxuICAgICAgICAgIDtcbiAgICAgICAgaWYgKHcgPCBrICYmIChrID0gdyksIDAgPT09IHcpXG4gICAgICAgICAgcmV0dXJuIGlbcysrXSA9IDIwOTcxNTIwLCBpW3MrK10gPSAyMDk3MTUyMCwgby5iaXRzID0gMSwgMDtcbiAgICAgICAgZm9yICh5ID0gMTsgeSA8IHcgJiYgMCA9PT0gT1t5XTsgeSsrKVxuICAgICAgICAgIDtcbiAgICAgICAgZm9yIChrIDwgeSAmJiAoayA9IHkpLCBiID0geiA9IDE7IGIgPD0gMTU7IGIrKylcbiAgICAgICAgICBpZiAoeiA8PD0gMSwgKHogLT0gT1tiXSkgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoMCA8IHogJiYgKDAgPT09IGUyIHx8IDEgIT09IHcpKVxuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgZm9yIChCWzFdID0gMCwgYiA9IDE7IGIgPCAxNTsgYisrKVxuICAgICAgICAgIEJbYiArIDFdID0gQltiXSArIE9bYl07XG4gICAgICAgIGZvciAodiA9IDA7IHYgPCBuOyB2KyspXG4gICAgICAgICAgMCAhPT0gdDJbcjIgKyB2XSAmJiAoYVtCW3QyW3IyICsgdl1dKytdID0gdik7XG4gICAgICAgIGlmIChkID0gMCA9PT0gZTIgPyAoQSA9IFIyID0gYSwgMTkpIDogMSA9PT0gZTIgPyAoQSA9IEYsIEkgLT0gMjU3LCBSMiA9IE4sIFQgLT0gMjU3LCAyNTYpIDogKEEgPSBVLCBSMiA9IFAsIC0xKSwgYiA9IHksIGMgPSBzLCBTID0gdiA9IEUgPSAwLCBsID0gLTEsIGYgPSAoQyA9IDEgPDwgKHggPSBrKSkgLSAxLCAxID09PSBlMiAmJiA4NTIgPCBDIHx8IDIgPT09IGUyICYmIDU5MiA8IEMpXG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIGZvciAoOyA7ICkge1xuICAgICAgICAgIGZvciAocCA9IGIgLSBTLCBfID0gYVt2XSA8IGQgPyAobSA9IDAsIGFbdl0pIDogYVt2XSA+IGQgPyAobSA9IFIyW1QgKyBhW3ZdXSwgQVtJICsgYVt2XV0pIDogKG0gPSA5NiwgMCksIGggPSAxIDw8IGIgLSBTLCB5ID0gdSA9IDEgPDwgeDsgaVtjICsgKEUgPj4gUykgKyAodSAtPSBoKV0gPSBwIDw8IDI0IHwgbSA8PCAxNiB8IF8gfCAwLCAwICE9PSB1OyApXG4gICAgICAgICAgICA7XG4gICAgICAgICAgZm9yIChoID0gMSA8PCBiIC0gMTsgRSAmIGg7IClcbiAgICAgICAgICAgIGggPj49IDE7XG4gICAgICAgICAgaWYgKDAgIT09IGggPyAoRSAmPSBoIC0gMSwgRSArPSBoKSA6IEUgPSAwLCB2KyssIDAgPT0gLS1PW2JdKSB7XG4gICAgICAgICAgICBpZiAoYiA9PT0gdylcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBiID0gdDJbcjIgKyBhW3ZdXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGsgPCBiICYmIChFICYgZikgIT09IGwpIHtcbiAgICAgICAgICAgIGZvciAoMCA9PT0gUyAmJiAoUyA9IGspLCBjICs9IHksIHogPSAxIDw8ICh4ID0gYiAtIFMpOyB4ICsgUyA8IHcgJiYgISgoeiAtPSBPW3ggKyBTXSkgPD0gMCk7IClcbiAgICAgICAgICAgICAgeCsrLCB6IDw8PSAxO1xuICAgICAgICAgICAgaWYgKEMgKz0gMSA8PCB4LCAxID09PSBlMiAmJiA4NTIgPCBDIHx8IDIgPT09IGUyICYmIDU5MiA8IEMpXG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgaVtsID0gRSAmIGZdID0gayA8PCAyNCB8IHggPDwgMTYgfCBjIC0gcyB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwICE9PSBFICYmIChpW2MgKyBFXSA9IGIgLSBTIDw8IDI0IHwgNjQgPDwgMTYgfCAwKSwgby5iaXRzID0gaywgMDtcbiAgICAgIH07XG4gICAgfSwgeyBcIi4uL3V0aWxzL2NvbW1vblwiOiA0MSB9XSwgNTE6IFtmdW5jdGlvbihlLCB0LCByKSB7XG4gICAgICB0LmV4cG9ydHMgPSB7IDI6IFwibmVlZCBkaWN0aW9uYXJ5XCIsIDE6IFwic3RyZWFtIGVuZFwiLCAwOiBcIlwiLCBcIi0xXCI6IFwiZmlsZSBlcnJvclwiLCBcIi0yXCI6IFwic3RyZWFtIGVycm9yXCIsIFwiLTNcIjogXCJkYXRhIGVycm9yXCIsIFwiLTRcIjogXCJpbnN1ZmZpY2llbnQgbWVtb3J5XCIsIFwiLTVcIjogXCJidWZmZXIgZXJyb3JcIiwgXCItNlwiOiBcImluY29tcGF0aWJsZSB2ZXJzaW9uXCIgfTtcbiAgICB9LCB7fV0sIDUyOiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdmFyIGkgPSBlKFwiLi4vdXRpbHMvY29tbW9uXCIpLCBvID0gMCwgaCA9IDE7XG4gICAgICBmdW5jdGlvbiBuKGUyKSB7XG4gICAgICAgIGZvciAodmFyIHQyID0gZTIubGVuZ3RoOyAwIDw9IC0tdDI7IClcbiAgICAgICAgICBlMlt0Ml0gPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHMgPSAwLCBhID0gMjksIHUgPSAyNTYsIGwgPSB1ICsgMSArIGEsIGYgPSAzMCwgYyA9IDE5LCBfID0gMiAqIGwgKyAxLCBnID0gMTUsIGQgPSAxNiwgcCA9IDcsIG0gPSAyNTYsIGIgPSAxNiwgdiA9IDE3LCB5ID0gMTgsIHcgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgMF0sIGsgPSBbMCwgMCwgMCwgMCwgMSwgMSwgMiwgMiwgMywgMywgNCwgNCwgNSwgNSwgNiwgNiwgNywgNywgOCwgOCwgOSwgOSwgMTAsIDEwLCAxMSwgMTEsIDEyLCAxMiwgMTMsIDEzXSwgeCA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAyLCAzLCA3XSwgUyA9IFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XSwgeiA9IG5ldyBBcnJheSgyICogKGwgKyAyKSk7XG4gICAgICBuKHopO1xuICAgICAgdmFyIEMgPSBuZXcgQXJyYXkoMiAqIGYpO1xuICAgICAgbihDKTtcbiAgICAgIHZhciBFID0gbmV3IEFycmF5KDUxMik7XG4gICAgICBuKEUpO1xuICAgICAgdmFyIEEgPSBuZXcgQXJyYXkoMjU2KTtcbiAgICAgIG4oQSk7XG4gICAgICB2YXIgSSA9IG5ldyBBcnJheShhKTtcbiAgICAgIG4oSSk7XG4gICAgICB2YXIgTywgQiwgUjIsIFQgPSBuZXcgQXJyYXkoZik7XG4gICAgICBmdW5jdGlvbiBEKGUyLCB0MiwgcjIsIG4yLCBpMikge1xuICAgICAgICB0aGlzLnN0YXRpY190cmVlID0gZTIsIHRoaXMuZXh0cmFfYml0cyA9IHQyLCB0aGlzLmV4dHJhX2Jhc2UgPSByMiwgdGhpcy5lbGVtcyA9IG4yLCB0aGlzLm1heF9sZW5ndGggPSBpMiwgdGhpcy5oYXNfc3RyZWUgPSBlMiAmJiBlMi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBGKGUyLCB0Mikge1xuICAgICAgICB0aGlzLmR5bl90cmVlID0gZTIsIHRoaXMubWF4X2NvZGUgPSAwLCB0aGlzLnN0YXRfZGVzYyA9IHQyO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gTihlMikge1xuICAgICAgICByZXR1cm4gZTIgPCAyNTYgPyBFW2UyXSA6IEVbMjU2ICsgKGUyID4+PiA3KV07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBVKGUyLCB0Mikge1xuICAgICAgICBlMi5wZW5kaW5nX2J1ZltlMi5wZW5kaW5nKytdID0gMjU1ICYgdDIsIGUyLnBlbmRpbmdfYnVmW2UyLnBlbmRpbmcrK10gPSB0MiA+Pj4gOCAmIDI1NTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFAoZTIsIHQyLCByMikge1xuICAgICAgICBlMi5iaV92YWxpZCA+IGQgLSByMiA/IChlMi5iaV9idWYgfD0gdDIgPDwgZTIuYmlfdmFsaWQgJiA2NTUzNSwgVShlMiwgZTIuYmlfYnVmKSwgZTIuYmlfYnVmID0gdDIgPj4gZCAtIGUyLmJpX3ZhbGlkLCBlMi5iaV92YWxpZCArPSByMiAtIGQpIDogKGUyLmJpX2J1ZiB8PSB0MiA8PCBlMi5iaV92YWxpZCAmIDY1NTM1LCBlMi5iaV92YWxpZCArPSByMik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBMKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgUChlMiwgcjJbMiAqIHQyXSwgcjJbMiAqIHQyICsgMV0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaihlMiwgdDIpIHtcbiAgICAgICAgZm9yICh2YXIgcjIgPSAwOyByMiB8PSAxICYgZTIsIGUyID4+Pj0gMSwgcjIgPDw9IDEsIDAgPCAtLXQyOyApXG4gICAgICAgICAgO1xuICAgICAgICByZXR1cm4gcjIgPj4+IDE7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBaKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgdmFyIG4yLCBpMiwgczIgPSBuZXcgQXJyYXkoZyArIDEpLCBhMiA9IDA7XG4gICAgICAgIGZvciAobjIgPSAxOyBuMiA8PSBnOyBuMisrKVxuICAgICAgICAgIHMyW24yXSA9IGEyID0gYTIgKyByMltuMiAtIDFdIDw8IDE7XG4gICAgICAgIGZvciAoaTIgPSAwOyBpMiA8PSB0MjsgaTIrKykge1xuICAgICAgICAgIHZhciBvMiA9IGUyWzIgKiBpMiArIDFdO1xuICAgICAgICAgIDAgIT09IG8yICYmIChlMlsyICogaTJdID0gaihzMltvMl0rKywgbzIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVyhlMikge1xuICAgICAgICB2YXIgdDI7XG4gICAgICAgIGZvciAodDIgPSAwOyB0MiA8IGw7IHQyKyspXG4gICAgICAgICAgZTIuZHluX2x0cmVlWzIgKiB0Ml0gPSAwO1xuICAgICAgICBmb3IgKHQyID0gMDsgdDIgPCBmOyB0MisrKVxuICAgICAgICAgIGUyLmR5bl9kdHJlZVsyICogdDJdID0gMDtcbiAgICAgICAgZm9yICh0MiA9IDA7IHQyIDwgYzsgdDIrKylcbiAgICAgICAgICBlMi5ibF90cmVlWzIgKiB0Ml0gPSAwO1xuICAgICAgICBlMi5keW5fbHRyZWVbMiAqIG1dID0gMSwgZTIub3B0X2xlbiA9IGUyLnN0YXRpY19sZW4gPSAwLCBlMi5sYXN0X2xpdCA9IGUyLm1hdGNoZXMgPSAwO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gTShlMikge1xuICAgICAgICA4IDwgZTIuYmlfdmFsaWQgPyBVKGUyLCBlMi5iaV9idWYpIDogMCA8IGUyLmJpX3ZhbGlkICYmIChlMi5wZW5kaW5nX2J1ZltlMi5wZW5kaW5nKytdID0gZTIuYmlfYnVmKSwgZTIuYmlfYnVmID0gMCwgZTIuYmlfdmFsaWQgPSAwO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gSChlMiwgdDIsIHIyLCBuMikge1xuICAgICAgICB2YXIgaTIgPSAyICogdDIsIHMyID0gMiAqIHIyO1xuICAgICAgICByZXR1cm4gZTJbaTJdIDwgZTJbczJdIHx8IGUyW2kyXSA9PT0gZTJbczJdICYmIG4yW3QyXSA8PSBuMltyMl07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBHKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgZm9yICh2YXIgbjIgPSBlMi5oZWFwW3IyXSwgaTIgPSByMiA8PCAxOyBpMiA8PSBlMi5oZWFwX2xlbiAmJiAoaTIgPCBlMi5oZWFwX2xlbiAmJiBIKHQyLCBlMi5oZWFwW2kyICsgMV0sIGUyLmhlYXBbaTJdLCBlMi5kZXB0aCkgJiYgaTIrKywgIUgodDIsIG4yLCBlMi5oZWFwW2kyXSwgZTIuZGVwdGgpKTsgKVxuICAgICAgICAgIGUyLmhlYXBbcjJdID0gZTIuaGVhcFtpMl0sIHIyID0gaTIsIGkyIDw8PSAxO1xuICAgICAgICBlMi5oZWFwW3IyXSA9IG4yO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gSyhlMiwgdDIsIHIyKSB7XG4gICAgICAgIHZhciBuMiwgaTIsIHMyLCBhMiwgbzIgPSAwO1xuICAgICAgICBpZiAoMCAhPT0gZTIubGFzdF9saXQpXG4gICAgICAgICAgZm9yICg7IG4yID0gZTIucGVuZGluZ19idWZbZTIuZF9idWYgKyAyICogbzJdIDw8IDggfCBlMi5wZW5kaW5nX2J1ZltlMi5kX2J1ZiArIDIgKiBvMiArIDFdLCBpMiA9IGUyLnBlbmRpbmdfYnVmW2UyLmxfYnVmICsgbzJdLCBvMisrLCAwID09PSBuMiA/IEwoZTIsIGkyLCB0MikgOiAoTChlMiwgKHMyID0gQVtpMl0pICsgdSArIDEsIHQyKSwgMCAhPT0gKGEyID0gd1tzMl0pICYmIFAoZTIsIGkyIC09IElbczJdLCBhMiksIEwoZTIsIHMyID0gTigtLW4yKSwgcjIpLCAwICE9PSAoYTIgPSBrW3MyXSkgJiYgUChlMiwgbjIgLT0gVFtzMl0sIGEyKSksIG8yIDwgZTIubGFzdF9saXQ7IClcbiAgICAgICAgICAgIDtcbiAgICAgICAgTChlMiwgbSwgdDIpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gWShlMiwgdDIpIHtcbiAgICAgICAgdmFyIHIyLCBuMiwgaTIsIHMyID0gdDIuZHluX3RyZWUsIGEyID0gdDIuc3RhdF9kZXNjLnN0YXRpY190cmVlLCBvMiA9IHQyLnN0YXRfZGVzYy5oYXNfc3RyZWUsIGgyID0gdDIuc3RhdF9kZXNjLmVsZW1zLCB1MiA9IC0xO1xuICAgICAgICBmb3IgKGUyLmhlYXBfbGVuID0gMCwgZTIuaGVhcF9tYXggPSBfLCByMiA9IDA7IHIyIDwgaDI7IHIyKyspXG4gICAgICAgICAgMCAhPT0gczJbMiAqIHIyXSA/IChlMi5oZWFwWysrZTIuaGVhcF9sZW5dID0gdTIgPSByMiwgZTIuZGVwdGhbcjJdID0gMCkgOiBzMlsyICogcjIgKyAxXSA9IDA7XG4gICAgICAgIGZvciAoOyBlMi5oZWFwX2xlbiA8IDI7IClcbiAgICAgICAgICBzMlsyICogKGkyID0gZTIuaGVhcFsrK2UyLmhlYXBfbGVuXSA9IHUyIDwgMiA/ICsrdTIgOiAwKV0gPSAxLCBlMi5kZXB0aFtpMl0gPSAwLCBlMi5vcHRfbGVuLS0sIG8yICYmIChlMi5zdGF0aWNfbGVuIC09IGEyWzIgKiBpMiArIDFdKTtcbiAgICAgICAgZm9yICh0Mi5tYXhfY29kZSA9IHUyLCByMiA9IGUyLmhlYXBfbGVuID4+IDE7IDEgPD0gcjI7IHIyLS0pXG4gICAgICAgICAgRyhlMiwgczIsIHIyKTtcbiAgICAgICAgZm9yIChpMiA9IGgyOyByMiA9IGUyLmhlYXBbMV0sIGUyLmhlYXBbMV0gPSBlMi5oZWFwW2UyLmhlYXBfbGVuLS1dLCBHKGUyLCBzMiwgMSksIG4yID0gZTIuaGVhcFsxXSwgZTIuaGVhcFstLWUyLmhlYXBfbWF4XSA9IHIyLCBlMi5oZWFwWy0tZTIuaGVhcF9tYXhdID0gbjIsIHMyWzIgKiBpMl0gPSBzMlsyICogcjJdICsgczJbMiAqIG4yXSwgZTIuZGVwdGhbaTJdID0gKGUyLmRlcHRoW3IyXSA+PSBlMi5kZXB0aFtuMl0gPyBlMi5kZXB0aFtyMl0gOiBlMi5kZXB0aFtuMl0pICsgMSwgczJbMiAqIHIyICsgMV0gPSBzMlsyICogbjIgKyAxXSA9IGkyLCBlMi5oZWFwWzFdID0gaTIrKywgRyhlMiwgczIsIDEpLCAyIDw9IGUyLmhlYXBfbGVuOyApXG4gICAgICAgICAgO1xuICAgICAgICBlMi5oZWFwWy0tZTIuaGVhcF9tYXhdID0gZTIuaGVhcFsxXSwgZnVuY3Rpb24oZTMsIHQzKSB7XG4gICAgICAgICAgdmFyIHIzLCBuMywgaTMsIHMzLCBhMywgbzMsIGgzID0gdDMuZHluX3RyZWUsIHUzID0gdDMubWF4X2NvZGUsIGwyID0gdDMuc3RhdF9kZXNjLnN0YXRpY190cmVlLCBmMiA9IHQzLnN0YXRfZGVzYy5oYXNfc3RyZWUsIGMyID0gdDMuc3RhdF9kZXNjLmV4dHJhX2JpdHMsIGQyID0gdDMuc3RhdF9kZXNjLmV4dHJhX2Jhc2UsIHAyID0gdDMuc3RhdF9kZXNjLm1heF9sZW5ndGgsIG0yID0gMDtcbiAgICAgICAgICBmb3IgKHMzID0gMDsgczMgPD0gZzsgczMrKylcbiAgICAgICAgICAgIGUzLmJsX2NvdW50W3MzXSA9IDA7XG4gICAgICAgICAgZm9yIChoM1syICogZTMuaGVhcFtlMy5oZWFwX21heF0gKyAxXSA9IDAsIHIzID0gZTMuaGVhcF9tYXggKyAxOyByMyA8IF87IHIzKyspXG4gICAgICAgICAgICBwMiA8IChzMyA9IGgzWzIgKiBoM1syICogKG4zID0gZTMuaGVhcFtyM10pICsgMV0gKyAxXSArIDEpICYmIChzMyA9IHAyLCBtMisrKSwgaDNbMiAqIG4zICsgMV0gPSBzMywgdTMgPCBuMyB8fCAoZTMuYmxfY291bnRbczNdKyssIGEzID0gMCwgZDIgPD0gbjMgJiYgKGEzID0gYzJbbjMgLSBkMl0pLCBvMyA9IGgzWzIgKiBuM10sIGUzLm9wdF9sZW4gKz0gbzMgKiAoczMgKyBhMyksIGYyICYmIChlMy5zdGF0aWNfbGVuICs9IG8zICogKGwyWzIgKiBuMyArIDFdICsgYTMpKSk7XG4gICAgICAgICAgaWYgKDAgIT09IG0yKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIGZvciAoczMgPSBwMiAtIDE7IDAgPT09IGUzLmJsX2NvdW50W3MzXTsgKVxuICAgICAgICAgICAgICAgIHMzLS07XG4gICAgICAgICAgICAgIGUzLmJsX2NvdW50W3MzXS0tLCBlMy5ibF9jb3VudFtzMyArIDFdICs9IDIsIGUzLmJsX2NvdW50W3AyXS0tLCBtMiAtPSAyO1xuICAgICAgICAgICAgfSB3aGlsZSAoMCA8IG0yKTtcbiAgICAgICAgICAgIGZvciAoczMgPSBwMjsgMCAhPT0gczM7IHMzLS0pXG4gICAgICAgICAgICAgIGZvciAobjMgPSBlMy5ibF9jb3VudFtzM107IDAgIT09IG4zOyApXG4gICAgICAgICAgICAgICAgdTMgPCAoaTMgPSBlMy5oZWFwWy0tcjNdKSB8fCAoaDNbMiAqIGkzICsgMV0gIT09IHMzICYmIChlMy5vcHRfbGVuICs9IChzMyAtIGgzWzIgKiBpMyArIDFdKSAqIGgzWzIgKiBpM10sIGgzWzIgKiBpMyArIDFdID0gczMpLCBuMy0tKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0oZTIsIHQyKSwgWihzMiwgdTIsIGUyLmJsX2NvdW50KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFgoZTIsIHQyLCByMikge1xuICAgICAgICB2YXIgbjIsIGkyLCBzMiA9IC0xLCBhMiA9IHQyWzFdLCBvMiA9IDAsIGgyID0gNywgdTIgPSA0O1xuICAgICAgICBmb3IgKDAgPT09IGEyICYmIChoMiA9IDEzOCwgdTIgPSAzKSwgdDJbMiAqIChyMiArIDEpICsgMV0gPSA2NTUzNSwgbjIgPSAwOyBuMiA8PSByMjsgbjIrKylcbiAgICAgICAgICBpMiA9IGEyLCBhMiA9IHQyWzIgKiAobjIgKyAxKSArIDFdLCArK28yIDwgaDIgJiYgaTIgPT09IGEyIHx8IChvMiA8IHUyID8gZTIuYmxfdHJlZVsyICogaTJdICs9IG8yIDogMCAhPT0gaTIgPyAoaTIgIT09IHMyICYmIGUyLmJsX3RyZWVbMiAqIGkyXSsrLCBlMi5ibF90cmVlWzIgKiBiXSsrKSA6IG8yIDw9IDEwID8gZTIuYmxfdHJlZVsyICogdl0rKyA6IGUyLmJsX3RyZWVbMiAqIHldKyssIHMyID0gaTIsIHUyID0gKG8yID0gMCkgPT09IGEyID8gKGgyID0gMTM4LCAzKSA6IGkyID09PSBhMiA/IChoMiA9IDYsIDMpIDogKGgyID0gNywgNCkpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVihlMiwgdDIsIHIyKSB7XG4gICAgICAgIHZhciBuMiwgaTIsIHMyID0gLTEsIGEyID0gdDJbMV0sIG8yID0gMCwgaDIgPSA3LCB1MiA9IDQ7XG4gICAgICAgIGZvciAoMCA9PT0gYTIgJiYgKGgyID0gMTM4LCB1MiA9IDMpLCBuMiA9IDA7IG4yIDw9IHIyOyBuMisrKVxuICAgICAgICAgIGlmIChpMiA9IGEyLCBhMiA9IHQyWzIgKiAobjIgKyAxKSArIDFdLCAhKCsrbzIgPCBoMiAmJiBpMiA9PT0gYTIpKSB7XG4gICAgICAgICAgICBpZiAobzIgPCB1MilcbiAgICAgICAgICAgICAgZm9yICg7IEwoZTIsIGkyLCBlMi5ibF90cmVlKSwgMCAhPSAtLW8yOyApXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAwICE9PSBpMiA/IChpMiAhPT0gczIgJiYgKEwoZTIsIGkyLCBlMi5ibF90cmVlKSwgbzItLSksIEwoZTIsIGIsIGUyLmJsX3RyZWUpLCBQKGUyLCBvMiAtIDMsIDIpKSA6IG8yIDw9IDEwID8gKEwoZTIsIHYsIGUyLmJsX3RyZWUpLCBQKGUyLCBvMiAtIDMsIDMpKSA6IChMKGUyLCB5LCBlMi5ibF90cmVlKSwgUChlMiwgbzIgLSAxMSwgNykpO1xuICAgICAgICAgICAgczIgPSBpMiwgdTIgPSAobzIgPSAwKSA9PT0gYTIgPyAoaDIgPSAxMzgsIDMpIDogaTIgPT09IGEyID8gKGgyID0gNiwgMykgOiAoaDIgPSA3LCA0KTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBuKFQpO1xuICAgICAgdmFyIHEgPSBmYWxzZTtcbiAgICAgIGZ1bmN0aW9uIEooZTIsIHQyLCByMiwgbjIpIHtcbiAgICAgICAgUChlMiwgKHMgPDwgMSkgKyAobjIgPyAxIDogMCksIDMpLCBmdW5jdGlvbihlMywgdDMsIHIzLCBuMykge1xuICAgICAgICAgIE0oZTMpLCBuMyAmJiAoVShlMywgcjMpLCBVKGUzLCB+cjMpKSwgaS5hcnJheVNldChlMy5wZW5kaW5nX2J1ZiwgZTMud2luZG93LCB0MywgcjMsIGUzLnBlbmRpbmcpLCBlMy5wZW5kaW5nICs9IHIzO1xuICAgICAgICB9KGUyLCB0MiwgcjIsIHRydWUpO1xuICAgICAgfVxuICAgICAgci5fdHJfaW5pdCA9IGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgIHEgfHwgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBlMywgdDIsIHIyLCBuMiwgaTIsIHMyID0gbmV3IEFycmF5KGcgKyAxKTtcbiAgICAgICAgICBmb3IgKG4yID0gcjIgPSAwOyBuMiA8IGEgLSAxOyBuMisrKVxuICAgICAgICAgICAgZm9yIChJW24yXSA9IHIyLCBlMyA9IDA7IGUzIDwgMSA8PCB3W24yXTsgZTMrKylcbiAgICAgICAgICAgICAgQVtyMisrXSA9IG4yO1xuICAgICAgICAgIGZvciAoQVtyMiAtIDFdID0gbjIsIG4yID0gaTIgPSAwOyBuMiA8IDE2OyBuMisrKVxuICAgICAgICAgICAgZm9yIChUW24yXSA9IGkyLCBlMyA9IDA7IGUzIDwgMSA8PCBrW24yXTsgZTMrKylcbiAgICAgICAgICAgICAgRVtpMisrXSA9IG4yO1xuICAgICAgICAgIGZvciAoaTIgPj49IDc7IG4yIDwgZjsgbjIrKylcbiAgICAgICAgICAgIGZvciAoVFtuMl0gPSBpMiA8PCA3LCBlMyA9IDA7IGUzIDwgMSA8PCBrW24yXSAtIDc7IGUzKyspXG4gICAgICAgICAgICAgIEVbMjU2ICsgaTIrK10gPSBuMjtcbiAgICAgICAgICBmb3IgKHQyID0gMDsgdDIgPD0gZzsgdDIrKylcbiAgICAgICAgICAgIHMyW3QyXSA9IDA7XG4gICAgICAgICAgZm9yIChlMyA9IDA7IGUzIDw9IDE0MzsgKVxuICAgICAgICAgICAgelsyICogZTMgKyAxXSA9IDgsIGUzKyssIHMyWzhdKys7XG4gICAgICAgICAgZm9yICg7IGUzIDw9IDI1NTsgKVxuICAgICAgICAgICAgelsyICogZTMgKyAxXSA9IDksIGUzKyssIHMyWzldKys7XG4gICAgICAgICAgZm9yICg7IGUzIDw9IDI3OTsgKVxuICAgICAgICAgICAgelsyICogZTMgKyAxXSA9IDcsIGUzKyssIHMyWzddKys7XG4gICAgICAgICAgZm9yICg7IGUzIDw9IDI4NzsgKVxuICAgICAgICAgICAgelsyICogZTMgKyAxXSA9IDgsIGUzKyssIHMyWzhdKys7XG4gICAgICAgICAgZm9yIChaKHosIGwgKyAxLCBzMiksIGUzID0gMDsgZTMgPCBmOyBlMysrKVxuICAgICAgICAgICAgQ1syICogZTMgKyAxXSA9IDUsIENbMiAqIGUzXSA9IGooZTMsIDUpO1xuICAgICAgICAgIE8gPSBuZXcgRCh6LCB3LCB1ICsgMSwgbCwgZyksIEIgPSBuZXcgRChDLCBrLCAwLCBmLCBnKSwgUjIgPSBuZXcgRChuZXcgQXJyYXkoMCksIHgsIDAsIGMsIHApO1xuICAgICAgICB9KCksIHEgPSB0cnVlKSwgZTIubF9kZXNjID0gbmV3IEYoZTIuZHluX2x0cmVlLCBPKSwgZTIuZF9kZXNjID0gbmV3IEYoZTIuZHluX2R0cmVlLCBCKSwgZTIuYmxfZGVzYyA9IG5ldyBGKGUyLmJsX3RyZWUsIFIyKSwgZTIuYmlfYnVmID0gMCwgZTIuYmlfdmFsaWQgPSAwLCBXKGUyKTtcbiAgICAgIH0sIHIuX3RyX3N0b3JlZF9ibG9jayA9IEosIHIuX3RyX2ZsdXNoX2Jsb2NrID0gZnVuY3Rpb24oZTIsIHQyLCByMiwgbjIpIHtcbiAgICAgICAgdmFyIGkyLCBzMiwgYTIgPSAwO1xuICAgICAgICAwIDwgZTIubGV2ZWwgPyAoMiA9PT0gZTIuc3RybS5kYXRhX3R5cGUgJiYgKGUyLnN0cm0uZGF0YV90eXBlID0gZnVuY3Rpb24oZTMpIHtcbiAgICAgICAgICB2YXIgdDMsIHIzID0gNDA5MzYyNDQ0NztcbiAgICAgICAgICBmb3IgKHQzID0gMDsgdDMgPD0gMzE7IHQzKyssIHIzID4+Pj0gMSlcbiAgICAgICAgICAgIGlmICgxICYgcjMgJiYgMCAhPT0gZTMuZHluX2x0cmVlWzIgKiB0M10pXG4gICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIGlmICgwICE9PSBlMy5keW5fbHRyZWVbMThdIHx8IDAgIT09IGUzLmR5bl9sdHJlZVsyMF0gfHwgMCAhPT0gZTMuZHluX2x0cmVlWzI2XSlcbiAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICAgIGZvciAodDMgPSAzMjsgdDMgPCB1OyB0MysrKVxuICAgICAgICAgICAgaWYgKDAgIT09IGUzLmR5bl9sdHJlZVsyICogdDNdKVxuICAgICAgICAgICAgICByZXR1cm4gaDtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfShlMikpLCBZKGUyLCBlMi5sX2Rlc2MpLCBZKGUyLCBlMi5kX2Rlc2MpLCBhMiA9IGZ1bmN0aW9uKGUzKSB7XG4gICAgICAgICAgdmFyIHQzO1xuICAgICAgICAgIGZvciAoWChlMywgZTMuZHluX2x0cmVlLCBlMy5sX2Rlc2MubWF4X2NvZGUpLCBYKGUzLCBlMy5keW5fZHRyZWUsIGUzLmRfZGVzYy5tYXhfY29kZSksIFkoZTMsIGUzLmJsX2Rlc2MpLCB0MyA9IGMgLSAxOyAzIDw9IHQzICYmIDAgPT09IGUzLmJsX3RyZWVbMiAqIFNbdDNdICsgMV07IHQzLS0pXG4gICAgICAgICAgICA7XG4gICAgICAgICAgcmV0dXJuIGUzLm9wdF9sZW4gKz0gMyAqICh0MyArIDEpICsgNSArIDUgKyA0LCB0MztcbiAgICAgICAgfShlMiksIGkyID0gZTIub3B0X2xlbiArIDMgKyA3ID4+PiAzLCAoczIgPSBlMi5zdGF0aWNfbGVuICsgMyArIDcgPj4+IDMpIDw9IGkyICYmIChpMiA9IHMyKSkgOiBpMiA9IHMyID0gcjIgKyA1LCByMiArIDQgPD0gaTIgJiYgLTEgIT09IHQyID8gSihlMiwgdDIsIHIyLCBuMikgOiA0ID09PSBlMi5zdHJhdGVneSB8fCBzMiA9PT0gaTIgPyAoUChlMiwgMiArIChuMiA/IDEgOiAwKSwgMyksIEsoZTIsIHosIEMpKSA6IChQKGUyLCA0ICsgKG4yID8gMSA6IDApLCAzKSwgZnVuY3Rpb24oZTMsIHQzLCByMywgbjMpIHtcbiAgICAgICAgICB2YXIgaTM7XG4gICAgICAgICAgZm9yIChQKGUzLCB0MyAtIDI1NywgNSksIFAoZTMsIHIzIC0gMSwgNSksIFAoZTMsIG4zIC0gNCwgNCksIGkzID0gMDsgaTMgPCBuMzsgaTMrKylcbiAgICAgICAgICAgIFAoZTMsIGUzLmJsX3RyZWVbMiAqIFNbaTNdICsgMV0sIDMpO1xuICAgICAgICAgIFYoZTMsIGUzLmR5bl9sdHJlZSwgdDMgLSAxKSwgVihlMywgZTMuZHluX2R0cmVlLCByMyAtIDEpO1xuICAgICAgICB9KGUyLCBlMi5sX2Rlc2MubWF4X2NvZGUgKyAxLCBlMi5kX2Rlc2MubWF4X2NvZGUgKyAxLCBhMiArIDEpLCBLKGUyLCBlMi5keW5fbHRyZWUsIGUyLmR5bl9kdHJlZSkpLCBXKGUyKSwgbjIgJiYgTShlMik7XG4gICAgICB9LCByLl90cl90YWxseSA9IGZ1bmN0aW9uKGUyLCB0MiwgcjIpIHtcbiAgICAgICAgcmV0dXJuIGUyLnBlbmRpbmdfYnVmW2UyLmRfYnVmICsgMiAqIGUyLmxhc3RfbGl0XSA9IHQyID4+PiA4ICYgMjU1LCBlMi5wZW5kaW5nX2J1ZltlMi5kX2J1ZiArIDIgKiBlMi5sYXN0X2xpdCArIDFdID0gMjU1ICYgdDIsIGUyLnBlbmRpbmdfYnVmW2UyLmxfYnVmICsgZTIubGFzdF9saXRdID0gMjU1ICYgcjIsIGUyLmxhc3RfbGl0KyssIDAgPT09IHQyID8gZTIuZHluX2x0cmVlWzIgKiByMl0rKyA6IChlMi5tYXRjaGVzKyssIHQyLS0sIGUyLmR5bl9sdHJlZVsyICogKEFbcjJdICsgdSArIDEpXSsrLCBlMi5keW5fZHRyZWVbMiAqIE4odDIpXSsrKSwgZTIubGFzdF9saXQgPT09IGUyLmxpdF9idWZzaXplIC0gMTtcbiAgICAgIH0sIHIuX3RyX2FsaWduID0gZnVuY3Rpb24oZTIpIHtcbiAgICAgICAgUChlMiwgMiwgMyksIEwoZTIsIG0sIHopLCBmdW5jdGlvbihlMykge1xuICAgICAgICAgIDE2ID09PSBlMy5iaV92YWxpZCA/IChVKGUzLCBlMy5iaV9idWYpLCBlMy5iaV9idWYgPSAwLCBlMy5iaV92YWxpZCA9IDApIDogOCA8PSBlMy5iaV92YWxpZCAmJiAoZTMucGVuZGluZ19idWZbZTMucGVuZGluZysrXSA9IDI1NSAmIGUzLmJpX2J1ZiwgZTMuYmlfYnVmID4+PSA4LCBlMy5iaV92YWxpZCAtPSA4KTtcbiAgICAgICAgfShlMik7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuLi91dGlscy9jb21tb25cIjogNDEgfV0sIDUzOiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBudWxsLCB0aGlzLm5leHRfaW4gPSAwLCB0aGlzLmF2YWlsX2luID0gMCwgdGhpcy50b3RhbF9pbiA9IDAsIHRoaXMub3V0cHV0ID0gbnVsbCwgdGhpcy5uZXh0X291dCA9IDAsIHRoaXMuYXZhaWxfb3V0ID0gMCwgdGhpcy50b3RhbF9vdXQgPSAwLCB0aGlzLm1zZyA9IFwiXCIsIHRoaXMuc3RhdGUgPSBudWxsLCB0aGlzLmRhdGFfdHlwZSA9IDIsIHRoaXMuYWRsZXIgPSAwO1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDU0OiBbZnVuY3Rpb24oZSwgdCwgcikge1xuICAgICAgKGZ1bmN0aW9uKGUyKSB7XG4gICAgICAgICFmdW5jdGlvbihyMiwgbikge1xuICAgICAgICAgIGlmICghcjIuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgICAgICB2YXIgaSwgcywgdDIsIGEsIG8gPSAxLCBoID0ge30sIHUgPSBmYWxzZSwgbCA9IHIyLmRvY3VtZW50LCBlMyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocjIpO1xuICAgICAgICAgICAgZTMgPSBlMyAmJiBlMy5zZXRUaW1lb3V0ID8gZTMgOiByMiwgaSA9IFwiW29iamVjdCBwcm9jZXNzXVwiID09PSB7fS50b1N0cmluZy5jYWxsKHIyLnByb2Nlc3MpID8gZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGMoZTQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHIyLnBvc3RNZXNzYWdlICYmICFyMi5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGU0ID0gdHJ1ZSwgdDMgPSByMi5vbm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgZTQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LCByMi5wb3N0TWVzc2FnZShcIlwiLCBcIipcIiksIHIyLm9ubWVzc2FnZSA9IHQzLCBlNDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSgpID8gKGEgPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIiwgcjIuYWRkRXZlbnRMaXN0ZW5lciA/IHIyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGQsIGZhbHNlKSA6IHIyLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIGQpLCBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICByMi5wb3N0TWVzc2FnZShhICsgZTQsIFwiKlwiKTtcbiAgICAgICAgICAgIH0pIDogcjIuTWVzc2FnZUNoYW5uZWwgPyAoKHQyID0gbmV3IE1lc3NhZ2VDaGFubmVsKCkpLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGU0KSB7XG4gICAgICAgICAgICAgIGMoZTQuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICB0Mi5wb3J0Mi5wb3N0TWVzc2FnZShlNCk7XG4gICAgICAgICAgICB9KSA6IGwgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBsLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikgPyAocyA9IGwuZG9jdW1lbnRFbGVtZW50LCBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICB2YXIgdDMgPSBsLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgIHQzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGMoZTQpLCB0My5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsLCBzLnJlbW92ZUNoaWxkKHQzKSwgdDMgPSBudWxsO1xuICAgICAgICAgICAgICB9LCBzLmFwcGVuZENoaWxkKHQzKTtcbiAgICAgICAgICAgIH0pIDogZnVuY3Rpb24oZTQpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjLCAwLCBlNCk7XG4gICAgICAgICAgICB9LCBlMy5zZXRJbW1lZGlhdGUgPSBmdW5jdGlvbihlNCkge1xuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGU0ICYmIChlNCA9IG5ldyBGdW5jdGlvbihcIlwiICsgZTQpKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgdDMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLCByMyA9IDA7IHIzIDwgdDMubGVuZ3RoOyByMysrKVxuICAgICAgICAgICAgICAgIHQzW3IzXSA9IGFyZ3VtZW50c1tyMyArIDFdO1xuICAgICAgICAgICAgICB2YXIgbjIgPSB7IGNhbGxiYWNrOiBlNCwgYXJnczogdDMgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIGhbb10gPSBuMiwgaShvKSwgbysrO1xuICAgICAgICAgICAgfSwgZTMuY2xlYXJJbW1lZGlhdGUgPSBmO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBmKGU0KSB7XG4gICAgICAgICAgICBkZWxldGUgaFtlNF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGMoZTQpIHtcbiAgICAgICAgICAgIGlmICh1KVxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGMsIDAsIGU0KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgdDMgPSBoW2U0XTtcbiAgICAgICAgICAgICAgaWYgKHQzKSB7XG4gICAgICAgICAgICAgICAgdSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICFmdW5jdGlvbihlNSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdDQgPSBlNS5jYWxsYmFjaywgcjMgPSBlNS5hcmdzO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHIzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHQ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0NChyM1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0NChyM1swXSwgcjNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgdDQocjNbMF0sIHIzWzFdLCByM1syXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdDQuYXBwbHkobiwgcjMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KHQzKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgZihlNCksIHUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gZChlNCkge1xuICAgICAgICAgICAgZTQuc291cmNlID09PSByMiAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBlNC5kYXRhICYmIDAgPT09IGU0LmRhdGEuaW5kZXhPZihhKSAmJiBjKCtlNC5kYXRhLnNsaWNlKGEubGVuZ3RoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHNlbGYgPyB2b2lkIDAgPT09IGUyID8gdGhpcyA6IGUyIDogc2VsZik7XG4gICAgICB9KS5jYWxsKHRoaXMsIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGNvbW1vbmpzR2xvYmFsID8gY29tbW9uanNHbG9iYWwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZWxmID8gc2VsZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KTtcbiAgICB9LCB7fV0gfSwge30sIFsxMF0pKDEwKTtcbiAgfSk7XG59KShqc3ppcF9taW4pO1xudmFyIGpzemlwX21pbkV4cG9ydHMgPSBqc3ppcF9taW4uZXhwb3J0cztcbmNvbnN0IEpTWmlwID0gLyogQF9fUFVSRV9fICovIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzJDEoanN6aXBfbWluRXhwb3J0cyk7XG52YXIgeG1sJDIgPSB7IGV4cG9ydHM6IHt9IH07XG52YXIgWE1MX0NIQVJBQ1RFUl9NQVAgPSB7XG4gIFwiJlwiOiBcIiZhbXA7XCIsXG4gICdcIic6IFwiJnF1b3Q7XCIsXG4gIFwiJ1wiOiBcIiZhcG9zO1wiLFxuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiPlwiOiBcIiZndDtcIlxufTtcbmZ1bmN0aW9uIGVzY2FwZUZvclhNTCQxKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlID8gc3RyaW5nLnJlcGxhY2UoLyhbJlwiPD4nXSkvZywgZnVuY3Rpb24oc3RyLCBpdGVtKSB7XG4gICAgcmV0dXJuIFhNTF9DSEFSQUNURVJfTUFQW2l0ZW1dO1xuICB9KSA6IHN0cmluZztcbn1cbnZhciBlc2NhcGVGb3JYTUxfMSA9IGVzY2FwZUZvclhNTCQxO1xudmFyIGVzY2FwZUZvclhNTCA9IGVzY2FwZUZvclhNTF8xO1xudmFyIFN0cmVhbSA9IHN0cmVhbUJyb3dzZXJpZnkuU3RyZWFtO1xudmFyIERFRkFVTFRfSU5ERU5UID0gXCIgICAgXCI7XG5mdW5jdGlvbiB4bWwoaW5wdXQsIG9wdGlvbnMyKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9uczIgIT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRpb25zMiA9IHtcbiAgICAgIGluZGVudDogb3B0aW9uczJcbiAgICB9O1xuICB9XG4gIHZhciBzdHJlYW0gPSBvcHRpb25zMi5zdHJlYW0gPyBuZXcgU3RyZWFtKCkgOiBudWxsLCBvdXRwdXQgPSBcIlwiLCBpbnRlcnJ1cHRlZCA9IGZhbHNlLCBpbmRlbnQgPSAhb3B0aW9uczIuaW5kZW50ID8gXCJcIiA6IG9wdGlvbnMyLmluZGVudCA9PT0gdHJ1ZSA/IERFRkFVTFRfSU5ERU5UIDogb3B0aW9uczIuaW5kZW50LCBpbnN0YW50ID0gdHJ1ZTtcbiAgZnVuY3Rpb24gZGVsYXkoZnVuYykge1xuICAgIGlmICghaW5zdGFudCkge1xuICAgICAgZnVuYygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzJDEubmV4dFRpY2soZnVuYyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFwcGVuZChpbnRlcnJ1cHQsIG91dCkge1xuICAgIGlmIChvdXQgIT09IHZvaWQgMCkge1xuICAgICAgb3V0cHV0ICs9IG91dDtcbiAgICB9XG4gICAgaWYgKGludGVycnVwdCAmJiAhaW50ZXJydXB0ZWQpIHtcbiAgICAgIHN0cmVhbSA9IHN0cmVhbSB8fCBuZXcgU3RyZWFtKCk7XG4gICAgICBpbnRlcnJ1cHRlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChpbnRlcnJ1cHQgJiYgaW50ZXJydXB0ZWQpIHtcbiAgICAgIHZhciBkYXRhID0gb3V0cHV0O1xuICAgICAgZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KFwiZGF0YVwiLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgb3V0cHV0ID0gXCJcIjtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWRkKHZhbHVlLCBsYXN0KSB7XG4gICAgZm9ybWF0KGFwcGVuZCwgcmVzb2x2ZSh2YWx1ZSwgaW5kZW50LCBpbmRlbnQgPyAxIDogMCksIGxhc3QpO1xuICB9XG4gIGZ1bmN0aW9uIGVuZCgpIHtcbiAgICBpZiAoc3RyZWFtKSB7XG4gICAgICB2YXIgZGF0YSA9IG91dHB1dDtcbiAgICAgIGRlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0uZW1pdChcImRhdGFcIiwgZGF0YSk7XG4gICAgICAgIHN0cmVhbS5lbWl0KFwiZW5kXCIpO1xuICAgICAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICAgICAgc3RyZWFtLmVtaXQoXCJjbG9zZVwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhZGRYbWxEZWNsYXJhdGlvbihkZWNsYXJhdGlvbikge1xuICAgIHZhciBlbmNvZGluZyA9IGRlY2xhcmF0aW9uLmVuY29kaW5nIHx8IFwiVVRGLThcIiwgYXR0ciA9IHsgdmVyc2lvbjogXCIxLjBcIiwgZW5jb2RpbmcgfTtcbiAgICBpZiAoZGVjbGFyYXRpb24uc3RhbmRhbG9uZSkge1xuICAgICAgYXR0ci5zdGFuZGFsb25lID0gZGVjbGFyYXRpb24uc3RhbmRhbG9uZTtcbiAgICB9XG4gICAgYWRkKHsgXCI/eG1sXCI6IHsgX2F0dHI6IGF0dHIgfSB9KTtcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZShcIi8+XCIsIFwiPz5cIik7XG4gIH1cbiAgZGVsYXkoZnVuY3Rpb24oKSB7XG4gICAgaW5zdGFudCA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKG9wdGlvbnMyLmRlY2xhcmF0aW9uKSB7XG4gICAgYWRkWG1sRGVjbGFyYXRpb24ob3B0aW9uczIuZGVjbGFyYXRpb24pO1xuICB9XG4gIGlmIChpbnB1dCAmJiBpbnB1dC5mb3JFYWNoKSB7XG4gICAgaW5wdXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgaSkge1xuICAgICAgdmFyIGxhc3Q7XG4gICAgICBpZiAoaSArIDEgPT09IGlucHV0Lmxlbmd0aClcbiAgICAgICAgbGFzdCA9IGVuZDtcbiAgICAgIGFkZCh2YWx1ZSwgbGFzdCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYWRkKGlucHV0LCBlbmQpO1xuICB9XG4gIGlmIChzdHJlYW0pIHtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnQoKSB7XG4gIHZhciBpbnB1dCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksIHNlbGYyID0ge1xuICAgIF9lbGVtOiByZXNvbHZlKGlucHV0KVxuICB9O1xuICBzZWxmMi5wdXNoID0gZnVuY3Rpb24oaW5wdXQyKSB7XG4gICAgaWYgKCF0aGlzLmFwcGVuZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGFzc2lnbmVkIHRvIGEgcGFyZW50IVwiKTtcbiAgICB9XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBpbmRlbnQgPSB0aGlzLl9lbGVtLmluZGVudDtcbiAgICBmb3JtYXQoXG4gICAgICB0aGlzLmFwcGVuZCxcbiAgICAgIHJlc29sdmUoXG4gICAgICAgIGlucHV0MixcbiAgICAgICAgaW5kZW50LFxuICAgICAgICB0aGlzLl9lbGVtLmljb3VudCArIChpbmRlbnQgPyAxIDogMClcbiAgICAgICksXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhhdC5hcHBlbmQodHJ1ZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcbiAgc2VsZjIuY2xvc2UgPSBmdW5jdGlvbihpbnB1dDIpIHtcbiAgICBpZiAoaW5wdXQyICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMucHVzaChpbnB1dDIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5lbmQpIHtcbiAgICAgIHRoaXMuZW5kKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc2VsZjI7XG59XG5mdW5jdGlvbiBjcmVhdGVfaW5kZW50KGNoYXJhY3RlciwgY291bnQpIHtcbiAgcmV0dXJuIG5ldyBBcnJheShjb3VudCB8fCAwKS5qb2luKGNoYXJhY3RlciB8fCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmUoZGF0YSwgaW5kZW50LCBpbmRlbnRfY291bnQpIHtcbiAgaW5kZW50X2NvdW50ID0gaW5kZW50X2NvdW50IHx8IDA7XG4gIHZhciBpbmRlbnRfc3BhY2VzID0gY3JlYXRlX2luZGVudChpbmRlbnQsIGluZGVudF9jb3VudCk7XG4gIHZhciBuYW1lO1xuICB2YXIgdmFsdWVzID0gZGF0YTtcbiAgdmFyIGludGVycnVwdCA9IGZhbHNlO1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIG5hbWUgPSBrZXlzWzBdO1xuICAgIHZhbHVlcyA9IGRhdGFbbmFtZV07XG4gICAgaWYgKHZhbHVlcyAmJiB2YWx1ZXMuX2VsZW0pIHtcbiAgICAgIHZhbHVlcy5fZWxlbS5uYW1lID0gbmFtZTtcbiAgICAgIHZhbHVlcy5fZWxlbS5pY291bnQgPSBpbmRlbnRfY291bnQ7XG4gICAgICB2YWx1ZXMuX2VsZW0uaW5kZW50ID0gaW5kZW50O1xuICAgICAgdmFsdWVzLl9lbGVtLmluZGVudHMgPSBpbmRlbnRfc3BhY2VzO1xuICAgICAgdmFsdWVzLl9lbGVtLmludGVycnVwdCA9IHZhbHVlcztcbiAgICAgIHJldHVybiB2YWx1ZXMuX2VsZW07XG4gICAgfVxuICB9XG4gIHZhciBhdHRyaWJ1dGVzID0gW10sIGNvbnRlbnQgPSBbXTtcbiAgdmFyIGlzU3RyaW5nQ29udGVudDtcbiAgZnVuY3Rpb24gZ2V0X2F0dHJpYnV0ZXMob2JqKSB7XG4gICAgdmFyIGtleXMyID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBrZXlzMi5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgYXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZShrZXksIG9ialtrZXldKSk7XG4gICAgfSk7XG4gIH1cbiAgc3dpdGNoICh0eXBlb2YgdmFsdWVzKSB7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgaWYgKHZhbHVlcyA9PT0gbnVsbClcbiAgICAgICAgYnJlYWs7XG4gICAgICBpZiAodmFsdWVzLl9hdHRyKSB7XG4gICAgICAgIGdldF9hdHRyaWJ1dGVzKHZhbHVlcy5fYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWVzLl9jZGF0YSkge1xuICAgICAgICBjb250ZW50LnB1c2goXG4gICAgICAgICAgKFwiPCFbQ0RBVEFbXCIgKyB2YWx1ZXMuX2NkYXRhKS5yZXBsYWNlKC9cXF1cXF0+L2csIFwiXV1dXT48IVtDREFUQVs+XCIpICsgXCJdXT5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlcy5mb3JFYWNoKSB7XG4gICAgICAgIGlzU3RyaW5nQ29udGVudCA9IGZhbHNlO1xuICAgICAgICBjb250ZW50LnB1c2goXCJcIik7XG4gICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB2YXIgX25hbWUgPSBPYmplY3Qua2V5cyh2YWx1ZSlbMF07XG4gICAgICAgICAgICBpZiAoX25hbWUgPT0gXCJfYXR0clwiKSB7XG4gICAgICAgICAgICAgIGdldF9hdHRyaWJ1dGVzKHZhbHVlLl9hdHRyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQucHVzaChyZXNvbHZlKFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGluZGVudCxcbiAgICAgICAgICAgICAgICBpbmRlbnRfY291bnQgKyAxXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZW50LnBvcCgpO1xuICAgICAgICAgICAgaXNTdHJpbmdDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRlbnQucHVzaChlc2NhcGVGb3JYTUwodmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzU3RyaW5nQ29udGVudCkge1xuICAgICAgICAgIGNvbnRlbnQucHVzaChcIlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnRlbnQucHVzaChlc2NhcGVGb3JYTUwodmFsdWVzKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGludGVycnVwdCxcbiAgICBhdHRyaWJ1dGVzLFxuICAgIGNvbnRlbnQsXG4gICAgaWNvdW50OiBpbmRlbnRfY291bnQsXG4gICAgaW5kZW50czogaW5kZW50X3NwYWNlcyxcbiAgICBpbmRlbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGZvcm1hdChhcHBlbmQsIGVsZW0sIGVuZCkge1xuICBpZiAodHlwZW9mIGVsZW0gIT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBhcHBlbmQoZmFsc2UsIGVsZW0pO1xuICB9XG4gIHZhciBsZW4gPSBlbGVtLmludGVycnVwdCA/IDEgOiBlbGVtLmNvbnRlbnQubGVuZ3RoO1xuICBmdW5jdGlvbiBwcm9jZWVkKCkge1xuICAgIHdoaWxlIChlbGVtLmNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtLmNvbnRlbnQuc2hpZnQoKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGlmIChpbnRlcnJ1cHQodmFsdWUpKVxuICAgICAgICByZXR1cm47XG4gICAgICBmb3JtYXQoYXBwZW5kLCB2YWx1ZSk7XG4gICAgfVxuICAgIGFwcGVuZChmYWxzZSwgKGxlbiA+IDEgPyBlbGVtLmluZGVudHMgOiBcIlwiKSArIChlbGVtLm5hbWUgPyBcIjwvXCIgKyBlbGVtLm5hbWUgKyBcIj5cIiA6IFwiXCIpICsgKGVsZW0uaW5kZW50ICYmICFlbmQgPyBcIlxcblwiIDogXCJcIikpO1xuICAgIGlmIChlbmQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUuaW50ZXJydXB0KSB7XG4gICAgICB2YWx1ZS5pbnRlcnJ1cHQuYXBwZW5kID0gYXBwZW5kO1xuICAgICAgdmFsdWUuaW50ZXJydXB0LmVuZCA9IHByb2NlZWQ7XG4gICAgICB2YWx1ZS5pbnRlcnJ1cHQgPSBmYWxzZTtcbiAgICAgIGFwcGVuZCh0cnVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYXBwZW5kKGZhbHNlLCBlbGVtLmluZGVudHMgKyAoZWxlbS5uYW1lID8gXCI8XCIgKyBlbGVtLm5hbWUgOiBcIlwiKSArIChlbGVtLmF0dHJpYnV0ZXMubGVuZ3RoID8gXCIgXCIgKyBlbGVtLmF0dHJpYnV0ZXMuam9pbihcIiBcIikgOiBcIlwiKSArIChsZW4gPyBlbGVtLm5hbWUgPyBcIj5cIiA6IFwiXCIgOiBlbGVtLm5hbWUgPyBcIi8+XCIgOiBcIlwiKSArIChlbGVtLmluZGVudCAmJiBsZW4gPiAxID8gXCJcXG5cIiA6IFwiXCIpKTtcbiAgaWYgKCFsZW4pIHtcbiAgICByZXR1cm4gYXBwZW5kKGZhbHNlLCBlbGVtLmluZGVudCA/IFwiXFxuXCIgOiBcIlwiKTtcbiAgfVxuICBpZiAoIWludGVycnVwdChlbGVtKSkge1xuICAgIHByb2NlZWQoKTtcbiAgfVxufVxuZnVuY3Rpb24gYXR0cmlidXRlKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGtleSArICc9XCInICsgZXNjYXBlRm9yWE1MKHZhbHVlKSArICdcIic7XG59XG54bWwkMi5leHBvcnRzID0geG1sO1xueG1sJDIuZXhwb3J0cy5lbGVtZW50ID0geG1sJDIuZXhwb3J0cy5FbGVtZW50ID0gZWxlbWVudDtcbnZhciB4bWxFeHBvcnRzID0geG1sJDIuZXhwb3J0cztcbmNvbnN0IHhtbCQxID0gLyogQF9fUFVSRV9fICovIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzJDEoeG1sRXhwb3J0cyk7XG5jb25zdCBvYmZ1c2NhdGVkU3RhcnRPZmZzZXQgPSAwO1xuY29uc3Qgb2JmdXNjYXRlZEVuZE9mZnNldCA9IDMyO1xuY29uc3QgZ3VpZFNpemUgPSAzMjtcbmNvbnN0IG9iZnVzY2F0ZSA9IChidWYsIGZvbnRLZXkpID0+IHtcbiAgY29uc3QgZ3VpZCA9IGZvbnRLZXkucmVwbGFjZSgvLS9nLCBcIlwiKTtcbiAgaWYgKGd1aWQubGVuZ3RoICE9PSBndWlkU2l6ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3I6IENhbm5vdCBleHRyYWN0IEdVSUQgZnJvbSBmb250IGZpbGVuYW1lOiAke2ZvbnRLZXl9YCk7XG4gIH1cbiAgY29uc3QgaGV4U3RyaW5ncyA9IGd1aWQucmVwbGFjZSgvKC4uKS9nLCBcIiQxIFwiKS50cmltKCkuc3BsaXQoXCIgXCIpO1xuICBjb25zdCBoZXhOdW1iZXJzID0gaGV4U3RyaW5ncy5tYXAoKGhleFN0cmluZykgPT4gcGFyc2VJbnQoaGV4U3RyaW5nLCAxNikpO1xuICBoZXhOdW1iZXJzLnJldmVyc2UoKTtcbiAgY29uc3QgYnl0ZXNUb09iZnVzY2F0ZSA9IGJ1Zi5zbGljZShvYmZ1c2NhdGVkU3RhcnRPZmZzZXQsIG9iZnVzY2F0ZWRFbmRPZmZzZXQpO1xuICBjb25zdCBvYmZ1c2NhdGVkQnl0ZXMgPSBieXRlc1RvT2JmdXNjYXRlLm1hcCgoYnl0ZSwgaSkgPT4gYnl0ZSBeIGhleE51bWJlcnNbaSAlIGhleE51bWJlcnMubGVuZ3RoXSk7XG4gIGNvbnN0IG91dCA9IEJ1ZmZlci5jb25jYXQoW2J1Zi5zbGljZSgwLCBvYmZ1c2NhdGVkU3RhcnRPZmZzZXQpLCBvYmZ1c2NhdGVkQnl0ZXMsIGJ1Zi5zbGljZShvYmZ1c2NhdGVkRW5kT2Zmc2V0KV0pO1xuICByZXR1cm4gb3V0O1xufTtcbmNsYXNzIEZvcm1hdHRlciB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tb2JqZWN0LWxpdGVyYWwtdHlwZS1hc3NlcnRpb25cbiAgZm9ybWF0KGlucHV0LCBjb250ZXh0ID0geyBzdGFjazogW10gfSkge1xuICAgIGNvbnN0IG91dHB1dCA9IGlucHV0LnByZXBGb3JYbWwoY29udGV4dCk7XG4gICAgaWYgKG91dHB1dCkge1xuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoXCJYTUxDb21wb25lbnQgZGlkIG5vdCBmb3JtYXQgY29ycmVjdGx5XCIpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgSW1hZ2VSZXBsYWNlciB7XG4gIHJlcGxhY2UoeG1sRGF0YSwgbWVkaWFEYXRhLCBvZmZzZXQpIHtcbiAgICBsZXQgY3VycmVudFhtbERhdGEgPSB4bWxEYXRhO1xuICAgIG1lZGlhRGF0YS5mb3JFYWNoKChpbWFnZSwgaSkgPT4ge1xuICAgICAgY3VycmVudFhtbERhdGEgPSBjdXJyZW50WG1sRGF0YS5yZXBsYWNlKG5ldyBSZWdFeHAoYHske2ltYWdlLmZpbGVOYW1lfX1gLCBcImdcIiksIChvZmZzZXQgKyBpKS50b1N0cmluZygpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY3VycmVudFhtbERhdGE7XG4gIH1cbiAgZ2V0TWVkaWFEYXRhKHhtbERhdGEsIG1lZGlhKSB7XG4gICAgcmV0dXJuIG1lZGlhLkFycmF5LmZpbHRlcigoaW1hZ2UpID0+IHhtbERhdGEuc2VhcmNoKGB7JHtpbWFnZS5maWxlTmFtZX19YCkgPiAwKTtcbiAgfVxufVxuY2xhc3MgTnVtYmVyaW5nUmVwbGFjZXIge1xuICByZXBsYWNlKHhtbERhdGEsIGNvbmNyZXRlTnVtYmVyaW5ncykge1xuICAgIGxldCBjdXJyZW50WG1sRGF0YSA9IHhtbERhdGE7XG4gICAgZm9yIChjb25zdCBjb25jcmV0ZU51bWJlcmluZyBvZiBjb25jcmV0ZU51bWJlcmluZ3MpIHtcbiAgICAgIGN1cnJlbnRYbWxEYXRhID0gY3VycmVudFhtbERhdGEucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cChgeyR7Y29uY3JldGVOdW1iZXJpbmcucmVmZXJlbmNlfS0ke2NvbmNyZXRlTnVtYmVyaW5nLmluc3RhbmNlfX1gLCBcImdcIiksXG4gICAgICAgIGNvbmNyZXRlTnVtYmVyaW5nLm51bUlkLnRvU3RyaW5nKClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50WG1sRGF0YTtcbiAgfVxufVxuY2xhc3MgQ29tcGlsZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZm9ybWF0dGVyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpbWFnZVJlcGxhY2VyXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJudW1iZXJpbmdSZXBsYWNlclwiKTtcbiAgICB0aGlzLmZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoKTtcbiAgICB0aGlzLmltYWdlUmVwbGFjZXIgPSBuZXcgSW1hZ2VSZXBsYWNlcigpO1xuICAgIHRoaXMubnVtYmVyaW5nUmVwbGFjZXIgPSBuZXcgTnVtYmVyaW5nUmVwbGFjZXIoKTtcbiAgfVxuICBjb21waWxlKGZpbGUsIHByZXR0aWZ5WG1sKSB7XG4gICAgY29uc3QgemlwID0gbmV3IEpTWmlwKCk7XG4gICAgY29uc3QgeG1saWZpZWRGaWxlTWFwcGluZyA9IHRoaXMueG1saWZ5RmlsZShmaWxlLCBwcmV0dGlmeVhtbCk7XG4gICAgY29uc3QgbWFwID0gbmV3IE1hcChPYmplY3QuZW50cmllcyh4bWxpZmllZEZpbGVNYXBwaW5nKSk7XG4gICAgZm9yIChjb25zdCBbLCBvYmpdIG9mIG1hcCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHN1YkZpbGUgb2Ygb2JqKSB7XG4gICAgICAgICAgemlwLmZpbGUoc3ViRmlsZS5wYXRoLCBzdWJGaWxlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB6aXAuZmlsZShvYmoucGF0aCwgb2JqLmRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHsgc3RyZWFtLCBmaWxlTmFtZSB9IG9mIGZpbGUuTWVkaWEuQXJyYXkpIHtcbiAgICAgIHppcC5maWxlKGB3b3JkL21lZGlhLyR7ZmlsZU5hbWV9YCwgc3RyZWFtKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB7IGRhdGE6IGJ1ZmZlcjIsIG5hbWUsIGZvbnRLZXkgfSBvZiBmaWxlLkZvbnRUYWJsZS5mb250T3B0aW9uc1dpdGhLZXkpIHtcbiAgICAgIGNvbnN0IFtuYW1lV2l0aG91dEV4dGVuc2lvbl0gPSBuYW1lLnNwbGl0KFwiLlwiKTtcbiAgICAgIHppcC5maWxlKGB3b3JkL2ZvbnRzLyR7bmFtZVdpdGhvdXRFeHRlbnNpb259Lm9kdHRmYCwgb2JmdXNjYXRlKGJ1ZmZlcjIsIGZvbnRLZXkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHppcDtcbiAgfVxuICB4bWxpZnlGaWxlKGZpbGUsIHByZXR0aWZ5KSB7XG4gICAgY29uc3QgZG9jdW1lbnRSZWxhdGlvbnNoaXBDb3VudCA9IGZpbGUuRG9jdW1lbnQuUmVsYXRpb25zaGlwcy5SZWxhdGlvbnNoaXBDb3VudCArIDE7XG4gICAgY29uc3QgZG9jdW1lbnRYbWxEYXRhID0geG1sJDEoXG4gICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5Eb2N1bWVudC5WaWV3LCB7XG4gICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICBmaWxlLFxuICAgICAgICBzdGFjazogW11cbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXG4gICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICBjb25zdCBkb2N1bWVudE1lZGlhRGF0YXMgPSB0aGlzLmltYWdlUmVwbGFjZXIuZ2V0TWVkaWFEYXRhKGRvY3VtZW50WG1sRGF0YSwgZmlsZS5NZWRpYSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIFJlbGF0aW9uc2hpcHM6IHtcbiAgICAgICAgZGF0YTogKCgpID0+IHtcbiAgICAgICAgICBkb2N1bWVudE1lZGlhRGF0YXMuZm9yRWFjaCgobWVkaWFEYXRhLCBpKSA9PiB7XG4gICAgICAgICAgICBmaWxlLkRvY3VtZW50LlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgICAgICAgICBkb2N1bWVudFJlbGF0aW9uc2hpcENvdW50ICsgaSxcbiAgICAgICAgICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2ltYWdlXCIsXG4gICAgICAgICAgICAgIGBtZWRpYS8ke21lZGlhRGF0YS5maWxlTmFtZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB4bWwkMShcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkRvY3VtZW50LlJlbGF0aW9uc2hpcHMsIHtcbiAgICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSkoKSxcbiAgICAgICAgcGF0aDogXCJ3b3JkL19yZWxzL2RvY3VtZW50LnhtbC5yZWxzXCJcbiAgICAgIH0sXG4gICAgICBEb2N1bWVudDoge1xuICAgICAgICBkYXRhOiAoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHhtbERhdGEgPSB0aGlzLmltYWdlUmVwbGFjZXIucmVwbGFjZShkb2N1bWVudFhtbERhdGEsIGRvY3VtZW50TWVkaWFEYXRhcywgZG9jdW1lbnRSZWxhdGlvbnNoaXBDb3VudCk7XG4gICAgICAgICAgY29uc3QgcmVmZXJlbmVkWG1sRGF0YSA9IHRoaXMubnVtYmVyaW5nUmVwbGFjZXIucmVwbGFjZSh4bWxEYXRhLCBmaWxlLk51bWJlcmluZy5Db25jcmV0ZU51bWJlcmluZyk7XG4gICAgICAgICAgcmV0dXJuIHJlZmVyZW5lZFhtbERhdGE7XG4gICAgICAgIH0pKCksXG4gICAgICAgIHBhdGg6IFwid29yZC9kb2N1bWVudC54bWxcIlxuICAgICAgfSxcbiAgICAgIFN0eWxlczoge1xuICAgICAgICBkYXRhOiAoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHhtbFN0eWxlcyA9IHhtbCQxKFxuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuU3R5bGVzLCB7XG4gICAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXG4gICAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCByZWZlcmVuY2VkWG1sU3R5bGVzID0gdGhpcy5udW1iZXJpbmdSZXBsYWNlci5yZXBsYWNlKHhtbFN0eWxlcywgZmlsZS5OdW1iZXJpbmcuQ29uY3JldGVOdW1iZXJpbmcpO1xuICAgICAgICAgIHJldHVybiByZWZlcmVuY2VkWG1sU3R5bGVzO1xuICAgICAgICB9KSgpLFxuICAgICAgICBwYXRoOiBcIndvcmQvc3R5bGVzLnhtbFwiXG4gICAgICB9LFxuICAgICAgUHJvcGVydGllczoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5Db3JlUHJvcGVydGllcywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwiZG9jUHJvcHMvY29yZS54bWxcIlxuICAgICAgfSxcbiAgICAgIE51bWJlcmluZzoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5OdW1iZXJpbmcsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBzdGFuZGFsb25lOiBcInllc1wiLFxuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcIndvcmQvbnVtYmVyaW5nLnhtbFwiXG4gICAgICB9LFxuICAgICAgRmlsZVJlbGF0aW9uc2hpcHM6IHtcbiAgICAgICAgZGF0YTogeG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGZpbGUuRmlsZVJlbGF0aW9uc2hpcHMsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcIl9yZWxzLy5yZWxzXCJcbiAgICAgIH0sXG4gICAgICBIZWFkZXJSZWxhdGlvbnNoaXBzOiBmaWxlLkhlYWRlcnMubWFwKChoZWFkZXJXcmFwcGVyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB4bWxEYXRhID0geG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGhlYWRlcldyYXBwZXIuVmlldywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGhlYWRlcldyYXBwZXIsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1lZGlhRGF0YXMgPSB0aGlzLmltYWdlUmVwbGFjZXIuZ2V0TWVkaWFEYXRhKHhtbERhdGEsIGZpbGUuTWVkaWEpO1xuICAgICAgICBtZWRpYURhdGFzLmZvckVhY2goKG1lZGlhRGF0YSwgaSkgPT4ge1xuICAgICAgICAgIGhlYWRlcldyYXBwZXIuUmVsYXRpb25zaGlwcy5jcmVhdGVSZWxhdGlvbnNoaXAoXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2ltYWdlXCIsXG4gICAgICAgICAgICBgbWVkaWEvJHttZWRpYURhdGEuZmlsZU5hbWV9YFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGhlYWRlcldyYXBwZXIuUmVsYXRpb25zaGlwcywge1xuICAgICAgICAgICAgICB2aWV3V3JhcHBlcjogaGVhZGVyV3JhcHBlcixcbiAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApLFxuICAgICAgICAgIHBhdGg6IGB3b3JkL19yZWxzL2hlYWRlciR7aW5kZXggKyAxfS54bWwucmVsc2BcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgRm9vdGVyUmVsYXRpb25zaGlwczogZmlsZS5Gb290ZXJzLm1hcCgoZm9vdGVyV3JhcHBlciwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgeG1sRGF0YSA9IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmb290ZXJXcmFwcGVyLlZpZXcsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmb290ZXJXcmFwcGVyLFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtZWRpYURhdGFzID0gdGhpcy5pbWFnZVJlcGxhY2VyLmdldE1lZGlhRGF0YSh4bWxEYXRhLCBmaWxlLk1lZGlhKTtcbiAgICAgICAgbWVkaWFEYXRhcy5mb3JFYWNoKChtZWRpYURhdGEsIGkpID0+IHtcbiAgICAgICAgICBmb290ZXJXcmFwcGVyLlJlbGF0aW9uc2hpcHMuY3JlYXRlUmVsYXRpb25zaGlwKFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9pbWFnZVwiLFxuICAgICAgICAgICAgYG1lZGlhLyR7bWVkaWFEYXRhLmZpbGVOYW1lfWBcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmb290ZXJXcmFwcGVyLlJlbGF0aW9uc2hpcHMsIHtcbiAgICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZvb3RlcldyYXBwZXIsXG4gICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKSxcbiAgICAgICAgICBwYXRoOiBgd29yZC9fcmVscy9mb290ZXIke2luZGV4ICsgMX0ueG1sLnJlbHNgXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIEhlYWRlcnM6IGZpbGUuSGVhZGVycy5tYXAoKGhlYWRlcldyYXBwZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXBYbWxEYXRhID0geG1sJDEoXG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGhlYWRlcldyYXBwZXIuVmlldywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGhlYWRlcldyYXBwZXIsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1lZGlhRGF0YXMgPSB0aGlzLmltYWdlUmVwbGFjZXIuZ2V0TWVkaWFEYXRhKHRlbXBYbWxEYXRhLCBmaWxlLk1lZGlhKTtcbiAgICAgICAgY29uc3QgeG1sRGF0YSA9IHRoaXMuaW1hZ2VSZXBsYWNlci5yZXBsYWNlKHRlbXBYbWxEYXRhLCBtZWRpYURhdGFzLCAwKTtcbiAgICAgICAgY29uc3QgcmVmZXJlbmVkWG1sRGF0YSA9IHRoaXMubnVtYmVyaW5nUmVwbGFjZXIucmVwbGFjZSh4bWxEYXRhLCBmaWxlLk51bWJlcmluZy5Db25jcmV0ZU51bWJlcmluZyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogcmVmZXJlbmVkWG1sRGF0YSxcbiAgICAgICAgICBwYXRoOiBgd29yZC9oZWFkZXIke2luZGV4ICsgMX0ueG1sYFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgICBGb290ZXJzOiBmaWxlLkZvb3RlcnMubWFwKChmb290ZXJXcmFwcGVyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wWG1sRGF0YSA9IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmb290ZXJXcmFwcGVyLlZpZXcsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmb290ZXJXcmFwcGVyLFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtZWRpYURhdGFzID0gdGhpcy5pbWFnZVJlcGxhY2VyLmdldE1lZGlhRGF0YSh0ZW1wWG1sRGF0YSwgZmlsZS5NZWRpYSk7XG4gICAgICAgIGNvbnN0IHhtbERhdGEgPSB0aGlzLmltYWdlUmVwbGFjZXIucmVwbGFjZSh0ZW1wWG1sRGF0YSwgbWVkaWFEYXRhcywgMCk7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5lZFhtbERhdGEgPSB0aGlzLm51bWJlcmluZ1JlcGxhY2VyLnJlcGxhY2UoeG1sRGF0YSwgZmlsZS5OdW1iZXJpbmcuQ29uY3JldGVOdW1iZXJpbmcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHJlZmVyZW5lZFhtbERhdGEsXG4gICAgICAgICAgcGF0aDogYHdvcmQvZm9vdGVyJHtpbmRleCArIDF9LnhtbGBcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgICAgQ29udGVudFR5cGVzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkNvbnRlbnRUeXBlcywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwiW0NvbnRlbnRfVHlwZXNdLnhtbFwiXG4gICAgICB9LFxuICAgICAgQ3VzdG9tUHJvcGVydGllczoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5DdXN0b21Qcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcGF0aDogXCJkb2NQcm9wcy9jdXN0b20ueG1sXCJcbiAgICAgIH0sXG4gICAgICBBcHBQcm9wZXJ0aWVzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkFwcFByb3BlcnRpZXMsIHtcbiAgICAgICAgICAgIHZpZXdXcmFwcGVyOiBmaWxlLkRvY3VtZW50LFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBzdGFuZGFsb25lOiBcInllc1wiLFxuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcImRvY1Byb3BzL2FwcC54bWxcIlxuICAgICAgfSxcbiAgICAgIEZvb3ROb3Rlczoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5Gb290Tm90ZXMuVmlldywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRm9vdE5vdGVzLFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcIndvcmQvZm9vdG5vdGVzLnhtbFwiXG4gICAgICB9LFxuICAgICAgRm9vdE5vdGVzUmVsYXRpb25zaGlwczoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5Gb290Tm90ZXMuUmVsYXRpb25zaGlwcywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRm9vdE5vdGVzLFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIHN0YWNrOiBbXVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGVudDogcHJldHRpZnksXG4gICAgICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICBlbmNvZGluZzogXCJVVEYtOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgICBwYXRoOiBcIndvcmQvX3JlbHMvZm9vdG5vdGVzLnhtbC5yZWxzXCJcbiAgICAgIH0sXG4gICAgICBTZXR0aW5nczoge1xuICAgICAgICBkYXRhOiB4bWwkMShcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlci5mb3JtYXQoZmlsZS5TZXR0aW5ncywge1xuICAgICAgICAgICAgdmlld1dyYXBwZXI6IGZpbGUuRG9jdW1lbnQsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgc3RhY2s6IFtdXG4gICAgICAgICAgfSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5kZW50OiBwcmV0dGlmeSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uOiB7XG4gICAgICAgICAgICAgIHN0YW5kYWxvbmU6IFwieWVzXCIsXG4gICAgICAgICAgICAgIGVuY29kaW5nOiBcIlVURi04XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHBhdGg6IFwid29yZC9zZXR0aW5ncy54bWxcIlxuICAgICAgfSxcbiAgICAgIENvbW1lbnRzOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkNvbW1lbnRzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcGF0aDogXCJ3b3JkL2NvbW1lbnRzLnhtbFwiXG4gICAgICB9LFxuICAgICAgRm9udFRhYmxlOiB7XG4gICAgICAgIGRhdGE6IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkZvbnRUYWJsZS5WaWV3LCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgc3RhbmRhbG9uZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcGF0aDogXCJ3b3JkL2ZvbnRUYWJsZS54bWxcIlxuICAgICAgfSxcbiAgICAgIEZvbnRUYWJsZVJlbGF0aW9uc2hpcHM6IHtcbiAgICAgICAgZGF0YTogKCgpID0+IHhtbCQxKFxuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdChmaWxlLkZvbnRUYWJsZS5SZWxhdGlvbnNoaXBzLCB7XG4gICAgICAgICAgICB2aWV3V3JhcHBlcjogZmlsZS5Eb2N1bWVudCxcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBzdGFjazogW11cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbmRlbnQ6IHByZXR0aWZ5LFxuICAgICAgICAgICAgZGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6IFwiVVRGLThcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKSkoKSxcbiAgICAgICAgcGF0aDogXCJ3b3JkL19yZWxzL2ZvbnRUYWJsZS54bWwucmVsc1wiXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuY29uc3QgUHJldHRpZnlUeXBlID0ge1xuICBOT05FOiBcIlwiLFxuICBXSVRIXzJfQkxBTktTOiBcIiAgXCIsXG4gIFdJVEhfNF9CTEFOS1M6IFwiICAgIFwiLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gIFdJVEhfVEFCOiBcIlx0XCJcbn07XG5jb25zdCBjb252ZXJ0UHJldHRpZnlUeXBlID0gKHByZXR0aWZ5KSA9PiBwcmV0dGlmeSA9PT0gdHJ1ZSA/IFByZXR0aWZ5VHlwZS5XSVRIXzJfQkxBTktTIDogcHJldHRpZnkgPT09IGZhbHNlID8gdm9pZCAwIDogcHJldHRpZnk7XG5jbGFzcyBQYWNrZXIge1xuICBzdGF0aWMgdG9TdHJpbmcoZmlsZSwgcHJldHRpZnkpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIGNvbnZlcnRQcmV0dGlmeVR5cGUocHJldHRpZnkpKTtcbiAgICAgIGNvbnN0IHppcERhdGEgPSB5aWVsZCB6aXAuZ2VuZXJhdGVBc3luYyh7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50XCIsXG4gICAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gemlwRGF0YTtcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgdG9CdWZmZXIoZmlsZSwgcHJldHRpZnkpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgemlwID0gdGhpcy5jb21waWxlci5jb21waWxlKGZpbGUsIGNvbnZlcnRQcmV0dGlmeVR5cGUocHJldHRpZnkpKTtcbiAgICAgIGNvbnN0IHppcERhdGEgPSB5aWVsZCB6aXAuZ2VuZXJhdGVBc3luYyh7XG4gICAgICAgIHR5cGU6IFwibm9kZWJ1ZmZlclwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxuICAgICAgICBjb21wcmVzc2lvbjogXCJERUZMQVRFXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHppcERhdGE7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHRvQmFzZTY0U3RyaW5nKGZpbGUsIHByZXR0aWZ5KSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IHppcCA9IHRoaXMuY29tcGlsZXIuY29tcGlsZShmaWxlLCBjb252ZXJ0UHJldHRpZnlUeXBlKHByZXR0aWZ5KSk7XG4gICAgICBjb25zdCB6aXBEYXRhID0geWllbGQgemlwLmdlbmVyYXRlQXN5bmMoe1xuICAgICAgICB0eXBlOiBcImJhc2U2NFwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxuICAgICAgICBjb21wcmVzc2lvbjogXCJERUZMQVRFXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHppcERhdGE7XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHRvQmxvYihmaWxlLCBwcmV0dGlmeSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCB6aXAgPSB0aGlzLmNvbXBpbGVyLmNvbXBpbGUoZmlsZSwgY29udmVydFByZXR0aWZ5VHlwZShwcmV0dGlmeSkpO1xuICAgICAgY29uc3QgemlwRGF0YSA9IHlpZWxkIHppcC5nZW5lcmF0ZUFzeW5jKHtcbiAgICAgICAgdHlwZTogXCJibG9iXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50XCIsXG4gICAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gemlwRGF0YTtcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgdG9TdHJlYW0oZmlsZSwgcHJldHRpZnkpIHtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgc3RyZWFtQnJvd3NlcmlmeS5TdHJlYW0oKTtcbiAgICBjb25zdCB6aXAgPSB0aGlzLmNvbXBpbGVyLmNvbXBpbGUoZmlsZSwgY29udmVydFByZXR0aWZ5VHlwZShwcmV0dGlmeSkpO1xuICAgIHppcC5nZW5lcmF0ZUFzeW5jKHtcbiAgICAgIHR5cGU6IFwibm9kZWJ1ZmZlclwiLFxuICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIixcbiAgICAgIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIlxuICAgIH0pLnRoZW4oKHopID0+IHtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZGF0YVwiLCB6KTtcbiAgICAgIHN0cmVhbS5lbWl0KFwiZW5kXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cbn1cbl9fcHVibGljRmllbGQoUGFja2VyLCBcImNvbXBpbGVyXCIsIG5ldyBDb21waWxlcigpKTtcbmNvbnN0IGZvcm1hdHRlciQxID0gbmV3IEZvcm1hdHRlcigpO1xuY29uc3QgdG9Kc29uID0gKHhtbERhdGEpID0+IHtcbiAgY29uc3QgeG1sT2JqID0gbGliLnhtbDJqcyh4bWxEYXRhLCB7IGNvbXBhY3Q6IGZhbHNlLCBjYXB0dXJlU3BhY2VzQmV0d2VlbkVsZW1lbnRzOiB0cnVlIH0pO1xuICByZXR1cm4geG1sT2JqO1xufTtcbmNvbnN0IGNyZWF0ZVRleHRFbGVtZW50Q29udGVudHMgPSAodGV4dCkgPT4ge1xuICB2YXIgX2E7XG4gIGNvbnN0IHRleHRKc29uID0gdG9Kc29uKHhtbCQxKGZvcm1hdHRlciQxLmZvcm1hdChuZXcgVGV4dCh7IHRleHQgfSkpKSk7XG4gIHJldHVybiAoX2EgPSB0ZXh0SnNvbi5lbGVtZW50c1swXS5lbGVtZW50cykgIT0gbnVsbCA/IF9hIDogW107XG59O1xuY29uc3QgcGF0Y2hTcGFjZUF0dHJpYnV0ZSA9IChlbGVtZW50MikgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgZWxlbWVudDIpLCB7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBcInhtbDpzcGFjZVwiOiBcInByZXNlcnZlXCJcbiAgfVxufSk7XG5jb25zdCBnZXRGaXJzdExldmVsRWxlbWVudHMgPSAocmVsYXRpb25zaGlwcywgaWQpID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgcmV0dXJuIChfYiA9IChfYSA9IHJlbGF0aW9uc2hpcHMuZWxlbWVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5maWx0ZXIoKGUpID0+IGUubmFtZSA9PT0gaWQpWzBdLmVsZW1lbnRzKSAhPSBudWxsID8gX2IgOiBbXTtcbn07XG5jb25zdCBSZXBsYWNlTW9kZSA9IHtcbiAgU1RBUlQ6IDAsXG4gIE1JRERMRTogMSxcbiAgRU5EOiAyXG59O1xuY29uc3QgcmVwbGFjZVRva2VuSW5QYXJhZ3JhcGhFbGVtZW50ID0gKHtcbiAgcGFyYWdyYXBoRWxlbWVudCxcbiAgcmVuZGVyZWRQYXJhZ3JhcGgsXG4gIG9yaWdpbmFsVGV4dCxcbiAgcmVwbGFjZW1lbnRUZXh0XG59KSA9PiB7XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSByZW5kZXJlZFBhcmFncmFwaC50ZXh0LmluZGV4T2Yob3JpZ2luYWxUZXh0KTtcbiAgY29uc3QgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgb3JpZ2luYWxUZXh0Lmxlbmd0aCAtIDE7XG4gIGxldCByZXBsYWNlTW9kZSA9IFJlcGxhY2VNb2RlLlNUQVJUO1xuICBmb3IgKGNvbnN0IHJ1biBvZiByZW5kZXJlZFBhcmFncmFwaC5ydW5zKSB7XG4gICAgZm9yIChjb25zdCB7IHRleHQsIGluZGV4LCBzdGFydCwgZW5kIH0gb2YgcnVuLnBhcnRzKSB7XG4gICAgICBzd2l0Y2ggKHJlcGxhY2VNb2RlKSB7XG4gICAgICAgIGNhc2UgUmVwbGFjZU1vZGUuU1RBUlQ6XG4gICAgICAgICAgaWYgKHN0YXJ0SW5kZXggPj0gc3RhcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFN0YXJ0SW5kZXggPSBzdGFydEluZGV4IC0gc3RhcnQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRFbmRJbmRleCA9IE1hdGgubWluKGVuZEluZGV4LCBlbmQpIC0gc3RhcnQ7XG4gICAgICAgICAgICBjb25zdCBwYXJ0VG9SZXBsYWNlID0gcnVuLnRleHQuc3Vic3RyaW5nKG9mZnNldFN0YXJ0SW5kZXgsIG9mZnNldEVuZEluZGV4ICsgMSk7XG4gICAgICAgICAgICBpZiAocGFydFRvUmVwbGFjZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpcnN0UGFydCA9IHRleHQucmVwbGFjZShwYXJ0VG9SZXBsYWNlLCByZXBsYWNlbWVudFRleHQpO1xuICAgICAgICAgICAgcGF0Y2hUZXh0RWxlbWVudChwYXJhZ3JhcGhFbGVtZW50LmVsZW1lbnRzW3J1bi5pbmRleF0uZWxlbWVudHNbaW5kZXhdLCBmaXJzdFBhcnQpO1xuICAgICAgICAgICAgcmVwbGFjZU1vZGUgPSBSZXBsYWNlTW9kZS5NSURETEU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVwbGFjZU1vZGUuTUlERExFOlxuICAgICAgICAgIGlmIChlbmRJbmRleCA8PSBlbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RQYXJ0ID0gdGV4dC5zdWJzdHJpbmcoZW5kSW5kZXggLSBzdGFydCArIDEpO1xuICAgICAgICAgICAgcGF0Y2hUZXh0RWxlbWVudChwYXJhZ3JhcGhFbGVtZW50LmVsZW1lbnRzW3J1bi5pbmRleF0uZWxlbWVudHNbaW5kZXhdLCBsYXN0UGFydCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RWxlbWVudDIgPSBwYXJhZ3JhcGhFbGVtZW50LmVsZW1lbnRzW3J1bi5pbmRleF0uZWxlbWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5lbGVtZW50c1tydW4uaW5kZXhdLmVsZW1lbnRzW2luZGV4XSA9IHBhdGNoU3BhY2VBdHRyaWJ1dGUoY3VycmVudEVsZW1lbnQyKTtcbiAgICAgICAgICAgIHJlcGxhY2VNb2RlID0gUmVwbGFjZU1vZGUuRU5EO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRjaFRleHRFbGVtZW50KHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHNbcnVuLmluZGV4XS5lbGVtZW50c1tpbmRleF0sIFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcmFncmFwaEVsZW1lbnQ7XG59O1xuY29uc3QgcGF0Y2hUZXh0RWxlbWVudCA9IChlbGVtZW50MiwgdGV4dCkgPT4ge1xuICBlbGVtZW50Mi5lbGVtZW50cyA9IGNyZWF0ZVRleHRFbGVtZW50Q29udGVudHModGV4dCk7XG4gIHJldHVybiBlbGVtZW50Mjtcbn07XG5jb25zdCBmaW5kUnVuRWxlbWVudEluZGV4V2l0aFRva2VuID0gKHBhcmFncmFwaEVsZW1lbnQsIHRva2VuKSA9PiB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAoKF9hID0gcGFyYWdyYXBoRWxlbWVudC5lbGVtZW50cykgIT0gbnVsbCA/IF9hIDogW10pLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZWxlbWVudDIgPSBwYXJhZ3JhcGhFbGVtZW50LmVsZW1lbnRzW2ldO1xuICAgIGlmIChlbGVtZW50Mi50eXBlID09PSBcImVsZW1lbnRcIiAmJiBlbGVtZW50Mi5uYW1lID09PSBcInc6clwiKSB7XG4gICAgICBjb25zdCB0ZXh0RWxlbWVudCA9ICgoX2IgPSBlbGVtZW50Mi5lbGVtZW50cykgIT0gbnVsbCA/IF9iIDogW10pLmZpbHRlcigoZSkgPT4gZS50eXBlID09PSBcImVsZW1lbnRcIiAmJiBlLm5hbWUgPT09IFwidzp0XCIpO1xuICAgICAgZm9yIChjb25zdCB0ZXh0IG9mIHRleHRFbGVtZW50KSB7XG4gICAgICAgIGlmICghKChfYyA9IHRleHQuZWxlbWVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfY1swXSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKF9kID0gdGV4dC5lbGVtZW50c1swXS50ZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gbm90IGZvdW5kXCIpO1xufTtcbmNvbnN0IHNwbGl0UnVuRWxlbWVudCA9IChydW5FbGVtZW50LCB0b2tlbikgPT4ge1xuICB2YXIgX2EsIF9iO1xuICBsZXQgc3BsaXRJbmRleCA9IDA7XG4gIGNvbnN0IHNwbGl0RWxlbWVudHMgPSAoX2IgPSAoX2EgPSBydW5FbGVtZW50LmVsZW1lbnRzKSA9PSBudWxsID8gdm9pZCAwIDogX2EubWFwKChlLCBpKSA9PiB7XG4gICAgdmFyIF9hMiwgX2IyO1xuICAgIGlmIChlLnR5cGUgPT09IFwiZWxlbWVudFwiICYmIGUubmFtZSA9PT0gXCJ3OnRcIikge1xuICAgICAgY29uc3QgdGV4dCA9IChfYjIgPSAoX2EyID0gZS5lbGVtZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMlswXS50ZXh0KSAhPSBudWxsID8gX2IyIDogXCJcIjtcbiAgICAgIGNvbnN0IHNwbGl0VGV4dCA9IHRleHQuc3BsaXQodG9rZW4pO1xuICAgICAgY29uc3QgbmV3RWxlbWVudHMgPSBzcGxpdFRleHQubWFwKCh0KSA9PiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBlKSwgcGF0Y2hTcGFjZUF0dHJpYnV0ZShlKSksIHtcbiAgICAgICAgZWxlbWVudHM6IGNyZWF0ZVRleHRFbGVtZW50Q29udGVudHModClcbiAgICAgIH0pKTtcbiAgICAgIHNwbGl0SW5kZXggPSBpO1xuICAgICAgcmV0dXJuIG5ld0VsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9XG4gIH0pLmZsYXQoKSkgIT0gbnVsbCA/IF9iIDogW107XG4gIGNvbnN0IGxlZnRSdW5FbGVtZW50ID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShydW5FbGVtZW50KSkpLCB7XG4gICAgZWxlbWVudHM6IHNwbGl0RWxlbWVudHMuc2xpY2UoMCwgc3BsaXRJbmRleCArIDEpXG4gIH0pO1xuICBjb25zdCByaWdodFJ1bkVsZW1lbnQgPSBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJ1bkVsZW1lbnQpKSksIHtcbiAgICBlbGVtZW50czogc3BsaXRFbGVtZW50cy5zbGljZShzcGxpdEluZGV4ICsgMSlcbiAgfSk7XG4gIHJldHVybiB7IGxlZnQ6IGxlZnRSdW5FbGVtZW50LCByaWdodDogcmlnaHRSdW5FbGVtZW50IH07XG59O1xuY29uc3QgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlcigpO1xuY29uc3QgU1BMSVRfVE9LRU4gPSBcIsm1XCI7XG5jb25zdCByZXBsYWNlciA9IChqc29uLCBwYXRjaCwgcGF0Y2hUZXh0LCByZW5kZXJlZFBhcmFncmFwaHMsIGNvbnRleHQsIGtlZXBPcmlnaW5hbFN0eWxlcyA9IGZhbHNlKSA9PiB7XG4gIGZvciAoY29uc3QgcmVuZGVyZWRQYXJhZ3JhcGggb2YgcmVuZGVyZWRQYXJhZ3JhcGhzKSB7XG4gICAgY29uc3QgdGV4dEpzb24gPSBwYXRjaC5jaGlsZHJlbi5tYXAoKGMpID0+IHRvSnNvbih4bWwkMShmb3JtYXR0ZXIuZm9ybWF0KGMsIGNvbnRleHQpKSkpLm1hcCgoYykgPT4gYy5lbGVtZW50c1swXSk7XG4gICAgc3dpdGNoIChwYXRjaC50eXBlKSB7XG4gICAgICBjYXNlIFBhdGNoVHlwZS5ET0NVTUVOVDoge1xuICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZ29Ub1BhcmVudEVsZW1lbnRGcm9tUGF0aChqc29uLCByZW5kZXJlZFBhcmFncmFwaC5wYXRoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudEluZGV4ID0gZ2V0TGFzdEVsZW1lbnRJbmRleEZyb21QYXRoKHJlbmRlcmVkUGFyYWdyYXBoLnBhdGgpO1xuICAgICAgICBwYXJlbnRFbGVtZW50LmVsZW1lbnRzLnNwbGljZShlbGVtZW50SW5kZXgsIDEsIC4uLnRleHRKc29uKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFBhdGNoVHlwZS5QQVJBR1JBUEg6XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IHBhcmFncmFwaEVsZW1lbnQgPSBnb1RvRWxlbWVudEZyb21QYXRoKGpzb24sIHJlbmRlcmVkUGFyYWdyYXBoLnBhdGgpO1xuICAgICAgICByZXBsYWNlVG9rZW5JblBhcmFncmFwaEVsZW1lbnQoe1xuICAgICAgICAgIHBhcmFncmFwaEVsZW1lbnQsXG4gICAgICAgICAgcmVuZGVyZWRQYXJhZ3JhcGgsXG4gICAgICAgICAgb3JpZ2luYWxUZXh0OiBwYXRjaFRleHQsXG4gICAgICAgICAgcmVwbGFjZW1lbnRUZXh0OiBTUExJVF9UT0tFTlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBmaW5kUnVuRWxlbWVudEluZGV4V2l0aFRva2VuKHBhcmFncmFwaEVsZW1lbnQsIFNQTElUX1RPS0VOKTtcbiAgICAgICAgY29uc3QgcnVuRWxlbWVudFRvQmVSZXBsYWNlZCA9IHBhcmFncmFwaEVsZW1lbnQuZWxlbWVudHNbaW5kZXhdO1xuICAgICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSBzcGxpdFJ1bkVsZW1lbnQocnVuRWxlbWVudFRvQmVSZXBsYWNlZCwgU1BMSVRfVE9LRU4pO1xuICAgICAgICBsZXQgbmV3UnVuRWxlbWVudHMgPSB0ZXh0SnNvbjtcbiAgICAgICAgbGV0IHBhdGNoZWRSaWdodEVsZW1lbnQgPSByaWdodDtcbiAgICAgICAgaWYgKGtlZXBPcmlnaW5hbFN0eWxlcykge1xuICAgICAgICAgIGNvbnN0IHJ1bkVsZW1lbnROb25UZXh0dWFsRWxlbWVudHMgPSBydW5FbGVtZW50VG9CZVJlcGxhY2VkLmVsZW1lbnRzLmZpbHRlcihcbiAgICAgICAgICAgIChlKSA9PiBlLnR5cGUgPT09IFwiZWxlbWVudFwiICYmIGUubmFtZSAhPT0gXCJ3OnRcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgbmV3UnVuRWxlbWVudHMgPSB0ZXh0SnNvbi5tYXAoKGUpID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGUpLCB7XG4gICAgICAgICAgICBlbGVtZW50czogWy4uLnJ1bkVsZW1lbnROb25UZXh0dWFsRWxlbWVudHMsIC4uLmUuZWxlbWVudHNdXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHBhdGNoZWRSaWdodEVsZW1lbnQgPSBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCByaWdodCksIHtcbiAgICAgICAgICAgIGVsZW1lbnRzOiBbLi4ucnVuRWxlbWVudE5vblRleHR1YWxFbGVtZW50cywgLi4ucmlnaHQuZWxlbWVudHNdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYWdyYXBoRWxlbWVudC5lbGVtZW50cy5zcGxpY2UoaW5kZXgsIDEsIGxlZnQsIC4uLm5ld1J1bkVsZW1lbnRzLCBwYXRjaGVkUmlnaHRFbGVtZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBqc29uO1xufTtcbmNvbnN0IGdvVG9FbGVtZW50RnJvbVBhdGggPSAoanNvbiwgcGF0aCkgPT4ge1xuICBsZXQgZWxlbWVudDIgPSBqc29uO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbmRleCA9IHBhdGhbaV07XG4gICAgY29uc3QgbmV4dEVsZW1lbnRzID0gZWxlbWVudDIuZWxlbWVudHM7XG4gICAgaWYgKCFuZXh0RWxlbWVudHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGVsZW1lbnRcIik7XG4gICAgfVxuICAgIGVsZW1lbnQyID0gbmV4dEVsZW1lbnRzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDI7XG59O1xuY29uc3QgZ29Ub1BhcmVudEVsZW1lbnRGcm9tUGF0aCA9IChqc29uLCBwYXRoKSA9PiBnb1RvRWxlbWVudEZyb21QYXRoKGpzb24sIHBhdGguc2xpY2UoMCwgcGF0aC5sZW5ndGggLSAxKSk7XG5jb25zdCBnZXRMYXN0RWxlbWVudEluZGV4RnJvbVBhdGggPSAocGF0aCkgPT4gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuY29uc3QgcmVuZGVyUGFyYWdyYXBoTm9kZSA9IChub2RlKSA9PiB7XG4gIGlmIChub2RlLmVsZW1lbnQubmFtZSAhPT0gXCJ3OnBcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBub2RlIHR5cGU6ICR7bm9kZS5lbGVtZW50Lm5hbWV9YCk7XG4gIH1cbiAgaWYgKCFub2RlLmVsZW1lbnQuZWxlbWVudHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogXCJcIixcbiAgICAgIHJ1bnM6IFtdLFxuICAgICAgaW5kZXg6IC0xLFxuICAgICAgcGF0aDogW11cbiAgICB9O1xuICB9XG4gIGxldCBjdXJyZW50UnVuU3RyaW5nTGVuZ3RoID0gMDtcbiAgY29uc3QgcnVucyA9IG5vZGUuZWxlbWVudC5lbGVtZW50cy5tYXAoKGVsZW1lbnQyLCBpKSA9PiAoeyBlbGVtZW50OiBlbGVtZW50MiwgaSB9KSkuZmlsdGVyKCh7IGVsZW1lbnQ6IGVsZW1lbnQyIH0pID0+IGVsZW1lbnQyLm5hbWUgPT09IFwidzpyXCIpLm1hcCgoeyBlbGVtZW50OiBlbGVtZW50MiwgaSB9KSA9PiB7XG4gICAgY29uc3QgcmVuZGVyZWRSdW5Ob2RlID0gcmVuZGVyUnVuTm9kZShlbGVtZW50MiwgaSwgY3VycmVudFJ1blN0cmluZ0xlbmd0aCk7XG4gICAgY3VycmVudFJ1blN0cmluZ0xlbmd0aCArPSByZW5kZXJlZFJ1bk5vZGUudGV4dC5sZW5ndGg7XG4gICAgcmV0dXJuIHJlbmRlcmVkUnVuTm9kZTtcbiAgfSkuZmlsdGVyKChlKSA9PiAhIWUpLm1hcCgoZSkgPT4gZSk7XG4gIGNvbnN0IHRleHQgPSBydW5zLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyLnRleHQsIFwiXCIpO1xuICByZXR1cm4ge1xuICAgIHRleHQsXG4gICAgcnVucyxcbiAgICBpbmRleDogbm9kZS5pbmRleCxcbiAgICBwYXRoOiBidWlsZE5vZGVQYXRoKG5vZGUpXG4gIH07XG59O1xuY29uc3QgcmVuZGVyUnVuTm9kZSA9IChub2RlLCBpbmRleCwgY3VycmVudFJ1blN0cmluZ0luZGV4KSA9PiB7XG4gIGlmICghbm9kZS5lbGVtZW50cykge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBcIlwiLFxuICAgICAgcGFydHM6IFtdLFxuICAgICAgaW5kZXg6IC0xLFxuICAgICAgc3RhcnQ6IGN1cnJlbnRSdW5TdHJpbmdJbmRleCxcbiAgICAgIGVuZDogY3VycmVudFJ1blN0cmluZ0luZGV4XG4gICAgfTtcbiAgfVxuICBsZXQgY3VycmVudFRleHRTdHJpbmdJbmRleCA9IGN1cnJlbnRSdW5TdHJpbmdJbmRleDtcbiAgY29uc3QgcGFydHMgPSBub2RlLmVsZW1lbnRzLm1hcChcbiAgICAoZWxlbWVudDIsIGkpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICByZXR1cm4gZWxlbWVudDIubmFtZSA9PT0gXCJ3OnRcIiAmJiBlbGVtZW50Mi5lbGVtZW50cyAmJiBlbGVtZW50Mi5lbGVtZW50cy5sZW5ndGggPiAwID8ge1xuICAgICAgICB0ZXh0OiAoX2IgPSAoX2EgPSBlbGVtZW50Mi5lbGVtZW50c1swXS50ZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX2EudG9TdHJpbmcoKSkgIT0gbnVsbCA/IF9iIDogXCJcIixcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHN0YXJ0OiBjdXJyZW50VGV4dFN0cmluZ0luZGV4LFxuICAgICAgICBlbmQ6ICgoKSA9PiB7XG4gICAgICAgICAgdmFyIF9hMiwgX2IyO1xuICAgICAgICAgIGN1cnJlbnRUZXh0U3RyaW5nSW5kZXggKz0gKChfYjIgPSAoX2EyID0gZWxlbWVudDIuZWxlbWVudHNbMF0udGV4dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi50b1N0cmluZygpKSAhPSBudWxsID8gX2IyIDogXCJcIikubGVuZ3RoIC0gMTtcbiAgICAgICAgICByZXR1cm4gY3VycmVudFRleHRTdHJpbmdJbmRleDtcbiAgICAgICAgfSkoKVxuICAgICAgfSA6IHZvaWQgMDtcbiAgICB9XG4gICkuZmlsdGVyKChlKSA9PiAhIWUpLm1hcCgoZSkgPT4gZSk7XG4gIGNvbnN0IHRleHQgPSBwYXJ0cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci50ZXh0LCBcIlwiKTtcbiAgcmV0dXJuIHtcbiAgICB0ZXh0LFxuICAgIHBhcnRzLFxuICAgIGluZGV4LFxuICAgIHN0YXJ0OiBjdXJyZW50UnVuU3RyaW5nSW5kZXgsXG4gICAgZW5kOiBjdXJyZW50VGV4dFN0cmluZ0luZGV4XG4gIH07XG59O1xuY29uc3QgYnVpbGROb2RlUGF0aCA9IChub2RlKSA9PiBub2RlLnBhcmVudCA/IFsuLi5idWlsZE5vZGVQYXRoKG5vZGUucGFyZW50KSwgbm9kZS5pbmRleF0gOiBbbm9kZS5pbmRleF07XG5jb25zdCBlbGVtZW50c1RvV3JhcHBlciA9ICh3cmFwcGVyKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIHJldHVybiAoX2IgPSAoX2EgPSB3cmFwcGVyLmVsZW1lbnQuZWxlbWVudHMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5tYXAoKGUsIGkpID0+ICh7XG4gICAgZWxlbWVudDogZSxcbiAgICBpbmRleDogaSxcbiAgICBwYXJlbnQ6IHdyYXBwZXJcbiAgfSkpKSAhPSBudWxsID8gX2IgOiBbXTtcbn07XG5jb25zdCBmaW5kTG9jYXRpb25PZlRleHQgPSAobm9kZSwgdGV4dCkgPT4ge1xuICBsZXQgcmVuZGVyZWRQYXJhZ3JhcGhzID0gW107XG4gIGNvbnN0IHF1ZXVlMiA9IFtcbiAgICAuLi5lbGVtZW50c1RvV3JhcHBlcih7XG4gICAgICBlbGVtZW50OiBub2RlLFxuICAgICAgaW5kZXg6IDAsXG4gICAgICBwYXJlbnQ6IHZvaWQgMFxuICAgIH0pXG4gIF07XG4gIGxldCBjdXJyZW50Tm9kZTtcbiAgd2hpbGUgKHF1ZXVlMi5sZW5ndGggPiAwKSB7XG4gICAgY3VycmVudE5vZGUgPSBxdWV1ZTIuc2hpZnQoKTtcbiAgICBpZiAoY3VycmVudE5vZGUuZWxlbWVudC5uYW1lID09PSBcInc6cFwiKSB7XG4gICAgICByZW5kZXJlZFBhcmFncmFwaHMgPSBbLi4ucmVuZGVyZWRQYXJhZ3JhcGhzLCByZW5kZXJQYXJhZ3JhcGhOb2RlKGN1cnJlbnROb2RlKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXVlMi5wdXNoKC4uLmVsZW1lbnRzVG9XcmFwcGVyKGN1cnJlbnROb2RlKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJlZFBhcmFncmFwaHMuZmlsdGVyKChwKSA9PiBwLnRleHQuaW5jbHVkZXModGV4dCkpO1xufTtcbmNvbnN0IGdldElkRnJvbVJlbGF0aW9uc2hpcElkID0gKHJlbGF0aW9uc2hpcElkKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IHBhcnNlSW50KHJlbGF0aW9uc2hpcElkLnN1YnN0cmluZygzKSwgMTApO1xuICByZXR1cm4gaXNOYU4ob3V0cHV0KSA/IDAgOiBvdXRwdXQ7XG59O1xuY29uc3QgZ2V0TmV4dFJlbGF0aW9uc2hpcEluZGV4ID0gKHJlbGF0aW9uc2hpcHMpID0+IHtcbiAgY29uc3QgcmVsYXRpb25zaGlwRWxlbWVudHMgPSBnZXRGaXJzdExldmVsRWxlbWVudHMocmVsYXRpb25zaGlwcywgXCJSZWxhdGlvbnNoaXBzXCIpO1xuICByZXR1cm4gcmVsYXRpb25zaGlwRWxlbWVudHMubWFwKChlKSA9PiB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgcmV0dXJuIGdldElkRnJvbVJlbGF0aW9uc2hpcElkKChfYyA9IChfYiA9IChfYSA9IGUuYXR0cmlidXRlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLklkKSA9PSBudWxsID8gdm9pZCAwIDogX2IudG9TdHJpbmcoKSkgIT0gbnVsbCA/IF9jIDogXCJcIik7XG4gIH0pLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBNYXRoLm1heChhY2MsIGN1cnIpLCAwKSArIDE7XG59O1xuY29uc3QgYXBwZW5kUmVsYXRpb25zaGlwID0gKHJlbGF0aW9uc2hpcHMsIGlkLCB0eXBlLCB0YXJnZXQsIHRhcmdldE1vZGUpID0+IHtcbiAgY29uc3QgcmVsYXRpb25zaGlwRWxlbWVudHMgPSBnZXRGaXJzdExldmVsRWxlbWVudHMocmVsYXRpb25zaGlwcywgXCJSZWxhdGlvbnNoaXBzXCIpO1xuICByZWxhdGlvbnNoaXBFbGVtZW50cy5wdXNoKHtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBJZDogYHJJZCR7aWR9YCxcbiAgICAgIFR5cGU6IHR5cGUsXG4gICAgICBUYXJnZXQ6IHRhcmdldCxcbiAgICAgIFRhcmdldE1vZGU6IHRhcmdldE1vZGVcbiAgICB9LFxuICAgIG5hbWU6IFwiUmVsYXRpb25zaGlwXCIsXG4gICAgdHlwZTogXCJlbGVtZW50XCJcbiAgfSk7XG4gIHJldHVybiByZWxhdGlvbnNoaXBFbGVtZW50cztcbn07XG5jb25zdCBhcHBlbmRDb250ZW50VHlwZSA9IChlbGVtZW50MiwgY29udGVudFR5cGUsIGV4dGVuc2lvbikgPT4ge1xuICBjb25zdCByZWxhdGlvbnNoaXBFbGVtZW50cyA9IGdldEZpcnN0TGV2ZWxFbGVtZW50cyhlbGVtZW50MiwgXCJUeXBlc1wiKTtcbiAgY29uc3QgZXhpc3QgPSByZWxhdGlvbnNoaXBFbGVtZW50cy5zb21lKFxuICAgIChlbCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIHJldHVybiBlbC50eXBlID09PSBcImVsZW1lbnRcIiAmJiBlbC5uYW1lID09PSBcIkRlZmF1bHRcIiAmJiAoKF9hID0gZWwgPT0gbnVsbCA/IHZvaWQgMCA6IGVsLmF0dHJpYnV0ZXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5Db250ZW50VHlwZSkgPT09IGNvbnRlbnRUeXBlICYmICgoX2IgPSBlbCA9PSBudWxsID8gdm9pZCAwIDogZWwuYXR0cmlidXRlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLkV4dGVuc2lvbikgPT09IGV4dGVuc2lvbjtcbiAgICB9XG4gICk7XG4gIGlmIChleGlzdCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZWxhdGlvbnNoaXBFbGVtZW50cy5wdXNoKHtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBDb250ZW50VHlwZTogY29udGVudFR5cGUsXG4gICAgICBFeHRlbnNpb246IGV4dGVuc2lvblxuICAgIH0sXG4gICAgbmFtZTogXCJEZWZhdWx0XCIsXG4gICAgdHlwZTogXCJlbGVtZW50XCJcbiAgfSk7XG59O1xuY29uc3QgUGF0Y2hUeXBlID0ge1xuICBET0NVTUVOVDogXCJmaWxlXCIsXG4gIFBBUkFHUkFQSDogXCJwYXJhZ3JhcGhcIlxufTtcbmNvbnN0IGltYWdlUmVwbGFjZXIgPSBuZXcgSW1hZ2VSZXBsYWNlcigpO1xuY29uc3QgcGF0Y2hEb2N1bWVudCA9IChkYXRhLCBvcHRpb25zMikgPT4gX19hc3luYyhleHBvcnRzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCB6aXBDb250ZW50ID0geWllbGQgSlNaaXAubG9hZEFzeW5jKGRhdGEpO1xuICBjb25zdCBjb250ZXh0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGZpbGUgPSB7XG4gICAgTWVkaWE6IG5ldyBNZWRpYSgpXG4gIH07XG4gIGNvbnN0IG1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGltYWdlUmVsYXRpb25zaGlwQWRkaXRpb25zID0gW107XG4gIGNvbnN0IGh5cGVybGlua1JlbGF0aW9uc2hpcEFkZGl0aW9ucyA9IFtdO1xuICBsZXQgaGFzTWVkaWEgPSBmYWxzZTtcbiAgY29uc3QgYmluYXJ5Q29udGVudE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHppcENvbnRlbnQuZmlsZXMpKSB7XG4gICAgaWYgKCFrZXkuZW5kc1dpdGgoXCIueG1sXCIpICYmICFrZXkuZW5kc1dpdGgoXCIucmVsc1wiKSkge1xuICAgICAgYmluYXJ5Q29udGVudE1hcC5zZXQoa2V5LCB5aWVsZCB2YWx1ZS5hc3luYyhcInVpbnQ4YXJyYXlcIikpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGpzb24gPSB0b0pzb24oeWllbGQgdmFsdWUuYXN5bmMoXCJ0ZXh0XCIpKTtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJ3b3JkL1wiKSAmJiAha2V5LmVuZHNXaXRoKFwiLnhtbC5yZWxzXCIpKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICBmaWxlLFxuICAgICAgICB2aWV3V3JhcHBlcjoge1xuICAgICAgICAgIFJlbGF0aW9uc2hpcHM6IHtcbiAgICAgICAgICAgIGNyZWF0ZVJlbGF0aW9uc2hpcDogKGxpbmtJZCwgXywgdGFyZ2V0LCBfXykgPT4ge1xuICAgICAgICAgICAgICBoeXBlcmxpbmtSZWxhdGlvbnNoaXBBZGRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGh5cGVybGluazoge1xuICAgICAgICAgICAgICAgICAgaWQ6IGxpbmtJZCxcbiAgICAgICAgICAgICAgICAgIGxpbms6IHRhcmdldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGFjazogW11cbiAgICAgIH07XG4gICAgICBjb250ZXh0cy5zZXQoa2V5LCBjb250ZXh0KTtcbiAgICAgIGZvciAoY29uc3QgW3BhdGNoS2V5LCBwYXRjaFZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zMi5wYXRjaGVzKSkge1xuICAgICAgICBjb25zdCBwYXRjaFRleHQgPSBge3ske3BhdGNoS2V5fX19YDtcbiAgICAgICAgY29uc3QgcmVuZGVyZWRQYXJhZ3JhcGhzID0gZmluZExvY2F0aW9uT2ZUZXh0KGpzb24sIHBhdGNoVGV4dCk7XG4gICAgICAgIHJlcGxhY2VyKFxuICAgICAgICAgIGpzb24sXG4gICAgICAgICAgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcGF0Y2hWYWx1ZSksIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBwYXRjaFZhbHVlLmNoaWxkcmVuLm1hcCgoZWxlbWVudDIpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnQyIGluc3RhbmNlb2YgRXh0ZXJuYWxIeXBlcmxpbmspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25jcmV0ZUh5cGVybGluayA9IG5ldyBDb25jcmV0ZUh5cGVybGluayhlbGVtZW50Mi5vcHRpb25zLmNoaWxkcmVuLCB1bmlxdWVJZCgpKTtcbiAgICAgICAgICAgICAgICBoeXBlcmxpbmtSZWxhdGlvbnNoaXBBZGRpdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICBoeXBlcmxpbms6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbmNyZXRlSHlwZXJsaW5rLmxpbmtJZCxcbiAgICAgICAgICAgICAgICAgICAgbGluazogZWxlbWVudDIub3B0aW9ucy5saW5rXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmNyZXRlSHlwZXJsaW5rO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50MjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgfSksXG4gICAgICAgICAgcGF0Y2hUZXh0LFxuICAgICAgICAgIHJlbmRlcmVkUGFyYWdyYXBocyxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wdGlvbnMyLmtlZXBPcmlnaW5hbFN0eWxlc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgbWVkaWFEYXRhcyA9IGltYWdlUmVwbGFjZXIuZ2V0TWVkaWFEYXRhKEpTT04uc3RyaW5naWZ5KGpzb24pLCBjb250ZXh0LmZpbGUuTWVkaWEpO1xuICAgICAgaWYgKG1lZGlhRGF0YXMubGVuZ3RoID4gMCkge1xuICAgICAgICBoYXNNZWRpYSA9IHRydWU7XG4gICAgICAgIGltYWdlUmVsYXRpb25zaGlwQWRkaXRpb25zLnB1c2goe1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBtZWRpYURhdGFzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXAuc2V0KGtleSwganNvbik7XG4gIH1cbiAgZm9yIChjb25zdCB7IGtleSwgbWVkaWFEYXRhcyB9IG9mIGltYWdlUmVsYXRpb25zaGlwQWRkaXRpb25zKSB7XG4gICAgY29uc3QgcmVsYXRpb25zaGlwS2V5ID0gYHdvcmQvX3JlbHMvJHtrZXkuc3BsaXQoXCIvXCIpLnBvcCgpfS5yZWxzYDtcbiAgICBjb25zdCByZWxhdGlvbnNoaXBzSnNvbiA9IChfYSA9IG1hcC5nZXQocmVsYXRpb25zaGlwS2V5KSkgIT0gbnVsbCA/IF9hIDogY3JlYXRlUmVsYXRpb25zaGlwRmlsZSgpO1xuICAgIG1hcC5zZXQocmVsYXRpb25zaGlwS2V5LCByZWxhdGlvbnNoaXBzSnNvbik7XG4gICAgY29uc3QgaW5kZXggPSBnZXROZXh0UmVsYXRpb25zaGlwSW5kZXgocmVsYXRpb25zaGlwc0pzb24pO1xuICAgIGNvbnN0IG5ld0pzb24gPSBpbWFnZVJlcGxhY2VyLnJlcGxhY2UoSlNPTi5zdHJpbmdpZnkobWFwLmdldChrZXkpKSwgbWVkaWFEYXRhcywgaW5kZXgpO1xuICAgIG1hcC5zZXQoa2V5LCBKU09OLnBhcnNlKG5ld0pzb24pKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lZGlhRGF0YXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHsgZmlsZU5hbWUgfSA9IG1lZGlhRGF0YXNbaV07XG4gICAgICBhcHBlbmRSZWxhdGlvbnNoaXAoXG4gICAgICAgIHJlbGF0aW9uc2hpcHNKc29uLFxuICAgICAgICBpbmRleCArIGksXG4gICAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9pbWFnZVwiLFxuICAgICAgICBgbWVkaWEvJHtmaWxlTmFtZX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHsga2V5LCBoeXBlcmxpbmsgfSBvZiBoeXBlcmxpbmtSZWxhdGlvbnNoaXBBZGRpdGlvbnMpIHtcbiAgICBjb25zdCByZWxhdGlvbnNoaXBLZXkgPSBgd29yZC9fcmVscy8ke2tleS5zcGxpdChcIi9cIikucG9wKCl9LnJlbHNgO1xuICAgIGNvbnN0IHJlbGF0aW9uc2hpcHNKc29uID0gKF9iID0gbWFwLmdldChyZWxhdGlvbnNoaXBLZXkpKSAhPSBudWxsID8gX2IgOiBjcmVhdGVSZWxhdGlvbnNoaXBGaWxlKCk7XG4gICAgbWFwLnNldChyZWxhdGlvbnNoaXBLZXksIHJlbGF0aW9uc2hpcHNKc29uKTtcbiAgICBhcHBlbmRSZWxhdGlvbnNoaXAoXG4gICAgICByZWxhdGlvbnNoaXBzSnNvbixcbiAgICAgIGh5cGVybGluay5pZCxcbiAgICAgIFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9oeXBlcmxpbmtcIixcbiAgICAgIGh5cGVybGluay5saW5rLFxuICAgICAgVGFyZ2V0TW9kZVR5cGUuRVhURVJOQUxcbiAgICApO1xuICB9XG4gIGlmIChoYXNNZWRpYSkge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlc0pzb24gPSBtYXAuZ2V0KFwiW0NvbnRlbnRfVHlwZXNdLnhtbFwiKTtcbiAgICBpZiAoIWNvbnRlbnRUeXBlc0pzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGNvbnRlbnQgdHlwZXMgZmlsZVwiKTtcbiAgICB9XG4gICAgYXBwZW5kQ29udGVudFR5cGUoY29udGVudFR5cGVzSnNvbiwgXCJpbWFnZS9wbmdcIiwgXCJwbmdcIik7XG4gICAgYXBwZW5kQ29udGVudFR5cGUoY29udGVudFR5cGVzSnNvbiwgXCJpbWFnZS9qcGVnXCIsIFwianBlZ1wiKTtcbiAgICBhcHBlbmRDb250ZW50VHlwZShjb250ZW50VHlwZXNKc29uLCBcImltYWdlL2pwZWdcIiwgXCJqcGdcIik7XG4gICAgYXBwZW5kQ29udGVudFR5cGUoY29udGVudFR5cGVzSnNvbiwgXCJpbWFnZS9ibXBcIiwgXCJibXBcIik7XG4gICAgYXBwZW5kQ29udGVudFR5cGUoY29udGVudFR5cGVzSnNvbiwgXCJpbWFnZS9naWZcIiwgXCJnaWZcIik7XG4gIH1cbiAgY29uc3QgemlwID0gbmV3IEpTWmlwKCk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuICAgIGNvbnN0IG91dHB1dCA9IHRvWG1sKHZhbHVlKTtcbiAgICB6aXAuZmlsZShrZXksIG91dHB1dCk7XG4gIH1cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgYmluYXJ5Q29udGVudE1hcCkge1xuICAgIHppcC5maWxlKGtleSwgdmFsdWUpO1xuICB9XG4gIGZvciAoY29uc3QgeyBzdHJlYW0sIGZpbGVOYW1lIH0gb2YgZmlsZS5NZWRpYS5BcnJheSkge1xuICAgIHppcC5maWxlKGB3b3JkL21lZGlhLyR7ZmlsZU5hbWV9YCwgc3RyZWFtKTtcbiAgfVxuICByZXR1cm4gemlwLmdlbmVyYXRlQXN5bmMoe1xuICAgIHR5cGU6IFwidWludDhhcnJheVwiLFxuICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50XCIsXG4gICAgY29tcHJlc3Npb246IFwiREVGTEFURVwiXG4gIH0pO1xufSk7XG5jb25zdCB0b1htbCA9IChqc29uT2JqKSA9PiB7XG4gIGNvbnN0IG91dHB1dCA9IGxpYi5qczJ4bWwoanNvbk9iaik7XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuY29uc3QgY3JlYXRlUmVsYXRpb25zaGlwRmlsZSA9ICgpID0+ICh7XG4gIGRlY2xhcmF0aW9uOiB7XG4gICAgYXR0cmlidXRlczoge1xuICAgICAgdmVyc2lvbjogXCIxLjBcIixcbiAgICAgIGVuY29kaW5nOiBcIlVURi04XCIsXG4gICAgICBzdGFuZGFsb25lOiBcInllc1wiXG4gICAgfVxuICB9LFxuICBlbGVtZW50czogW1xuICAgIHtcbiAgICAgIHR5cGU6IFwiZWxlbWVudFwiLFxuICAgICAgbmFtZTogXCJSZWxhdGlvbnNoaXBzXCIsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIHhtbG5zOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwc1wiXG4gICAgICB9LFxuICAgICAgZWxlbWVudHM6IFtdXG4gICAgfVxuICBdXG59KTtcbmV4cG9ydHMuQWJzdHJhY3ROdW1iZXJpbmcgPSBBYnN0cmFjdE51bWJlcmluZztcbmV4cG9ydHMuQWxpZ25tZW50ID0gQWxpZ25tZW50O1xuZXhwb3J0cy5BbGlnbm1lbnRBdHRyaWJ1dGVzID0gQWxpZ25tZW50QXR0cmlidXRlcztcbmV4cG9ydHMuQWxpZ25tZW50VHlwZSA9IEFsaWdubWVudFR5cGU7XG5leHBvcnRzLkFubm90YXRpb25SZWZlcmVuY2UgPSBBbm5vdGF0aW9uUmVmZXJlbmNlO1xuZXhwb3J0cy5BdHRyaWJ1dGVzID0gQXR0cmlidXRlcztcbmV4cG9ydHMuQmFzZUVtcGhhc2lzTWFyayA9IEJhc2VFbXBoYXNpc01hcms7XG5leHBvcnRzLkJhc2VYbWxDb21wb25lbnQgPSBCYXNlWG1sQ29tcG9uZW50O1xuZXhwb3J0cy5Cb2R5ID0gQm9keTtcbmV4cG9ydHMuQm9va21hcmsgPSBCb29rbWFyaztcbmV4cG9ydHMuQm9va21hcmtFbmQgPSBCb29rbWFya0VuZDtcbmV4cG9ydHMuQm9va21hcmtTdGFydCA9IEJvb2ttYXJrU3RhcnQ7XG5leHBvcnRzLkJvcmRlciA9IEJvcmRlcjtcbmV4cG9ydHMuQm9yZGVyRWxlbWVudCA9IEJvcmRlckVsZW1lbnQ7XG5leHBvcnRzLkJvcmRlclN0eWxlID0gQm9yZGVyU3R5bGU7XG5leHBvcnRzLkJ1aWxkZXJFbGVtZW50ID0gQnVpbGRlckVsZW1lbnQ7XG5leHBvcnRzLkNhcnJpYWdlUmV0dXJuID0gQ2FycmlhZ2VSZXR1cm47XG5leHBvcnRzLkNoYXJhY3RlclNldCA9IENoYXJhY3RlclNldDtcbmV4cG9ydHMuQ2hlY2tCb3ggPSBDaGVja0JveDtcbmV4cG9ydHMuQ2hlY2tCb3hTeW1ib2xFbGVtZW50ID0gQ2hlY2tCb3hTeW1ib2xFbGVtZW50O1xuZXhwb3J0cy5DaGVja0JveFV0aWwgPSBDaGVja0JveFV0aWw7XG5leHBvcnRzLkNvbHVtbiA9IENvbHVtbjtcbmV4cG9ydHMuQ29sdW1uQnJlYWsgPSBDb2x1bW5CcmVhaztcbmV4cG9ydHMuQ29sdW1ucyA9IENvbHVtbnM7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50O1xuZXhwb3J0cy5Db21tZW50UmFuZ2VFbmQgPSBDb21tZW50UmFuZ2VFbmQ7XG5leHBvcnRzLkNvbW1lbnRSYW5nZVN0YXJ0ID0gQ29tbWVudFJhbmdlU3RhcnQ7XG5leHBvcnRzLkNvbW1lbnRSZWZlcmVuY2UgPSBDb21tZW50UmVmZXJlbmNlO1xuZXhwb3J0cy5Db21tZW50cyA9IENvbW1lbnRzO1xuZXhwb3J0cy5Db25jcmV0ZUh5cGVybGluayA9IENvbmNyZXRlSHlwZXJsaW5rO1xuZXhwb3J0cy5Db25jcmV0ZU51bWJlcmluZyA9IENvbmNyZXRlTnVtYmVyaW5nO1xuZXhwb3J0cy5Db250aW51YXRpb25TZXBhcmF0b3IgPSBDb250aW51YXRpb25TZXBhcmF0b3I7XG5leHBvcnRzLkRheUxvbmcgPSBEYXlMb25nO1xuZXhwb3J0cy5EYXlTaG9ydCA9IERheVNob3J0O1xuZXhwb3J0cy5EZWxldGVkVGV4dFJ1biA9IERlbGV0ZWRUZXh0UnVuO1xuZXhwb3J0cy5Eb2NHcmlkQXR0cmlidXRlcyA9IERvY0dyaWRBdHRyaWJ1dGVzO1xuZXhwb3J0cy5Eb2N1bWVudCA9IEZpbGU7XG5leHBvcnRzLkRvY3VtZW50QXR0cmlidXRlcyA9IERvY3VtZW50QXR0cmlidXRlcztcbmV4cG9ydHMuRG9jdW1lbnRCYWNrZ3JvdW5kID0gRG9jdW1lbnRCYWNrZ3JvdW5kO1xuZXhwb3J0cy5Eb2N1bWVudEJhY2tncm91bmRBdHRyaWJ1dGVzID0gRG9jdW1lbnRCYWNrZ3JvdW5kQXR0cmlidXRlcztcbmV4cG9ydHMuRG9jdW1lbnREZWZhdWx0cyA9IERvY3VtZW50RGVmYXVsdHM7XG5leHBvcnRzLkRvY3VtZW50R3JpZCA9IERvY3VtZW50R3JpZDtcbmV4cG9ydHMuRG9jdW1lbnRHcmlkVHlwZSA9IERvY3VtZW50R3JpZFR5cGU7XG5leHBvcnRzLkRvdEVtcGhhc2lzTWFyayA9IERvdEVtcGhhc2lzTWFyaztcbmV4cG9ydHMuRHJhd2luZyA9IERyYXdpbmc7XG5leHBvcnRzLkRyb3BDYXBUeXBlID0gRHJvcENhcFR5cGU7XG5leHBvcnRzLkVNUFRZX09CSkVDVCA9IEVNUFRZX09CSkVDVDtcbmV4cG9ydHMuRW1waGFzaXNNYXJrID0gRW1waGFzaXNNYXJrO1xuZXhwb3J0cy5FbXBoYXNpc01hcmtUeXBlID0gRW1waGFzaXNNYXJrVHlwZTtcbmV4cG9ydHMuRW1wdHlFbGVtZW50ID0gRW1wdHlFbGVtZW50O1xuZXhwb3J0cy5FbmRub3RlUmVmZXJlbmNlID0gRW5kbm90ZVJlZmVyZW5jZTtcbmV4cG9ydHMuRXh0ZXJuYWxIeXBlcmxpbmsgPSBFeHRlcm5hbEh5cGVybGluaztcbmV4cG9ydHMuRmlsZSA9IEZpbGU7XG5leHBvcnRzLkZvb3ROb3RlUmVmZXJlbmNlUnVuQXR0cmlidXRlcyA9IEZvb3ROb3RlUmVmZXJlbmNlUnVuQXR0cmlidXRlcztcbmV4cG9ydHMuRm9vdE5vdGVzID0gRm9vdE5vdGVzO1xuZXhwb3J0cy5Gb290ZXIgPSBGb290ZXIyO1xuZXhwb3J0cy5Gb290ZXJXcmFwcGVyID0gRm9vdGVyV3JhcHBlcjtcbmV4cG9ydHMuRm9vdG5vdGVSZWZlcmVuY2UgPSBGb290bm90ZVJlZmVyZW5jZTtcbmV4cG9ydHMuRm9vdG5vdGVSZWZlcmVuY2VFbGVtZW50ID0gRm9vdG5vdGVSZWZlcmVuY2VFbGVtZW50O1xuZXhwb3J0cy5Gb290bm90ZVJlZmVyZW5jZVJ1biA9IEZvb3Rub3RlUmVmZXJlbmNlUnVuO1xuZXhwb3J0cy5GcmFtZUFuY2hvclR5cGUgPSBGcmFtZUFuY2hvclR5cGU7XG5leHBvcnRzLkZyYW1lV3JhcCA9IEZyYW1lV3JhcDtcbmV4cG9ydHMuR3JpZFNwYW4gPSBHcmlkU3BhbjtcbmV4cG9ydHMuSGVhZGVyID0gSGVhZGVyMjtcbmV4cG9ydHMuSGVhZGVyRm9vdGVyUmVmZXJlbmNlID0gSGVhZGVyRm9vdGVyUmVmZXJlbmNlO1xuZXhwb3J0cy5IZWFkZXJGb290ZXJSZWZlcmVuY2VUeXBlID0gSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZTtcbmV4cG9ydHMuSGVhZGVyRm9vdGVyVHlwZSA9IEhlYWRlckZvb3RlclR5cGU7XG5leHBvcnRzLkhlYWRlcldyYXBwZXIgPSBIZWFkZXJXcmFwcGVyO1xuZXhwb3J0cy5IZWFkaW5nTGV2ZWwgPSBIZWFkaW5nTGV2ZWw7XG5leHBvcnRzLkhlaWdodFJ1bGUgPSBIZWlnaHRSdWxlO1xuZXhwb3J0cy5Ib3Jpem9udGFsUG9zaXRpb24gPSBIb3Jpem9udGFsUG9zaXRpb247XG5leHBvcnRzLkhvcml6b250YWxQb3NpdGlvbkFsaWduID0gSG9yaXpvbnRhbFBvc2l0aW9uQWxpZ247XG5leHBvcnRzLkhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbSA9IEhvcml6b250YWxQb3NpdGlvblJlbGF0aXZlRnJvbTtcbmV4cG9ydHMuSHBzTWVhc3VyZUVsZW1lbnQgPSBIcHNNZWFzdXJlRWxlbWVudDtcbmV4cG9ydHMuSHlwZXJsaW5rVHlwZSA9IEh5cGVybGlua1R5cGU7XG5leHBvcnRzLklnbm9yZUlmRW1wdHlYbWxDb21wb25lbnQgPSBJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50O1xuZXhwb3J0cy5JbWFnZVJ1biA9IEltYWdlUnVuO1xuZXhwb3J0cy5JbXBvcnRlZFJvb3RFbGVtZW50QXR0cmlidXRlcyA9IEltcG9ydGVkUm9vdEVsZW1lbnRBdHRyaWJ1dGVzO1xuZXhwb3J0cy5JbXBvcnRlZFhtbENvbXBvbmVudCA9IEltcG9ydGVkWG1sQ29tcG9uZW50O1xuZXhwb3J0cy5JbmRlbnQgPSBJbmRlbnQ7XG5leHBvcnRzLkluaXRpYWxpemFibGVYbWxDb21wb25lbnQgPSBJbml0aWFsaXphYmxlWG1sQ29tcG9uZW50O1xuZXhwb3J0cy5JbnNlcnRlZFRleHRSdW4gPSBJbnNlcnRlZFRleHRSdW47XG5leHBvcnRzLkludGVybmFsSHlwZXJsaW5rID0gSW50ZXJuYWxIeXBlcmxpbms7XG5leHBvcnRzLkxhc3RSZW5kZXJlZFBhZ2VCcmVhayA9IExhc3RSZW5kZXJlZFBhZ2VCcmVhaztcbmV4cG9ydHMuTGVhZGVyVHlwZSA9IExlYWRlclR5cGU7XG5leHBvcnRzLkxldmVsID0gTGV2ZWw7XG5leHBvcnRzLkxldmVsQmFzZSA9IExldmVsQmFzZTtcbmV4cG9ydHMuTGV2ZWxGb3JPdmVycmlkZSA9IExldmVsRm9yT3ZlcnJpZGU7XG5leHBvcnRzLkxldmVsRm9ybWF0ID0gTGV2ZWxGb3JtYXQ7XG5leHBvcnRzLkxldmVsT3ZlcnJpZGUgPSBMZXZlbE92ZXJyaWRlO1xuZXhwb3J0cy5MZXZlbFN1ZmZpeCA9IExldmVsU3VmZml4O1xuZXhwb3J0cy5MaW5lTnVtYmVyUmVzdGFydEZvcm1hdCA9IExpbmVOdW1iZXJSZXN0YXJ0Rm9ybWF0O1xuZXhwb3J0cy5MaW5lUnVsZVR5cGUgPSBMaW5lUnVsZVR5cGU7XG5leHBvcnRzLk1hdGggPSBNYXRoJDE7XG5leHBvcnRzLk1hdGhBY2NlbnRDaGFyYWN0ZXIgPSBNYXRoQWNjZW50Q2hhcmFjdGVyO1xuZXhwb3J0cy5NYXRoQW5nbGVkQnJhY2tldHMgPSBNYXRoQW5nbGVkQnJhY2tldHM7XG5leHBvcnRzLk1hdGhCYXNlID0gTWF0aEJhc2U7XG5leHBvcnRzLk1hdGhDdXJseUJyYWNrZXRzID0gTWF0aEN1cmx5QnJhY2tldHM7XG5leHBvcnRzLk1hdGhEZWdyZWUgPSBNYXRoRGVncmVlO1xuZXhwb3J0cy5NYXRoRGVub21pbmF0b3IgPSBNYXRoRGVub21pbmF0b3I7XG5leHBvcnRzLk1hdGhGcmFjdGlvbiA9IE1hdGhGcmFjdGlvbjtcbmV4cG9ydHMuTWF0aEZ1bmN0aW9uID0gTWF0aEZ1bmN0aW9uO1xuZXhwb3J0cy5NYXRoRnVuY3Rpb25OYW1lID0gTWF0aEZ1bmN0aW9uTmFtZTtcbmV4cG9ydHMuTWF0aEZ1bmN0aW9uUHJvcGVydGllcyA9IE1hdGhGdW5jdGlvblByb3BlcnRpZXM7XG5leHBvcnRzLk1hdGhJbnRlZ3JhbCA9IE1hdGhJbnRlZ3JhbDtcbmV4cG9ydHMuTWF0aExpbWl0TG9jYXRpb24gPSBNYXRoTGltaXRMb2NhdGlvbjtcbmV4cG9ydHMuTWF0aE5BcnlQcm9wZXJ0aWVzID0gTWF0aE5BcnlQcm9wZXJ0aWVzO1xuZXhwb3J0cy5NYXRoTnVtZXJhdG9yID0gTWF0aE51bWVyYXRvcjtcbmV4cG9ydHMuTWF0aFByZVN1YlN1cGVyU2NyaXB0ID0gTWF0aFByZVN1YlN1cGVyU2NyaXB0O1xuZXhwb3J0cy5NYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzID0gTWF0aFByZVN1YlN1cGVyU2NyaXB0UHJvcGVydGllcztcbmV4cG9ydHMuTWF0aFJhZGljYWwgPSBNYXRoUmFkaWNhbDtcbmV4cG9ydHMuTWF0aFJhZGljYWxQcm9wZXJ0aWVzID0gTWF0aFJhZGljYWxQcm9wZXJ0aWVzO1xuZXhwb3J0cy5NYXRoUm91bmRCcmFja2V0cyA9IE1hdGhSb3VuZEJyYWNrZXRzO1xuZXhwb3J0cy5NYXRoUnVuID0gTWF0aFJ1bjtcbmV4cG9ydHMuTWF0aFNxdWFyZUJyYWNrZXRzID0gTWF0aFNxdWFyZUJyYWNrZXRzO1xuZXhwb3J0cy5NYXRoU3ViU2NyaXB0ID0gTWF0aFN1YlNjcmlwdDtcbmV4cG9ydHMuTWF0aFN1YlNjcmlwdEVsZW1lbnQgPSBNYXRoU3ViU2NyaXB0RWxlbWVudDtcbmV4cG9ydHMuTWF0aFN1YlNjcmlwdFByb3BlcnRpZXMgPSBNYXRoU3ViU2NyaXB0UHJvcGVydGllcztcbmV4cG9ydHMuTWF0aFN1YlN1cGVyU2NyaXB0ID0gTWF0aFN1YlN1cGVyU2NyaXB0O1xuZXhwb3J0cy5NYXRoU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzID0gTWF0aFN1YlN1cGVyU2NyaXB0UHJvcGVydGllcztcbmV4cG9ydHMuTWF0aFN1bSA9IE1hdGhTdW07XG5leHBvcnRzLk1hdGhTdXBlclNjcmlwdCA9IE1hdGhTdXBlclNjcmlwdDtcbmV4cG9ydHMuTWF0aFN1cGVyU2NyaXB0RWxlbWVudCA9IE1hdGhTdXBlclNjcmlwdEVsZW1lbnQ7XG5leHBvcnRzLk1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMgPSBNYXRoU3VwZXJTY3JpcHRQcm9wZXJ0aWVzO1xuZXhwb3J0cy5NZWRpYSA9IE1lZGlhO1xuZXhwb3J0cy5Nb250aExvbmcgPSBNb250aExvbmc7XG5leHBvcnRzLk1vbnRoU2hvcnQgPSBNb250aFNob3J0O1xuZXhwb3J0cy5OZXh0QXR0cmlidXRlQ29tcG9uZW50ID0gTmV4dEF0dHJpYnV0ZUNvbXBvbmVudDtcbmV4cG9ydHMuTm9CcmVha0h5cGhlbiA9IE5vQnJlYWtIeXBoZW47XG5leHBvcnRzLk51bWJlckZvcm1hdCA9IE51bWJlckZvcm1hdCQxO1xuZXhwb3J0cy5OdW1iZXJQcm9wZXJ0aWVzID0gTnVtYmVyUHJvcGVydGllcztcbmV4cG9ydHMuTnVtYmVyVmFsdWVFbGVtZW50ID0gTnVtYmVyVmFsdWVFbGVtZW50O1xuZXhwb3J0cy5OdW1iZXJpbmcgPSBOdW1iZXJpbmc7XG5leHBvcnRzLk9uT2ZmRWxlbWVudCA9IE9uT2ZmRWxlbWVudDtcbmV4cG9ydHMuT3V0bGluZUxldmVsID0gT3V0bGluZUxldmVsO1xuZXhwb3J0cy5PdmVybGFwVHlwZSA9IE92ZXJsYXBUeXBlO1xuZXhwb3J0cy5QYWNrZXIgPSBQYWNrZXI7XG5leHBvcnRzLlBhZ2VCb3JkZXJEaXNwbGF5ID0gUGFnZUJvcmRlckRpc3BsYXk7XG5leHBvcnRzLlBhZ2VCb3JkZXJPZmZzZXRGcm9tID0gUGFnZUJvcmRlck9mZnNldEZyb207XG5leHBvcnRzLlBhZ2VCb3JkZXJaT3JkZXIgPSBQYWdlQm9yZGVyWk9yZGVyO1xuZXhwb3J0cy5QYWdlQm9yZGVycyA9IFBhZ2VCb3JkZXJzO1xuZXhwb3J0cy5QYWdlQnJlYWsgPSBQYWdlQnJlYWs7XG5leHBvcnRzLlBhZ2VCcmVha0JlZm9yZSA9IFBhZ2VCcmVha0JlZm9yZTtcbmV4cG9ydHMuUGFnZU1hcmdpbiA9IFBhZ2VNYXJnaW47XG5leHBvcnRzLlBhZ2VOdW1iZXIgPSBQYWdlTnVtYmVyO1xuZXhwb3J0cy5QYWdlTnVtYmVyRWxlbWVudCA9IFBhZ2VOdW1iZXJFbGVtZW50O1xuZXhwb3J0cy5QYWdlTnVtYmVyU2VwYXJhdG9yID0gUGFnZU51bWJlclNlcGFyYXRvcjtcbmV4cG9ydHMuUGFnZU51bWJlclR5cGUgPSBQYWdlTnVtYmVyVHlwZTtcbmV4cG9ydHMuUGFnZU51bWJlclR5cGVBdHRyaWJ1dGVzID0gUGFnZU51bWJlclR5cGVBdHRyaWJ1dGVzO1xuZXhwb3J0cy5QYWdlT3JpZW50YXRpb24gPSBQYWdlT3JpZW50YXRpb247XG5leHBvcnRzLlBhZ2VSZWZlcmVuY2UgPSBQYWdlUmVmZXJlbmNlO1xuZXhwb3J0cy5QYWdlU2l6ZSA9IFBhZ2VTaXplO1xuZXhwb3J0cy5QYWdlVGV4dERpcmVjdGlvbiA9IFBhZ2VUZXh0RGlyZWN0aW9uO1xuZXhwb3J0cy5QYWdlVGV4dERpcmVjdGlvblR5cGUgPSBQYWdlVGV4dERpcmVjdGlvblR5cGU7XG5leHBvcnRzLlBhcmFncmFwaCA9IFBhcmFncmFwaDtcbmV4cG9ydHMuUGFyYWdyYXBoUHJvcGVydGllcyA9IFBhcmFncmFwaFByb3BlcnRpZXM7XG5leHBvcnRzLlBhcmFncmFwaFByb3BlcnRpZXNEZWZhdWx0cyA9IFBhcmFncmFwaFByb3BlcnRpZXNEZWZhdWx0cztcbmV4cG9ydHMuUGF0Y2hUeXBlID0gUGF0Y2hUeXBlO1xuZXhwb3J0cy5Qb3NpdGlvbmFsVGFiID0gUG9zaXRpb25hbFRhYjtcbmV4cG9ydHMuUG9zaXRpb25hbFRhYkFsaWdubWVudCA9IFBvc2l0aW9uYWxUYWJBbGlnbm1lbnQ7XG5leHBvcnRzLlBvc2l0aW9uYWxUYWJMZWFkZXIgPSBQb3NpdGlvbmFsVGFiTGVhZGVyO1xuZXhwb3J0cy5Qb3NpdGlvbmFsVGFiUmVsYXRpdmVUbyA9IFBvc2l0aW9uYWxUYWJSZWxhdGl2ZVRvO1xuZXhwb3J0cy5QcmV0dGlmeVR5cGUgPSBQcmV0dGlmeVR5cGU7XG5leHBvcnRzLlJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uID0gUmVsYXRpdmVIb3Jpem9udGFsUG9zaXRpb247XG5leHBvcnRzLlJlbGF0aXZlVmVydGljYWxQb3NpdGlvbiA9IFJlbGF0aXZlVmVydGljYWxQb3NpdGlvbjtcbmV4cG9ydHMuUnVuID0gUnVuO1xuZXhwb3J0cy5SdW5Gb250cyA9IFJ1bkZvbnRzO1xuZXhwb3J0cy5SdW5Qcm9wZXJ0aWVzID0gUnVuUHJvcGVydGllcztcbmV4cG9ydHMuUnVuUHJvcGVydGllc0NoYW5nZSA9IFJ1blByb3BlcnRpZXNDaGFuZ2U7XG5leHBvcnRzLlJ1blByb3BlcnRpZXNEZWZhdWx0cyA9IFJ1blByb3BlcnRpZXNEZWZhdWx0cztcbmV4cG9ydHMuU2VjdGlvblByb3BlcnRpZXMgPSBTZWN0aW9uUHJvcGVydGllcztcbmV4cG9ydHMuU2VjdGlvblR5cGUgPSBTZWN0aW9uVHlwZTtcbmV4cG9ydHMuU2VjdGlvblR5cGVBdHRyaWJ1dGVzID0gU2VjdGlvblR5cGVBdHRyaWJ1dGVzO1xuZXhwb3J0cy5TZXBhcmF0b3IgPSBTZXBhcmF0b3I7XG5leHBvcnRzLlNlcXVlbnRpYWxJZGVudGlmaWVyID0gU2VxdWVudGlhbElkZW50aWZpZXI7XG5leHBvcnRzLlNoYWRpbmcgPSBTaGFkaW5nO1xuZXhwb3J0cy5TaGFkaW5nVHlwZSA9IFNoYWRpbmdUeXBlO1xuZXhwb3J0cy5TaW1wbGVGaWVsZCA9IFNpbXBsZUZpZWxkO1xuZXhwb3J0cy5TaW1wbGVNYWlsTWVyZ2VGaWVsZCA9IFNpbXBsZU1haWxNZXJnZUZpZWxkO1xuZXhwb3J0cy5TaW1wbGVQb3MgPSBTaW1wbGVQb3M7XG5leHBvcnRzLlNvZnRIeXBoZW4gPSBTb2Z0SHlwaGVuO1xuZXhwb3J0cy5TcGFjZVR5cGUgPSBTcGFjZVR5cGU7XG5leHBvcnRzLlNwYWNpbmcgPSBTcGFjaW5nO1xuZXhwb3J0cy5TdHJpbmdDb250YWluZXIgPSBTdHJpbmdDb250YWluZXI7XG5leHBvcnRzLlN0cmluZ0VudW1WYWx1ZUVsZW1lbnQgPSBTdHJpbmdFbnVtVmFsdWVFbGVtZW50O1xuZXhwb3J0cy5TdHJpbmdWYWx1ZUVsZW1lbnQgPSBTdHJpbmdWYWx1ZUVsZW1lbnQ7XG5leHBvcnRzLlN0eWxlID0gU3R5bGUkMTtcbmV4cG9ydHMuU3R5bGVGb3JDaGFyYWN0ZXIgPSBTdHlsZUZvckNoYXJhY3RlcjtcbmV4cG9ydHMuU3R5bGVGb3JQYXJhZ3JhcGggPSBTdHlsZUZvclBhcmFncmFwaDtcbmV4cG9ydHMuU3R5bGVMZXZlbCA9IFN0eWxlTGV2ZWw7XG5leHBvcnRzLlN0eWxlcyA9IFN0eWxlcztcbmV4cG9ydHMuU3ltYm9sUnVuID0gU3ltYm9sUnVuO1xuZXhwb3J0cy5URGlyZWN0aW9uID0gVERpcmVjdGlvbjtcbmV4cG9ydHMuVGFiID0gVGFiO1xuZXhwb3J0cy5UYWJBdHRyaWJ1dGVzID0gVGFiQXR0cmlidXRlcztcbmV4cG9ydHMuVGFiU3RvcCA9IFRhYlN0b3A7XG5leHBvcnRzLlRhYlN0b3BJdGVtID0gVGFiU3RvcEl0ZW07XG5leHBvcnRzLlRhYlN0b3BQb3NpdGlvbiA9IFRhYlN0b3BQb3NpdGlvbjtcbmV4cG9ydHMuVGFiU3RvcFR5cGUgPSBUYWJTdG9wVHlwZTtcbmV4cG9ydHMuVGFibGUgPSBUYWJsZTtcbmV4cG9ydHMuVGFibGVBbmNob3JUeXBlID0gVGFibGVBbmNob3JUeXBlO1xuZXhwb3J0cy5UYWJsZUJvcmRlcnMgPSBUYWJsZUJvcmRlcnM7XG5leHBvcnRzLlRhYmxlQ2VsbCA9IFRhYmxlQ2VsbDtcbmV4cG9ydHMuVGFibGVDZWxsQm9yZGVycyA9IFRhYmxlQ2VsbEJvcmRlcnM7XG5leHBvcnRzLlRhYmxlRmxvYXRQcm9wZXJ0aWVzID0gVGFibGVGbG9hdFByb3BlcnRpZXM7XG5leHBvcnRzLlRhYmxlTGF5b3V0ID0gVGFibGVMYXlvdXQ7XG5leHBvcnRzLlRhYmxlTGF5b3V0VHlwZSA9IFRhYmxlTGF5b3V0VHlwZTtcbmV4cG9ydHMuVGFibGVPZkNvbnRlbnRzID0gVGFibGVPZkNvbnRlbnRzO1xuZXhwb3J0cy5UYWJsZVByb3BlcnRpZXMgPSBUYWJsZVByb3BlcnRpZXM7XG5leHBvcnRzLlRhYmxlUm93ID0gVGFibGVSb3c7XG5leHBvcnRzLlRhYmxlUm93SGVpZ2h0ID0gVGFibGVSb3dIZWlnaHQ7XG5leHBvcnRzLlRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcyA9IFRhYmxlUm93SGVpZ2h0QXR0cmlidXRlcztcbmV4cG9ydHMuVGFibGVSb3dQcm9wZXJ0aWVzID0gVGFibGVSb3dQcm9wZXJ0aWVzO1xuZXhwb3J0cy5UYWJsZVdpZHRoRWxlbWVudCA9IFRhYmxlV2lkdGhFbGVtZW50O1xuZXhwb3J0cy5UZXh0RGlyZWN0aW9uID0gVGV4dERpcmVjdGlvbjtcbmV4cG9ydHMuVGV4dEVmZmVjdCA9IFRleHRFZmZlY3Q7XG5leHBvcnRzLlRleHRSdW4gPSBUZXh0UnVuO1xuZXhwb3J0cy5UZXh0V3JhcHBpbmdTaWRlID0gVGV4dFdyYXBwaW5nU2lkZTtcbmV4cG9ydHMuVGV4dFdyYXBwaW5nVHlwZSA9IFRleHRXcmFwcGluZ1R5cGU7XG5leHBvcnRzLlRoZW1hdGljQnJlYWsgPSBUaGVtYXRpY0JyZWFrO1xuZXhwb3J0cy5UeXBlID0gVHlwZTtcbmV4cG9ydHMuVW5kZXJsaW5lID0gVW5kZXJsaW5lO1xuZXhwb3J0cy5VbmRlcmxpbmVUeXBlID0gVW5kZXJsaW5lVHlwZTtcbmV4cG9ydHMuVmVydGljYWxBbGlnbiA9IFZlcnRpY2FsQWxpZ24yO1xuZXhwb3J0cy5WZXJ0aWNhbEFsaWduQXR0cmlidXRlcyA9IFZlcnRpY2FsQWxpZ25BdHRyaWJ1dGVzO1xuZXhwb3J0cy5WZXJ0aWNhbEFsaWduRWxlbWVudCA9IFZlcnRpY2FsQWxpZ25FbGVtZW50O1xuZXhwb3J0cy5WZXJ0aWNhbE1lcmdlID0gVmVydGljYWxNZXJnZTtcbmV4cG9ydHMuVmVydGljYWxNZXJnZVR5cGUgPSBWZXJ0aWNhbE1lcmdlVHlwZTtcbmV4cG9ydHMuVmVydGljYWxQb3NpdGlvbiA9IFZlcnRpY2FsUG9zaXRpb247XG5leHBvcnRzLlZlcnRpY2FsUG9zaXRpb25BbGlnbiA9IFZlcnRpY2FsUG9zaXRpb25BbGlnbjtcbmV4cG9ydHMuVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbSA9IFZlcnRpY2FsUG9zaXRpb25SZWxhdGl2ZUZyb207XG5leHBvcnRzLldPUktBUk9VTkQyID0gV09SS0FST1VORDI7XG5leHBvcnRzLldPUktBUk9VTkQzID0gV09SS0FST1VORDM7XG5leHBvcnRzLldPUktBUk9VTkQ0ID0gV09SS0FST1VORDQ7XG5leHBvcnRzLldpZHRoVHlwZSA9IFdpZHRoVHlwZTtcbmV4cG9ydHMuV3JhcE5vbmUgPSBXcmFwTm9uZTtcbmV4cG9ydHMuV3JhcFNxdWFyZSA9IFdyYXBTcXVhcmU7XG5leHBvcnRzLldyYXBUaWdodCA9IFdyYXBUaWdodDtcbmV4cG9ydHMuV3JhcFRvcEFuZEJvdHRvbSA9IFdyYXBUb3BBbmRCb3R0b207XG5leHBvcnRzLlhtbEF0dHJpYnV0ZUNvbXBvbmVudCA9IFhtbEF0dHJpYnV0ZUNvbXBvbmVudDtcbmV4cG9ydHMuWG1sQ29tcG9uZW50ID0gWG1sQ29tcG9uZW50O1xuZXhwb3J0cy5ZZWFyTG9uZyA9IFllYXJMb25nO1xuZXhwb3J0cy5ZZWFyU2hvcnQgPSBZZWFyU2hvcnQ7XG5leHBvcnRzLmFic3RyYWN0TnVtVW5pcXVlTnVtZXJpY0lkR2VuID0gYWJzdHJhY3ROdW1VbmlxdWVOdW1lcmljSWRHZW47XG5leHBvcnRzLmJvb2ttYXJrVW5pcXVlTnVtZXJpY0lkR2VuID0gYm9va21hcmtVbmlxdWVOdW1lcmljSWRHZW47XG5leHBvcnRzLmNvbmNyZXRlTnVtVW5pcXVlTnVtZXJpY0lkR2VuID0gY29uY3JldGVOdW1VbmlxdWVOdW1lcmljSWRHZW47XG5leHBvcnRzLmNvbnZlcnRJbmNoZXNUb1R3aXAgPSBjb252ZXJ0SW5jaGVzVG9Ud2lwO1xuZXhwb3J0cy5jb252ZXJ0TWlsbGltZXRlcnNUb1R3aXAgPSBjb252ZXJ0TWlsbGltZXRlcnNUb1R3aXA7XG5leHBvcnRzLmNvbnZlcnRUb1htbENvbXBvbmVudCA9IGNvbnZlcnRUb1htbENvbXBvbmVudDtcbmV4cG9ydHMuY3JlYXRlRnJhbWVQcm9wZXJ0aWVzID0gY3JlYXRlRnJhbWVQcm9wZXJ0aWVzO1xuZXhwb3J0cy5jcmVhdGVMaW5lTnVtYmVyVHlwZSA9IGNyZWF0ZUxpbmVOdW1iZXJUeXBlO1xuZXhwb3J0cy5jcmVhdGVTdHJpbmdFbGVtZW50ID0gY3JlYXRlU3RyaW5nRWxlbWVudDtcbmV4cG9ydHMuZGF0ZVRpbWVWYWx1ZSA9IGRhdGVUaW1lVmFsdWU7XG5leHBvcnRzLmRlY2ltYWxOdW1iZXIgPSBkZWNpbWFsTnVtYmVyO1xuZXhwb3J0cy5kb2NQcm9wZXJ0aWVzVW5pcXVlTnVtZXJpY0lkR2VuID0gZG9jUHJvcGVydGllc1VuaXF1ZU51bWVyaWNJZEdlbjtcbmV4cG9ydHMuZWlnaHRoUG9pbnRNZWFzdXJlVmFsdWUgPSBlaWdodGhQb2ludE1lYXN1cmVWYWx1ZTtcbmV4cG9ydHMuaGV4Q29sb3JWYWx1ZSA9IGhleENvbG9yVmFsdWU7XG5leHBvcnRzLmhwc01lYXN1cmVWYWx1ZSA9IGhwc01lYXN1cmVWYWx1ZTtcbmV4cG9ydHMubG9uZ0hleE51bWJlciA9IGxvbmdIZXhOdW1iZXI7XG5leHBvcnRzLm1lYXN1cmVtZW50T3JQZXJjZW50VmFsdWUgPSBtZWFzdXJlbWVudE9yUGVyY2VudFZhbHVlO1xuZXhwb3J0cy5wYXRjaERvY3VtZW50ID0gcGF0Y2hEb2N1bWVudDtcbmV4cG9ydHMucGVyY2VudGFnZVZhbHVlID0gcGVyY2VudGFnZVZhbHVlO1xuZXhwb3J0cy5wb2ludE1lYXN1cmVWYWx1ZSA9IHBvaW50TWVhc3VyZVZhbHVlO1xuZXhwb3J0cy5wb3NpdGl2ZVVuaXZlcnNhbE1lYXN1cmVWYWx1ZSA9IHBvc2l0aXZlVW5pdmVyc2FsTWVhc3VyZVZhbHVlO1xuZXhwb3J0cy5zZWN0aW9uTWFyZ2luRGVmYXVsdHMgPSBzZWN0aW9uTWFyZ2luRGVmYXVsdHM7XG5leHBvcnRzLnNlY3Rpb25QYWdlU2l6ZURlZmF1bHRzID0gc2VjdGlvblBhZ2VTaXplRGVmYXVsdHM7XG5leHBvcnRzLnNob3J0SGV4TnVtYmVyID0gc2hvcnRIZXhOdW1iZXI7XG5leHBvcnRzLnNpZ25lZEhwc01lYXN1cmVWYWx1ZSA9IHNpZ25lZEhwc01lYXN1cmVWYWx1ZTtcbmV4cG9ydHMuc2lnbmVkVHdpcHNNZWFzdXJlVmFsdWUgPSBzaWduZWRUd2lwc01lYXN1cmVWYWx1ZTtcbmV4cG9ydHMudHdpcHNNZWFzdXJlVmFsdWUgPSB0d2lwc01lYXN1cmVWYWx1ZTtcbmV4cG9ydHMudUNoYXJIZXhOdW1iZXIgPSB1Q2hhckhleE51bWJlcjtcbmV4cG9ydHMudW5pcXVlSWQgPSB1bmlxdWVJZDtcbmV4cG9ydHMudW5pcXVlTnVtZXJpY0lkQ3JlYXRvciA9IHVuaXF1ZU51bWVyaWNJZENyZWF0b3I7XG5leHBvcnRzLnVuaXF1ZVV1aWQgPSB1bmlxdWVVdWlkO1xuZXhwb3J0cy51bml2ZXJzYWxNZWFzdXJlVmFsdWUgPSB1bml2ZXJzYWxNZWFzdXJlVmFsdWU7XG5leHBvcnRzLnVuc2lnbmVkRGVjaW1hbE51bWJlciA9IHVuc2lnbmVkRGVjaW1hbE51bWJlcjtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIlwidXNlIHN0cmljdFwiO1xudmFyIGRvY3ggPSByZXF1aXJlKFwiZG9jeFwiKTtcbnZhciBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJyk7XG5pZiAoYXBwKSB7XG4gICAgYXBwLmlubmVySFRNTCA9ICdIZWxsbywgVHlwZVNjcmlwdCB3aXRoIFdlYnBhY2shJztcbn1cbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiYnl0ZUxlbmd0aCIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0b0J5dGVBcnJheSIsInRtcCIsImkiLCJhcnIiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJsZW4iLCJyZXZMb29rdXAiLCJjaGFyQ29kZUF0IiwiZnJvbUJ5dGVBcnJheSIsInVpbnQ4IiwibGVuZ3RoIiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwicHVzaCIsImVuY29kZUNodW5rIiwibG9va3VwIiwiam9pbiIsIlVpbnQ4QXJyYXkiLCJBcnJheSIsImNvZGUiLCJFcnJvciIsImluZGV4T2YiLCJzdGFydCIsImVuZCIsIm51bSIsIm91dHB1dCIsImJhc2U2NCIsImllZWU3NTQiLCJjdXN0b21JbnNwZWN0U3ltYm9sIiwiU3ltYm9sIiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJLX01BWF9MRU5HVEgiLCJjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwiYnVmIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiVHlwZUVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwidmFsdWUiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYXJyYXlWaWV3IiwiaXNJbnN0YW5jZSIsImNvcHkiLCJmcm9tQXJyYXlCdWZmZXIiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheVZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJiIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwidW5kZWZpbmVkIiwibnVtYmVySXNOYU4iLCJ0eXBlIiwiaXNBcnJheSIsImRhdGEiLCJmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCJhc3NlcnRTaXplIiwic2l6ZSIsImFycmF5IiwidG9TdHJpbmciLCJtdXN0TWF0Y2giLCJhcmd1bWVudHMiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic2xvd1RvU3RyaW5nIiwidGhpcyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwibiIsIm0iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsInZhbCIsImRpciIsImFycmF5SW5kZXhPZiIsImNhbGwiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJNYXRoIiwibWluIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsImUiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImNvbnNvbGUiLCJlcnJvciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInBvb2xTaXplIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic2V0Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwicmVwbGFjZSIsInRyaW0iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJoZXhTbGljZUxvb2t1cFRhYmxlIiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwid3J0QmlnVUludDY0TEUiLCJjaGVja0ludEJJIiwiQmlnSW50Iiwid3J0QmlnVUludDY0QkUiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInN1YmFycmF5IiwicmVhZFVpbnRMRSIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVWludEJFIiwicmVhZFVJbnRCRSIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRCaWdVSW50NjRMRSIsImRlZmluZUJpZ0ludE1ldGhvZCIsInZhbGlkYXRlTnVtYmVyIiwiZmlyc3QiLCJsYXN0IiwiYm91bmRzRXJyb3IiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVpbnRMRSIsIndyaXRlVUludExFIiwid3JpdGVVaW50QkUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVWludDgiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVaW50MTZMRSIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVpbnQxNkJFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVWludDMyTEUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVaW50MzJCRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUJpZ1VJbnQ2NExFIiwid3JpdGVCaWdVSW50NjRCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUJpZ0ludDY0TEUiLCJ3cml0ZUJpZ0ludDY0QkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsImVycm9ycyIsIkUiLCJzeW0iLCJnZXRNZXNzYWdlIiwiQmFzZSIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm5hbWUiLCJzdGFjayIsIm1lc3NhZ2UiLCJhZGROdW1lcmljYWxTZXBhcmF0b3IiLCJyYW5nZSIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJjaGVja0JvdW5kcyIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiZmxvb3IiLCJFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMiLCJpbnB1dCIsIm1zZyIsInJlY2VpdmVkIiwiaXNJbnRlZ2VyIiwiYWJzIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJzcGxpdCIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiIsImZuIiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiZCIsInMiLCJOYU4iLCJydCIsImlzTmFOIiwibG9nIiwiTE4yIiwiX19kZWZQcm9wIiwiX19kZWZQcm9wcyIsImRlZmluZVByb3BlcnRpZXMiLCJfX2dldE93blByb3BEZXNjcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfX2dldE93blByb3BTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiaGFzT3duUHJvcGVydHkiLCJfX3Byb3BJc0VudW0iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVmTm9ybWFsUHJvcCIsImtleSIsIl9fc3ByZWFkVmFsdWVzIiwicHJvcCIsIl9fc3ByZWFkUHJvcHMiLCJfX3B1YmxpY0ZpZWxkIiwiX19hc3luYyIsIl9fdGhpcyIsIl9fYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUyIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInRocm93IiwiZG9uZSIsInJlc29sdmUiLCJ0aGVuIiwidG9TdHJpbmdUYWciLCJCYXNlWG1sQ29tcG9uZW50Iiwicm9vdEtleSIsIkVNUFRZX09CSkVDVCIsInNlYWwiLCJYbWxDb21wb25lbnQiLCJyb290IiwicHJlcEZvclhtbCIsImNvbnRleHQiLCJfYSIsImNoaWxkcmVuIiwibWFwIiwiY29tcCIsImZpbHRlciIsInBvcCIsIl9hdHRyIiwiYWRkQ2hpbGRFbGVtZW50IiwiY2hpbGQiLCJJZ25vcmVJZkVtcHR5WG1sQ29tcG9uZW50IiwicmVzdWx0Iiwia2V5cyIsIlhtbEF0dHJpYnV0ZUNvbXBvbmVudCIsIl8iLCJhdHRycyIsImZvckVhY2giLCJuZXdLZXkiLCJ4bWxLZXlzIiwiTmV4dEF0dHJpYnV0ZUNvbXBvbmVudCIsInZhbHVlcyIsInJlZHVjZSIsImFjYyIsIkF0dHJpYnV0ZXMiLCJjb2xvciIsInNwYWNlIiwic3oiLCJyc2lkUiIsInJzaWRSUHIiLCJyc2lkU2VjdCIsInciLCJoIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiaGVhZGVyIiwiZm9vdGVyIiwiZ3V0dGVyIiwibGluZVBpdGNoIiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZyIsInNlbGYiLCJnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxIiwiX19lc01vZHVsZSIsIlJlZmxlY3RPd25LZXlzIiwic2F4JDEiLCJldmVudHMiLCJSIiwiUmVmbGVjdCIsIlJlZmxlY3RBcHBseSIsInJlY2VpdmVyIiwiYXJncyIsIkZ1bmN0aW9uIiwib3duS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOdW1iZXJJc05hTiIsIkV2ZW50RW1pdHRlciIsImluaXQiLCJvbmNlIiwiZW1pdHRlciIsImVycm9yTGlzdGVuZXIiLCJlcnIiLCJyZW1vdmVMaXN0ZW5lciIsInJlc29sdmVyIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsIm9uIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJldmVudHMyIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwiY3JlYXRlIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsIndhcm5lZCIsImNvdW50Iiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZTIiLCJ3cmFwcGVkIiwiYmluZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJmbGFncyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3cmFwTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXIiLCJsaXN0ZW5lcnMyIiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwic2hpZnQiLCJpbmRleCIsInNwbGljZU9uZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImxpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJldmVudHNFeHBvcnRzIiwiaW5oZXJpdHNfYnJvd3NlciIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsImluaGVyaXRzX2Jyb3dzZXJFeHBvcnRzIiwiZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiYnJvd3NlciQxIiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJlMiIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwicHJvY2VzcyQxIiwic3RyZWFtQnJvd3NlciIsImhhc1JlcXVpcmVkU3RyZWFtQnJvd3NlciIsInJlcXVpcmVTdHJlYW1Ccm93c2VyIiwiaGFzUmVxdWlyZWRCYXNlNjRKcyIsImhhc1JlcXVpcmVkSWVlZTc1NCIsImhhc1JlcXVpcmVkQnVmZmVyIiwiYmFzZTY0SnMiLCJyZXF1aXJlQnVmZmVyIiwiZXhwb3J0czIiLCJpMiIsImxlbjIyIiwicmVxdWlyZUJhc2U2NEpzIiwiaWVlZTc1NDIiLCJidWZmZXIyIiwiQnVmZmVyMiIsImJ5dGVMZW5ndGgyIiwic2hhbXMkMSIsImhhc1JlcXVpcmVkU2hhbXMkMSIsInNoYW1zIiwiaGFzUmVxdWlyZWRTaGFtcyIsImhhc1N5bWJvbHMiLCJoYXNSZXF1aXJlZEhhc1N5bWJvbHMiLCJoYXNQcm90byIsImhhc1JlcXVpcmVkSGFzUHJvdG8iLCJpbXBsZW1lbnRhdGlvbiIsImhhc1JlcXVpcmVkSW1wbGVtZW50YXRpb24iLCJmdW5jdGlvbkJpbmQiLCJoYXNSZXF1aXJlZEZ1bmN0aW9uQmluZCIsImhhc293biIsImhhc1JlcXVpcmVkSGFzb3duIiwiZ2V0SW50cmluc2ljIiwiaGFzUmVxdWlyZWRHZXRJbnRyaW5zaWMiLCJ1dGlsIiwidHlwZXMiLCJyZXF1aXJlU2hhbXMkMSIsIml0ZXJhdG9yIiwic3ltT2JqIiwic3ltcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2NyaXB0b3IiLCJyZXF1aXJlU2hhbXMiLCJoYXNTeW1ib2xzMiIsInJlcXVpcmVGdW5jdGlvbkJpbmQiLCJpbXBsZW1lbnRhdGlvbjIiLCJ0b1N0ciIsImNvbmNhdHR5IiwiYm91bmQiLCJhcnJMaWtlIiwic2xpY3kiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsImpvaW55IiwiRW1wdHkiLCJyZXF1aXJlSW1wbGVtZW50YXRpb24iLCJyZXF1aXJlR2V0SW50cmluc2ljIiwidW5kZWZpbmVkJDEiLCIkU3ludGF4RXJyb3IiLCJTeW50YXhFcnJvciIsIiRGdW5jdGlvbiIsIiRUeXBlRXJyb3IiLCJnZXRFdmFsbGVkQ29uc3RydWN0b3IiLCJleHByZXNzaW9uU3ludGF4IiwiJGdPUEQiLCJ0aHJvd1R5cGVFcnJvciIsIlRocm93VHlwZUVycm9yIiwiY2FsbGVlVGhyb3dzIiwiZ09QRHRocm93cyIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwicmVxdWlyZUhhc1N5bWJvbHMiLCJoYXNQcm90bzIiLCJ0ZXN0IiwiJE9iamVjdCIsIl9fcHJvdG9fXyIsInJlcXVpcmVIYXNQcm90byIsImdldFByb3RvIiwibmVlZHNFdmFsIiwiVHlwZWRBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkF0b21pY3MiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJCb29sZWFuIiwiRGF0YVZpZXciLCJEYXRlIiwiZGVjb2RlVVJJIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXZhbCIsIkV2YWxFcnJvciIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJKU09OIiwiTWFwIiwicGFyc2VGbG9hdCIsIlByb3h5IiwiUmVmZXJlbmNlRXJyb3IiLCJSZWdFeHAiLCJTZXQiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJVUklFcnJvciIsIldlYWtNYXAiLCJXZWFrUmVmIiwiV2Vha1NldCIsImVycm9yUHJvdG8iLCJkb0V2YWwiLCJkb0V2YWwyIiwiZ2VuIiwiTEVHQUNZX0FMSUFTRVMiLCJoYXNPd24iLCIkaGFzT3duIiwicmVxdWlyZUhhc293biIsIiRjb25jYXQiLCIkc3BsaWNlQXBwbHkiLCJzcGxpY2UiLCIkcmVwbGFjZSIsIiRzdHJTbGljZSIsIiRleGVjIiwiZXhlYyIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJnZXRCYXNlSW50cmluc2ljIiwiYWxsb3dNaXNzaW5nIiwiYWxpYXMiLCJpbnRyaW5zaWNOYW1lIiwibWF0Y2giLCJudW1iZXIiLCJxdW90ZSIsInN1YlN0cmluZyIsInN0cmluZ1RvUGF0aCIsImludHJpbnNpY0Jhc2VOYW1lIiwiaW50cmluc2ljIiwiaW50cmluc2ljUmVhbE5hbWUiLCJza2lwRnVydGhlckNhY2hpbmciLCJpc093biIsInBhcnQiLCJkZXNjIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yc18xIiwiaGFzUmVxdWlyZWRIYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ29wZCIsImhhc1JlcXVpcmVkR29wZCIsImRlZmluZURhdGFQcm9wZXJ0eSIsImhhc1JlcXVpcmVkRGVmaW5lRGF0YVByb3BlcnR5Iiwic2V0RnVuY3Rpb25MZW5ndGgiLCJoYXNSZXF1aXJlZFNldEZ1bmN0aW9uTGVuZ3RoIiwiaGFzUmVxdWlyZWRDYWxsQmluZCIsImNhbGxCb3VuZCIsImhhc1JlcXVpcmVkQ2FsbEJvdW5kIiwiaXNBcmd1bWVudHMiLCJoYXNSZXF1aXJlZElzQXJndW1lbnRzIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImhhc1JlcXVpcmVkSXNHZW5lcmF0b3JGdW5jdGlvbiIsImlzQ2FsbGFibGUiLCJoYXNSZXF1aXJlZElzQ2FsbGFibGUiLCJmb3JFYWNoXzEiLCJoYXNSZXF1aXJlZEZvckVhY2giLCJhdmFpbGFibGVUeXBlZEFycmF5cyIsImhhc1JlcXVpcmVkQXZhaWxhYmxlVHlwZWRBcnJheXMiLCJ3aGljaFR5cGVkQXJyYXkiLCJoYXNSZXF1aXJlZFdoaWNoVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImhhc1JlcXVpcmVkSXNUeXBlZEFycmF5IiwiaGFzUmVxdWlyZWRUeXBlcyIsImlzQnVmZmVyQnJvd3NlciIsImhhc1JlcXVpcmVkSXNCdWZmZXJCcm93c2VyIiwiaGFzUmVxdWlyZWRVdGlsIiwiYnVmZmVyX2xpc3QiLCJoYXNSZXF1aXJlZEJ1ZmZlcl9saXN0IiwiZGVzdHJveV8xIiwiaGFzUmVxdWlyZWREZXN0cm95IiwiY2FsbEJpbmQiLCJyZXF1aXJlSGFzUHJvcGVydHlEZXNjcmlwdG9ycyIsIiRkZWZpbmVQcm9wZXJ0eSIsIkdldEludHJpbnNpYyIsImhhc1Byb3BlcnR5RGVzY3JpcHRvcnMiLCJoYXNBcnJheUxlbmd0aERlZmluZUJ1ZyIsInJlcXVpcmVHb3BkIiwicmVxdWlyZUNhbGxCaW5kIiwibW9kdWxlMiIsInNldEZ1bmN0aW9uTGVuZ3RoMiIsImRlZmluZSIsImdvcGQyIiwicHJvcGVydHkiLCJub25FbnVtZXJhYmxlIiwibm9uV3JpdGFibGUiLCJub25Db25maWd1cmFibGUiLCJsb29zZSIsInJlcXVpcmVEZWZpbmVEYXRhUHJvcGVydHkiLCJoYXNEZXNjcmlwdG9ycyIsImdPUEQiLCIkZmxvb3IiLCJmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlIiwiZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIiwicmVxdWlyZVNldEZ1bmN0aW9uTGVuZ3RoIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiJG1heCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiYXBwbHlCaW5kIiwicmVxdWlyZUNhbGxCb3VuZCIsImNhbGxCaW5kMiIsIiRpbmRleE9mIiwicmVxdWlyZVdoaWNoVHlwZWRBcnJheSIsImlzQ2FsbGFibGUyIiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsImZuVG9TdHIiLCJyZWZsZWN0QXBwbHkiLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiZm5TdHIiLCJ0cnlGdW5jdGlvbk9iamVjdCIsImhhc1RvU3RyaW5nVGFnIiwiaXNJRTY4IiwiaXNEREEiLCJkb2N1bWVudCIsImFsbCIsInN0ckNsYXNzIiwicmVxdWlyZUlzQ2FsbGFibGUiLCJ0aGlzQXJnIiwiZm9yRWFjaEFycmF5IiwiY2hhckF0IiwiZm9yRWFjaFN0cmluZyIsIm9iamVjdCIsImsiLCJmb3JFYWNoT2JqZWN0IiwicmVxdWlyZUZvckVhY2giLCJhdmFpbGFibGVUeXBlZEFycmF5czIiLCJwb3NzaWJsZU5hbWVzIiwicmVxdWlyZUF2YWlsYWJsZVR5cGVkQXJyYXlzIiwiY2FsbEJvdW5kMiIsIiR0b1N0cmluZyIsInR5cGVkQXJyYXlzIiwiJHNsaWNlIiwiY2FjaGUiLCJ0eXBlZEFycmF5Iiwic3VwZXJQcm90byIsInRhZyIsImdldHRlciIsInRyeVNsaWNlcyIsInRyeVR5cGVkQXJyYXlzIiwicmVxdWlyZVR5cGVzIiwiaXNBcmd1bWVudHNPYmplY3QiLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNMZWdhY3lBcmd1bWVudHMiLCJjYWxsZWUiLCJzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzIiwicmVxdWlyZUlzQXJndW1lbnRzIiwiaXNHZW5lcmF0b3JGdW5jdGlvbjIiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzRm5SZWdleCIsImdlbmVyYXRvckZ1bmMiLCJnZXRHZW5lcmF0b3JGdW5jIiwicmVxdWlyZUlzR2VuZXJhdG9yRnVuY3Rpb24iLCJ3aGljaFR5cGVkQXJyYXkyIiwiaXNUeXBlZEFycmF5MiIsInJlcXVpcmVJc1R5cGVkQXJyYXkiLCJ1bmN1cnJ5VGhpcyIsImYiLCJCaWdJbnRTdXBwb3J0ZWQiLCJTeW1ib2xTdXBwb3J0ZWQiLCJPYmplY3RUb1N0cmluZyIsIm51bWJlclZhbHVlIiwic3RyaW5nVmFsdWUiLCJib29sZWFuVmFsdWUiLCJiaWdJbnRWYWx1ZSIsInN5bWJvbFZhbHVlIiwiY2hlY2tCb3hlZFByaW1pdGl2ZSIsInByb3RvdHlwZVZhbHVlT2YiLCJpc01hcFRvU3RyaW5nIiwiaXNTZXRUb1N0cmluZyIsImlzV2Vha01hcFRvU3RyaW5nIiwiaXNXZWFrU2V0VG9TdHJpbmciLCJpc0FycmF5QnVmZmVyVG9TdHJpbmciLCJpc0FycmF5QnVmZmVyIiwid29ya2luZyIsImlzRGF0YVZpZXdUb1N0cmluZyIsImlzRGF0YVZpZXciLCJpc1Byb21pc2UiLCJjYXRjaCIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNVaW50OEFycmF5IiwiaXNVaW50OENsYW1wZWRBcnJheSIsImlzVWludDE2QXJyYXkiLCJpc1VpbnQzMkFycmF5IiwiaXNJbnQ4QXJyYXkiLCJpc0ludDE2QXJyYXkiLCJpc0ludDMyQXJyYXkiLCJpc0Zsb2F0MzJBcnJheSIsImlzRmxvYXQ2NEFycmF5IiwiaXNCaWdJbnQ2NEFycmF5IiwiaXNCaWdVaW50NjRBcnJheSIsImlzTWFwIiwiaXNTZXQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJTaGFyZWRBcnJheUJ1ZmZlckNvcHkiLCJpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmciLCJpc1NoYXJlZEFycmF5QnVmZmVyIiwiaXNOdW1iZXJPYmplY3QiLCJpc1N0cmluZ09iamVjdCIsImlzQm9vbGVhbk9iamVjdCIsImlzQmlnSW50T2JqZWN0IiwiaXNTeW1ib2xPYmplY3QiLCJpc0FzeW5jRnVuY3Rpb24iLCJpc01hcEl0ZXJhdG9yIiwiaXNTZXRJdGVyYXRvciIsImlzR2VuZXJhdG9yT2JqZWN0IiwiaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlIiwiaXNCb3hlZFByaW1pdGl2ZSIsImlzQW55QXJyYXlCdWZmZXIiLCJtZXRob2QiLCJyZXF1aXJlVXRpbCIsImRlc2NyaXB0b3JzIiwiZm9ybWF0UmVnRXhwIiwiZm9ybWF0IiwiaXNTdHJpbmciLCJvYmplY3RzIiwieDIiLCJzdHJpbmdpZnkiLCJpc051bGwiLCJpc09iamVjdCIsImRlcHJlY2F0ZSIsIm5vRGVwcmVjYXRpb24iLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsInRyYWNlIiwiZGVidWdzIiwiZGVidWdFbnZSZWdleCIsIk5PREVfREVCVUciLCJkZWJ1Z0VudiIsInRvVXBwZXJDYXNlIiwib3B0cyIsImN0eCIsInNlZW4iLCJzdHlsaXplIiwic3R5bGl6ZU5vQ29sb3IiLCJkZXB0aCIsImNvbG9ycyIsImlzQm9vbGVhbiIsInNob3dIaWRkZW4iLCJfZXh0ZW5kIiwiaXNVbmRlZmluZWQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJyZWN1cnNlVGltZXMiLCJpc0Z1bmN0aW9uIiwicHJpbWl0aXZlIiwic2ltcGxlIiwiaXNOdW1iZXIiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImhhc2giLCJpZHgiLCJhcnJheVRvSGFzaCIsImlzRXJyb3IiLCJmb3JtYXRFcnJvciIsImlzUmVnRXhwIiwiaXNEYXRlIiwiYmFzZSIsImJyYWNlcyIsImlzQXJyYXkyIiwidG9VVENTdHJpbmciLCJsIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsInByZXYiLCJjdXIiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImxpbmUiLCJhciIsInJlIiwib2JqZWN0VG9TdHJpbmciLCJvIiwicGFkIiwiZGVidWdsb2ciLCJwaWQiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwiaXNOYXRpdmVFcnJvciIsImlzUHJpbWl0aXZlIiwibW9udGhzIiwidGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJpbmhlcml0cyIsIm9yaWdpbiIsImFkZCIsImtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCIsImNhbGxiYWNraWZ5T25SZWplY3RlZCIsInJlYXNvbiIsImNiIiwibmV3UmVhc29uIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJwcm9taXNlIiwiY3VzdG9tIiwiY2FsbGJhY2tpZnkiLCJjYWxsYmFja2lmaWVkIiwibWF5YmVDYiIsInNlbGYyIiwicmVqIiwicmVxdWlyZURlc3Ryb3kiLCJlbWl0RXJyb3JBbmRDbG9zZU5UIiwiZW1pdEVycm9yTlQiLCJlbWl0Q2xvc2VOVCIsIl93cml0YWJsZVN0YXRlIiwiZW1pdENsb3NlIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95IiwiX3RoaXMiLCJyZWFkYWJsZURlc3Ryb3llZCIsImRlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiZXJyb3JFbWl0dGVkIiwiX2Rlc3Ryb3kiLCJlcnIyIiwidW5kZXN0cm95IiwicmVhZGluZyIsImVuZGVkIiwiZW5kRW1pdHRlZCIsImVuZGluZyIsImZpbmFsQ2FsbGVkIiwicHJlZmluaXNoZWQiLCJmaW5pc2hlZCIsImVycm9yT3JEZXN0cm95Iiwic3RyZWFtIiwiclN0YXRlIiwid1N0YXRlIiwiYXV0b0Rlc3Ryb3kiLCJoYXNSZXF1aXJlZEVycm9yc0Jyb3dzZXIiLCJzdGF0ZSIsImhhc1JlcXVpcmVkU3RhdGUiLCJoYXNSZXF1aXJlZEJyb3dzZXIiLCJfc3RyZWFtX3dyaXRhYmxlIiwiaGFzUmVxdWlyZWRfc3RyZWFtX3dyaXRhYmxlIiwiX3N0cmVhbV9kdXBsZXgiLCJoYXNSZXF1aXJlZF9zdHJlYW1fZHVwbGV4IiwiZXJyb3JzQnJvd3NlciIsInJlcXVpcmVFcnJvcnNCcm93c2VyIiwiY29kZXMiLCJjcmVhdGVFcnJvclR5cGUiLCJOb2RlRXJyb3IiLCJfQmFzZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIk5vZGVFcnJvcjIiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJvbmVPZiIsImV4cGVjdGVkIiwidGhpbmciLCJkZXRlcm1pbmVyIiwic2VhcmNoIiwidGhpc19sZW4iLCJzdWJzdHJpbmciLCJlbmRzV2l0aCIsInJlcXVpcmVTdGF0ZSIsIkVSUl9JTlZBTElEX09QVF9WQUxVRSIsImdldEhpZ2hXYXRlck1hcmsiLCJvcHRpb25zMiIsImR1cGxleEtleSIsImlzRHVwbGV4IiwiaHdtIiwiaGlnaFdhdGVyTWFyayIsImhpZ2hXYXRlck1hcmtGcm9tIiwib2JqZWN0TW9kZSIsInJlcXVpcmVCcm93c2VyIiwiY29uZmlnIiwibG9jYWxTdG9yYWdlIiwicmVxdWlyZV9zdHJlYW1fd3JpdGFibGUiLCJDb3JrZWRSZXF1ZXN0IiwiZW50cnkiLCJmaW5pc2giLCJjb3JrUmVxIiwiY2FsbGJhY2siLCJwZW5kaW5nY2IiLCJvbkNvcmtlZEZpbmlzaCIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIkR1cGxleCIsIldyaXRhYmxlIiwiV3JpdGFibGVTdGF0ZSIsInJlYWxIYXNJbnN0YW5jZSIsImludGVybmFsVXRpbCIsIlN0cmVhbTIiLCJPdXJVaW50OEFycmF5IiwiZGVzdHJveUltcGwiLCJfcmVxdWlyZSRjb2RlcyIsIkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEIiwiRVJSX01VTFRJUExFX0NBTExCQUNLIiwiRVJSX1NUUkVBTV9DQU5OT1RfUElQRSIsIkVSUl9TVFJFQU1fREVTVFJPWUVEIiwiRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyIsIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EIiwiRVJSX1VOS05PV05fRU5DT0RJTkciLCJub3AiLCJyZXF1aXJlX3N0cmVhbV9kdXBsZXgiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJuZWVkRHJhaW4iLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImZpbmFsIiwiX2ZpbmFsIiwiZG9Xcml0ZSIsImNodW5rIiwib253cml0ZURyYWluIiwiaG9sZGVyIiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInByZWZpbmlzaCIsImdldEJ1ZmZlciIsImN1cnJlbnQiLCJoYXNJbnN0YW5jZSIsInBpcGUiLCJfdWludDhBcnJheVRvQnVmZmVyIiwid3JpdGVBZnRlckVuZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwid3JpdGVPckJ1ZmZlciIsImNvcmsiLCJ1bmNvcmsiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJlbmRXcml0YWJsZSIsIl91bmRlc3Ryb3kiLCJvYmplY3RLZXlzIiwia2V5czIiLCJSZWFkYWJsZSIsInJlcXVpcmVfc3RyZWFtX3JlYWRhYmxlIiwidiIsImFsbG93SGFsZk9wZW4iLCJyZWFkYWJsZSIsIm9uZW5kIiwib25FbmROVCIsImhhc1JlcXVpcmVkU2FmZUJ1ZmZlciIsImhhc1JlcXVpcmVkU3RyaW5nX2RlY29kZXIiLCJlbmRPZlN0cmVhbSIsImhhc1JlcXVpcmVkRW5kT2ZTdHJlYW0iLCJhc3luY19pdGVyYXRvciIsImhhc1JlcXVpcmVkQXN5bmNfaXRlcmF0b3IiLCJmcm9tQnJvd3NlciIsImhhc1JlcXVpcmVkRnJvbUJyb3dzZXIiLCJfc3RyZWFtX3JlYWRhYmxlIiwiaGFzUmVxdWlyZWRfc3RyZWFtX3JlYWRhYmxlIiwiX3N0cmVhbV90cmFuc2Zvcm0iLCJoYXNSZXF1aXJlZF9zdHJlYW1fdHJhbnNmb3JtIiwiX3N0cmVhbV9wYXNzdGhyb3VnaCIsImhhc1JlcXVpcmVkX3N0cmVhbV9wYXNzdGhyb3VnaCIsInBpcGVsaW5lXzEiLCJoYXNSZXF1aXJlZFBpcGVsaW5lIiwic3RyaW5nX2RlY29kZXIiLCJzYWZlQnVmZmVyIiwicmVxdWlyZVN0cmluZ19kZWNvZGVyIiwiY29weVByb3BzIiwiU2FmZUJ1ZmZlciIsIlN0cmluZ0RlY29kZXIiLCJuYiIsImVuYyIsIm5lbmMiLCJyZXRyaWVkIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwibm9ybWFsaXplRW5jb2RpbmciLCJ0ZXh0IiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInAiLCJyIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsInRvdGFsIiwidXRmOENoZWNrSW5jb21wbGV0ZSIsInJlcXVpcmVFbmRPZlN0cmVhbSIsIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFIiwibm9vcDIiLCJlb3MiLCJjYWxsZWQiLCJfbGVuIiwiX2tleSIsIm9uY2UzIiwib25sZWdhY3lmaW5pc2giLCJvbmZpbmlzaCIsIndyaXRhYmxlRW5kZWQiLCJyZWFkYWJsZUVuZGVkIiwib25lcnJvciIsIm9uY2xvc2UiLCJvbnJlcXVlc3QiLCJyZXEiLCJzZXRIZWFkZXIiLCJhYm9ydCIsImlzUmVxdWVzdCIsInJlcXVpcmVBc3luY19pdGVyYXRvciIsIl9PYmplY3Qkc2V0UHJvdG90eXBlTyIsIl9kZWZpbmVQcm9wZXJ0eSIsImtMYXN0UmVzb2x2ZSIsImtMYXN0UmVqZWN0Iiwia0Vycm9yIiwia0VuZGVkIiwia0xhc3RQcm9taXNlIiwia0hhbmRsZVByb21pc2UiLCJrU3RyZWFtIiwiY3JlYXRlSXRlclJlc3VsdCIsInJlYWRBbmRSZXNvbHZlIiwiaXRlciIsIm9uUmVhZGFibGUiLCJBc3luY0l0ZXJhdG9yUHJvdG90eXBlIiwiUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlIiwibGFzdFByb21pc2UiLCJ3cmFwRm9yTmV4dCIsImFzeW5jSXRlcmF0b3IiLCJfdGhpczIiLCJfT2JqZWN0JGNyZWF0ZSIsIlJlYWRhYmxlU3RhdGUiLCJkZWJ1ZyIsIkVFbGlzdGVuZXJDb3VudCIsImRlYnVnVXRpbCIsImNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciIsIkJ1ZmZlckxpc3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImhlYWQiLCJ0YWlsIiwicHJvdG9Qcm9wcyIsImhhc1N0cmluZ3MiLCJfZ2V0U3RyaW5nIiwiX2dldEJ1ZmZlciIsInNvdXJjZSIsIl9vYmplY3RTcHJlYWQiLCJyZXF1aXJlQnVmZmVyX2xpc3QiLCJFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GIiwiRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCIsImtQcm94eUV2ZW50cyIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsInBhdXNlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJlbWl0UmVhZGFibGVfIiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsImFkZENodW5rIiwibWF5YmVSZWFkTW9yZSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJjb250ZW50IiwiY2xlYXIiLCJNQVhfSFdNIiwiaG93TXVjaFRvUmVhZCIsImNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwidXBkYXRlUmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWUiLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImZyb21MaXN0IiwiY29uc3VtZSIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibk9yaWciLCJkb1JlYWQiLCJkZXN0IiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmRyYWluIiwib25kYXRhIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJwYXVzZSIsImV2ZW50IiwicHJlcGVuZExpc3RlbmVyMiIsImRlc3RzIiwiZXYiLCJ3cmFwIiwibjIiLCJfZnJvbUxpc3QiLCJpdGVyYWJsZSIsInJlcXVpcmVfc3RyZWFtX3RyYW5zZm9ybSIsIlRyYW5zZm9ybSIsIkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkciLCJFUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzAiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJfdHJhbnNmb3JtIiwiZmx1c2giLCJfZmx1c2giLCJzdHJlYW1Ccm93c2VyaWZ5IiwiU3RyZWFtJDEiLCJFRSIsIlBhc3NUaHJvdWdoIiwicmVxdWlyZV9zdHJlYW1fcGFzc3Rocm91Z2giLCJwaXBlbGluZSIsIkVSUl9NSVNTSU5HX0FSR1MiLCJ0byIsInN0cmVhbXMiLCJwb3BDYWxsYmFjayIsImRlc3Ryb3lzIiwiY2xvc2VkIiwiZGVzdHJveWVyIiwicmVxdWlyZVBpcGVsaW5lIiwiU3RyZWFtIiwiX2lzU3RkaW8iLCJkaWRPbkVuZCIsImNsZWFudXAiLCJzYXgyIiwicGFyc2VyIiwic3RyaWN0Iiwib3B0IiwiU0FYUGFyc2VyIiwiU0FYU3RyZWFtIiwiY3JlYXRlU3RyZWFtIiwiTUFYX0JVRkZFUl9MRU5HVEgiLCJidWZmZXJzIiwiY2xlYXJCdWZmZXJzIiwicSIsImJ1ZmZlckNoZWNrUG9zaXRpb24iLCJsb3dlcmNhc2UiLCJsb3dlcmNhc2V0YWdzIiwibG9vc2VDYXNlIiwidGFncyIsImNsb3NlZFJvb3QiLCJzYXdSb290Iiwibm9zY3JpcHQiLCJTIiwiQkVHSU4iLCJzdHJpY3RFbnRpdGllcyIsIkVOVElUSUVTIiwiWE1MX0VOVElUSUVTIiwiYXR0cmliTGlzdCIsInhtbG5zIiwibnMiLCJyb290TlMiLCJ0cmFja1Bvc2l0aW9uIiwiY29sdW1uIiwiZW1pdDIiLCJFVkVOVFMiLCJGIiwiQkVHSU5fV0hJVEVTUEFDRSIsImJlZ2luV2hpdGVTcGFjZSIsIlRFWFQiLCJzdGFydGkiLCJ0ZXh0Tm9kZSIsImlzV2hpdGVzcGFjZSIsInN0cmljdEZhaWwiLCJURVhUX0VOVElUWSIsIk9QRU5fV0FLQSIsInN0YXJ0VGFnUG9zaXRpb24iLCJTQ1JJUFQiLCJTQ1JJUFRfRU5ESU5HIiwic2NyaXB0IiwiQ0xPU0VfVEFHIiwiU0dNTF9ERUNMIiwic2dtbERlY2wiLCJpc01hdGNoIiwibmFtZVN0YXJ0IiwiT1BFTl9UQUciLCJ0YWdOYW1lIiwiUFJPQ19JTlNUIiwicHJvY0luc3ROYW1lIiwicHJvY0luc3RCb2R5IiwiQ0RBVEEiLCJlbWl0Tm9kZSIsImNkYXRhIiwiQ09NTUVOVCIsImNvbW1lbnQiLCJET0NUWVBFIiwiZG9jdHlwZSIsImlzUXVvdGUiLCJTR01MX0RFQ0xfUVVPVEVEIiwiRE9DVFlQRV9EVEQiLCJET0NUWVBFX1FVT1RFRCIsIkRPQ1RZUEVfRFREX1FVT1RFRCIsIkNPTU1FTlRfRU5ESU5HIiwiQ09NTUVOVF9FTkRFRCIsInRleHRvcHRzIiwiQ0RBVEFfRU5ESU5HIiwiQ0RBVEFfRU5ESU5HXzIiLCJQUk9DX0lOU1RfRU5ESU5HIiwiUFJPQ19JTlNUX0JPRFkiLCJib2R5IiwibmFtZUJvZHkiLCJuZXdUYWciLCJvcGVuVGFnIiwiT1BFTl9UQUdfU0xBU0giLCJBVFRSSUIiLCJjbG9zZVRhZyIsImF0dHJpYk5hbWUiLCJhdHRyaWJWYWx1ZSIsIkFUVFJJQl9OQU1FIiwiQVRUUklCX1ZBTFVFIiwiYXR0cmliIiwiQVRUUklCX05BTUVfU0FXX1dISVRFIiwiYXR0cmlidXRlcyIsIkFUVFJJQl9WQUxVRV9RVU9URUQiLCJBVFRSSUJfVkFMVUVfVU5RVU9URUQiLCJBVFRSSUJfVkFMVUVfRU5USVRZX1EiLCJBVFRSSUJfVkFMVUVfQ0xPU0VEIiwiaXNBdHRyaWJFbmQiLCJBVFRSSUJfVkFMVUVfRU5USVRZX1UiLCJDTE9TRV9UQUdfU0FXX1dISVRFIiwibm90TWF0Y2giLCJyZXR1cm5TdGF0ZSIsInBhcnNlRW50aXR5IiwiZW50aXR5IiwiZW50aXR5Qm9keSIsImVudGl0eVN0YXJ0IiwibWF4QWxsb3dlZCIsIm1heEFjdHVhbCIsImNsb3NlVGV4dCIsImNoZWNrQnVmZmVyTGVuZ3RoIiwiY2xvc2UiLCJleCIsInN0cmVhbVdyYXBzIiwiX3BhcnNlciIsIm1lIiwiX2RlY29kZXIiLCJTRCIsIlhNTF9OQU1FU1BBQ0UiLCJYTUxOU19OQU1FU1BBQ0UiLCJ4bWwiLCJyZWdleCIsInN0cmluZ0Zyb21DaGFyQ29kZSIsImZyb21Db2RlUG9pbnQiLCJTVEFURSIsIkNPTU1FTlRfU1RBUlRJTkciLCJzMiIsIm5vZGVUeXBlIiwibm9ybWFsaXplIiwicGFyZW50IiwicW5hbWUiLCJhdHRyaWJ1dGUyIiwicXVhbE5hbWUiLCJwcmVmaXgiLCJsb2NhbCIsInFuIiwic2VsZkNsb3NpbmciLCJ1cmkiLCJudiIsImlzU2VsZkNsb3NpbmciLCJ0IiwiY2xvc2VUbyIsImVudGl0eUxDIiwibnVtU3RyIiwiaGlnaFN1cnJvZ2F0ZSIsImxvd1N1cnJvZ2F0ZSIsImNvZGVVbml0cyIsIm9wdGlvbnMiLCJjdXJyZW50RWxlbWVudCQxIiwiYXJyYXlIZWxwZXIiLCJpc0FycmF5JDIiLCJvcHRpb25zSGVscGVyIiwiY29weU9wdGlvbnMiLCJlbnN1cmVGbGFnRXhpc3RzIiwiaXRlbSIsImVuc3VyZVNwYWNlc0V4aXN0cyIsInNwYWNlcyIsImVuc3VyZUFsd2F5c0FycmF5RXhpc3RzIiwiYWx3YXlzQXJyYXkiLCJlbnN1cmVLZXlFeGlzdHMiLCJjb21wYWN0IiwiY2hlY2tGbkV4aXN0cyIsInNheCIsImhlbHBlciQyIiwiaXNBcnJheSQxIiwibmF0aXZlVHlwZSIsIm5WYWx1ZSIsImJWYWx1ZSIsImFkZEZpZWxkIiwiaW5zdHJ1Y3Rpb25GbiIsInRlbXAiLCJpbnN0cnVjdGlvbk5hbWVGbiIsImVsZW1lbnRzS2V5IiwiZWxlbWVudDIiLCJ0eXBlS2V5IiwibmFtZUtleSIsImluc3RydWN0aW9uSGFzQXR0cmlidXRlcyIsImF0dHJpYnV0ZXNLZXkiLCJpbnN0cnVjdGlvbktleSIsImFkZFBhcmVudCIsInBhcmVudEtleSIsIm1hbmlwdWxhdGVBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc0ZuIiwibmF0aXZlVHlwZUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVWYWx1ZUZuIiwiYXR0cmlidXRlTmFtZUZuIiwib25JbnN0cnVjdGlvbiIsImluc3RydWN0aW9uIiwiYXR0cnNSZWdFeHAiLCJpZ25vcmVEZWNsYXJhdGlvbiIsImRlY2xhcmF0aW9uS2V5IiwiaWdub3JlSW5zdHJ1Y3Rpb24iLCJvblN0YXJ0RWxlbWVudCIsImVsZW1lbnROYW1lRm4iLCJpZ25vcmVBdHRyaWJ1dGVzIiwiYWx3YXlzQ2hpbGRyZW4iLCJvblRleHQiLCJpZ25vcmVUZXh0IiwiY2FwdHVyZVNwYWNlc0JldHdlZW5FbGVtZW50cyIsInNhbml0aXplIiwib25Db21tZW50IiwiaWdub3JlQ29tbWVudCIsIm9uRW5kRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJvbkNkYXRhIiwiaWdub3JlQ2RhdGEiLCJvbkRvY3R5cGUiLCJpZ25vcmVEb2N0eXBlIiwib25FcnJvciIsIm5vdGUiLCJjdXJyZW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50TmFtZSIsInhtbDJqcyQyIiwieG1sMiIsInVzZXJPcHRpb25zIiwidmFsaWRhdGVPcHRpb25zJDIiLCJvbm9wZW50YWciLCJvbnRleHQiLCJvbmNvbW1lbnQiLCJvbmNsb3NldGFnIiwib25jZGF0YSIsIm9uZG9jdHlwZSIsIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiaGVscGVyIiwid3JpdGVJbmRlbnRhdGlvbiIsImZpcnN0TGluZSIsIndyaXRlQXR0cmlidXRlcyIsImF0dHIiLCJhdHRyTmFtZSIsIm5vUXVvdGVzRm9yTmF0aXZlQXR0cmlidXRlcyIsImluZGVudEF0dHJpYnV0ZXMiLCJ3cml0ZURlY2xhcmF0aW9uIiwiZGVjbGFyYXRpb24iLCJ3cml0ZUluc3RydWN0aW9uIiwiaW5zdHJ1Y3Rpb25OYW1lIiwiaW5zdHJ1Y3Rpb25WYWx1ZSIsIndyaXRlQ29tbWVudCIsImNvbW1lbnRGbiIsIndyaXRlQ2RhdGEiLCJjZGF0YUZuIiwid3JpdGVEb2N0eXBlIiwiZG9jdHlwZUZuIiwid3JpdGVUZXh0IiwidGV4dEZuIiwid3JpdGVFbGVtZW50cyIsImVsZW1lbnRzIiwiaW5kZW50IiwiZWxlbWVudE5hbWUiLCJ3aXRoQ2xvc2luZ1RhZyIsImZ1bGxUYWdFbXB0eUVsZW1lbnRGbiIsImZ1bGxUYWdFbXB0eUVsZW1lbnQiLCJpbmRlbnRUZXh0IiwiaW5kZW50Q2RhdGEiLCJpbmRlbnRJbnN0cnVjdGlvbiIsImhhc0NvbnRlbnQiLCJ3cml0ZUVsZW1lbnQiLCJjb21tZW50S2V5IiwiZG9jdHlwZUtleSIsImNkYXRhS2V5IiwidGV4dEtleSIsImhhc0NvbnRlbnRDb21wYWN0IiwiYW55Q29udGVudCIsIndyaXRlRWxlbWVudENvbXBhY3QiLCJ3cml0ZUVsZW1lbnRzQ29tcGFjdCIsIm5vZGVzIiwianMyeG1sJDIiLCJqcyIsInZhbGlkYXRlT3B0aW9ucyIsImxpYiIsImNvbnZlcnRUb1htbENvbXBvbmVudCIsInhtbENvbXBvbmVudCIsIkltcG9ydGVkWG1sQ29tcG9uZW50IiwiY2hpbGRFbGVtZW50cyIsImNoaWxkRWxtIiwiSW1wb3J0ZWRYbWxDb21wb25lbnRBdHRyaWJ1dGVzIiwiZnJvbVhtbFN0cmluZyIsImltcG9ydGVkQ29udGVudCIsInhtbE9iaiIsIkltcG9ydGVkUm9vdEVsZW1lbnRBdHRyaWJ1dGVzIiwiSW5pdGlhbGl6YWJsZVhtbENvbXBvbmVudCIsImluaXRDb21wb25lbnQiLCJkZWNpbWFsTnVtYmVyIiwidW5zaWduZWREZWNpbWFsTnVtYmVyIiwiaGV4QmluYXJ5IiwiZXhwZWN0ZWRMZW5ndGgiLCJzaG9ydEhleE51bWJlciIsInVDaGFySGV4TnVtYmVyIiwidW5pdmVyc2FsTWVhc3VyZVZhbHVlIiwidW5pdCIsImFtb3VudCIsInBvc2l0aXZlVW5pdmVyc2FsTWVhc3VyZVZhbHVlIiwiaGV4Q29sb3JWYWx1ZSIsInNpZ25lZFR3aXBzTWVhc3VyZVZhbHVlIiwiaHBzTWVhc3VyZVZhbHVlIiwidHdpcHNNZWFzdXJlVmFsdWUiLCJwZXJjZW50YWdlVmFsdWUiLCJwZXJjZW50IiwibWVhc3VyZW1lbnRPclBlcmNlbnRWYWx1ZSIsImVpZ2h0aFBvaW50TWVhc3VyZVZhbHVlIiwicG9pbnRNZWFzdXJlVmFsdWUiLCJkYXRlVGltZVZhbHVlIiwidG9JU09TdHJpbmciLCJPbk9mZkVsZW1lbnQiLCJIcHNNZWFzdXJlRWxlbWVudCIsIkVtcHR5RWxlbWVudCIsIlN0cmluZ1ZhbHVlRWxlbWVudCIsImNyZWF0ZVN0cmluZ0VsZW1lbnQiLCJCdWlsZGVyRWxlbWVudCIsIk51bWJlclZhbHVlRWxlbWVudCIsIlN0cmluZ0VudW1WYWx1ZUVsZW1lbnQiLCJTdHJpbmdDb250YWluZXIiLCJBbGlnbm1lbnRUeXBlIiwiU1RBUlQiLCJDRU5URVIiLCJFTkQiLCJCT1RIIiwiTUVESVVNX0tBU0hJREEiLCJESVNUUklCVVRFIiwiTlVNX1RBQiIsIkhJR0hfS0FTSElEQSIsIkxPV19LQVNISURBIiwiVEhBSV9ESVNUUklCVVRFIiwiTEVGVCIsIlJJR0hUIiwiSlVTVElGSUVEIiwiQWxpZ25tZW50QXR0cmlidXRlcyIsIkFsaWdubWVudCIsIkJvcmRlckVsZW1lbnQiLCJCb3JkZXJzQXR0cmlidXRlcyIsIkJvcmRlclN0eWxlIiwiU0lOR0xFIiwiREFTSF9ET1RfU1RST0tFRCIsIkRBU0hFRCIsIkRBU0hfU01BTExfR0FQIiwiRE9UX0RBU0giLCJET1RfRE9UX0RBU0giLCJET1RURUQiLCJET1VCTEUiLCJET1VCTEVfV0FWRSIsIklOU0VUIiwiTklMIiwiTk9ORSIsIk9VVFNFVCIsIlRISUNLIiwiVEhJQ0tfVEhJTl9MQVJHRV9HQVAiLCJUSElDS19USElOX01FRElVTV9HQVAiLCJUSElDS19USElOX1NNQUxMX0dBUCIsIlRISU5fVEhJQ0tfTEFSR0VfR0FQIiwiVEhJTl9USElDS19NRURJVU1fR0FQIiwiVEhJTl9USElDS19TTUFMTF9HQVAiLCJUSElOX1RISUNLX1RISU5fTEFSR0VfR0FQIiwiVEhJTl9USElDS19USElOX01FRElVTV9HQVAiLCJUSElOX1RISUNLX1RISU5fU01BTExfR0FQIiwiVEhSRUVfRF9FTUJPU1MiLCJUSFJFRV9EX0VOR1JBVkUiLCJUUklQTEUiLCJXQVZFIiwiQm9yZGVyIiwiVGhlbWF0aWNCcmVhayIsIkluZGVudCIsImhhbmdpbmciLCJCcmVhayQxIiwiRmlkQ2hhckF0dHJzIiwiZGlydHkiLCJCZWdpbiIsIlNlcGFyYXRlIiwiRW5kIiwiU3BhY2VUeXBlIiwiREVGQVVMVCIsIlBSRVNFUlZFIiwiVGV4dEF0dHJpYnV0ZXMiLCJQYWdlIiwiTnVtYmVyT2ZQYWdlcyIsIk51bWJlck9mUGFnZXNTZWN0aW9uIiwiQ3VycmVudFNlY3Rpb24iLCJTaGFkaW5nQXR0cmlidXRlcyIsIlNoYWRpbmciLCJDaGFuZ2VBdHRyaWJ1dGVzIiwiaWQiLCJhdXRob3IiLCJkYXRlIiwiRW1waGFzaXNNYXJrVHlwZSIsIkRPVCIsIkJhc2VFbXBoYXNpc01hcmsiLCJlbXBoYXNpc01hcmtUeXBlIiwiRW1waGFzaXNNYXJrIiwiQ2hhcmFjdGVyU3BhY2luZyIsIkNvbG9yIiwiSGlnaGxpZ2h0IiwiSGlnaGxpZ2h0Q29tcGxleFNjcmlwdCIsIlJ1bkZvbnRBdHRyaWJ1dGVzIiwiYXNjaWkiLCJjcyIsImVhc3RBc2lhIiwiaEFuc2kiLCJoaW50IiwiUnVuRm9udHMiLCJuYW1lT3JBdHRycyIsIlZlcnRpY2FsQWxpZ24kMSIsIlN1cGVyU2NyaXB0IiwiU3ViU2NyaXB0IiwiVW5kZXJsaW5lVHlwZSIsIldPUkRTIiwiRE9UVEVESEVBVlkiLCJEQVNIIiwiREFTSEVESEVBVlkiLCJEQVNITE9ORyIsIkRBU0hMT05HSEVBVlkiLCJET1REQVNIIiwiREFTSERPVEhFQVZZIiwiRE9URE9UREFTSCIsIkRBU0hET1RET1RIRUFWWSIsIldBVllIRUFWWSIsIldBVllET1VCTEUiLCJVbmRlcmxpbmUiLCJ1bmRlcmxpbmVUeXBlIiwiUnVuUHJvcGVydGllcyIsIl9iIiwibm9Qcm9vZiIsImJvbGQiLCJib2xkQ29tcGxleFNjcmlwdCIsIml0YWxpY3MiLCJpdGFsaWNzQ29tcGxleFNjcmlwdCIsInVuZGVybGluZSIsImVmZmVjdCIsImVtcGhhc2lzTWFyayIsImtlcm4iLCJzekNzIiwic2l6ZUNvbXBsZXhTY3JpcHQiLCJyaWdodFRvTGVmdCIsInNtYWxsQ2FwcyIsImFsbENhcHMiLCJzdHJpa2UiLCJkb3VibGVTdHJpa2UiLCJzdWJTY3JpcHQiLCJzdXBlclNjcmlwdCIsImZvbnQiLCJoaWdobGlnaHQiLCJoaWdobGlnaHRDcyIsImhpZ2hsaWdodENvbXBsZXhTY3JpcHQiLCJjaGFyYWN0ZXJTcGFjaW5nIiwiZW1ib3NzIiwiaW1wcmludCIsInNoYWRpbmciLCJyZXZpc2lvbiIsIlJ1blByb3BlcnRpZXNDaGFuZ2UiLCJib3JkZXIiLCJzbmFwVG9HcmlkIiwidmFuaXNoIiwic3BlY1ZhbmlzaCIsInNjYWxlIiwibGFuZ3VhZ2UiLCJiaWRpcmVjdGlvbmFsIiwiY3JlYXRlTGFuZ3VhZ2VDb21wb25lbnQiLCJtYXRoIiwiVGV4dCIsIlBhZ2VOdW1iZXIiLCJDVVJSRU5UIiwiVE9UQUxfUEFHRVMiLCJUT1RBTF9QQUdFU19JTl9TRUNUSU9OIiwiQ1VSUkVOVF9TRUNUSU9OIiwiUnVuIiwicHJvcGVydGllcyIsImJyZWFrIiwiVGV4dFJ1biIsIlN5bWJvbEF0dHJpYnV0ZXMiLCJjaGFyIiwic3ltYm9sZm9udCIsIlN5bWJvbCQxIiwiU3ltYm9sUnVuIiwiY29udmVydEluY2hlc1RvVHdpcCIsImluY2hlcyIsInVuaXF1ZU51bWVyaWNJZENyZWF0b3IiLCJpbml0aWFsIiwiY3VycmVudENvdW50IiwiYWJzdHJhY3ROdW1VbmlxdWVOdW1lcmljSWRHZW4iLCJjb25jcmV0ZU51bVVuaXF1ZU51bWVyaWNJZEdlbiIsImRvY1Byb3BlcnRpZXNVbmlxdWVOdW1lcmljSWRHZW4iLCJib29rbWFya1VuaXF1ZU51bWVyaWNJZEdlbiIsInVuaXF1ZUlkIiwicmFuZG9tIiwibmFub2lkIiwiZ2VuZXJhdGVVdWlkUGFydCIsImRlZmF1bHRTaXplIiwiY3VzdG9tQWxwaGFiZXQiLCJ1bmlxdWVVdWlkIiwiSG9yaXpvbnRhbFBvc2l0aW9uUmVsYXRpdmVGcm9tIiwiQ0hBUkFDVEVSIiwiQ09MVU1OIiwiSU5TSURFX01BUkdJTiIsIkxFRlRfTUFSR0lOIiwiTUFSR0lOIiwiT1VUU0lERV9NQVJHSU4iLCJQQUdFIiwiUklHSFRfTUFSR0lOIiwiVmVydGljYWxQb3NpdGlvblJlbGF0aXZlRnJvbSIsIkJPVFRPTV9NQVJHSU4iLCJMSU5FIiwiUEFSQUdSQVBIIiwiVE9QX01BUkdJTiIsIlNpbXBsZVBvc0F0dHJpYnV0ZXMiLCJTaW1wbGVQb3MiLCJBbGlnbiIsIlBvc2l0aW9uT2Zmc2V0Iiwib2Zmc2V0VmFsdWUiLCJIb3Jpem9udGFsUG9zaXRpb25BdHRyaWJ1dGVzIiwicmVsYXRpdmVGcm9tIiwiSG9yaXpvbnRhbFBvc2l0aW9uIiwiaG9yaXpvbnRhbFBvc2l0aW9uIiwicmVsYXRpdmUiLCJhbGlnbiIsIlZlcnRpY2FsUG9zaXRpb25BdHRyaWJ1dGVzIiwiVmVydGljYWxQb3NpdGlvbiIsInZlcnRpY2FsUG9zaXRpb24iLCJHcmFwaGljRGF0YUF0dHJpYnV0ZXMiLCJCbGlwQXR0cmlidXRlcyIsImVtYmVkIiwiY3N0YXRlIiwiQmxpcCIsIm1lZGlhRGF0YSIsImZpbGVOYW1lIiwiU291cmNlUmVjdGFuZ2xlIiwiRmlsbFJlY3RhbmdsZSIsIlN0cmV0Y2giLCJCbGlwRmlsbCIsIlBpY0xvY2tzQXR0cmlidXRlcyIsIm5vQ2hhbmdlQXNwZWN0Iiwibm9DaGFuZ2VBcnJvd2hlYWRzIiwiUGljTG9ja3MiLCJDaGlsZE5vblZpc3VhbFByb3BlcnRpZXMiLCJjcmVhdGVIeXBlcmxpbmtDbGljayIsImxpbmtJZCIsImhhc1htbE5zIiwiTm9uVmlzdWFsUHJvcGVydGllc0F0dHJpYnV0ZXMiLCJkZXNjciIsIk5vblZpc3VhbFByb3BlcnRpZXMiLCJDb25jcmV0ZUh5cGVybGluayIsIk5vblZpc3VhbFBpY1Byb3BlcnRpZXMiLCJQaWNBdHRyaWJ1dGVzIiwiRXh0ZW50c0F0dHJpYnV0ZXMiLCJjeCIsImN5IiwiRXh0ZW50cyIsIk9mZnNldEF0dHJpYnV0ZXMiLCJPZmZzZXQiLCJGb3JtQXR0cmlidXRlcyIsImZsaXBWZXJ0aWNhbCIsImZsaXBIb3Jpem9udGFsIiwicm90YXRpb24iLCJGb3JtIiwiZmxpcCIsInZlcnRpY2FsIiwiaG9yaXpvbnRhbCIsImV4dGVudHMiLCJlbXVzIiwiY3JlYXRlTm9GaWxsIiwiY3JlYXRlU2NoZW1lQ29sb3IiLCJjcmVhdGVTb2xpZFJnYkNvbG9yIiwiY3JlYXRlU29saWRGaWxsIiwiQWRqdXN0bWVudFZhbHVlcyIsIlByZXNldEdlb21ldHJ5QXR0cmlidXRlcyIsInByc3QiLCJQcmVzZXRHZW9tZXRyeSIsIlNoYXBlUHJvcGVydGllc0F0dHJpYnV0ZXMiLCJid01vZGUiLCJTaGFwZVByb3BlcnRpZXMiLCJvdXRsaW5lIiwiZm9ybSIsIndpZHRoIiwiY2FwIiwiY29tcG91bmRMaW5lIiwic29saWRGaWxsVHlwZSIsIlBpYyIsIkdyYXBoaWNEYXRhIiwicGljIiwiR3JhcGhpY0F0dHJpYnV0ZXMiLCJHcmFwaGljIiwiVGV4dFdyYXBwaW5nVHlwZSIsIlNRVUFSRSIsIlRJR0hUIiwiVE9QX0FORF9CT1RUT00iLCJUZXh0V3JhcHBpbmdTaWRlIiwiQk9USF9TSURFUyIsIkxBUkdFU1QiLCJXcmFwTm9uZSIsIldyYXBTcXVhcmVBdHRyaWJ1dGVzIiwiZGlzdFQiLCJkaXN0QiIsImRpc3RMIiwiZGlzdFIiLCJ3cmFwVGV4dCIsIldyYXBTcXVhcmUiLCJ0ZXh0V3JhcHBpbmciLCJtYXJnaW5zIiwic2lkZSIsIldyYXBUaWdodEF0dHJpYnV0ZXMiLCJXcmFwVGlnaHQiLCJXcmFwVG9wQW5kQm90dG9tQXR0cmlidXRlcyIsIldyYXBUb3BBbmRCb3R0b20iLCJEb2NQcm9wZXJ0aWVzIiwiZGVzY3JpcHRpb24iLCJkb2NQcm9wZXJ0aWVzVW5pcXVlTnVtZXJpY0lkIiwiY3JlYXRlRWZmZWN0RXh0ZW50IiwiRXh0ZW50QXR0cmlidXRlcyIsIkV4dGVudCIsIkdyYXBoaWNGcmFtZUxvY2tBdHRyaWJ1dGVzIiwiR3JhcGhpY0ZyYW1lTG9ja3MiLCJHcmFwaGljRnJhbWVQcm9wZXJ0aWVzIiwiQW5jaG9yQXR0cmlidXRlcyIsImFsbG93T3ZlcmxhcCIsImJlaGluZERvYyIsImxheW91dEluQ2VsbCIsImxvY2tlZCIsInJlbGF0aXZlSGVpZ2h0Iiwic2ltcGxlUG9zIiwiQW5jaG9yIiwiZHJhd2luZ09wdGlvbnMiLCJmbG9hdGluZyIsImJlaGluZERvY3VtZW50IiwibG9ja0FuY2hvciIsInpJbmRleCIsImRvY1Byb3BlcnRpZXMiLCJEcmF3aW5nIiwiaW1hZ2VEYXRhIiwidHJhbnNmb3JtYXRpb24iLCJfYyIsIl9kIiwiZGlzdGFuY2VUb3AiLCJkaXN0YW5jZUJvdHRvbSIsImRpc3RhbmNlTGVmdCIsImRpc3RhbmNlUmlnaHQiLCJjcmVhdGVJbmxpbmUiLCJTZXF1ZW50aWFsSWRlbnRpZmllckluc3RydWN0aW9uIiwiaWRlbnRpZmllciIsIkZsZFNpbXBsZUF0dHJzIiwiaW5zdHIiLCJTaW1wbGVGaWVsZCIsImNhY2hlZFZhbHVlIiwiQ29tbWVudEF0dHJpYnV0ZXMiLCJpbml0aWFscyIsIkNvbW1lbnRSYW5nZUF0dHJpYnV0ZXMiLCJSb290Q29tbWVudHNBdHRyaWJ1dGVzIiwiQ29tbWVudCIsIkNvbW1lbnRzIiwiQnJlYWsyIiwiUGFnZUJyZWFrQmVmb3JlIiwiTGluZVJ1bGVUeXBlIiwiQVRfTEVBU1QiLCJFWEFDVExZIiwiRVhBQ1QiLCJBVVRPIiwiU3BhY2luZ0F0dHJpYnV0ZXMiLCJhZnRlciIsImJlZm9yZSIsImxpbmVSdWxlIiwiU3BhY2luZyIsIlN0eWxlJDEiLCJzdHlsZUlkIiwiVGFiU3RvcCIsInRhYkRlZmluaXRpb25zIiwidGFiRGVmaW5pdGlvbiIsIlRhYlN0b3BJdGVtIiwiVGFiU3RvcFR5cGUiLCJCQVIiLCJDTEVBUiIsIkRFQ0lNQUwiLCJOVU0iLCJUYWJBdHRyaWJ1dGVzIiwibGVhZGVyIiwiTnVtYmVyUHJvcGVydGllcyIsIm51bWJlcklkIiwiaW5kZW50TGV2ZWwiLCJJbmRlbnRMZXZlbCIsIk51bWJlcklkIiwibGV2ZWwiLCJGaWxlQ2hpbGQiLCJSZWxhdGlvbnNoaXBBdHRyaWJ1dGVzIiwidGFyZ2V0TW9kZSIsIlRhcmdldE1vZGVUeXBlIiwiUmVsYXRpb25zaGlwIiwiSHlwZXJsaW5rQXR0cmlidXRlcyIsImhpc3RvcnkiLCJhbmNob3IiLCJyZWxhdGlvbnNoaXBJZCIsIkV4dGVybmFsSHlwZXJsaW5rIiwiQm9va21hcmtTdGFydEF0dHJpYnV0ZXMiLCJCb29rbWFya0VuZEF0dHJpYnV0ZXMiLCJCb29rbWFyayIsImJvb2ttYXJrVW5pcXVlTnVtZXJpY0lkIiwiQm9va21hcmtTdGFydCIsIkJvb2ttYXJrRW5kIiwiT3V0bGluZUxldmVsIiwiUGFnZVJlZmVyZW5jZUZpZWxkSW5zdHJ1Y3Rpb24iLCJib29rbWFya0lkIiwiaHlwZXJsaW5rIiwidXNlUmVsYXRpdmVQb3NpdGlvbiIsIlZlcnRpY2FsQWxpZ25BdHRyaWJ1dGVzIiwidmVydGljYWxBbGlnbiIsIlZlcnRpY2FsQWxpZ25FbGVtZW50IiwiSGVhZGVyRm9vdGVyUmVmZXJlbmNlVHlwZSIsIkZJUlNUIiwiRVZFTiIsIkZvb3RlclJlZmVyZW5jZUF0dHJpYnV0ZXMiLCJIZWFkZXJGb290ZXJUeXBlIiwiSEVBREVSIiwiRk9PVEVSIiwiSGVhZGVyRm9vdGVyUmVmZXJlbmNlIiwiQ29sdW1ucyIsInNlcGFyYXRlIiwiZXF1YWxXaWR0aCIsIkRvY0dyaWRBdHRyaWJ1dGVzIiwiY2hhclNwYWNlIiwiRG9jdW1lbnRHcmlkIiwiY3JlYXRlTGluZU51bWJlclR5cGUiLCJjb3VudEJ5IiwicmVzdGFydCIsImRpc3RhbmNlIiwiUGFnZUJvcmRlcnNBdHRyaWJ1dGVzIiwiZGlzcGxheSIsIm9mZnNldEZyb20iLCJ6T3JkZXIiLCJQYWdlQm9yZGVycyIsInBhZ2VCb3JkZXJzIiwicGFnZUJvcmRlclRvcCIsInBhZ2VCb3JkZXJMZWZ0IiwicGFnZUJvcmRlckJvdHRvbSIsInBhZ2VCb3JkZXJSaWdodCIsIlBhZ2VNYXJnaW4iLCJQYWdlTnVtYmVyVHlwZUF0dHJpYnV0ZXMiLCJmb3JtYXRUeXBlIiwic2VwYXJhdG9yIiwiUGFnZU51bWJlclR5cGUiLCJQYWdlT3JpZW50YXRpb24iLCJQT1JUUkFJVCIsIkxBTkRTQ0FQRSIsIlBhZ2VTaXplIiwiaGVpZ2h0Iiwib3JpZW50YXRpb24iLCJ3aWR0aFR3aXBzIiwiaGVpZ2h0VHdpcHMiLCJQYWdlVGV4dERpcmVjdGlvbkF0dHJpYnV0ZXMiLCJQYWdlVGV4dERpcmVjdGlvbiIsIlNlY3Rpb25UeXBlQXR0cmlidXRlcyIsIlR5cGUiLCJzZWN0aW9uTWFyZ2luRGVmYXVsdHMiLCJUT1AiLCJCT1RUT00iLCJHVVRURVIiLCJzZWN0aW9uUGFnZVNpemVEZWZhdWx0cyIsIldJRFRIIiwiSEVJR0hUIiwiT1JJRU5UQVRJT04iLCJTZWN0aW9uUHJvcGVydGllcyIsInBhZ2UiLCJtYXJnaW4iLCJwYWdlTnVtYmVycyIsImJvcmRlcnMiLCJ0ZXh0RGlyZWN0aW9uIiwiZ3JpZCIsImdyaWRUeXBlIiwiaGVhZGVyV3JhcHBlckdyb3VwIiwiZm9vdGVyV3JhcHBlckdyb3VwIiwibGluZU51bWJlcnMiLCJ0aXRsZVBhZ2UiLCJhZGRIZWFkZXJGb290ZXJHcm91cCIsImdyb3VwIiwiZGVmYXVsdCIsIlZpZXciLCJSZWZlcmVuY2VJZCIsImV2ZW4iLCJCb2R5IiwiYWRkU2VjdGlvbiIsImN1cnJlbnRTZWN0aW9uIiwic2VjdGlvbnMiLCJjcmVhdGVTZWN0aW9uUGFyYWdyYXBoIiwiY29tcG9uZW50Iiwic2VjdGlvbiIsInBhcmFncmFwaCIsIlBhcmFncmFwaCIsIlBhcmFncmFwaFByb3BlcnRpZXMiLCJEb2N1bWVudEF0dHJpYnV0ZXMiLCJ3cGMiLCJtYyIsIndwMTQiLCJ3cCIsIncxMCIsIncxNCIsIncxNSIsIndwZyIsIndwaSIsInduZSIsIndwcyIsIklnbm9yYWJsZSIsImNwIiwiZGMiLCJkY3Rlcm1zIiwiZGNtaXR5cGUiLCJ4c2kiLCJjeDEiLCJjeDIiLCJjeDMiLCJjeDQiLCJjeDUiLCJjeDYiLCJjeDciLCJjeDgiLCJhaW5rIiwiYW0zZCIsIncxNmNleCIsIncxNmNpZCIsIncxNiIsIncxNnNkdGRoIiwidzE2c2UiLCJEb2N1bWVudEJhY2tncm91bmRBdHRyaWJ1dGVzIiwidGhlbWVDb2xvciIsInRoZW1lU2hhZGUiLCJ0aGVtZVRpbnQiLCJEb2N1bWVudEJhY2tncm91bmQiLCJEb2N1bWVudCIsImJhY2tncm91bmQiLCJSZWxhdGlvbnNoaXBzQXR0cmlidXRlcyIsIlJlbGF0aW9uc2hpcHMiLCJjcmVhdGVSZWxhdGlvbnNoaXAiLCJyZWxhdGlvbnNoaXAiLCJSZWxhdGlvbnNoaXBDb3VudCIsIkRvY3VtZW50V3JhcHBlciIsInJlbGF0aW9uc2hpcHMiLCJXb3JkV3JhcEF0dHJpYnV0ZXMiLCJXb3JkV3JhcCIsImNyZWF0ZUZyYW1lUHJvcGVydGllcyIsImFuY2hvckxvY2siLCJkcm9wQ2FwIiwiYW5jaG9ySG9yaXpvbnRhbCIsImFuY2hvclZlcnRpY2FsIiwic3BhY2VIb3Jpem9udGFsIiwic3BhY2VWZXJ0aWNhbCIsInJ1bGUiLCJhbGlnbm1lbnRYIiwiYWxpZ25tZW50IiwiYWxpZ25tZW50WSIsImxpbmVzIiwiaGVhZGluZyIsImJ1bGxldCIsIm51bWJlcmluZyIsImtlZXBOZXh0Iiwia2VlcExpbmVzIiwicGFnZUJyZWFrQmVmb3JlIiwiZnJhbWUiLCJ3aWRvd0NvbnRyb2wiLCJudW1iZXJpbmdSZWZlcmVuY2VzIiwicmVmZXJlbmNlIiwidGhlbWF0aWNCcmVhayIsIndvcmRXcmFwIiwib3ZlcmZsb3dQdW5jdHVhdGlvbiIsInJpZ2h0VGFiU3RvcCIsInRhYlN0b3BzIiwibGVmdFRhYlN0b3AiLCJzcGFjaW5nIiwiY29udGV4dHVhbFNwYWNpbmciLCJvdXRsaW5lTGV2ZWwiLCJzdXBwcmVzc0xpbmVOdW1iZXJzIiwiYXV0b1NwYWNlRWFzdEFzaWFuVGV4dCIsInZpZXdXcmFwcGVyIiwiZmlsZSIsIk51bWJlcmluZyIsImNyZWF0ZUNvbmNyZXRlTnVtYmVyaW5nSW5zdGFuY2UiLCJ0ZXh0UnVuIiwiY29uY3JldGVIeXBlcmxpbmsiLCJsaW5rIiwiYWRkUnVuVG9Gcm9udCIsIk1hdGhUZXh0IiwiTWF0aERlbm9taW5hdG9yIiwiTWF0aE51bWVyYXRvciIsIk1hdGhBY2NlbnRDaGFyYWN0ZXJBdHRyaWJ1dGVzIiwiYWNjZW50IiwiTWF0aEFjY2VudENoYXJhY3RlciIsIk1hdGhCYXNlIiwiTWF0aExpbWl0TG9jYXRpb25BdHRyaWJ1dGVzIiwiTWF0aExpbWl0TG9jYXRpb24iLCJNYXRoU3ViU2NyaXB0SGlkZUF0dHJpYnV0ZXMiLCJoaWRlIiwiTWF0aFN1YlNjcmlwdEhpZGUiLCJNYXRoU3VwZXJTY3JpcHRIaWRlQXR0cmlidXRlcyIsIk1hdGhTdXBlclNjcmlwdEhpZGUiLCJNYXRoTkFyeVByb3BlcnRpZXMiLCJoYXNTdXBlclNjcmlwdCIsImhhc1N1YlNjcmlwdCIsIk1hdGhTdWJTY3JpcHRFbGVtZW50IiwiTWF0aFN1cGVyU2NyaXB0RWxlbWVudCIsIk1hdGhTdXBlclNjcmlwdFByb3BlcnRpZXMiLCJNYXRoU3ViU2NyaXB0UHJvcGVydGllcyIsIk1hdGhTdWJTdXBlclNjcmlwdFByb3BlcnRpZXMiLCJNYXRoUHJlU3ViU3VwZXJTY3JpcHRQcm9wZXJ0aWVzIiwiTWF0aERlZ3JlZSIsIk1hdGhEZWdyZWVIaWRlQXR0cmlidXRlcyIsIk1hdGhEZWdyZWVIaWRlIiwiTWF0aFJhZGljYWxQcm9wZXJ0aWVzIiwiaGFzRGVncmVlIiwiTWF0aEZ1bmN0aW9uTmFtZSIsIk1hdGhGdW5jdGlvblByb3BlcnRpZXMiLCJNYXRoQmVnaW5uaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyIsImNoYXJhY3RlciIsIk1hdGhCZWdpbm5pbmdDaGFyYWN0ZXIiLCJNYXRoRW5kaW5nQ2hhcmFjdGVyQXR0cmlidXRlcyIsIk1hdGhFbmRpbmdDaGFyYWN0ZXIiLCJNYXRoQnJhY2tldFByb3BlcnRpZXMiLCJiZWdpbm5pbmdDaGFyYWN0ZXIiLCJlbmRpbmdDaGFyYWN0ZXIiLCJUYWJsZUdyaWQiLCJ3aWR0aHMiLCJHcmlkQ29sIiwiVGFibGVDZWxsTWFyZ2luIiwibWFyZ2luVW5pdFR5cGUiLCJXaWR0aFR5cGUiLCJEWEEiLCJUYWJsZVdpZHRoRWxlbWVudCIsIlBFUkNFTlRBR0UiLCJ0YWJsZVdpZHRoVmFsdWUiLCJUYWJsZUNlbGxCb3JkZXJzIiwiR3JpZFNwYW5BdHRyaWJ1dGVzIiwiR3JpZFNwYW4iLCJWZXJ0aWNhbE1lcmdlVHlwZSIsIkNPTlRJTlVFIiwiUkVTVEFSVCIsIlZlcnRpY2FsTWVyZ2VBdHRyaWJ1dGVzIiwiVmVydGljYWxNZXJnZSIsIlREaXJlY3Rpb25BdHRyaWJ1dGVzIiwiVERpcmVjdGlvbiIsIlRhYmxlQ2VsbFByb3BlcnRpZXMiLCJjb2x1bW5TcGFuIiwidmVydGljYWxNZXJnZSIsInJvd1NwYW4iLCJUYWJsZUNlbGwiLCJOT05FX0JPUkRFUiIsIkRFRkFVTFRfQk9SREVSIiwiVGFibGVCb3JkZXJzIiwiaW5zaWRlSG9yaXpvbnRhbCIsImluc2lkZVZlcnRpY2FsIiwiVGFibGVGbG9hdFByb3BlcnRpZXMiLCJob3Jpem9udGFsQW5jaG9yIiwidmVydGljYWxBbmNob3IiLCJhYnNvbHV0ZUhvcml6b250YWxQb3NpdGlvbiIsInJlbGF0aXZlSG9yaXpvbnRhbFBvc2l0aW9uIiwiYWJzb2x1dGVWZXJ0aWNhbFBvc2l0aW9uIiwicmVsYXRpdmVWZXJ0aWNhbFBvc2l0aW9uIiwiYm90dG9tRnJvbVRleHQiLCJ0b3BGcm9tVGV4dCIsImxlZnRGcm9tVGV4dCIsInJpZ2h0RnJvbVRleHQiLCJvdmVybGFwIiwiVGFibGVMYXlvdXRBdHRyaWJ1dGVzIiwiVGFibGVMYXlvdXQiLCJUYWJsZVByb3BlcnRpZXMiLCJmbG9hdCIsInZpc3VhbGx5UmlnaHRUb0xlZnQiLCJsYXlvdXQiLCJjZWxsTWFyZ2luIiwiVGFibGVSb3dIZWlnaHRBdHRyaWJ1dGVzIiwiVGFibGVSb3dIZWlnaHQiLCJUYWJsZVJvd1Byb3BlcnRpZXMiLCJjYW50U3BsaXQiLCJ0YWJsZUhlYWRlciIsIkFwcFByb3BlcnRpZXNBdHRyaWJ1dGVzIiwidnQiLCJBcHBQcm9wZXJ0aWVzIiwiQ29udGVudFR5cGVBdHRyaWJ1dGVzIiwiRGVmYXVsdEF0dHJpYnV0ZXMiLCJjb250ZW50VHlwZSIsImV4dGVuc2lvbiIsIkRlZmF1bHQiLCJPdmVycmlkZUF0dHJpYnV0ZXMiLCJwYXJ0TmFtZSIsIk92ZXJyaWRlIiwiQ29udGVudFR5cGVzIiwiYWRkRm9vdGVyIiwiYWRkSGVhZGVyIiwiQ29yZVByb3BlcnRpZXMiLCJzdWJqZWN0IiwiY3JlYXRvciIsImtleXdvcmRzIiwibGFzdE1vZGlmaWVkQnkiLCJUaW1lc3RhbXBFbGVtZW50IiwiQ3VzdG9tUHJvcGVydGllc0F0dHJpYnV0ZXMiLCJDdXN0b21Qcm9wZXJ0eUF0dHJpYnV0ZXMiLCJmbXRpZCIsIkN1c3RvbVByb3BlcnR5IiwiQ3VzdG9tUHJvcGVydHlWYWx1ZSIsIkN1c3RvbVByb3BlcnRpZXMiLCJuZXh0SWQiLCJhZGRDdXN0b21Qcm9wZXJ0eSIsIkZvb3RlckF0dHJpYnV0ZXMiLCJGb290ZXIkMSIsInJlZmVyZW5jZU51bWJlciIsImluaXRDb250ZW50IiwicmVmSWQiLCJGb290ZXJXcmFwcGVyIiwibWVkaWEiLCJyZWZlcmVuY2VJZCIsImNoaWxkRWxlbWVudCIsIk1lZGlhIiwiRm9vdG5vdGVBdHRyaWJ1dGVzIiwiRm9vdG5vdGVSZWYiLCJGb290bm90ZVJlZlJ1biIsIkZvb3Rub3RlIiwiQ29udGludWF0aW9uU2VwZXJhdG9yIiwiQ29udGludWF0aW9uU2VwZXJhdG9yUnVuIiwiU2VwZXJhdG9yIiwiU2VwZXJhdG9yUnVuIiwiRm9vdG5vdGVzQXR0cmlidXRlcyIsIkZvb3ROb3RlcyIsImJlZ2luIiwiY3JlYXRlRm9vdE5vdGUiLCJmb290bm90ZSIsIkZvb3Rub3Rlc1dyYXBwZXIiLCJmb290bm90ZXNzIiwiSGVhZGVyQXR0cmlidXRlcyIsIkhlYWRlciQxIiwiSGVhZGVyV3JhcHBlciIsImFkZEltYWdlIiwiTGV2ZWxGb3JtYXQiLCJVUFBFUl9ST01BTiIsIkxPV0VSX1JPTUFOIiwiVVBQRVJfTEVUVEVSIiwiTE9XRVJfTEVUVEVSIiwiT1JESU5BTCIsIkNBUkRJTkFMX1RFWFQiLCJPUkRJTkFMX1RFWFQiLCJIRVgiLCJDSElDQUdPIiwiSURFT0dSQVBIX19ESUdJVEFMIiwiSkFQQU5FU0VfQ09VTlRJTkciLCJBSVVFTyIsIklST0hBIiwiREVDSU1BTF9GVUxMX1dJRFRIIiwiREVDSU1BTF9IQUxGX1dJRFRIIiwiSkFQQU5FU0VfTEVHQUwiLCJKQVBBTkVTRV9ESUdJVEFMX1RFTl9USE9VU0FORCIsIkRFQ0lNQUxfRU5DTE9TRURfQ0lSQ0xFIiwiREVDSU1BTF9GVUxMX1dJRFRIMiIsIkFJVUVPX0ZVTExfV0lEVEgiLCJJUk9IQV9GVUxMX1dJRFRIIiwiREVDSU1BTF9aRVJPIiwiQlVMTEVUIiwiR0FOQURBIiwiQ0hPU1VORyIsIkRFQ0lNQUxfRU5DTE9TRURfRlVMTFNUT1AiLCJERUNJTUFMX0VOQ0xPU0VEX1BBUkVOVEhFU0VTIiwiREVDSU1BTF9FTkNMT1NFRF9DSVJDTEVfQ0hJTkVTRSIsIklERU9HUkFQSF9FTkNMT1NFRF9DSVJDTEUiLCJJREVPR1JBUEhfVFJBRElUSU9OQUwiLCJJREVPR1JBUEhfWk9ESUFDIiwiSURFT0dSQVBIX1pPRElBQ19UUkFESVRJT05BTCIsIlRBSVdBTkVTRV9DT1VOVElORyIsIklERU9HUkFQSF9MRUdBTF9UUkFESVRJT05BTCIsIlRBSVdBTkVTRV9DT1VOVElOR19USE9VU0FORCIsIlRBSVdBTkVTRV9ESUdJVEFMIiwiQ0hJTkVTRV9DT1VOVElORyIsIkNISU5FU0VfTEVHQUxfU0lNUExJRklFRCIsIkNISU5FU0VfQ09VTlRJTkdfVEhPVVNBTkQiLCJLT1JFQU5fRElHSVRBTCIsIktPUkVBTl9DT1VOVElORyIsIktPUkVBTl9MRUdBTCIsIktPUkVBTl9ESUdJVEFMMiIsIlZJRVROQU1FU0VfQ09VTlRJTkciLCJSVVNTSUFOX0xPV0VSIiwiUlVTU0lBTl9VUFBFUiIsIk5VTUJFUl9JTl9EQVNIIiwiSEVCUkVXMSIsIkhFQlJFVzIiLCJBUkFCSUNfQUxQSEEiLCJBUkFCSUNfQUJKQUQiLCJISU5ESV9WT1dFTFMiLCJISU5ESV9DT05TT05BTlRTIiwiSElORElfTlVNQkVSUyIsIkhJTkRJX0NPVU5USU5HIiwiVEhBSV9MRVRURVJTIiwiVEhBSV9OVU1CRVJTIiwiVEhBSV9DT1VOVElORyIsIkJBSFRfVEVYVCIsIkRPTExBUl9URVhUIiwiQ1VTVE9NIiwiTGV2ZWxBdHRyaWJ1dGVzIiwiaWx2bCIsInRlbnRhdGl2ZSIsIk51bWJlckZvcm1hdCIsIkxldmVsVGV4dCIsIkxldmVsSmMiLCJTdWZmaXgiLCJJc0xlZ2FsTnVtYmVyaW5nU3R5bGUiLCJMZXZlbEJhc2UiLCJmb3JtYXQyIiwic3VmZml4IiwiaXNMZWdhbE51bWJlcmluZ1N0eWxlIiwicGFyYWdyYXBoUHJvcGVydGllcyIsInJ1blByb3BlcnRpZXMiLCJMZXZlbCIsIk11bHRpTGV2ZWxUeXBlIiwiQWJzdHJhY3ROdW1iZXJpbmdBdHRyaWJ1dGVzIiwiYWJzdHJhY3ROdW1JZCIsInJlc3RhcnROdW1iZXJpbmdBZnRlckJyZWFrIiwiQWJzdHJhY3ROdW1iZXJpbmciLCJsZXZlbE9wdGlvbnMiLCJvcHRpb24iLCJBYnN0cmFjdE51bUlkIiwiTnVtQXR0cmlidXRlcyIsIm51bUlkIiwiQ29uY3JldGVOdW1iZXJpbmciLCJvdmVycmlkZUxldmVscyIsIkxldmVsT3ZlcnJpZGUiLCJMZXZlbE92ZXJyaWRlQXR0cmlidXRlcyIsImxldmVsTnVtIiwiU3RhcnRPdmVycmlkZSIsIlN0YXJ0T3ZlcnJpZGVBdHRyaWJ1dGVzIiwiYWJzdHJhY3ROdW1iZXJpbmciLCJhYnN0cmFjdE51bVVuaXF1ZU51bWVyaWNJZCIsImNvbmNyZXRlTnVtYmVyaW5nTWFwIiwiYWJzdHJhY3ROdW1iZXJpbmdNYXAiLCJjb24iLCJsZXZlbHMiLCJyZWZlcmVuY2VDb25maWdNYXAiLCJmdWxsUmVmZXJlbmNlIiwiaGFzIiwicmVmZXJlbmNlQ29uZmlnTGV2ZWxzIiwiZmlyc3RMZXZlbFN0YXJ0TnVtYmVyIiwiY29uY3JldGVOdW1iZXJpbmdTZXR0aW5ncyIsImNvbmNyZXRlTnVtVW5pcXVlTnVtZXJpY0lkIiwiUmVmZXJlbmNlQ29uZmlnIiwiQ29tcGF0aWJpbGl0eVNldHRpbmdBdHRyaWJ1dGVzIiwiQ29tcGF0aWJpbGl0eVNldHRpbmciLCJDb21wYXRpYmlsaXR5IiwidXNlU2luZ2xlQm9yZGVyZm9yQ29udGlndW91c0NlbGxzIiwid29yZFBlcmZlY3RKdXN0aWZpY2F0aW9uIiwibm9UYWJTdG9wRm9ySGFuZ2luZ0luZGVudCIsIm5vTGVhZGluZyIsInNwYWNlRm9yVW5kZXJsaW5lIiwibm9Db2x1bW5CYWxhbmNlIiwiYmFsYW5jZVNpbmdsZUJ5dGVEb3VibGVCeXRlV2lkdGgiLCJub0V4dHJhTGluZVNwYWNpbmciLCJkb05vdExlYXZlQmFja3NsYXNoQWxvbmUiLCJ1bmRlcmxpbmVUcmFpbGluZ1NwYWNlcyIsImRvTm90RXhwYW5kU2hpZnRSZXR1cm4iLCJzcGFjaW5nSW5XaG9sZVBvaW50cyIsImxpbmVXcmFwTGlrZVdvcmQ2IiwicHJpbnRCb2R5VGV4dEJlZm9yZUhlYWRlciIsInByaW50Q29sb3JzQmxhY2siLCJzcGFjZVdpZHRoIiwic2hvd0JyZWFrc0luRnJhbWVzIiwic3ViRm9udEJ5U2l6ZSIsInN1cHByZXNzQm90dG9tU3BhY2luZyIsInN1cHByZXNzVG9wU3BhY2luZyIsInN1cHByZXNzU3BhY2luZ0F0VG9wT2ZQYWdlIiwic3VwcHJlc3NUb3BTcGFjaW5nV1AiLCJzdXBwcmVzc1NwQmZBZnRlclBnQnJrIiwic3dhcEJvcmRlcnNGYWNpbmdQYWdlcyIsImNvbnZlcnRNYWlsTWVyZ2VFc2MiLCJ0cnVuY2F0ZUZvbnRIZWlnaHRzTGlrZVdQNiIsIm1hY1dvcmRTbWFsbENhcHMiLCJ1c2VQcmludGVyTWV0cmljcyIsImRvTm90U3VwcHJlc3NQYXJhZ3JhcGhCb3JkZXJzIiwid3JhcFRyYWlsU3BhY2VzIiwiZm9vdG5vdGVMYXlvdXRMaWtlV1c4Iiwic2hhcGVMYXlvdXRMaWtlV1c4IiwiYWxpZ25UYWJsZXNSb3dCeVJvdyIsImZvcmdldExhc3RUYWJBbGlnbm1lbnQiLCJhZGp1c3RMaW5lSGVpZ2h0SW5UYWJsZSIsImF1dG9TcGFjZUxpa2VXb3JkOTUiLCJub1NwYWNlUmFpc2VMb3dlciIsImRvTm90VXNlSFRNTFBhcmFncmFwaEF1dG9TcGFjaW5nIiwibGF5b3V0UmF3VGFibGVXaWR0aCIsImxheW91dFRhYmxlUm93c0FwYXJ0IiwidXNlV29yZDk3TGluZUJyZWFrUnVsZXMiLCJkb05vdEJyZWFrV3JhcHBlZFRhYmxlcyIsImRvTm90U25hcFRvR3JpZEluQ2VsbCIsInNlbGVjdEZpZWxkV2l0aEZpcnN0T3JMYXN0Q2hhcmFjdGVyIiwiYXBwbHlCcmVha2luZ1J1bGVzIiwiZG9Ob3RXcmFwVGV4dFdpdGhQdW5jdHVhdGlvbiIsImRvTm90VXNlRWFzdEFzaWFuQnJlYWtSdWxlcyIsInVzZVdvcmQyMDAyVGFibGVTdHlsZVJ1bGVzIiwiZ3Jvd0F1dG9maXQiLCJ1c2VGRUxheW91dCIsInVzZU5vcm1hbFN0eWxlRm9yTGlzdCIsImRvTm90VXNlSW5kZW50QXNOdW1iZXJpbmdUYWJTdG9wIiwidXNlQWx0ZXJuYXRlRWFzdEFzaWFuTGluZUJyZWFrUnVsZXMiLCJhbGxvd1NwYWNlT2ZTYW1lU3R5bGVJblRhYmxlIiwiZG9Ob3RTdXBwcmVzc0luZGVudGF0aW9uIiwiZG9Ob3RBdXRvZml0Q29uc3RyYWluZWRUYWJsZXMiLCJhdXRvZml0VG9GaXJzdEZpeGVkV2lkdGhDZWxsIiwidW5kZXJsaW5lVGFiSW5OdW1iZXJpbmdMaXN0IiwiZGlzcGxheUhhbmd1bEZpeGVkV2lkdGgiLCJzcGxpdFBnQnJlYWtBbmRQYXJhTWFyayIsImRvTm90VmVydGljYWxseUFsaWduQ2VsbFdpdGhTcCIsImRvTm90QnJlYWtDb25zdHJhaW5lZEZvcmNlZFRhYmxlIiwiaWdub3JlVmVydGljYWxBbGlnbm1lbnRJblRleHRib3hlcyIsInVzZUFuc2lLZXJuaW5nUGFpcnMiLCJjYWNoZWRDb2x1bW5CYWxhbmNlIiwiU2V0dGluZ3NBdHRyaWJ1dGVzIiwiU2V0dGluZ3MiLCJ0cmFja1JldmlzaW9ucyIsImV2ZW5BbmRPZGRIZWFkZXJzIiwidXBkYXRlRmllbGRzIiwiZGVmYXVsdFRhYlN0b3AiLCJjb21wYXRpYmlsaXR5IiwiY29tcGF0aWJpbGl0eU1vZGVWZXJzaW9uIiwiQ29tcG9uZW50QXR0cmlidXRlcyIsIk5hbWUiLCJVaVByaW9yaXR5IiwiU3R5bGVBdHRyaWJ1dGVzIiwiY3VzdG9tU3R5bGUiLCJTdHlsZTIiLCJiYXNlZE9uIiwidWlQcmlvcml0eSIsInNlbWlIaWRkZW4iLCJ1bmhpZGVXaGVuVXNlZCIsInF1aWNrRm9ybWF0IiwiU3R5bGVGb3JQYXJhZ3JhcGgiLCJTdHlsZUZvckNoYXJhY3RlciIsIkhlYWRpbmdTdHlsZSIsIlRpdGxlU3R5bGUiLCJIZWFkaW5nMVN0eWxlIiwiSGVhZGluZzJTdHlsZSIsIkhlYWRpbmczU3R5bGUiLCJIZWFkaW5nNFN0eWxlIiwiSGVhZGluZzVTdHlsZSIsIkhlYWRpbmc2U3R5bGUiLCJTdHJvbmdTdHlsZSIsIkxpc3RQYXJhZ3JhcGgiLCJGb290bm90ZVRleHQiLCJGb290bm90ZVJlZmVyZW5jZVN0eWxlIiwiRm9vdG5vdGVUZXh0Q2hhciIsIkh5cGVybGlua1N0eWxlIiwiU3R5bGVzIiwiaW5pdGlhbFN0eWxlcyIsImltcG9ydGVkU3R5bGVzIiwicGFyYWdyYXBoU3R5bGVzIiwiY2hhcmFjdGVyU3R5bGVzIiwiUGFyYWdyYXBoUHJvcGVydGllc0RlZmF1bHRzIiwiUnVuUHJvcGVydGllc0RlZmF1bHRzIiwiRG9jdW1lbnREZWZhdWx0cyIsInJ1blByb3BlcnRpZXNEZWZhdWx0cyIsInBhcmFncmFwaFByb3BlcnRpZXNEZWZhdWx0cyIsIkV4dGVybmFsU3R5bGVzRmFjdG9yeSIsIm5ld0luc3RhbmNlIiwieG1sRGF0YSIsInN0eWxlc1htbEVsZW1lbnQiLCJ4bWxFbG0iLCJzdHlsZXNFbGVtZW50cyIsIkRlZmF1bHRTdHlsZXNGYWN0b3J5IiwiaGVhZGluZzEiLCJoZWFkaW5nMiIsImhlYWRpbmczIiwiaGVhZGluZzQiLCJoZWFkaW5nNSIsImhlYWRpbmc2Iiwic3Ryb25nIiwibGlzdFBhcmFncmFwaCIsImZvb3Rub3RlUmVmZXJlbmNlIiwiZm9vdG5vdGVUZXh0IiwiZm9vdG5vdGVUZXh0Q2hhciIsImNyZWF0ZUZvbnRSZWxhdGlvbnNoaXAiLCJmb250S2V5Iiwic3Vic2V0dGVkIiwiRm9udFdyYXBwZXIiLCJmb250cyIsImZvbnRPcHRpb25zV2l0aEtleSIsImZvbnRUYWJsZSIsImNoYXJhY3RlclNldCIsImFsdE5hbWUiLCJwYW5vc2UxIiwiY2hhcnNldCIsImZhbWlseSIsIm5vdFRydWVUeXBlIiwicGl0Y2giLCJzaWciLCJlbWJlZFJlZ3VsYXIiLCJlbWJlZEJvbGQiLCJlbWJlZEl0YWxpYyIsImVtYmVkQm9sZEl0YWxpYyIsInVzYjAiLCJ1c2IxIiwidXNiMiIsInVzYjMiLCJjc2IwIiwiY3NiMSIsImNyZWF0ZUZvbnQiLCJjcmVhdGVSZWd1bGFyRm9udCIsIkZpbGUiLCJfZSIsIl9mIiwiX2ciLCJfaCIsImNvcmVQcm9wZXJ0aWVzIiwiY29tbWVudHMiLCJmaWxlUmVsYXRpb25zaGlwcyIsImN1c3RvbVByb3BlcnRpZXMiLCJhcHBQcm9wZXJ0aWVzIiwiZm9vdG5vdGVzV3JhcHBlciIsImNvbnRlbnRUeXBlcyIsImRvY3VtZW50V3JhcHBlciIsInNldHRpbmdzIiwiY29tcGF0YWJpbGl0eU1vZGVWZXJzaW9uIiwiZXZlbkFuZE9kZEhlYWRlckFuZEZvb3RlcnMiLCJmZWF0dXJlcyIsImV4dGVybmFsU3R5bGVzIiwic3R5bGVzRmFjdG9yeSIsImRlZmF1bHRTdHlsZXMiLCJhZGREZWZhdWx0UmVsYXRpb25zaGlwcyIsImZvb3Rub3RlcyIsImZvbnRXcmFwcGVyIiwiaGVhZGVycyIsImZvb3RlcnMiLCJjcmVhdGVIZWFkZXIiLCJjcmVhdGVGb290ZXIiLCJ3cmFwcGVyIiwiY3VycmVudFJlbGF0aW9uc2hpcElkIiwiYWRkSGVhZGVyVG9Eb2N1bWVudCIsImFkZEZvb3RlclRvRG9jdW1lbnQiLCJGaWxlUmVsYXRpb25zaGlwcyIsIkhlYWRlcnMiLCJGb290ZXJzIiwiRm9udFRhYmxlIiwiRmllbGRJbnN0cnVjdGlvbiIsImNhcHRpb25MYWJlbCIsImVudHJpZXNGcm9tQm9va21hcmsiLCJjYXB0aW9uTGFiZWxJbmNsdWRpbmdOdW1iZXJzIiwic2VxdWVuY2VBbmRQYWdlTnVtYmVyc1NlcGFyYXRvciIsInRjRmllbGRJZGVudGlmaWVyIiwidGNGaWVsZExldmVsUmFuZ2UiLCJwYWdlTnVtYmVyc0VudHJ5TGV2ZWxzUmFuZ2UiLCJoZWFkaW5nU3R5bGVSYW5nZSIsImVudHJ5QW5kUGFnZU51bWJlclNlcGFyYXRvciIsInNlcUZpZWxkSWRlbnRpZmllckZvclByZWZpeCIsInN0eWxlc1dpdGhMZXZlbHMiLCJzbCIsInN0eWxlTmFtZSIsInVzZUFwcGxpZWRQYXJhZ3JhcGhPdXRsaW5lTGV2ZWwiLCJwcmVzZXJ2ZVRhYkluRW50cmllcyIsInByZXNlcnZlTmV3TGluZUluRW50cmllcyIsImhpZGVUYWJBbmRQYWdlTnVtYmVyc0luV2ViVmlldyIsIlN0cnVjdHVyZWREb2N1bWVudFRhZ0NvbnRlbnQiLCJTdHJ1Y3R1cmVkRG9jdW1lbnRUYWdQcm9wZXJ0aWVzIiwiRm9vdE5vdGVSZWZlcmVuY2VSdW5BdHRyaWJ1dGVzIiwiRm9vdG5vdGVSZWZlcmVuY2UiLCJEZWxldGVkUGFnZSIsIkRlbGV0ZWROdW1iZXJPZlBhZ2VzIiwiRGVsZXRlZE51bWJlck9mUGFnZXNTZWN0aW9uIiwiRGVsZXRlZFRleHQiLCJEZWxldGVkVGV4dFJ1bldyYXBwZXIiLCJDaGVja2JveFN5bWJvbEF0dHJpYnV0ZXMiLCJDaGVja0JveFN5bWJvbEVsZW1lbnQiLCJDaGVja0JveFV0aWwiLCJzeW1ib2wiLCJjaGVja2VkU3RhdGUiLCJERUZBVUxUX0NIRUNLRURfU1lNQk9MIiwiREVGQVVMVF9GT05UIiwidW5jaGVja2VkU3RhdGUiLCJERUZBVUxUX1VOQ0hFQ0tFRF9TWU1CT0wiLCJjb21tb25qc1JlcXVpcmUiLCJwYXRoIiwianN6aXBfbWluIiwidSIsImUzIiwiZW5jb2RlIiwidDIiLCJyMiIsImMyIiwiZ2V0VHlwZU9mIiwiZGVjb2RlIiwidWludDhhcnJheSIsImNvbXByZXNzZWRTaXplIiwidW5jb21wcmVzc2VkU2l6ZSIsImNyYzMyIiwiY29tcHJlc3Npb24iLCJjb21wcmVzc2VkQ29udGVudCIsImdldENvbnRlbnRXb3JrZXIiLCJ1bmNvbXByZXNzV29ya2VyIiwic3RyZWFtSW5mbyIsImRhdGFfbGVuZ3RoIiwiZ2V0Q29tcHJlc3NlZFdvcmtlciIsIndpdGhTdHJlYW1JbmZvIiwiY3JlYXRlV29ya2VyRnJvbSIsImNvbXByZXNzV29ya2VyIiwiU1RPUkUiLCJtYWdpYyIsIkRFRkxBVEUiLCJ0MyIsImJpbmFyeSIsImNyZWF0ZUZvbGRlcnMiLCJjb21wcmVzc2lvbk9wdGlvbnMiLCJ1bml4UGVybWlzc2lvbnMiLCJkb3NQZXJtaXNzaW9ucyIsImxpZSIsIl9wYWtvIiwiX3Bha29BY3Rpb24iLCJfcGFrb09wdGlvbnMiLCJtZXRhIiwicHJvY2Vzc0NodW5rIiwiX2NyZWF0ZVBha28iLCJ0cmFuc2Zvcm1UbyIsImNsZWFuVXAiLCJyYXciLCJvbkRhdGEiLCJwYWtvIiwiQSIsIk8iLCJ1dGY4ZW5jb2RlIiwiSSIsInIzIiwieiIsIkMiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJCIiwiZmlsZVJlY29yZCIsIlIyIiwiTE9DQUxfRklMRV9IRUFERVIiLCJkaXJSZWNvcmQiLCJDRU5UUkFMX0ZJTEVfSEVBREVSIiwiYnl0ZXNXcml0dGVuIiwiemlwQ29tbWVudCIsInppcFBsYXRmb3JtIiwiZW5jb2RlRmlsZU5hbWUiLCJzdHJlYW1GaWxlcyIsImFjY3VtdWxhdGUiLCJjb250ZW50QnVmZmVyIiwiZGlyUmVjb3JkcyIsImN1cnJlbnRTb3VyY2VPZmZzZXQiLCJlbnRyaWVzQ291bnQiLCJjdXJyZW50RmlsZSIsIl9zb3VyY2VzIiwib3BlbmVkU291cmNlIiwiY2xvc2VkU291cmNlIiwiREFUQV9ERVNDUklQVE9SIiwibjMiLCJDRU5UUkFMX0RJUkVDVE9SWV9FTkQiLCJwcmVwYXJlTmV4dFNvdXJjZSIsInByZXZpb3VzIiwicmVnaXN0ZXJQcmV2aW91cyIsImdlbmVyYXRlZEVycm9yIiwibG9jayIsImdlbmVyYXRlV29ya2VyIiwicGxhdGZvcm0iLCJlNCIsInQ0IiwiX2NvbXByZXNzV29ya2VyIiwiZmlsZXMiLCJjbG9uZSIsImxvYWRBc3luYyIsInN1cHBvcnQiLCJkZWZhdWx0cyIsImV4dGVybmFsIiwiZGVjb21wcmVzc2VkIiwiZXh0ZW5kIiwiY2hlY2tDUkMzMiIsIm9wdGltaXplZEJpbmFyeVN0cmluZyIsImRlY29kZUZpbGVOYW1lIiwidXRmOGRlY29kZSIsImlzTm9kZSIsImlzU3RyZWFtIiwicHJlcGFyZUNvbnRlbnQiLCJsb2FkIiwiZmlsZU5hbWVTdHIiLCJhMiIsImZpbGVDb21tZW50U3RyIiwidW5zYWZlT3JpZ2luYWxOYW1lIiwiX3Vwc3RyZWFtRW5kZWQiLCJfYmluZFN0cmVhbSIsIl9zdHJlYW0iLCJfaGVscGVyIiwibmV3QnVmZmVyRnJvbSIsImFsbG9jQnVmZmVyIiwibzIiLCJoMiIsImZvbGRlciIsInJlbW92ZSIsImdlbmVyYXRlIiwiZ2VuZXJhdGVJbnRlcm5hbFN0cmVhbSIsIm1pbWVUeXBlIiwiY2hlY2tTdXBwb3J0IiwiZ2VuZXJhdGVBc3luYyIsImdlbmVyYXRlTm9kZVN0cmVhbSIsInRvTm9kZWpzU3RyZWFtIiwiYnl0ZUF0IiwiemVybyIsImxhc3RJbmRleE9mU2lnbmF0dXJlIiwicmVhZEFuZENoZWNrU2lnbmF0dXJlIiwicmVhZERhdGEiLCJjaGVja0luZGV4Iiwic2V0SW5kZXgiLCJza2lwIiwicmVhZEludCIsInJlYWRTdHJpbmciLCJyZWFkRGF0ZSIsIlVUQyIsIlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IiLCJaSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQiLCJkZXN0VHlwZSIsInByb3BOYW1lIiwiZGF0YUlzUmVhZHkiLCJfdGlja1NjaGVkdWxlZCIsIl90aWNrQW5kUmVwZWF0IiwiZGVsYXkiLCJpc0ZpbmlzaGVkIiwiX3RpY2siLCJleHRyYVN0cmVhbUluZm8iLCJpc0xvY2tlZCIsIm1lcmdlU3RyZWFtSW5mbyIsIm5vZGVzdHJlYW0iLCJfaW50ZXJuYWxUeXBlIiwiX291dHB1dFR5cGUiLCJfbWltZVR5cGUiLCJfd29ya2VyIiwibmV3QmxvYiIsImkzIiwiczMiLCJhcnJheWJ1ZmZlciIsIm5vZGVidWZmZXIiLCJibG9iIiwiQmxvYiIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJhcHBlbmQiLCJnZXRCbG9iIiwibGVmdE92ZXIiLCJhcHBseUZyb21DaGFyQ29kZSIsIlV0ZjhEZWNvZGVXb3JrZXIiLCJVdGY4RW5jb2RlV29ya2VyIiwic3RyaW5naWZ5QnlDaHVuayIsInN0cmluZ2lmeUJ5Q2hhciIsImFwcGx5Q2FuQmVVc2VkIiwiTUFYX1ZBTFVFXzE2QklUUyIsIk1BWF9WQUxVRV8zMkJJVFMiLCJwcmV0dHkiLCJzZXRJbW1lZGlhdGUiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJzZXRpbW1lZGlhdGUiLCJsb2FkT3B0aW9ucyIsImNoZWNrU2lnbmF0dXJlIiwicmVhZGVyIiwiaXNTaWduYXR1cmUiLCJyZWFkQmxvY2tFbmRPZkNlbnRyYWwiLCJkaXNrTnVtYmVyIiwiZGlza1dpdGhDZW50cmFsRGlyU3RhcnQiLCJjZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2siLCJjZW50cmFsRGlyUmVjb3JkcyIsImNlbnRyYWxEaXJTaXplIiwiY2VudHJhbERpck9mZnNldCIsInppcENvbW1lbnRMZW5ndGgiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCIsInppcDY0RW5kT2ZDZW50cmFsU2l6ZSIsInppcDY0RXh0ZW5zaWJsZURhdGEiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IiLCJkaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0IiwicmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciIsImRpc2tzQ291bnQiLCJyZWFkTG9jYWxGaWxlcyIsImxvY2FsSGVhZGVyT2Zmc2V0IiwicmVhZExvY2FsUGFydCIsImhhbmRsZVVURjgiLCJwcm9jZXNzQXR0cmlidXRlcyIsInJlYWRDZW50cmFsRGlyIiwiemlwNjQiLCJyZWFkQ2VudHJhbFBhcnQiLCJyZWFkRW5kT2ZDZW50cmFsIiwicHJlcGFyZVJlYWRlciIsImlzRW5jcnlwdGVkIiwiYml0RmxhZyIsInVzZVVURjgiLCJmaWxlTmFtZUxlbmd0aCIsImNvbXByZXNzaW9uTWV0aG9kIiwidmVyc2lvbk1hZGVCeSIsImV4dHJhRmllbGRzTGVuZ3RoIiwiZmlsZUNvbW1lbnRMZW5ndGgiLCJkaXNrTnVtYmVyU3RhcnQiLCJpbnRlcm5hbEZpbGVBdHRyaWJ1dGVzIiwiZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyIsInJlYWRFeHRyYUZpZWxkcyIsInBhcnNlWklQNjRFeHRyYUZpZWxkIiwiZmlsZUNvbW1lbnQiLCJleHRyYUZpZWxkcyIsImZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGgiLCJmaW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50IiwiX2RhdGEiLCJfZGF0YUJpbmFyeSIsImludGVybmFsU3RyZWFtIiwiX2RlY29tcHJlc3NXb3JrZXIiLCJhc3luYyIsIm5vZGVTdHJlYW0iLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJNZXNzYWdlQ2hhbm5lbCIsImNyZWF0ZUVsZW1lbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsIm91dGNvbWUiLCJvbkZ1bGZpbGxlZCIsImNhbGxGdWxmaWxsZWQiLCJvdGhlckNhbGxGdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FsbFJlamVjdGVkIiwib3RoZXJDYWxsUmVqZWN0ZWQiLCJzdGF0dXMiLCJmaW5hbGx5IiwicmFjZSIsImltbWVkaWF0ZSIsImFzc2lnbiIsImNodW5rU2l6ZSIsIndpbmRvd0JpdHMiLCJtZW1MZXZlbCIsInN0cmF0ZWd5IiwiZ3ppcCIsImNodW5rcyIsInN0cm0iLCJhdmFpbF9vdXQiLCJkZWZsYXRlSW5pdDIiLCJkZWZsYXRlU2V0SGVhZGVyIiwiZGljdGlvbmFyeSIsInN0cmluZzJidWYiLCJkZWZsYXRlU2V0RGljdGlvbmFyeSIsIl9kaWN0X3NldCIsIm5leHRfaW4iLCJhdmFpbF9pbiIsIkJ1ZjgiLCJuZXh0X291dCIsImRlZmxhdGUiLCJvbkVuZCIsImJ1ZjJiaW5zdHJpbmciLCJzaHJpbmtCdWYiLCJkZWZsYXRlRW5kIiwiZmxhdHRlbkNodW5rcyIsIkRlZmxhdGUiLCJkZWZsYXRlUmF3IiwiaW5mbGF0ZUluaXQyIiwiWl9PSyIsImluZmxhdGVHZXRIZWFkZXIiLCJaX0ZJTklTSCIsIlpfTk9fRkxVU0giLCJiaW5zdHJpbmcyYnVmIiwiaW5mbGF0ZSIsIlpfTkVFRF9ESUNUIiwiaW5mbGF0ZVNldERpY3Rpb25hcnkiLCJaX0JVRl9FUlJPUiIsIlpfU1RSRUFNX0VORCIsIlpfU1lOQ19GTFVTSCIsInV0Zjhib3JkZXIiLCJidWYyc3RyaW5nIiwiYXJyYXlTZXQiLCJpbmZsYXRlRW5kIiwiSW5mbGF0ZSIsImluZmxhdGVSYXciLCJ1bmd6aXAiLCJzZXRUeXBlZCIsIkJ1ZjE2IiwiQnVmMzIiLCJaX1BBUlRJQUxfRkxVU0giLCJaX0ZVTExfRkxVU0giLCJaX0JMT0NLIiwiWl9UUkVFUyIsIlpfRVJSTk8iLCJaX1NUUkVBTV9FUlJPUiIsIlpfREFUQV9FUlJPUiIsIlpfTk9fQ09NUFJFU1NJT04iLCJaX0JFU1RfU1BFRUQiLCJaX0JFU1RfQ09NUFJFU1NJT04iLCJaX0RFRkFVTFRfQ09NUFJFU1NJT04iLCJaX0ZJTFRFUkVEIiwiWl9IVUZGTUFOX09OTFkiLCJaX1JMRSIsIlpfRklYRUQiLCJaX0RFRkFVTFRfU1RSQVRFR1kiLCJaX0JJTkFSWSIsIlpfVEVYVCIsIlpfVU5LTk9XTiIsIlpfREVGTEFURUQiLCJUIiwiRCIsInBlbmRpbmciLCJwZW5kaW5nX2J1ZiIsInBlbmRpbmdfb3V0IiwidG90YWxfb3V0IiwiTiIsIl90cl9mbHVzaF9ibG9jayIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJVIiwiUCIsIkwiLCJtYXhfY2hhaW5fbGVuZ3RoIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwidTIiLCJsMiIsIndfbWFzayIsImYyIiwiZDIiLCJwMiIsImdvb2RfbWF0Y2giLCJsb29rYWhlYWQiLCJtYXRjaF9zdGFydCIsIndpbmRvd19zaXplIiwiaGFzaF9zaXplIiwiYWRsZXIiLCJ0b3RhbF9pbiIsImluc2VydCIsImluc19oIiwiaGFzaF9zaGlmdCIsImhhc2hfbWFzayIsIloiLCJtYXRjaF9sZW5ndGgiLCJfdHJfdGFsbHkiLCJtYXhfbGF6eV9tYXRjaCIsImxhc3RfbGl0IiwiVyIsInByZXZfbWF0Y2giLCJtYXRjaF9hdmFpbGFibGUiLCJNIiwiZ29vZF9sZW5ndGgiLCJtYXhfbGF6eSIsIm5pY2VfbGVuZ3RoIiwibWF4X2NoYWluIiwiSCIsInBlbmRpbmdfYnVmX3NpemUiLCJnemhlYWQiLCJnemluZGV4IiwibGFzdF9mbHVzaCIsIndfYml0cyIsImhhc2hfYml0cyIsImR5bl9sdHJlZSIsImR5bl9kdHJlZSIsImJsX3RyZWUiLCJsX2Rlc2MiLCJkX2Rlc2MiLCJibF9kZXNjIiwiYmxfY291bnQiLCJoZWFwIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImxfYnVmIiwibGl0X2J1ZnNpemUiLCJkX2J1ZiIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwibWF0Y2hlcyIsImJpX2J1ZiIsImJpX3ZhbGlkIiwiRyIsImRhdGFfdHlwZSIsIl90cl9pbml0IiwiSyIsIlkiLCJkZWZsYXRlSW5pdCIsImRlZmxhdGVSZXNldCIsImRlZmxhdGVSZXNldEtlZXAiLCJoY3JjIiwiZXh0cmEiLCJvcyIsImEzIiwiX3RyX2FsaWduIiwiX3RyX3N0b3JlZF9ibG9jayIsImRlZmxhdGVJbmZvIiwieGZsYWdzIiwiZXh0cmFfbGVuIiwiZG1heCIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsImhvbGQiLCJiaXRzIiwibGVuY29kZSIsImRpc3Rjb2RlIiwibGVuYml0cyIsImRpc3RiaXRzIiwibW9kZSIsInNhbmUiLCJoYXZlZGljdCIsImNoZWNrIiwid2JpdHMiLCJuY29kZSIsIm5sZW4iLCJuZGlzdCIsImhhdmUiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQyIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVJbml0IiwiaW5mbGF0ZUluZm8iLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwiZWxlbXMiLCJtYXhfbGVuZ3RoIiwiaGFzX3N0cmVlIiwiZHluX3RyZWUiLCJtYXhfY29kZSIsInN0YXRfZGVzYyIsIm8zIiwiaDMiLCJ1MyIsIm0yIiwiWCIsIlYiLCJKIiwiaW1wb3J0U2NyaXB0cyIsImF0dGFjaEV2ZW50IiwiY2xlYXJJbW1lZGlhdGUiLCJlNSIsIkpTWmlwIiwieG1sJDIiLCJYTUxfQ0hBUkFDVEVSX01BUCIsImVzY2FwZUZvclhNTCIsImluZGVudF9jb3VudCIsImluZGVudF9zcGFjZXMiLCJfZWxlbSIsImljb3VudCIsImluZGVudHMiLCJpbnRlcnJ1cHQiLCJpc1N0cmluZ0NvbnRlbnQiLCJnZXRfYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsIl9jZGF0YSIsImVsZW0iLCJwcm9jZWVkIiwiaW50ZXJydXB0ZWQiLCJpbnN0YW50Iiwic3RhbmRhbG9uZSIsImVsZW1lbnQiLCJFbGVtZW50IiwiaW5wdXQyIiwieG1sJDEiLCJvYmZ1c2NhdGUiLCJndWlkIiwiaGV4TnVtYmVycyIsImhleFN0cmluZyIsInJldmVyc2UiLCJvYmZ1c2NhdGVkQnl0ZXMiLCJGb3JtYXR0ZXIiLCJJbWFnZVJlcGxhY2VyIiwiY3VycmVudFhtbERhdGEiLCJpbWFnZSIsImdldE1lZGlhRGF0YSIsIk51bWJlcmluZ1JlcGxhY2VyIiwiY29uY3JldGVOdW1iZXJpbmdzIiwiY29uY3JldGVOdW1iZXJpbmciLCJQcmV0dGlmeVR5cGUiLCJXSVRIXzJfQkxBTktTIiwiV0lUSF80X0JMQU5LUyIsIldJVEhfVEFCIiwiY29udmVydFByZXR0aWZ5VHlwZSIsInByZXR0aWZ5IiwiUGFja2VyIiwiemlwIiwiY29tcGlsZXIiLCJjb21waWxlIiwidG9CdWZmZXIiLCJ0b0Jhc2U2NFN0cmluZyIsInRvQmxvYiIsInRvU3RyZWFtIiwiZm9ybWF0dGVyIiwiaW1hZ2VSZXBsYWNlciIsIm51bWJlcmluZ1JlcGxhY2VyIiwicHJldHRpZnlYbWwiLCJ4bWxpZmllZEZpbGVNYXBwaW5nIiwieG1saWZ5RmlsZSIsImVudHJpZXMiLCJzdWJGaWxlIiwibmFtZVdpdGhvdXRFeHRlbnNpb24iLCJkb2N1bWVudFJlbGF0aW9uc2hpcENvdW50IiwiZG9jdW1lbnRYbWxEYXRhIiwiZG9jdW1lbnRNZWRpYURhdGFzIiwieG1sU3R5bGVzIiwiUHJvcGVydGllcyIsIkhlYWRlclJlbGF0aW9uc2hpcHMiLCJoZWFkZXJXcmFwcGVyIiwiRm9vdGVyUmVsYXRpb25zaGlwcyIsImZvb3RlcldyYXBwZXIiLCJ0ZW1wWG1sRGF0YSIsIm1lZGlhRGF0YXMiLCJGb290Tm90ZXNSZWxhdGlvbnNoaXBzIiwiRm9udFRhYmxlUmVsYXRpb25zaGlwcyIsImZvcm1hdHRlciQxIiwidG9Kc29uIiwiY3JlYXRlVGV4dEVsZW1lbnRDb250ZW50cyIsInBhdGNoU3BhY2VBdHRyaWJ1dGUiLCJnZXRGaXJzdExldmVsRWxlbWVudHMiLCJyZXBsYWNlVG9rZW5JblBhcmFncmFwaEVsZW1lbnQiLCJwYXJhZ3JhcGhFbGVtZW50IiwicmVuZGVyZWRQYXJhZ3JhcGgiLCJvcmlnaW5hbFRleHQiLCJyZXBsYWNlbWVudFRleHQiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJyZXBsYWNlTW9kZSIsInJ1bnMiLCJvZmZzZXRTdGFydEluZGV4Iiwib2Zmc2V0RW5kSW5kZXgiLCJwYXJ0VG9SZXBsYWNlIiwiZmlyc3RQYXJ0IiwicGF0Y2hUZXh0RWxlbWVudCIsImxhc3RQYXJ0IiwiY3VycmVudEVsZW1lbnQyIiwiZmluZFJ1bkVsZW1lbnRJbmRleFdpdGhUb2tlbiIsInRva2VuIiwidGV4dEVsZW1lbnQiLCJzcGxpdFJ1bkVsZW1lbnQiLCJydW5FbGVtZW50Iiwic3BsaXRJbmRleCIsInNwbGl0RWxlbWVudHMiLCJfYTIiLCJfYjIiLCJuZXdFbGVtZW50cyIsImZsYXQiLCJwYXJzZSIsInJlcGxhY2VyIiwianNvbiIsInBhdGNoIiwicGF0Y2hUZXh0IiwicmVuZGVyZWRQYXJhZ3JhcGhzIiwia2VlcE9yaWdpbmFsU3R5bGVzIiwidGV4dEpzb24iLCJQYXRjaFR5cGUiLCJET0NVTUVOVCIsImdvVG9QYXJlbnRFbGVtZW50RnJvbVBhdGgiLCJlbGVtZW50SW5kZXgiLCJnZXRMYXN0RWxlbWVudEluZGV4RnJvbVBhdGgiLCJnb1RvRWxlbWVudEZyb21QYXRoIiwicnVuRWxlbWVudFRvQmVSZXBsYWNlZCIsIm5ld1J1bkVsZW1lbnRzIiwicGF0Y2hlZFJpZ2h0RWxlbWVudCIsInJ1bkVsZW1lbnROb25UZXh0dWFsRWxlbWVudHMiLCJuZXh0RWxlbWVudHMiLCJyZW5kZXJQYXJhZ3JhcGhOb2RlIiwibm9kZSIsImN1cnJlbnRSdW5TdHJpbmdMZW5ndGgiLCJyZW5kZXJlZFJ1bk5vZGUiLCJyZW5kZXJSdW5Ob2RlIiwiY3VyciIsImJ1aWxkTm9kZVBhdGgiLCJjdXJyZW50UnVuU3RyaW5nSW5kZXgiLCJjdXJyZW50VGV4dFN0cmluZ0luZGV4IiwiZWxlbWVudHNUb1dyYXBwZXIiLCJmaW5kTG9jYXRpb25PZlRleHQiLCJxdWV1ZTIiLCJjdXJyZW50Tm9kZSIsImFwcGVuZFJlbGF0aW9uc2hpcCIsInJlbGF0aW9uc2hpcEVsZW1lbnRzIiwiSWQiLCJUYXJnZXQiLCJUYXJnZXRNb2RlIiwiYXBwZW5kQ29udGVudFR5cGUiLCJzb21lIiwiZWwiLCJDb250ZW50VHlwZSIsIkV4dGVuc2lvbiIsIkFubm90YXRpb25SZWZlcmVuY2UiLCJDYXJyaWFnZVJldHVybiIsIkNoYXJhY3RlclNldCIsIkFOU0kiLCJTWU1CT0wiLCJNQUMiLCJKSVMiLCJIQU5HVUwiLCJKT0hBQiIsIkdCXzIzMTIiLCJDSElORVNFQklHNSIsIkdSRUVLIiwiVFVSS0lTSCIsIlZJRVROQU1FU0UiLCJIRUJSRVciLCJBUkFCSUMiLCJCQUxUSUMiLCJSVVNTSUFOIiwiVEhBSSIsIkVBU1RFVVJPUEUiLCJPRU0iLCJDaGVja0JveCIsImNoZWNrZWRGb250IiwiY2hlY2tlZFRleHQiLCJ1bmNoZWNrZWRGb250IiwidW5jaGVja2VkVGV4dCIsInN5bWJvbEZvbnQiLCJpbml0aWFsUmVuZGVyZWRDaGFyIiwiQ29sdW1uIiwiQ29sdW1uQnJlYWsiLCJDb21tZW50UmFuZ2VFbmQiLCJDb21tZW50UmFuZ2VTdGFydCIsIkNvbW1lbnRSZWZlcmVuY2UiLCJDb250aW51YXRpb25TZXBhcmF0b3IiLCJEYXlMb25nIiwiRGF5U2hvcnQiLCJEZWxldGVkVGV4dFJ1biIsImRlbGV0ZWRUZXh0UnVuV3JhcHBlciIsIkRvY3VtZW50R3JpZFR5cGUiLCJMSU5FUyIsIkxJTkVTX0FORF9DSEFSUyIsIlNOQVBfVE9fQ0hBUlMiLCJEb3RFbXBoYXNpc01hcmsiLCJEcm9wQ2FwVHlwZSIsIkRST1AiLCJFbmRub3RlUmVmZXJlbmNlIiwiRm9vdGVyIiwiRm9vdG5vdGVSZWZlcmVuY2VFbGVtZW50IiwiRm9vdG5vdGVSZWZlcmVuY2VSdW4iLCJGcmFtZUFuY2hvclR5cGUiLCJGcmFtZVdyYXAiLCJBUk9VTkQiLCJOT1RfQkVTSURFIiwiVEhST1VHSCIsIkhlYWRlciIsIkhlYWRpbmdMZXZlbCIsIkhFQURJTkdfMSIsIkhFQURJTkdfMiIsIkhFQURJTkdfMyIsIkhFQURJTkdfNCIsIkhFQURJTkdfNSIsIkhFQURJTkdfNiIsIlRJVExFIiwiSGVpZ2h0UnVsZSIsIkFUTEVBU1QiLCJIb3Jpem9udGFsUG9zaXRpb25BbGlnbiIsIklOU0lERSIsIk9VVFNJREUiLCJIeXBlcmxpbmtUeXBlIiwiSU5URVJOQUwiLCJFWFRFUk5BTCIsIkltYWdlUnVuIiwibmV3RGF0YSIsImNvbnZlcnREYXRhVVJJVG9CaW5hcnkiLCJwaXhlbHMiLCJyb3VuZCIsImRyYXdpbmciLCJhbHRUZXh0IiwiZGF0YVVSSSIsImF0b2IiLCJCQVNFNjRfTUFSS0VSIiwiYmFzZTY0SW5kZXgiLCJiYXNlNjRJbmRleFdpdGhPZmZzZXQiLCJJbnNlcnRlZFRleHRSdW4iLCJJbnRlcm5hbEh5cGVybGluayIsIkxhc3RSZW5kZXJlZFBhZ2VCcmVhayIsIkxlYWRlclR5cGUiLCJIWVBIRU4iLCJNSURETEVfRE9UIiwiVU5ERVJTQ09SRSIsIkxldmVsRm9yT3ZlcnJpZGUiLCJMZXZlbFN1ZmZpeCIsIk5PVEhJTkciLCJTUEFDRSIsIlRBQiIsIkxpbmVOdW1iZXJSZXN0YXJ0Rm9ybWF0IiwiTkVXX1BBR0UiLCJORVdfU0VDVElPTiIsIkNPTlRJTlVPVVMiLCJNYXRoQW5nbGVkQnJhY2tldHMiLCJNYXRoQ3VybHlCcmFja2V0cyIsIk1hdGhGcmFjdGlvbiIsIm51bWVyYXRvciIsImRlbm9taW5hdG9yIiwiTWF0aEZ1bmN0aW9uIiwiTWF0aEludGVncmFsIiwiTWF0aFByZVN1YlN1cGVyU2NyaXB0IiwiTWF0aFJhZGljYWwiLCJkZWdyZWUiLCJNYXRoUm91bmRCcmFja2V0cyIsIk1hdGhSdW4iLCJNYXRoU3F1YXJlQnJhY2tldHMiLCJNYXRoU3ViU2NyaXB0IiwiTWF0aFN1YlN1cGVyU2NyaXB0IiwiTWF0aFN1bSIsIk1hdGhTdXBlclNjcmlwdCIsIk1vbnRoTG9uZyIsIk1vbnRoU2hvcnQiLCJOb0JyZWFrSHlwaGVuIiwiSURFT0dSQVBIX0RJR0lUQUwiLCJERUNJTUFMX0ZVTExfV0lEVEhfMiIsIkRFQ0lNQUxfRU5DTE9TRURfRlVMTF9TVE9QIiwiREVDSU1BTF9FTkNMT1NFRF9QQVJFTiIsIkNISU5FU0VfQ09VTlRJTkdfVEVOX1RIT1VTQU5EIiwiS09SRUFOX0RJR0lUQUxfMiIsIkhFQlJFV18xIiwiSEVCUkVXXzIiLCJPdmVybGFwVHlwZSIsIk5FVkVSIiwiT1ZFUkxBUCIsIlBhZ2VCb3JkZXJEaXNwbGF5IiwiQUxMX1BBR0VTIiwiRklSU1RfUEFHRSIsIk5PVF9GSVJTVF9QQUdFIiwiUGFnZUJvcmRlck9mZnNldEZyb20iLCJQYWdlQm9yZGVyWk9yZGVyIiwiQkFDSyIsIkZST05UIiwiUGFnZUJyZWFrIiwiUGFnZU51bWJlckVsZW1lbnQiLCJQYWdlTnVtYmVyU2VwYXJhdG9yIiwiUEVSSU9EIiwiQ09MT04iLCJFTV9EQVNIIiwiRU5fREFTSCIsIlBhZ2VSZWZlcmVuY2UiLCJQYWdlVGV4dERpcmVjdGlvblR5cGUiLCJMRUZUX1RPX1JJR0hUX1RPUF9UT19CT1RUT00iLCJUT1BfVE9fQk9UVE9NX1JJR0hUX1RPX0xFRlQiLCJQb3NpdGlvbmFsVGFiIiwicmVsYXRpdmVUbyIsIlBvc2l0aW9uYWxUYWJBbGlnbm1lbnQiLCJQb3NpdGlvbmFsVGFiTGVhZGVyIiwiUG9zaXRpb25hbFRhYlJlbGF0aXZlVG8iLCJJTkRFTlQiLCJSZWxhdGl2ZUhvcml6b250YWxQb3NpdGlvbiIsIlJlbGF0aXZlVmVydGljYWxQb3NpdGlvbiIsIklOTElORSIsIlNlY3Rpb25UeXBlIiwiTkVYVF9QQUdFIiwiTkVYVF9DT0xVTU4iLCJFVkVOX1BBR0UiLCJPRERfUEFHRSIsIlNlcGFyYXRvciIsIlNlcXVlbnRpYWxJZGVudGlmaWVyIiwiU2hhZGluZ1R5cGUiLCJESUFHT05BTF9DUk9TUyIsIkRJQUdPTkFMX1NUUklQRSIsIkhPUklaT05UQUxfQ1JPU1MiLCJIT1JJWk9OVEFMX1NUUklQRSIsIlBFUkNFTlRfNSIsIlBFUkNFTlRfMTAiLCJQRVJDRU5UXzEyIiwiUEVSQ0VOVF8xNSIsIlBFUkNFTlRfMjAiLCJQRVJDRU5UXzI1IiwiUEVSQ0VOVF8zMCIsIlBFUkNFTlRfMzUiLCJQRVJDRU5UXzM3IiwiUEVSQ0VOVF80MCIsIlBFUkNFTlRfNDUiLCJQRVJDRU5UXzUwIiwiUEVSQ0VOVF81NSIsIlBFUkNFTlRfNjAiLCJQRVJDRU5UXzYyIiwiUEVSQ0VOVF82NSIsIlBFUkNFTlRfNzAiLCJQRVJDRU5UXzc1IiwiUEVSQ0VOVF84MCIsIlBFUkNFTlRfODUiLCJQRVJDRU5UXzg3IiwiUEVSQ0VOVF85MCIsIlBFUkNFTlRfOTUiLCJSRVZFUlNFX0RJQUdPTkFMX1NUUklQRSIsIlNPTElEIiwiVEhJTl9ESUFHT05BTF9DUk9TUyIsIlRISU5fRElBR09OQUxfU1RSSVBFIiwiVEhJTl9IT1JJWk9OVEFMX0NST1NTIiwiVEhJTl9SRVZFUlNFX0RJQUdPTkFMX1NUUklQRSIsIlRISU5fVkVSVElDQUxfU1RSSVBFIiwiVkVSVElDQUxfU1RSSVBFIiwiU2ltcGxlTWFpbE1lcmdlRmllbGQiLCJmaWVsZE5hbWUiLCJTb2Z0SHlwaGVuIiwiU3R5bGUiLCJTdHlsZUxldmVsIiwiVGFiIiwiVGFiU3RvcFBvc2l0aW9uIiwiTUFYIiwiVGFibGUiLCJyb3dzIiwiY29sdW1uV2lkdGhzIiwicm93IiwiQ2VsbENvdW50Iiwicm93SW5kZXgiLCJjb2x1bW5JbmRleCIsImNlbGxzIiwiY2VsbCIsImNvbnRpbnVlQ2VsbCIsImFkZENlbGxUb0NvbHVtbkluZGV4IiwiVGFibGVBbmNob3JUeXBlIiwiVGFibGVMYXlvdXRUeXBlIiwiQVVUT0ZJVCIsIkZJWEVEIiwiVGFibGVPZkNvbnRlbnRzIiwiYmVnaW5QYXJhZ3JhcGgiLCJlbmRQYXJhZ3JhcGgiLCJUYWJsZVJvdyIsImFkZENlbGxUb0luZGV4Iiwicm9vdEluZGV4IiwiY29sdW1uSW5kZXhUb1Jvb3RJbmRleCIsInJvb3RJbmRleFRvQ29sdW1uSW5kZXgiLCJjb2xJZHgiLCJyb290SWR4IiwiYWxsb3dFbmROZXdDZWxsIiwiVGV4dERpcmVjdGlvbiIsIkJPVFRPTV9UT19UT1BfTEVGVF9UT19SSUdIVCIsIlRleHRFZmZlY3QiLCJCTElOS19CQUNLR1JPVU5EIiwiTElHSFRTIiwiQU5UU19CTEFDSyIsIkFOVFNfUkVEIiwiU0hJTU1FUiIsIlNQQVJLTEUiLCJWZXJ0aWNhbEFsaWduIiwiVmVydGljYWxQb3NpdGlvbkFsaWduIiwiV09SS0FST1VORDIiLCJXT1JLQVJPVU5EMyIsIldPUktBUk9VTkQ0IiwiWWVhckxvbmciLCJZZWFyU2hvcnQiLCJjb252ZXJ0TWlsbGltZXRlcnNUb1R3aXAiLCJtaWxsaW1ldGVycyIsImxvbmdIZXhOdW1iZXIiLCJwYXRjaERvY3VtZW50IiwiemlwQ29udGVudCIsImNvbnRleHRzIiwiaW1hZ2VSZWxhdGlvbnNoaXBBZGRpdGlvbnMiLCJoeXBlcmxpbmtSZWxhdGlvbnNoaXBBZGRpdGlvbnMiLCJoYXNNZWRpYSIsImJpbmFyeUNvbnRlbnRNYXAiLCJzdGFydHNXaXRoIiwiX18iLCJwYXRjaEtleSIsInBhdGNoVmFsdWUiLCJwYXRjaGVzIiwicmVsYXRpb25zaGlwS2V5IiwicmVsYXRpb25zaGlwc0pzb24iLCJnZXRJZEZyb21SZWxhdGlvbnNoaXBJZCIsIm5ld0pzb24iLCJjb250ZW50VHlwZXNKc29uIiwic2lnbmVkSHBzTWVhc3VyZVZhbHVlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImFwcCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIl0sInNvdXJjZVJvb3QiOiIifQ==